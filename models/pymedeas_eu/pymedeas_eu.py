"""
Python model "pymedeas_eu.py"
Translated using PySD version 1.2.0
"""
from os import path
import numpy as np
import xarray as xr

from pysd.py_backend.functions import (
    logical_and,
    xidz,
    zidz,
    Smooth,
    step,
    if_then_else,
    logical_or,
    sum,
    lookup,
    Integ,
    DelayFixed,
)
from pysd.py_backend.external import ExtConstant, ExtData, ExtLookup
from pysd.py_backend.utils import rearrange, xrmerge
from pysd import cache, subs, to_float

_subscript_dict = {
    "GHGs": [
        "CO2",
        "CH4",
        "N2O",
        "PFCs",
        "SF6",
        "HFC134a",
        "HFC23",
        "HFC32",
        "HFC125",
        "HFC143a",
        "HFC152a",
        "HFC227ea",
        "HFC245ca",
        "HFC4310mee",
    ],
    "primary sources1": ["coal", "oil", "natural gas", "others"],
    "primary sources": ["coal", "oil", "natural gas", "others"],
    "RCP Scenario": ["RCP26", "RCP45", "RCP60", "RCP85"],
    "HFC type": [
        "HFC134a",
        "HFC23",
        "HFC32",
        "HFC125",
        "HFC143a",
        "HFC152a",
        "HFC227ea",
        "HFC245ca",
        "HFC4310mee",
    ],
    "Layers": ["Layer1", "Layer2", "Layer3", "Layer4"],
    "upper": ["Layer1", "Layer2", "Layer3"],
    "lower": ["Layer2", "Layer3", "Layer4"],
    "water": ["blue water", "green water", "gray water"],
    "Households vehicles": [
        "liq 4wheels",
        "hib 4wheels",
        "elec 4wheels",
        "gas 4wheels",
        "liq 2wheels",
        "elec 2wheels",
    ],
    "vehicleT": [
        "HV liq",
        "HV hib",
        "HV gas",
        "LV liq",
        "LV elec",
        "LV hib",
        "LV gas",
        "bus liq",
        "bus elec",
        "bus hib",
        "bus gas",
        "train liq",
        "train elec",
    ],
    "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    "water0": ["clean pumped water", "distilled deionized water"],
    "materials": [
        "Adhesive",
        "Aluminium",
        "Aluminium mirrors",
        "Cadmium",
        "Carbon fiber",
        "Cement",
        "Chromium",
        "Copper",
        "diesel",
        "Dy",
        "Electric electronic components",
        "Evacuation lines",
        "Fiberglass",
        "Foam glass",
        "Galium",
        "Glass",
        "Glass reinforcing plastic",
        "gravel",
        "Indium",
        "Iron",
        "KNO3 mined",
        "Asphalt",
        "Lime",
        "Limestone",
        "Lithium",
        "Lubricant",
        "Magnesium",
        "Manganese",
        "Heavy equipment",
        "Concrete",
        "Molybdenum",
        "NaNO3 mined",
        "NaNO3 synthetic",
        "Neodymium",
        "Nickel",
        "Over grid 15per",
        "Over grid 5per",
        "Paint",
        "Lead",
        "Plastics",
        "Polypropylene",
        "Rock",
        "Rock wool",
        "Sand",
        "Silicon sand",
        "Silicon wafer modules",
        "Silver",
        "Site preparation",
        "Tin",
        "soda ash",
        "steel",
        "synthetic oil",
        "tellurium",
        "titanium",
        "titanium dioxide",
        "vanadium",
        "wires",
        "zinc",
    ],
    "RES heat": ["solar heat", "geot heat", "solid bioE heat"],
    "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    "sectors1": [
        "Agriculture Hunting Forestry and Fishing",
        "Mining and Quarrying",
        "Food Beverages and Tobacco",
        "Textiles and Textile Products",
        "Leather Leather and Footwear",
        "Wood and Products of Woood and Cork",
        "Pulp Paper Printing and Publishing",
        "Coke Refined Petroleum and Nuclear Fuel",
        "Chemicals and Chemical products",
        "Rubber and Plastics",
        "Other Non Metalic Mineral",
        "Basic Metals and Fabricated Metal",
        "Machinery Nec",
        "Electrical and Optical Equipment",
        "Transport Equipment",
        "Manufacturing Nec Recycling",
        "Electricity Gas and Water Supply",
        "Construction",
        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        "Hotels and Restaurants",
        "Inland Transport",
        "Water Transport",
        "Air Transport",
        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        "Post and Telecommunications",
        "Financial Intermedation",
        "Real Estate Activities",
        "Renting od MEq and Other Business Activities",
        "Public Admin and Defence Compulsory Social Security",
        "Education",
        "Health and Social Work",
        "Other Community Social and Persona Services",
        "Private Households with Employed Persons",
    ],
    "sectors": [
        "Agriculture Hunting Forestry and Fishing",
        "Mining and Quarrying",
        "Food Beverages and Tobacco",
        "Textiles and Textile Products",
        "Leather Leather and Footwear",
        "Wood and Products of Woood and Cork",
        "Pulp Paper Printing and Publishing",
        "Coke Refined Petroleum and Nuclear Fuel",
        "Chemicals and Chemical products",
        "Rubber and Plastics",
        "Other Non Metalic Mineral",
        "Basic Metals and Fabricated Metal",
        "Machinery Nec",
        "Electrical and Optical Equipment",
        "Transport Equipment",
        "Manufacturing Nec Recycling",
        "Electricity Gas and Water Supply",
        "Construction",
        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
        "Hotels and Restaurants",
        "Inland Transport",
        "Water Transport",
        "Air Transport",
        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        "Post and Telecommunications",
        "Financial Intermedation",
        "Real Estate Activities",
        "Renting od MEq and Other Business Activities",
        "Public Admin and Defence Compulsory Social Security",
        "Education",
        "Health and Social Work",
        "Other Community Social and Persona Services",
        "Private Households with Employed Persons",
    ],
    "RES elec": [
        "hydro",
        "geot elec",
        "solid bioE elec",
        "oceanic",
        "wind onshore",
        "wind offshore",
        "solar PV",
        "CSP",
    ],
}

_namespace = {
    "TIME": "time",
    "Time": "time",
    '"Historic share E industry own-use vs TFEC"': "historic_share_e_industry_ownuse_vs_tfec",
    "inertial rate energy intensity TOP DOWN": "inertial_rate_energy_intensity_top_down",
    "Year policy to improve efficiency": "year_policy_to_improve_efficiency",
    "Policy change energy speed": "policy_change_energy_speed",
    "variation energy intensity TARGET": "variation_energy_intensity_target",
    "Policy to improve efficiency speed": "policy_to_improve_efficiency_speed",
    "Year policy change energy": "year_policy_change_energy",
    "efficiency rate of substitution": "efficiency_rate_of_substitution",
    "Final energy intensity 2020": "final_energy_intensity_2020",
    "abundance coal World": "abundance_coal_world",
    '"abundance total nat. gas World"': "abundance_total_nat_gas_world",
    "abundance total nat gas": "abundance_total_nat_gas",
    "abundance total oil": "abundance_total_oil",
    "abundance coal": "abundance_coal",
    "abundance total oil World": "abundance_total_oil_world",
    "Abundance primary sources": "abundance_primary_sources",
    "Pressure to change energy technology": "pressure_to_change_energy_technology",
    '"share gas/(coal +gas) for Elec"': "share_gascoal_gas_for_elec",
    '"share gas/(coal+gas) for Elec in 2014"': "share_gascoalgas_for_elec_in_2014",
    '"perception of inter-fuel PS scarcity coal-gas"': "perception_of_interfuel_ps_scarcity_coalgas",
    '"perception of inter-fuel PS scarcity coal-oil"': "perception_of_interfuel_ps_scarcity_coaloil",
    '"perception of inter-fuel PS scarcity FF-oil"': "perception_of_interfuel_ps_scarcity_ffoil",
    '"perception of inter-fuel PS scarcity gas-coal"': "perception_of_interfuel_ps_scarcity_gascoal",
    '"perception of inter-fuel PS scarcity nat. gas-oil"': "perception_of_interfuel_ps_scarcity_nat_gasoil",
    "decrease share gas for Elec": "decrease_share_gas_for_elec",
    "decrease share oil for Elec": "decrease_share_oil_for_elec",
    '"perception of inter-fuel PS scarcity oil-nat.gas"': "perception_of_interfuel_ps_scarcity_oilnatgas",
    "max auxiliar Elec": "max_auxiliar_elec",
    "increase share oil for Elec": "increase_share_oil_for_elec",
    '"Future share gas+coal/FF for elec"': "future_share_gascoalff_for_elec",
    '"Future share gas/(coal+gas) for Elec"': "future_share_gascoalgas_for_elec",
    '"Future share oil/FF for Elec"': "future_share_oilff_for_elec",
    '"switch scarcity-PS elec substit"': "switch_scarcityps_elec_substit",
    '"perception of inter-fuel PS scarcity oil-coal"': "perception_of_interfuel_ps_scarcity_oilcoal",
    '"perception of inter-fuel PS scarcity oil-FF"': "perception_of_interfuel_ps_scarcity_oilff",
    '"share oil/FF for Elec in 2015"': "share_oilff_for_elec_in_2015",
    "increase share gas for Elec": "increase_share_gas_for_elec",
    "perception in primary sources scarcity": "perception_in_primary_sources_scarcity",
    "Households total final energy demand": "households_total_final_energy_demand",
    "reduction in perception PS scarcity": "reduction_in_perception_ps_scarcity",
    "Fuel scarcity pressure": "fuel_scarcity_pressure",
    '"perception of inter-fuel primary sources scarcity"': "perception_of_interfuel_primary_sources_scarcity",
    "scarcity primary sources": "scarcity_primary_sources",
    "increase in perception PS scarcity": "increase_in_perception_ps_scarcity",
    '"Inter-fuel scarcity pressure"': "interfuel_scarcity_pressure",
    "Fuel scarcity pressure H": "fuel_scarcity_pressure_h",
    '"Inter-fuel scarcity pressure H"': "interfuel_scarcity_pressure_h",
    "sensitivity to scarcity option": "sensitivity_to_scarcity_option",
    "perception of final energy scarcity": "perception_of_final_energy_scarcity",
    "sensitivity to energy scarcity Medium": "sensitivity_to_energy_scarcity_medium",
    "scarcity final fuels": "scarcity_final_fuels",
    "sensitivity to energy scarcity High": "sensitivity_to_energy_scarcity_high",
    "sensitivity to energy scarcity Low": "sensitivity_to_energy_scarcity_low",
    "sensitivity to scarcity option H": "sensitivity_to_scarcity_option_h",
    "sensitivity to scarcity": "sensitivity_to_scarcity",
    "sensitivity to scarcity H": "sensitivity_to_scarcity_h",
    "reduction in perception FE scarcity H": "reduction_in_perception_fe_scarcity_h",
    '"perception of inter-fuel final energy scarcities H"': "perception_of_interfuel_final_energy_scarcities_h",
    "scarcity final fuels H": "scarcity_final_fuels_h",
    "reduction in perception FE scarcity": "reduction_in_perception_fe_scarcity",
    "increase in perception FE scarcity": "increase_in_perception_fe_scarcity",
    '"perception of inter-fuel final energy scarcities"': "perception_of_interfuel_final_energy_scarcities",
    "energy scarcity forgetting time H": "energy_scarcity_forgetting_time_h",
    "increase in perception FE scarcity H": "increase_in_perception_fe_scarcity_h",
    "energy scarcity forgetting time": "energy_scarcity_forgetting_time",
    "perception of final energy scarcity H": "perception_of_final_energy_scarcity_h",
    "Year to finish energy intensity policies H": "year_to_finish_energy_intensity_policies_h",
    "minimum fraction H": "minimum_fraction_h",
    "Efficiency energy aceleration H": "efficiency_energy_aceleration_h",
    "inertial rate energy intensity H TOP DOWN": "inertial_rate_energy_intensity_h_top_down",
    "final year target H": "final_year_target_h",
    "historical mean rate energy intensity H": "historical_mean_rate_energy_intensity_h",
    "available improvement efficiency H": "available_improvement_efficiency_h",
    "aux19 0": "aux19_0",
    "Households final energy demand": "households_final_energy_demand",
    "Choose energy intensity target method": "choose_energy_intensity_target_method",
    "Decrease of intensity due to change energy technology H TOP DOWN": "decrease_of_intensity_due_to_change_energy_technology_h_top_down",
    "Implementatio policy to change final energy H": "implementatio_policy_to_change_final_energy_h",
    "Pressure to change energy technology H": "pressure_to_change_energy_technology_h",
    "Implementation policy to improve energy intensity efficiency H": "implementation_policy_to_improve_energy_intensity_efficiency_h",
    "Pressure to improve energy intensity efficiency H": "pressure_to_improve_energy_intensity_efficiency_h",
    "Variation energy intensity TARGET H": "variation_energy_intensity_target_h",
    "Final energy intensity 2020 H": "final_energy_intensity_2020_h",
    '"Activate scarcity feedback final fuel replacement?"': "activate_scarcity_feedback_final_fuel_replacement",
    "Activate transport H BOTTOM UP method": "activate_transport_h_bottom_up_method",
    "Percentage of change over the historic maximun variation of energy intensities 0": "percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0",
    "efficiency rate of substitution H by sector": "efficiency_rate_of_substitution_h_by_sector",
    '"efficiency rate of substitution H sector-uniform"': "efficiency_rate_of_substitution_h_sectoruniform",
    '"Year policy change energy H sector-uniform"': "year_policy_change_energy_h_sectoruniform",
    "Max yearly change H": "max_yearly_change_h",
    "Global energy intensity H": "global_energy_intensity_h",
    "Maximum yearly aceleration of intensity improvement pct H": "maximum_yearly_aceleration_of_intensity_improvement_pct_h",
    "share tech change fuel H": "share_tech_change_fuel_h",
    '"Year policy to improve efficiency H sector-uniform"': "year_policy_to_improve_efficiency_h_sectoruniform",
    "Increase of intensity due to change energy technology H TOP DOWN": "increase_of_intensity_due_to_change_energy_technology_h_top_down",
    "min energy intensity vs intial H": "min_energy_intensity_vs_intial_h",
    "Increase of intensity due to change energy technology net H": "increase_of_intensity_due_to_change_energy_technology_net_h",
    "historic rate final energy intensity H": "historic_rate_final_energy_intensity_h",
    "Year policy to improve efficiency H": "year_policy_to_improve_efficiency_h",
    "Energy intensity target H": "energy_intensity_target_h",
    "exp slow evolution improve efficiency H": "exp_slow_evolution_improve_efficiency_h",
    "Year policy change energy H": "year_policy_change_energy_h",
    "Year policy change energy H by sector": "year_policy_change_energy_h_by_sector",
    "Choose policies of intensities global or by sector": "choose_policies_of_intensities_global_or_by_sector",
    "year energy intensity target": "year_energy_intensity_target",
    "Initial energy intensity 1995 H": "initial_energy_intensity_1995_h",
    "Policy to improve efficiency speed H": "policy_to_improve_efficiency_speed_h",
    "Policy to improve efficiency speed H by sector": "policy_to_improve_efficiency_speed_h_by_sector",
    "Total FED households": "total_fed_households",
    "Year policy to improve efficiency H by sector": "year_policy_to_improve_efficiency_h_by_sector",
    "Total FED trasnport households": "total_fed_trasnport_households",
    "Historic final energy intensity H": "historic_final_energy_intensity_h",
    "Energy intensity of households": "energy_intensity_of_households",
    "Energy intensity of households rest": "energy_intensity_of_households_rest",
    "Increase of intensity due to change energy technology eff H": "increase_of_intensity_due_to_change_energy_technology_eff_h",
    '"Policy change energy speed H sector-uniform"': "policy_change_energy_speed_h_sectoruniform",
    '"Policy to improve efficiency speed H sector-uniform"': "policy_to_improve_efficiency_speed_h_sectoruniform",
    "exp slow evolution change energy H": "exp_slow_evolution_change_energy_h",
    "Transport households final energy demand": "transport_households_final_energy_demand",
    "pct change energy intensity target": "pct_change_energy_intensity_target",
    "Policy change energy speed H": "policy_change_energy_speed_h",
    "exp rapid evolution improve efficiency H": "exp_rapid_evolution_improve_efficiency_h",
    "Policy change energy speed H by sector": "policy_change_energy_speed_h_by_sector",
    "change total intensity to rest": "change_total_intensity_to_rest",
    "Initial global energy intensity 2009 H": "initial_global_energy_intensity_2009_h",
    "Evol final energy intensity H": "evol_final_energy_intensity_h",
    "Pressure to change energy technology by fuel H": "pressure_to_change_energy_technology_by_fuel_h",
    "exp rapid evolution change energy H": "exp_rapid_evolution_change_energy_h",
    "efficiency rate of substitution H": "efficiency_rate_of_substitution_h",
    "Year to finish policy change energy": "year_to_finish_policy_change_energy",
    "final year target": "final_year_target",
    "Maximum yearly aceleration of intensity improvement pct": "maximum_yearly_aceleration_of_intensity_improvement_pct",
    "Pressure to change energy technology 0": "pressure_to_change_energy_technology_0",
    "Pressure to change energy technology by fuel": "pressure_to_change_energy_technology_by_fuel",
    "Efficiency energy aceleration": "efficiency_energy_aceleration",
    "Pressure to improve energy intensity efficiency": "pressure_to_improve_energy_intensity_efficiency",
    "Implementatio policy to change final energy": "implementatio_policy_to_change_final_energy",
    "Implementation policy to improve energy intensity efficiency": "implementation_policy_to_improve_energy_intensity_efficiency",
    "year change pct energy intensity target": "year_change_pct_energy_intensity_target",
    "aux20 0": "aux20_0",
    "rate change intensity BOTTOM UP": "rate_change_intensity_bottom_up",
    "Policy change energy speed by sector": "policy_change_energy_speed_by_sector",
    "Policy to improve efficiency speed by sector": "policy_to_improve_efficiency_speed_by_sector",
    "Percentage of change over the historic maximun variation of energy intensities": "percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities",
    "Max yearly change 0": "max_yearly_change_0",
    "Total transport FED by fuel": "total_transport_fed_by_fuel",
    "efficiency rate of substitution by sector": "efficiency_rate_of_substitution_by_sector",
    '"efficiency rate of substitution sector-uniform"': "efficiency_rate_of_substitution_sectoruniform",
    '"Year policy change energy sector-uniform"': "year_policy_change_energy_sectoruniform",
    "min energy intensity vs intial": "min_energy_intensity_vs_intial",
    "Increase of intensity due to energy a technology net": "increase_of_intensity_due_to_energy_a_technology_net",
    "Increase of intensity due to energy a technology eff": "increase_of_intensity_due_to_energy_a_technology_eff",
    "minimum fraction 0": "minimum_fraction_0",
    "Final energy footprint by fuel": "final_energy_footprint_by_fuel",
    "modern solids BioE demand households": "modern_solids_bioe_demand_households",
    "Initial energy intensity by fuel and sector 1995": "initial_energy_intensity_by_fuel_and_sector_1995",
    "Energy intensity target by sector and fuel": "energy_intensity_target_by_sector_and_fuel",
    "historical mean rate energy intensity": "historical_mean_rate_energy_intensity",
    '"Policy to improve efficiency speed sector-uniform"': "policy_to_improve_efficiency_speed_sectoruniform",
    '"Activate scarcity feedback final fuel replacement? 0"': "activate_scarcity_feedback_final_fuel_replacement_0",
    "Initial global energy intensity by sector 2009": "initial_global_energy_intensity_by_sector_2009",
    "exp slow evol change energy": "exp_slow_evol_change_energy",
    "Historic final energy intensity by sector and fuel": "historic_final_energy_intensity_by_sector_and_fuel",
    '"Year policy to improve efficiency sector-uniform"': "year_policy_to_improve_efficiency_sectoruniform",
    "Evol final energy intensity by sector and fuel": "evol_final_energy_intensity_by_sector_and_fuel",
    "PE traditional biomass demand EJ": "pe_traditional_biomass_demand_ej",
    "historic rate final energy intensity": "historic_rate_final_energy_intensity",
    "Decrease of intensity due to energy a technology change TOP DOWN": "decrease_of_intensity_due_to_energy_a_technology_change_top_down",
    "Year to finish energy intensity policies": "year_to_finish_energy_intensity_policies",
    "exp rapid evol change energy": "exp_rapid_evol_change_energy",
    "Choose final sectoral energy intensities evolution method": "choose_final_sectoral_energy_intensities_evolution_method",
    '"Policy change energy speed sector-uniform"': "policy_change_energy_speed_sectoruniform",
    "Year policy to improve efficiency by sector": "year_policy_to_improve_efficiency_by_sector",
    "Year policy change energy by sector": "year_policy_change_energy_by_sector",
    "share tech change fuel": "share_tech_change_fuel",
    "Increase of intensity due to energy a technology change TOP DOWN": "increase_of_intensity_due_to_energy_a_technology_change_top_down",
    "exp slow evolution improve efficiency": "exp_slow_evolution_improve_efficiency",
    "Activate BOTTOM UP method": "activate_bottom_up_method",
    "Global energy intensity by sector": "global_energy_intensity_by_sector",
    "Required FED by fuel before heat correction": "required_fed_by_fuel_before_heat_correction",
    "available improvement efficiency": "available_improvement_efficiency",
    "exp rapid evolution improve efficiency": "exp_rapid_evolution_improve_efficiency",
    "Final energy intensity by sector and fuel EU": "final_energy_intensity_by_sector_and_fuel_eu",
    "adapt max share imports oil UE": "adapt_max_share_imports_oil_ue",
    "imports EU coal from RoW EJ": "imports_eu_coal_from_row_ej",
    "adapt max share import coal UE": "adapt_max_share_import_coal_ue",
    '"adapt max share imports nat. gas UE"': "adapt_max_share_imports_nat_gas_ue",
    '"imports EU nat. gas from RoW EJ"': "imports_eu_nat_gas_from_row_ej",
    "imports EU total oil from RoW EJ": "imports_eu_total_oil_from_row_ej",
    "Historic share coal domestic UE extraction": "historic_share_coal_domestic_ue_extraction",
    "Historic share coal domestic UE extraction until 2016": "historic_share_coal_domestic_ue_extraction_until_2016",
    "aux19": "aux19",
    "max share import coal UE": "max_share_import_coal_ue",
    "Historic net imports coal EU": "historic_net_imports_coal_eu",
    '"Limited coal imports from RoW?"': "limited_coal_imports_from_row",
    "PED domestic EU coal EJ": "ped_domestic_eu_coal_ej",
    '"Historic share unconv. nat. gas domestric EU extraction"': "historic_share_unconv_nat_gas_domestric_eu_extraction",
    '"Limited nat. gas. imports from RoW?"': "limited_nat_gas_imports_from_row",
    '"Historic net imports nat. gas EU"': "historic_net_imports_nat_gas_eu",
    "aux21": "aux21",
    '"Historic share conv. nat gas domestic EU extraction"': "historic_share_conv_nat_gas_domestic_eu_extraction",
    '"max share imports nat. gas. UE"': "max_share_imports_nat_gas_ue",
    '"Historic share unconv. nat. gas domestric EU extraction until 2016"': "historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016",
    '"Historic share conv. nat gas domestic EU extraction until 2016"': "historic_share_conv_nat_gas_domestic_eu_extraction_until_2016",
    '"PED domestic EU total nat.gas EJ"': "ped_domestic_eu_total_natgas_ej",
    "max share imports oil UE": "max_share_imports_oil_ue",
    '"Limited oil imports from RoW?"': "limited_oil_imports_from_row",
    "aux24": "aux24",
    '"Historic share unconv. oil domestric EU extraction until 2016"': "historic_share_unconv_oil_domestric_eu_extraction_until_2016",
    '"Historic share unconv. oil domestric EU extraction"': "historic_share_unconv_oil_domestric_eu_extraction",
    "aux23": "aux23",
    '"PED domestic EU conv. oil EJ"': "ped_domestic_eu_conv_oil_ej",
    '"Historic share conv. oil domestic EU extraction"': "historic_share_conv_oil_domestic_eu_extraction",
    '"Historic share conv. oil domestic EU extraction\\" until 2016"': "historic_share_conv_oil_domestic_eu_extraction_until_2016",
    "Historic net imports oil EU": "historic_net_imports_oil_eu",
    "PED domestic EU total oil EJ": "ped_domestic_eu_total_oil_ej",
    '"FED Heat gas+coal EJ"': "fed_heat_gascoal_ej",
    "URR tot agg oil": "urr_tot_agg_oil",
    "Desired annual GDP growth rate": "desired_annual_gdp_growth_rate",
    '"materials availability (reserves)"': "materials_availability_reserves",
    "max extraction tot agg oil EJ": "max_extraction_tot_agg_oil_ej",
    "demand Elec gas and coal TWh": "demand_elec_gas_and_coal_twh",
    '"materials availability (resources)"': "materials_availability_resources",
    '"Share pipeline transport FECg+l in 2015"': "share_pipeline_transport_fecgl_in_2015",
    "aux18 0": "aux18_0",
    '"FEC gases+liquids"': "fec_gasesliquids",
    "Total distribution losses": "total_distribution_losses",
    "Historic pipeline transport": "historic_pipeline_transport",
    "Pipeline transport": "pipeline_transport",
    "Historic share pipeline transport": "historic_share_pipeline_transport",
    "EROIst system": "eroist_system",
    "FEIst system": "feist_system",
    '"Historic energy industry own-use"': "historic_energy_industry_ownuse",
    '"Share E industry own-use vs TFEC in 2015"': "share_e_industry_ownuse_vs_tfec_in_2015",
    "aux1 1 1": "aux1_1_1",
    "Temperature change": "temperature_change",
    "max extraction uranium EJ": "max_extraction_uranium_ej",
    "tonnes per kt": "tonnes_per_kt",
    "Desired variation GDPpc": "desired_variation_gdppc",
    "smooth Desired variation GDPpc": "smooth_desired_variation_gdppc",
    "smooth Desired GDPpc": "smooth_desired_gdppc",
    "GDPpc variation asymptote scen": "gdppc_variation_asymptote_scen",
    "desired variation GDPpc per scen": "desired_variation_gdppc_per_scen",
    "pop variation": "pop_variation",
    "smooth pop": "smooth_pop",
    "smooth probe": "smooth_probe",
    "aux1 1 0": "aux1_1_0",
    "pop variation delay 5 step": "pop_variation_delay_5_step",
    "pop variation delay 6 step": "pop_variation_delay_6_step",
    "pop variation by scen": "pop_variation_by_scen",
    "P GDPpc asymptote": "p_gdppc_asymptote",
    "Target year GDPpc asymptote": "target_year_gdppc_asymptote",
    "pop variation delay 4 step": "pop_variation_delay_4_step",
    "pop variation delay 1 step": "pop_variation_delay_1_step",
    "pop variation delay 2 step": "pop_variation_delay_2_step",
    "pop variation delay 3 step": "pop_variation_delay_3_step",
    "GDPpc until P customized year GDPpc evolution": "gdppc_until_p_customized_year_gdppc_evolution",
    "T asymptote GDPpc": "t_asymptote_gdppc",
    "P pop asymptote millions": "p_pop_asymptote_millions",
    "pop asymptote": "pop_asymptote",
    "aux1 1": "aux1_1",
    "pop variation asymptote scen": "pop_variation_asymptote_scen",
    "pop until P customized year pop evolution": "pop_until_p_customized_year_pop_evolution",
    "T asymptote pop": "t_asymptote_pop",
    "Target year pop asymptote": "target_year_pop_asymptote",
    "variation exports demand": "variation_exports_demand",
    "variation GFCF": "variation_gfcf",
    "beta 0 con": "beta_0_con",
    "beta 1 cons": "beta_1_cons",
    "beta 3 cons": "beta_3_cons",
    "beta 2 cons": "beta_2_cons",
    "variation historic real long term interest rate": "variation_historic_real_long_term_interest_rate",
    "variation historic real interest rate for house purchases": "variation_historic_real_interest_rate_for_house_purchases",
    "variation real interest rate for corporations": "variation_real_interest_rate_for_corporations",
    "variation real long term interest rate": "variation_real_long_term_interest_rate",
    "historic real interest rate for corporations": "historic_real_interest_rate_for_corporations",
    "historic real interest rate for house purchases": "historic_real_interest_rate_for_house_purchases",
    "historic real long term interest rate": "historic_real_long_term_interest_rate",
    "LC": "lc",
    "LC next step": "lc_next_step",
    "LC not covered": "lc_not_covered",
    "variation historic real interest rate for corporations": "variation_historic_real_interest_rate_for_corporations",
    "real long term interest rate": "real_long_term_interest_rate",
    "beta 4 exp": "beta_4_exp",
    "variation real interest rate for house purchases": "variation_real_interest_rate_for_house_purchases",
    "real interest rate for house purchases": "real_interest_rate_for_house_purchases",
    "real interest rate for corporations next step": "real_interest_rate_for_corporations_next_step",
    "real long term interest rate next step": "real_long_term_interest_rate_next_step",
    "real interest rate for house purchases next step": "real_interest_rate_for_house_purchases_next_step",
    "variation household demand": "variation_household_demand",
    "real interest rate for corporations": "real_interest_rate_for_corporations",
    "PED2": "ped2",
    "Transformation FF losses EJ": "transformation_ff_losses_ej",
    "Other gases required": "other_gases_required",
    "Other solids required": "other_solids_required",
    "PES fossil fuel extraction": "pes_fossil_fuel_extraction",
    '"urban land density t-1"': "urban_land_density_t1",
    "urban land density variation": "urban_land_density_variation",
    "Historic urban land density": "historic_urban_land_density",
    "P variation primary forest": "p_variation_primary_forest",
    "Primary forests area": "primary_forests_area",
    "\"'Available' forest area\"": "available_forest_area",
    "\"'Available' to primary forest rate\"": "available_to_primary_forest_rate",
    "Start year P variation primary forest": "start_year_p_variation_primary_forest",
    "Mha to m2": "mha_to_m2",
    "urban land density": "urban_land_density",
    "Start year P urban land density": "start_year_p_urban_land_density",
    "forest extraction EJ": "forest_extraction_ej",
    "Natural lands": "natural_lands",
    "Deforestation rate": "deforestation_rate",
    "Target year P urban land density": "target_year_p_urban_land_density",
    "Historic av variation primary forests area": "historic_av_variation_primary_forests_area",
    "Total EU land endogenous": "total_eu_land_endogenous",
    "consum wood products EJ": "consum_wood_products_ej",
    "share imports EU NRE from RoW vs world extraction": "share_imports_eu_nre_from_row_vs_world_extraction",
    "share imports EU NRE vs TPEC": "share_imports_eu_nre_vs_tpec",
    "initial agricultural area": "initial_agricultural_area",
    "Total extraction NRE EJ": "total_extraction_nre_ej",
    "Total extraction NRE EJ World": "total_extraction_nre_ej_world",
    '"ratio Power Plants, Energy Conversion, Extraction, and Distribution vs total CH4 emissions"': "ratio_power_plants_energy_conversion_extraction_and_distribution_vs_total_ch4_emissions",
    '"1 to M"': "nvs_1_to_m",
    "EU forest energy imports from RoW": "eu_forest_energy_imports_from_row",
    "Growing stock forest per Ha": "growing_stock_forest_per_ha",
    "forest stock ratio": "forest_stock_ratio",
    "Forest loss to sustain agriculture": "forest_loss_to_sustain_agriculture",
    "forest consumption EJ": "forest_consumption_ej",
    "consum forest energy non traditional EJ": "consum_forest_energy_non_traditional_ej",
    "urban land rate": "urban_land_rate",
    "Total land occupied by RES": "total_land_occupied_by_res",
    "consum forest energy traditional EJ": "consum_forest_energy_traditional_ej",
    "Total imports EU NRE from Row": "total_imports_eu_nre_from_row",
    "CH4 anthro emissions": "ch4_anthro_emissions",
    '"PE supply RES non-Elec EJ"': "pe_supply_res_nonelec_ej",
    "PED coal EJ": "ped_coal_ej",
    "real FE consumption solids EJ": "real_fe_consumption_solids_ej",
    "PES solids": "pes_solids",
    "TFEC RES EJ": "tfec_res_ej",
    "variation energy intensity of households transport": "variation_energy_intensity_of_households_transport",
    "Liq 2w": "liq_2w",
    "aux reach zero": "aux_reach_zero",
    "extraction conv oil EJ": "extraction_conv_oil_ej",
    "extraction tot agg gas EJ": "extraction_tot_agg_gas_ej",
    "extraction tot agg oil EJ": "extraction_tot_agg_oil_ej",
    "Historic share net imports oil until 2016": "historic_share_net_imports_oil_until_2016",
    "aux25": "aux25",
    "extraction conv gas EJ": "extraction_conv_gas_ej",
    '"PED domestic EU conv. nat. gas EJ"': "ped_domestic_eu_conv_nat_gas_ej",
    '"Historic share net imports nat. gas until 2016"': "historic_share_net_imports_nat_gas_until_2016",
    "aux22": "aux22",
    "aux20": "aux20",
    "Desired variation GDP": "desired_variation_gdp",
    "variation pop2": "variation_pop2",
    "Desired annual total demand growth rate delayed 1 yr": "desired_annual_total_demand_growth_rate_delayed_1_yr",
    "diff demand EU": "diff_demand_eu",
    "variation historic gdppc 2": "variation_historic_gdppc_2",
    "Desire GDP next step": "desire_gdp_next_step",
    "T hist inlandT": "t_hist_inlandt",
    "percent T veh Tini": "percent_t_veh_tini",
    "percent T vehicles": "percent_t_vehicles",
    "aux hist Tveh": "aux_hist_tveh",
    "aux P inland transp": "aux_p_inland_transp",
    "var I inlandT Gas": "var_i_inlandt_gas",
    "var I inlandT liq": "var_i_inlandt_liq",
    "ratio var T vehicles": "ratio_var_t_vehicles",
    "aaux Tveh ini": "aaux_tveh_ini",
    "var I inland Elec": "var_i_inland_elec",
    "aaux Tveh t": "aaux_tveh_t",
    "percent Tveh 1995": "percent_tveh_1995",
    "hist var percent Tveh": "hist_var_percent_tveh",
    "aaux Tveh": "aaux_tveh",
    "new cellulosic biofuels": "new_cellulosic_biofuels",
    "new land marg for biofuels": "new_land_marg_for_biofuels",
    "new biofuels land marg": "new_biofuels_land_marg",
    "max potential CSP TWe": "max_potential_csp_twe",
    "new biofuels 2gen land compet": "new_biofuels_2gen_land_compet",
    "max potential solar PV TWe": "max_potential_solar_pv_twe",
    "Land availability constraint": "land_availability_constraint",
    "Marginal land for biofuels rate": "marginal_land_for_biofuels_rate",
    "\"'Available land'\"": "available_land",
    "max CSP on land MHa": "max_csp_on_land_mha",
    "compet land for biofuels rate": "compet_land_for_biofuels_rate",
    '"new BioE residues for non-biofuels"': "new_bioe_residues_for_nonbiofuels",
    "max solar PV on land MHa": "max_solar_pv_on_land_mha",
    "max solar on land Mha": "max_solar_on_land_mha",
    '"permanent snows&glaciers area"': "permanent_snowsglaciers_area",
    '"initial permanent snows&glaciers area"': "initial_permanent_snowsglaciers_area",
    '"Warning biodiversity loss <12%"': "warning_biodiversity_loss_12",
    "Total EU land": "total_eu_land",
    "Land for RES elec rate": "land_for_res_elec_rate",
    "aux reach available land": "aux_reach_available_land",
    "increase agricultural land": "increase_agricultural_land",
    "Total land requirements renew Mha": "total_land_requirements_renew_mha",
    '"Land requirements RES elec compet uses t-1"': "land_requirements_res_elec_compet_uses_t1",
    "initial 'available land'": "initial_available_land",
    "Land for solar and hydro RES": "land_for_solar_and_hydro_res",
    "aux16": "aux16",
    "agricultural land until 2015": "agricultural_land_until_2015",
    "P urban land density": "p_urban_land_density",
    "Historic urban land": "historic_urban_land",
    "hist variation urban land": "hist_variation_urban_land",
    "percent H vehicles initial": "percent_h_vehicles_initial",
    "var percents H vehicles": "var_percents_h_vehicles",
    "H gas initial growth": "h_gas_initial_growth",
    "H 2w liq initial growth": "h_2w_liq_initial_growth",
    "H hyb initial growth": "h_hyb_initial_growth",
    "H 2w elec initial growth": "h_2w_elec_initial_growth",
    "H 2w liq adapt growth": "h_2w_liq_adapt_growth",
    "aaux Hveh t": "aaux_hveh_t",
    "A2 coef tH": "a2_coef_th",
    "H elec initial growth": "h_elec_initial_growth",
    "aaux Hveh ini": "aaux_hveh_ini",
    "aaux Hveh": "aaux_hveh",
    "hist var percent H": "hist_var_percent_h",
    "percent H vehicles Tini": "percent_h_vehicles_tini",
    "P labour share": "p_labour_share",
    "Initial Labour share": "initial_labour_share",
    "GFCF not covered": "gfcf_not_covered",
    "CC total not covered": "cc_total_not_covered",
    "Historic labour share growth": "historic_labour_share_growth",
    "real exchange next step": "real_exchange_next_step",
    '"share Exp vs GFCF+HD+Exp"': "share_exp_vs_gfcfhdexp",
    "beta 1 gfcf": "beta_1_gfcf",
    "beta 1 exp": "beta_1_exp",
    "variation real exchange": "variation_real_exchange",
    "beta 2 gfcf": "beta_2_gfcf",
    "Total GFCF": "total_gfcf",
    "beta 2 hh": "beta_2_hh",
    "beta 3 gfcf": "beta_3_gfcf",
    "beta 3 exp": "beta_3_exp",
    "Initial capital share": "initial_capital_share",
    "initial CC total": "initial_cc_total",
    "Annual GDPpc growth rate": "annual_gdppc_growth_rate",
    "Number vehicles H": "number_vehicles_h",
    "Total government expenditure": "total_government_expenditure",
    "Sectoral Government expenditures": "sectoral_government_expenditures",
    "Initial water intensity for households": "initial_water_intensity_for_households",
    "historic real exchange": "historic_real_exchange",
    "select GDPpc evolution input": "select_gdppc_evolution_input",
    "Gross fixed capital formation": "gross_fixed_capital_formation",
    "growth capital share": "growth_capital_share",
    "growth labour share": "growth_labour_share",
    "Water use by households": "water_use_by_households",
    "Initial exports demand": "initial_exports_demand",
    "Total exports": "total_exports",
    "capital share": "capital_share",
    "initial GFCF": "initial_gfcf",
    "Historic exports demand": "historic_exports_demand",
    "variation historic GFCF": "variation_historic_gfcf",
    "real demand world next step": "real_demand_world_next_step",
    "Real Exports demand by sector": "real_exports_demand_by_sector",
    "Historic GDPpc": "historic_gdppc",
    "increase Households energy final demand for Transp": "increase_households_energy_final_demand_for_transp",
    "variation labour share": "variation_labour_share",
    "initial LC total": "initial_lc_total",
    "Bet 0 hh": "bet_0_hh",
    "beta 0 gfcf": "beta_0_gfcf",
    "beta 0 exp": "beta_0_exp",
    "Historic HD": "historic_hd",
    "Year final capial share": "year_final_capial_share",
    "Beta 1 hh": "beta_1_hh",
    '"share GFCF vs GFCF+HD+Exp"': "share_gfcf_vs_gfcfhdexp",
    "beta 2 exp": "beta_2_exp",
    '"Labor/Capital share cte?"': "laborcapital_share_cte",
    "P capital share": "p_capital_share",
    "demand not covered by sector FD EU": "demand_not_covered_by_sector_fd_eu",
    "Historic capital share growth": "historic_capital_share_growth",
    "variation capital share": "variation_capital_share",
    "variation CC": "variation_cc",
    "P timeseries GDPpc growth rate": "p_timeseries_gdppc_growth_rate",
    "P customized cte GDPpc variation": "p_customized_cte_gdppc_variation",
    "variation demand flow FD EU": "variation_demand_flow_fd_eu",
    "Desired GDP": "desired_gdp",
    "Desired GDP delayed 1yr": "desired_gdp_delayed_1yr",
    "Real Household demand by sector": "real_household_demand_by_sector",
    "Sectoral changes in inventories": "sectoral_changes_in_inventories",
    "Desired GDPpc": "desired_gdppc",
    "diff annual GDP growth rate": "diff_annual_gdp_growth_rate",
    "variation historic demand": "variation_historic_demand",
    "capital share growth": "capital_share_growth",
    "variation historic real exchange": "variation_historic_real_exchange",
    "initial household demand": "initial_household_demand",
    "GDPpc initial year": "gdppc_initial_year",
    "CC next step": "cc_next_step",
    "CC total delayed": "cc_total_delayed",
    "real exchange": "real_exchange",
    "Historic GFCF": "historic_gfcf",
    "Historic water by type intensities for households": "historic_water_by_type_intensities_for_households",
    "Exports demand not covered": "exports_demand_not_covered",
    "Year Final Labour share": "year_final_labour_share",
    "Household demand not covered": "household_demand_not_covered",
    "HH demand pc": "hh_demand_pc",
    "Exports demand": "exports_demand",
    "P customized year GDPpc evolution": "p_customized_year_gdppc_evolution",
    "variation historic GDPpc": "variation_historic_gdppc",
    "Household demand": "household_demand",
    "beta 3 hh": "beta_3_hh",
    "Year initial capital share": "year_initial_capital_share",
    "CC total": "cc_total",
    "Labour share growth": "labour_share_growth",
    "Year Initial Labour share": "year_initial_labour_share",
    "variation LC": "variation_lc",
    "Desired annual total demand growth rate": "desired_annual_total_demand_growth_rate",
    "labour share": "labour_share",
    "Household demand total": "household_demand_total",
    "variation historic exports demand": "variation_historic_exports_demand",
    "GDPpc annual growth SSP2": "gdppc_annual_growth_ssp2",
    "initial planted forests": "initial_planted_forests",
    "initial 'available' forest area": "initial_available_forest_area",
    "initial urban land": "initial_urban_land",
    "Historic primary forest": "historic_primary_forest",
    "initial other naturally regen forest": "initial_other_naturally_regen_forest",
    "initial primary forest area": "initial_primary_forest_area",
    "hist variation primary forest": "hist_variation_primary_forest",
    "Urban land": "urban_land",
    "Land requirements RES elec compet uses": "land_requirements_res_elec_compet_uses",
    "Historic conv oil domestic EU extracted EJ": "historic_conv_oil_domestic_eu_extracted_ej",
    '"Historic unconv nat. gas domestic EU extracted EJ"': "historic_unconv_nat_gas_domestic_eu_extracted_ej",
    "Historic unconv oil domestic EU extracted EJ": "historic_unconv_oil_domestic_eu_extracted_ej",
    "Historic uranium domestic EU extracted t": "historic_uranium_domestic_eu_extracted_t",
    "PEC uranium EU EJ": "pec_uranium_eu_ej",
    "PEC uranium EU kt": "pec_uranium_eu_kt",
    '"Historic conv nat. gas domestic EU extracted EJ"': "historic_conv_nat_gas_domestic_eu_extracted_ej",
    "imports EU conv oil from RoW EJ": "imports_eu_conv_oil_from_row_ej",
    "PEC conv oil": "pec_conv_oil",
    "CO2 emissions conv gas without GTL": "co2_emissions_conv_gas_without_gtl",
    "CO2 emissions conv oil": "co2_emissions_conv_oil",
    "imports EU unconv oil from RoW EJ": "imports_eu_unconv_oil_from_row_ej",
    "CO2 emissions coal without CTL": "co2_emissions_coal_without_ctl",
    "real consumption unconv oil emissions relevant EJ": "real_consumption_unconv_oil_emissions_relevant_ej",
    "CH4 emissions CTL": "ch4_emissions_ctl",
    "CO2 emissions CTL": "co2_emissions_ctl",
    "real consumption unconv gas emissions relevant EJ": "real_consumption_unconv_gas_emissions_relevant_ej",
    "consumption UE coal emissions relevant EJ": "consumption_ue_coal_emissions_relevant_ej",
    "PEC conv gas": "pec_conv_gas",
    "share imports EU uranium from RoW vs extraction World": "share_imports_eu_uranium_from_row_vs_extraction_world",
    "CO2 emissions unconv oil": "co2_emissions_unconv_oil",
    "real consumption UE conv oil emissions relevant EJ": "real_consumption_ue_conv_oil_emissions_relevant_ej",
    "PEC unconv gas": "pec_unconv_gas",
    "PEC unconv oil": "pec_unconv_oil",
    "CH4 emissions oil": "ch4_emissions_oil",
    "real consumption UE conv gas emissions relevant EJ": "real_consumption_ue_conv_gas_emissions_relevant_ej",
    "CH4 emissions conv gas without GTL": "ch4_emissions_conv_gas_without_gtl",
    "CH4 emissions coal without CTL": "ch4_emissions_coal_without_ctl",
    "share imports EU tot oil from RoW vs extraction World": "share_imports_eu_tot_oil_from_row_vs_extraction_world",
    '"power density solar PV in urban TWe/Mha"': "power_density_solar_pv_in_urban_twemha",
    '"power density solar PV on land TWe/Mha"': "power_density_solar_pv_on_land_twemha",
    '"power density solar thermal in urban TWe/Mha"': "power_density_solar_thermal_in_urban_twemha",
    '"share imports EU nat. gas from RoW vs extraction World"': "share_imports_eu_nat_gas_from_row_vs_extraction_world",
    "av past EU domestic uranium extraction": "av_past_eu_domestic_uranium_extraction",
    "Choose GWP time frame": "choose_gwp_time_frame",
    "GWP 20 year": "gwp_20_year",
    "GWP 100 year": "gwp_100_year",
    "Total CO2e": "total_co2e",
    "Total CO2e Ce": "total_co2e_ce",
    '"1 to G"': "nvs_1_to_g",
    "Annual GDP growth rate": "annual_gdp_growth_rate",
    "Annual GDP growth rate World": "annual_gdp_growth_rate_world",
    "Real final energy by sector and fuel RoW": "real_final_energy_by_sector_and_fuel_row",
    "Real final energy by sector and fuel World": "real_final_energy_by_sector_and_fuel_world",
    "Real demand World": "real_demand_world",
    '"PEC nat. gas"': "pec_nat_gas",
    "PES Liquids EJ": "pes_liquids_ej",
    "PES gases": "pes_gases",
    '"PED EU nat. gas from RoW"': "ped_eu_nat_gas_from_row",
    "PEC total oil": "pec_total_oil",
    "Historic share net imports coal EU until 2016": "historic_share_net_imports_coal_eu_until_2016",
    "Historic coal domestic EU extracted EJ 2": "historic_coal_domestic_eu_extracted_ej_2",
    "PEC coal": "pec_coal",
    "aux18": "aux18",
    "share imports EU coal from RoW vs extraction World": "share_imports_eu_coal_from_row_vs_extraction_world",
    "extraction coal EJ EU": "extraction_coal_ej_eu",
    "extraction coal EJ RoW": "extraction_coal_ej_row",
    "current mineral resources Mt World": "current_mineral_resources_mt_world",
    "Historic coal domestic EU extracted EJ": "historic_coal_domestic_eu_extracted_ej",
    "share cum materials to extract alt techn EU vs resources World": "share_cum_materials_to_extract_alt_techn_eu_vs_resources_world",
    "current mineral reserves Mt World": "current_mineral_reserves_mt_world",
    "share cum materials to extract alt techn EU vs reserves World": "share_cum_materials_to_extract_alt_techn_eu_vs_reserves_world",
    "current mineral reserves Mt": "current_mineral_reserves_mt",
    "current mineral resources Mt": "current_mineral_resources_mt",
    "share annual demand alt techn vs current EU extraction": "share_annual_demand_alt_techn_vs_current_eu_extraction",
    '"Total materials to extract alt techn Mt/yr"': "total_materials_to_extract_alt_techn_mtyr",
    '"current annual extraction materials Mt/yr"': "current_annual_extraction_materials_mtyr",
    "Energy embedded in EU exports by sector and fuel": "energy_embedded_in_eu_exports_by_sector_and_fuel",
    "Total energy embedded in EU28 imports": "total_energy_embedded_in_eu28_imports",
    "Coverage energy rate": "coverage_energy_rate",
    "Total energy embedded in EU28 exports": "total_energy_embedded_in_eu28_exports",
    "Total final energy footprint": "total_final_energy_footprint",
    "max FE solar thermal urban TWth": "max_fe_solar_thermal_urban_twth",
    "share available roof for solar thermal": "share_available_roof_for_solar_thermal",
    "Efficiency RES heat": "efficiency_res_heat",
    "Max PE RES for heat": "max_pe_res_for_heat",
    "Max FE RES for heat": "max_fe_res_for_heat",
    "Final energy intensity by sector and fuel RoW": "final_energy_intensity_by_sector_and_fuel_row",
    "Energy embedded in EU imports by sector and fuel": "energy_embedded_in_eu_imports_by_sector_and_fuel",
    "Real final energy by sector and fuel": "real_final_energy_by_sector_and_fuel",
    "Leontief Matrix EU Imports 2009": "leontief_matrix_eu_imports_2009",
    "Leontief Matrix EU Imports 2001": "leontief_matrix_eu_imports_2001",
    "Total domestic output required for exports by sector": "total_domestic_output_required_for_exports_by_sector",
    "RoW output required for EU28 imports by sector": "row_output_required_for_eu28_imports_by_sector",
    "Leontief Matrix EU Imports 1996": "leontief_matrix_eu_imports_1996",
    "Leontief Matrix EU Imports 1997": "leontief_matrix_eu_imports_1997",
    "Leontief Matrix EU Imports 1998": "leontief_matrix_eu_imports_1998",
    "Leontief Matrix EU Imports 1999": "leontief_matrix_eu_imports_1999",
    "Leontief Matrix EU Imports 2000": "leontief_matrix_eu_imports_2000",
    "Leontief Matrix EU Imports 2005": "leontief_matrix_eu_imports_2005",
    "Leontief Matrix EU Imports 2002": "leontief_matrix_eu_imports_2002",
    "Leontief Matrix EU Imports 2003": "leontief_matrix_eu_imports_2003",
    "Leontief Matrix EU Imports 2004": "leontief_matrix_eu_imports_2004",
    "Leontief Matrix EU Imports 1995": "leontief_matrix_eu_imports_1995",
    "Leontief Matrix EU Imports 2006": "leontief_matrix_eu_imports_2006",
    "Leontief Matrix EU Imports 2007": "leontief_matrix_eu_imports_2007",
    "Leontief Matrix EU Imports 2008": "leontief_matrix_eu_imports_2008",
    "Leontief Matrix EU Imports": "leontief_matrix_eu_imports",
    "Energy scarcity feedback shortage coeff EU": "energy_scarcity_feedback_shortage_coeff_eu",
    "A Matrix EU Exports 2000": "a_matrix_eu_exports_2000",
    "A Matrix EU Exports 2002": "a_matrix_eu_exports_2002",
    "A Matrix EU Exports 2003": "a_matrix_eu_exports_2003",
    "A Matrix EU Exports 2004": "a_matrix_eu_exports_2004",
    "A Matrix EU Exports 2005": "a_matrix_eu_exports_2005",
    "A Matrix EU Exports 2006": "a_matrix_eu_exports_2006",
    "A Matrix EU Exports 2007": "a_matrix_eu_exports_2007",
    "GDP EU": "gdp_eu",
    "GDP by sector": "gdp_by_sector",
    "A Matrix EU Imports": "a_matrix_eu_imports",
    "A Matrix EU Imports 1995": "a_matrix_eu_imports_1995",
    "A Matrix EU Imports 1996": "a_matrix_eu_imports_1996",
    "A Matrix EU Imports 1997": "a_matrix_eu_imports_1997",
    "A Matrix EU Imports 1998": "a_matrix_eu_imports_1998",
    "A Matrix EU Imports 1999": "a_matrix_eu_imports_1999",
    "A Matrix EU Imports 2000": "a_matrix_eu_imports_2000",
    "A Matrix EU Imports 2001": "a_matrix_eu_imports_2001",
    "A Matrix EU Imports 2002": "a_matrix_eu_imports_2002",
    "A Matrix EU Imports 2003": "a_matrix_eu_imports_2003",
    "A Matrix EU Imports 2004": "a_matrix_eu_imports_2004",
    "A Matrix EU Imports 2005": "a_matrix_eu_imports_2005",
    "A Matrix EU Imports 2006": "a_matrix_eu_imports_2006",
    "A Matrix EU Imports 2007": "a_matrix_eu_imports_2007",
    "A Matrix EU Imports 2008": "a_matrix_eu_imports_2008",
    "IC exports EU": "ic_exports_eu",
    "IC exports EU matrix": "ic_exports_eu_matrix",
    "IC imports EU": "ic_imports_eu",
    "IC imports EU matrix": "ic_imports_eu_matrix",
    "Real demand Tdollars": "real_demand_tdollars",
    "A Matrix EU Exports": "a_matrix_eu_exports",
    "A Matrix EU Exports 1995": "a_matrix_eu_exports_1995",
    "A Matrix EU Exports 1996": "a_matrix_eu_exports_1996",
    "A Matrix EU Exports 1997": "a_matrix_eu_exports_1997",
    "A Matrix EU Exports 1998": "a_matrix_eu_exports_1998",
    "A Matrix EU Exports 1999": "a_matrix_eu_exports_1999",
    "A Matrix EU Exports 2001": "a_matrix_eu_exports_2001",
    "A Matrix EU Exports 2009": "a_matrix_eu_exports_2009",
    "Real demand delayed 1yr": "real_demand_delayed_1yr",
    "A Matrix EU Imports 2009": "a_matrix_eu_imports_2009",
    "A Matrix EU Exports 2008": "a_matrix_eu_exports_2008",
    "IA Matrix EU Exports 2005": "ia_matrix_eu_exports_2005",
    "IA Matrix EU Exports 2006": "ia_matrix_eu_exports_2006",
    "IA Matrix EU Exports 2007": "ia_matrix_eu_exports_2007",
    "IA Matrix EU Exports 2008": "ia_matrix_eu_exports_2008",
    "IA Matrix EU Exports 2009": "ia_matrix_eu_exports_2009",
    "Real total output by sector RoW": "real_total_output_by_sector_row",
    "Real final demand by sector EU": "real_final_demand_by_sector_eu",
    "IA Matrix EU Exports 1999": "ia_matrix_eu_exports_1999",
    "IA Matrix EU Exports 2000": "ia_matrix_eu_exports_2000",
    "Real Final Demand of exports": "real_final_demand_of_exports",
    "IA Matrix EU Exports": "ia_matrix_eu_exports",
    "IA Matrix EU Exports 1995": "ia_matrix_eu_exports_1995",
    "Real demand": "real_demand",
    "IA Matrix EU Exports 1996": "ia_matrix_eu_exports_1996",
    "IA Matrix EU Exports 1997": "ia_matrix_eu_exports_1997",
    "IA Matrix EU Exports 1998": "ia_matrix_eu_exports_1998",
    "IA Matrix EU Exports 2004": "ia_matrix_eu_exports_2004",
    "IA Matrix EU Exports 2003": "ia_matrix_eu_exports_2003",
    "IA Matrix EU Exports 2002": "ia_matrix_eu_exports_2002",
    "IA Matrix EU Exports 2001": "ia_matrix_eu_exports_2001",
    "Total output required by sector": "total_output_required_by_sector",
    "Real total output by sector": "real_total_output_by_sector",
    "Real total output by sector World": "real_total_output_by_sector_world",
    "Real demand by sector RoW": "real_demand_by_sector_row",
    "Real demand by sector": "real_demand_by_sector",
    "Real demand by sector World": "real_demand_by_sector_world",
    "Demand by sector RoW": "demand_by_sector_row",
    '"extraction nat. gas EJ World"': "extraction_nat_gas_ej_world",
    "extraction coal EJ World": "extraction_coal_ej_world",
    "extraction uranium RoW": "extraction_uranium_row",
    "imports EU unconv gas from RoW EJ": "imports_eu_unconv_gas_from_row_ej",
    "extraction uranium EJ World": "extraction_uranium_ej_world",
    "Extraction oil EJ World": "extraction_oil_ej_world",
    "share conv vs total gas extraction World": "share_conv_vs_total_gas_extraction_world",
    "imports EU conv gas from RoW EJ": "imports_eu_conv_gas_from_row_ej",
    "share conv vs total oil extraction World": "share_conv_vs_total_oil_extraction_world",
    '"FED Heat-nc EJ"': "fed_heatnc_ej",
    "share conv vs total oil extraction": "share_conv_vs_total_oil_extraction",
    "Leontief Matrix EU Exports 1995": "leontief_matrix_eu_exports_1995",
    "Leontief Matrix EU Exports 1996": "leontief_matrix_eu_exports_1996",
    "Leontief Matrix EU Exports 1997": "leontief_matrix_eu_exports_1997",
    "Leontief Matrix EU Exports 1998": "leontief_matrix_eu_exports_1998",
    "Leontief Matrix EU Exports 1999": "leontief_matrix_eu_exports_1999",
    "Leontief Matrix EU Exports 2000": "leontief_matrix_eu_exports_2000",
    "Leontief Matrix EU Exports 2002": "leontief_matrix_eu_exports_2002",
    "Domestic output required for exports by sector": "domestic_output_required_for_exports_by_sector",
    "Required total output": "required_total_output",
    "Leontief Matrix EU Exports 2005": "leontief_matrix_eu_exports_2005",
    "Leontief Matrix EU Exports 2006": "leontief_matrix_eu_exports_2006",
    "Leontief Matrix EU Exports 2007": "leontief_matrix_eu_exports_2007",
    "Leontief Matrix EU Exports 2008": "leontief_matrix_eu_exports_2008",
    "Leontief Matrix EU Exports 2009": "leontief_matrix_eu_exports_2009",
    "Leontief Matrix EU Exports 2004": "leontief_matrix_eu_exports_2004",
    "Leontief Matrix EU Exports 2001": "leontief_matrix_eu_exports_2001",
    "Leontief Matrix EU Exports 2003": "leontief_matrix_eu_exports_2003",
    "Leontief matrix EU Exports": "leontief_matrix_eu_exports",
    "Historic demand by sector RoW": "historic_demand_by_sector_row",
    "Land saved by urban PV": "land_saved_by_urban_pv",
    "remaining potential solar PV urban": "remaining_potential_solar_pv_urban",
    "surface RES elec": "surface_res_elec",
    "share land RES land compet vs arable": "share_land_res_land_compet_vs_arable",
    "surface hydro Mha": "surface_hydro_mha",
    "surface onshore wind Mha": "surface_onshore_wind_mha",
    "surface solar PV on land Mha": "surface_solar_pv_on_land_mha",
    "surface CSP Mha": "surface_csp_mha",
    "Land compet biofuels 3gen abandonned": "land_compet_biofuels_3gen_abandonned",
    "Land compet biofuels 3gen Mha": "land_compet_biofuels_3gen_mha",
    "Potential PEavail biofuels land marg abandonned": "potential_peavail_biofuels_land_marg_abandonned",
    "Potential PE cellulosic biofuel abanndoned": "potential_pe_cellulosic_biofuel_abanndoned",
    "Potential PE cellulosic biofuel EJ": "potential_pe_cellulosic_biofuel_ej",
    "Land compet biofuels 2gen abandonned": "land_compet_biofuels_2gen_abandonned",
    "Land compet biofuels 2gen Mha": "land_compet_biofuels_2gen_mha",
    "Potential PEavail biofuels land marg EJ": "potential_peavail_biofuels_land_marg_ej",
    "PES RES for heat by techn": "pes_res_for_heat_by_techn",
    '"PES DEM RES for heat-nc by techn"': "pes_dem_res_for_heatnc_by_techn",
    '"PES DEM RES for heat-com by techn"': "pes_dem_res_for_heatcom_by_techn",
    "P share installed PV urban vs tot PV": "p_share_installed_pv_urban_vs_tot_pv",
    "Potential elec gen from solar PV on land TWh": "potential_elec_gen_from_solar_pv_on_land_twh",
    "Potential elec gen from solar PV urban TWh": "potential_elec_gen_from_solar_pv_urban_twh",
    "Potential elec gen from solar PV urban unconstrained TWh": "potential_elec_gen_from_solar_pv_urban_unconstrained_twh",
    "share solar PV vs tot solar gen": "share_solar_pv_vs_tot_solar_gen",
    "real share PV urban vs total PV": "real_share_pv_urban_vs_total_pv",
    "FE Elec gen from solar PV on land TWh": "fe_elec_gen_from_solar_pv_on_land_twh",
    "historic share installed PV urban vs tot PV": "historic_share_installed_pv_urban_vs_tot_pv",
    "desired share installed PV urban vs tot PV": "desired_share_installed_pv_urban_vs_tot_pv",
    "aux1 0": "aux1_0",
    "max RES elec TWe": "max_res_elec_twe",
    "max tot solar PV TWe": "max_tot_solar_pv_twe",
    "power density CSP": "power_density_csp",
    "max solar PV on land TWe": "max_solar_pv_on_land_twe",
    "f1 PV solar in target year": "f1_pv_solar_in_target_year",
    '"power density initial RES elec TWe/Mha"': "power_density_initial_res_elec_twemha",
    "f2 PF solar PV": "f2_pf_solar_pv",
    '"power density RES elec TWe/Mha"': "power_density_res_elec_twemha",
    "f3 solar PV on land": "f3_solar_pv_on_land",
    "av solar I": "av_solar_i",
    '"TWh/Mha per We/m2"': "twhmha_per_wem2",
    "f1 solar PV": "f1_solar_pv",
    "share available roof": "share_available_roof",
    "share available roof for rooftop PV": "share_available_roof_for_rooftop_pv",
    "Start year P f1 solar PV": "start_year_p_f1_solar_pv",
    "max solar PV urban": "max_solar_pv_urban",
    "Target year f1 solar PV": "target_year_f1_solar_pv",
    '"f1-ini solar PV"': "f1ini_solar_pv",
    "extraction uranium EJ": "extraction_uranium_ej",
    "extraction coal EJ": "extraction_coal_ej",
    '"PES coal for Heat-nc plants"': "pes_coal_for_heatnc_plants",
    "PE losses coal for Elec EJ": "pe_losses_coal_for_elec_ej",
    "abundance coal EU": "abundance_coal_eu",
    "FE Elec generation from coal TWh": "fe_elec_generation_from_coal_twh",
    "Total FE Elec consumption TWh": "total_fe_elec_consumption_twh",
    '"PES coal for Heat-com plants"': "pes_coal_for_heatcom_plants",
    "PED EU coal from RoW": "ped_eu_coal_from_row",
    "share E losses CC": "share_e_losses_cc",
    "FE nuclear Elec generation TWh": "fe_nuclear_elec_generation_twh",
    "effects shortage uranium": "effects_shortage_uranium",
    "Total consumption NRE EJ": "total_consumption_nre_ej",
    "CC impacts feedback shortage coeff": "cc_impacts_feedback_shortage_coeff",
    "PE losses uranium for Elec EJ": "pe_losses_uranium_for_elec_ej",
    '"Share E-losses CC World"': "share_elosses_cc_world",
    "Total FE Heat consumption EJ": "total_fe_heat_consumption_ej",
    "imports EU uranium from RoW EJ": "imports_eu_uranium_from_row_ej",
    "abundance uranium": "abundance_uranium",
    "abundance liquids": "abundance_liquids",
    "PE losses oil for Elec EJ": "pe_losses_oil_for_elec_ej",
    "PE losses uncon gas for Elec EJ": "pe_losses_uncon_gas_for_elec_ej",
    "PE losses conv gas for Elec EJ": "pe_losses_conv_gas_for_elec_ej",
    "abundance gases": "abundance_gases",
    '"PES oil for Heat-nc plants"': "pes_oil_for_heatnc_plants",
    '"share liquids dem for Heat-nc"': "share_liquids_dem_for_heatnc",
    "check liquids": "check_liquids",
    '"share gases dem for Heat-nc"': "share_gases_dem_for_heatnc",
    "check gases": "check_gases",
    '"PES nat. gas for Heat-nc plants"': "pes_nat_gas_for_heatnc_plants",
    "FE Elec generation from unconv gas TWh": "fe_elec_generation_from_unconv_gas_twh",
    "share conv vs total gas extraction": "share_conv_vs_total_gas_extraction",
    "FE Elec generation from conv gas TWh": "fe_elec_generation_from_conv_gas_twh",
    "real FE consumption gases EJ": "real_fe_consumption_gases_ej",
    '"PES nat. gas for Heat-com plants"': "pes_nat_gas_for_heatcom_plants",
    "FE Elec generation from total oil TWh": "fe_elec_generation_from_total_oil_twh",
    "real FE consumption liquids EJ": "real_fe_consumption_liquids_ej",
    "PES oil EJ": "pes_oil_ej",
    '"PES oil for Heat-com plants"': "pes_oil_for_heatcom_plants",
    "PED EU total oil from RoW": "ped_eu_total_oil_from_row",
    "PES nat gas": "pes_nat_gas",
    "RURR tot agg oil": "rurr_tot_agg_oil",
    "RURR tot agg gas": "rurr_tot_agg_gas",
    "Percent share blue water use vs AR": "percent_share_blue_water_use_vs_ar",
    '"minimum EROI (Brandt, 2017)"': "minimum_eroi_brandt_2017",
    '"minimum EROI (Hall et al, 2009)"': "minimum_eroi_hall_et_al_2009",
    "Physical energy intensity TPES vs final": "physical_energy_intensity_tpes_vs_final",
    "Physical energy intensity TPES vs net": "physical_energy_intensity_tpes_vs_net",
    "Required final energy transport IOT sectors": "required_final_energy_transport_iot_sectors",
    "available max PE solid bioE for elec EJ": "available_max_pe_solid_bioe_for_elec_ej",
    "remaining potential tot RES heat": "remaining_potential_tot_res_heat",
    "PES tot RES for heat": "pes_tot_res_for_heat",
    "PES solids bioE EJ": "pes_solids_bioe_ej",
    "Max tot FE potential RES for heat": "max_tot_fe_potential_res_for_heat",
    "max PE potential solid bioE for heat EJ": "max_pe_potential_solid_bioe_for_heat_ej",
    "max FE potential solid bioE for elec TWe": "max_fe_potential_solid_bioe_for_elec_twe",
    "Max PE potential RES for heat": "max_pe_potential_res_for_heat",
    "max PE potential solid bioE for elec EJ": "max_pe_potential_solid_bioe_for_elec_ej",
    "max PE potential tot RES heat EJ": "max_pe_potential_tot_res_heat_ej",
    "share solids bioE for elec vs heat": "share_solids_bioe_for_elec_vs_heat",
    "solid bioE emissions relevant EJ": "solid_bioe_emissions_relevant_ej",
    "Max FE potential RES for heat": "max_fe_potential_res_for_heat",
    '"PE supply from RES non-elec without trad bioE EJ"': "pe_supply_from_res_nonelec_without_trad_bioe_ej",
    "max potential RES elec TWh": "max_potential_res_elec_twh",
    "max potential tot RES elec TWh": "max_potential_tot_res_elec_twh",
    "efficiency biogas for heat": "efficiency_biogas_for_heat",
    "max biogas for TFC": "max_biogas_for_tfc",
    "max PE potential biogas for elec": "max_pe_potential_biogas_for_elec",
    "remaining potential RES elec": "remaining_potential_res_elec",
    "max FE potential biogas for heat": "max_fe_potential_biogas_for_heat",
    "TFEC per capita before heat dem corr": "tfec_per_capita_before_heat_dem_corr",
    "share total net energy vs TPES": "share_total_net_energy_vs_tpes",
    "Net TFEC": "net_tfec",
    "Real TFEC before heat dem corr": "real_tfec_before_heat_dem_corr",
    "Dynamic threshold 'high development'": "dynamic_threshold_high_development",
    "Dynamic low range FEC good standard of living": "dynamic_low_range_fec_good_standard_of_living",
    "Dynamic high range FEC good standard of living": "dynamic_high_range_fec_good_standard_of_living",
    "Real FEC before heat dem corr": "real_fec_before_heat_dem_corr",
    "Net TFEC per capita": "net_tfec_per_capita",
    "share TFEC before heat dem corr vs real TFEC": "share_tfec_before_heat_dem_corr_vs_real_tfec",
    "share TFED before heat dem corr vs real TFEC": "share_tfed_before_heat_dem_corr_vs_real_tfec",
    "BioE potential NPP marginal lands": "bioe_potential_npp_marginal_lands",
    '"CO2 soil&LUCF emissions"': "co2_soillucf_emissions",
    "CO2 LULCF": "co2_lulcf",
    "Max PEavail potential biofuels marginal lands": "max_peavail_potential_biofuels_marginal_lands",
    "Potential marginal lands MHa": "potential_marginal_lands_mha",
    "Land shifted to biofuels 3gen": "land_shifted_to_biofuels_3gen",
    "adapt growth biogas": "adapt_growth_biogas",
    "available max PE solid bioE for heat EJ": "available_max_pe_solid_bioe_for_heat_ej",
    '"Total PE solid bioE potential heat+elec EJ"': "total_pe_solid_bioe_potential_heatelec_ej",
    "FES total biofuels production EJ": "fes_total_biofuels_production_ej",
    "remaining potential biofuels land compet": "remaining_potential_biofuels_land_compet",
    "remaining potential biofuels land marg": "remaining_potential_biofuels_land_marg",
    "PEavail tot biofuels land compet EJ": "peavail_tot_biofuels_land_compet_ej",
    "P biofuels marg lands": "p_biofuels_marg_lands",
    "remaining potential biofuels": "remaining_potential_biofuels",
    "FE demand oil Elec plants TWh": "fe_demand_oil_elec_plants_twh",
    "PE demand oil Elec plants EJ": "pe_demand_oil_elec_plants_ej",
    '"adapt growth RES for heat-com"': "adapt_growth_res_for_heatcom",
    '"adapt growth RES for heat-nc"': "adapt_growth_res_for_heatnc",
    "Start year P growth RES heat": "start_year_p_growth_res_heat",
    "EROI FC system from 2015": "eroi_fc_system_from_2015",
    "adapt growth RES elec": "adapt_growth_res_elec",
    "adapt growth PHS": "adapt_growth_phs",
    "Variation energy demand due to EROI FC system": "variation_energy_demand_due_to_eroi_fc_system",
    "Start year P growth RES elec": "start_year_p_growth_res_elec",
    "Land productivity biofuels marg EJ MHa": "land_productivity_biofuels_marg_ej_mha",
    "ratio land productivity 2gen vs marg": "ratio_land_productivity_2gen_vs_marg",
    '"b lineal regr phase-out oil for elec"': "b_lineal_regr_phaseout_oil_for_elec",
    "share in target year oil for elec": "share_in_target_year_oil_for_elec",
    "share in target year oil for heat": "share_in_target_year_oil_for_heat",
    '"a lineal regr phase-out oil for elec"': "a_lineal_regr_phaseout_oil_for_elec",
    '"a lineal regr phase-out oil for heat"': "a_lineal_regr_phaseout_oil_for_heat",
    '"start year policy phase-out oil for elec"': "start_year_policy_phaseout_oil_for_elec",
    '"target year policy phase-out oil for elec"': "target_year_policy_phaseout_oil_for_elec",
    '"target year policy phase-out oil for heat"': "target_year_policy_phaseout_oil_for_heat",
    "P share oil for Elec": "p_share_oil_for_elec",
    "P share oil for Heat": "p_share_oil_for_heat",
    '"b lineal regr phase-out oil for heat"': "b_lineal_regr_phaseout_oil_for_heat",
    '"start year policy phase-out oil for heat"': "start_year_policy_phaseout_oil_for_heat",
    "share liquids for heat plants": "share_liquids_for_heat_plants",
    "share oil for Elec": "share_oil_for_elec",
    "PE traditional biomass consum EJ": "pe_traditional_biomass_consum_ej",
    "scarcity resources counter": "scarcity_resources_counter",
    "Scarcity resources flag": "scarcity_resources_flag",
    "Percent RES vs TPES": "percent_res_vs_tpes",
    "Year init scarcity final fuels": "year_init_scarcity_final_fuels",
    "Year init scarcity reserves": "year_init_scarcity_reserves",
    "Percent tot monet invest RESelec vs GDP": "percent_tot_monet_invest_reselec_vs_gdp",
    "scarcity final fuels counter": "scarcity_final_fuels_counter",
    "scarcity reserves counter": "scarcity_reserves_counter",
    "Year final scarcity reserves": "year_final_scarcity_reserves",
    "Year final scarcity resources": "year_final_scarcity_resources",
    "Scarcity fuels flag": "scarcity_fuels_flag",
    "Scarcity reserves flag": "scarcity_reserves_flag",
    "Year init scarcity resources": "year_init_scarcity_resources",
    "Percent remaining potential tot RES heat": "percent_remaining_potential_tot_res_heat",
    "Abundance final fuels": "abundance_final_fuels",
    "scarcity final fuels flags": "scarcity_final_fuels_flags",
    "Percent remaining potential tot RES elec": "percent_remaining_potential_tot_res_elec",
    "Year final scarcity final fuels": "year_final_scarcity_final_fuels",
    "share blue water use vs AR": "share_blue_water_use_vs_ar",
    "AR water": "ar_water",
    "share total water use vs AR": "share_total_water_use_vs_ar",
    "shortage BioE non trad": "shortage_bioe_non_trad",
    "Renewable water resources": "renewable_water_resources",
    "share blue water use vs renewable water resources": "share_blue_water_use_vs_renewable_water_resources",
    "dam3 per km3": "dam3_per_km3",
    "share total water use vs renewable water resources": "share_total_water_use_vs_renewable_water_resources",
    "Total PE solid bioE potential EJ": "total_pe_solid_bioe_potential_ej",
    "shortage BioE for heat": "shortage_bioe_for_heat",
    "Cp RES for heat": "cp_res_for_heat",
    "shortage BioE non trad delayed 1yr": "shortage_bioe_non_trad_delayed_1yr",
    '"potential FES RES for heat-com EJ"': "potential_fes_res_for_heatcom_ej",
    '"potential FES RES for heat-com TWh"': "potential_fes_res_for_heatcom_twh",
    "real generation RES elec TWh": "real_generation_res_elec_twh",
    '"potential FES RES for heat-nc TWh"': "potential_fes_res_for_heatnc_twh",
    "shortage BioE for elec": "shortage_bioe_for_elec",
    "replacement capacity RES elec": "replacement_capacity_res_elec",
    "Cp RES elec": "cp_res_elec",
    '"replacement RES for heat-nc TW"': "replacement_res_for_heatnc_tw",
    '"replacement RES for heat-com TW"': "replacement_res_for_heatcom_tw",
    "demand forest energy non tradition EJ": "demand_forest_energy_non_tradition_ej",
    "max E forest available non trad": "max_e_forest_available_non_trad",
    "max E tot forest available": "max_e_tot_forest_available",
    "max E forest energy non trad": "max_e_forest_energy_non_trad",
    "max EROI FC": "max_eroi_fc",
    "EROI FC system from 2015 1": "eroi_fc_system_from_2015_1",
    "P rr Ti Rest": "p_rr_ti_rest",
    "P rr Li Rest": "p_rr_li_rest",
    "P rr V Rest": "p_rr_v_rest",
    "P rr Mg Rest": "p_rr_mg_rest",
    "P rr Zn Rest": "p_rr_zn_rest",
    "P rr minerals Rest": "p_rr_minerals_rest",
    "P rr Cd Rest": "p_rr_cd_rest",
    "improvement recycling rates minerals Rest": "improvement_recycling_rates_minerals_rest",
    "b lineal regr rr alt techn": "b_lineal_regr_rr_alt_techn",
    "b lineal regr rr Rest": "b_lineal_regr_rr_rest",
    "by mineral rr Rest 1yr": "by_mineral_rr_rest_1yr",
    "P rr Cu Rest": "p_rr_cu_rest",
    "a lineal regr rr alt techn": "a_lineal_regr_rr_alt_techn",
    "a lineal regr rr Rest": "a_lineal_regr_rr_rest",
    "start year P rr minerals Rest": "start_year_p_rr_minerals_rest",
    "common rr minerals variation Rest": "common_rr_minerals_variation_rest",
    "P rr In Rest": "p_rr_in_rest",
    "P rr Te Rest": "p_rr_te_rest",
    "P rr Mo Rest": "p_rr_mo_rest",
    "by mineral rr Rest": "by_mineral_rr_rest",
    "P rr Ag Rest": "p_rr_ag_rest",
    "P rr Mn Rest": "p_rr_mn_rest",
    "P rr Al Rest": "p_rr_al_rest",
    "target year P rr minerals Rest": "target_year_p_rr_minerals_rest",
    "P rr Ga Rest": "p_rr_ga_rest",
    "P rr Sn Rest": "p_rr_sn_rest",
    "P rr Pb Rest": "p_rr_pb_rest",
    "P rr Cr Rest": "p_rr_cr_rest",
    "P rr Ni Rest": "p_rr_ni_rest",
    "P rr Fe Rest": "p_rr_fe_rest",
    "by mineral rr variation Rest": "by_mineral_rr_variation_rest",
    "current recycling rates minerals alt techn": "current_recycling_rates_minerals_alt_techn",
    "P rr Mg alt techn": "p_rr_mg_alt_techn",
    "P rr minerals alt techn": "p_rr_minerals_alt_techn",
    "P rr Mn alt techn": "p_rr_mn_alt_techn",
    "P rr Mo alt techn": "p_rr_mo_alt_techn",
    "P rr Ni alt techn": "p_rr_ni_alt_techn",
    "P rr Pb alt techn": "p_rr_pb_alt_techn",
    "by mineral rr alt techn": "by_mineral_rr_alt_techn",
    "by mineral rr alt techn 1yr": "by_mineral_rr_alt_techn_1yr",
    "P rr Al alt techn": "p_rr_al_alt_techn",
    "P rr Cd alt techn": "p_rr_cd_alt_techn",
    "P rr Cu alt techn": "p_rr_cu_alt_techn",
    "P rr Fe alt techn": "p_rr_fe_alt_techn",
    "P rr Ga alt techn": "p_rr_ga_alt_techn",
    "P rr In alt techn": "p_rr_in_alt_techn",
    "P rr Li alt techn": "p_rr_li_alt_techn",
    "recycling rates minerals alt techn": "recycling_rates_minerals_alt_techn",
    "P rr V alt techn": "p_rr_v_alt_techn",
    "P rr Zn alt techn": "p_rr_zn_alt_techn",
    "P rr Ti alt techn": "p_rr_ti_alt_techn",
    "P rr Cr alt techn": "p_rr_cr_alt_techn",
    "P rr Ag alt techn": "p_rr_ag_alt_techn",
    "P rr Sn alt techn": "p_rr_sn_alt_techn",
    "P rr Te alt techn": "p_rr_te_alt_techn",
    "improvement recycling rates minerals alt techn": "improvement_recycling_rates_minerals_alt_techn",
    "by mineral rr variation alt techn": "by_mineral_rr_variation_alt_techn",
    "start year P rr minerals alt techn": "start_year_p_rr_minerals_alt_techn",
    "target year P rr minerals alt techn": "target_year_p_rr_minerals_alt_techn",
    "SF6 emissions RCP": "sf6_emissions_rcp",
    "Choose RCP": "choose_rcp",
    "CH4 anthro emissions RCP": "ch4_anthro_emissions_rcp",
    "HFC emissions": "hfc_emissions",
    '"HFC emissions RCP 2.6"': "hfc_emissions_rcp_26",
    '"HFC emissions RCP 4.5"': "hfc_emissions_rcp_45",
    '"HFC emissions RCP 6.0"': "hfc_emissions_rcp_60",
    "PFC emissions": "pfc_emissions",
    "PFC emissions RCP": "pfc_emissions_rcp",
    "SF6 emissions": "sf6_emissions",
    "N2O Anthro Emissions": "n2o_anthro_emissions",
    "N2O Anthro Emissions RCP": "n2o_anthro_emissions_rcp",
    '"HFC emissions RCP 8.5"': "hfc_emissions_rcp_85",
    "common rr minerals variation alt techn": "common_rr_minerals_variation_alt_techn",
    "choose targets mineral recycling rates": "choose_targets_mineral_recycling_rates",
    "Total water use per capita": "total_water_use_per_capita",
    "Total water use": "total_water_use",
    "Water use per type per capita": "water_use_per_type_per_capita",
    "Variation water intensity by sector": "variation_water_intensity_by_sector",
    "Historic water intensities by sector delayed 1yr": "historic_water_intensities_by_sector_delayed_1yr",
    "Historic water intensities for households delayed 1yr": "historic_water_intensities_for_households_delayed_1yr",
    "Variation water intensity households": "variation_water_intensity_households",
    "Water intensity for households": "water_intensity_for_households",
    "P minimum forest": "p_minimum_forest",
    "forest extraction per Ha": "forest_extraction_per_ha",
    "max sustainable forest extraction EJ": "max_sustainable_forest_extraction_ej",
    "demand forest wood products pc": "demand_forest_wood_products_pc",
    "demand wood products m3": "demand_wood_products_m3",
    "Past trends CO2 LUCF": "past_trends_co2_lucf",
    "deficit wood products": "deficit_wood_products",
    "unsustainable loggin": "unsustainable_loggin",
    "wood energy density": "wood_energy_density",
    "demand wood products EJ": "demand_wood_products_ej",
    "total demand forest biomass EJ": "total_demand_forest_biomass_ej",
    "demand forest energy traditional EJ": "demand_forest_energy_traditional_ej",
    "Historic water use by type sectors": "historic_water_use_by_type_sectors",
    "Historic water by type intensities by sector": "historic_water_by_type_intensities_by_sector",
    "Total water use by type": "total_water_use_by_type",
    '"Total water for O&M required by RES elec dam3"': "total_water_for_om_required_by_res_elec_dam3",
    "Water intensity by sector": "water_intensity_by_sector",
    "Water use by sector": "water_use_by_sector",
    "Total CO2 emissions GTCO2": "total_co2_emissions_gtco2",
    "PE traditional biomass EJ delayed 1yr": "pe_traditional_biomass_ej_delayed_1yr",
    "Population dependent on trad biomass": "population_dependent_on_trad_biomass",
    "Mt to dam3": "mt_to_dam3",
    '"Total water for O&M required by RES elec"': "total_water_for_om_required_by_res_elec",
    "Historic water use by type for households": "historic_water_use_by_type_for_households",
    "Initial water intensity by sector": "initial_water_intensity_by_sector",
    "Initial water use by households": "initial_water_use_by_households",
    "Initial water use by sector": "initial_water_use_by_sector",
    "deficit forest biomass": "deficit_forest_biomass",
    "total demand energy forest EJ": "total_demand_energy_forest_ej",
    "P forest overexplotation": "p_forest_overexplotation",
    "adapt growth waste": "adapt_growth_waste",
    "Adapt CO2 emissions unconv gas": "adapt_co2_emissions_unconv_gas",
    "Adapt emissions shale oil": "adapt_emissions_shale_oil",
    "adapt growth biofuels 2gen": "adapt_growth_biofuels_2gen",
    "demand by sector FD adjusted": "demand_by_sector_fd_adjusted",
    "total demand adjusted": "total_demand_adjusted",
    "Domestic demand by sector": "domestic_demand_by_sector",
    "aux4": "aux4",
    '"1 year"': "nvs_1_year",
    "EPTB dynamic": "eptb_dynamic",
    "EROIst system delayed": "eroist_system_delayed",
    "EROIst system delayed 1yr": "eroist_system_delayed_1yr",
    "IA Matrix": "ia_matrix",
    "IA matrix 2002": "ia_matrix_2002",
    "IA matrix 2003": "ia_matrix_2003",
    "IA matrix 2004": "ia_matrix_2004",
    "IA matrix 2005": "ia_matrix_2005",
    "IA matrix 2006": "ia_matrix_2006",
    "IA matrix 2007": "ia_matrix_2007",
    "IA matrix 2008": "ia_matrix_2008",
    "IA matrix for Python": "ia_matrix_for_python",
    "IA matrix 1995": "ia_matrix_1995",
    "IA matrix 1996": "ia_matrix_1996",
    "IA matrix 1997": "ia_matrix_1997",
    "IA matrix 1998": "ia_matrix_1998",
    "IA matrix 1999": "ia_matrix_1999",
    "IA matrix 2000": "ia_matrix_2000",
    "IA matrix 2001": "ia_matrix_2001",
    "IA matrix 2009": "ia_matrix_2009",
    "Leontief Matrix domestic": "leontief_matrix_domestic",
    "Leontief matrix for Python": "leontief_matrix_for_python",
    "Leontief matrix 1996": "leontief_matrix_1996",
    "Leontief matrix 1997": "leontief_matrix_1997",
    "Leontief matrix 1998": "leontief_matrix_1998",
    "Leontief matrix 1999": "leontief_matrix_1999",
    "Leontief matrix 2000": "leontief_matrix_2000",
    "Leontief matrix 2001": "leontief_matrix_2001",
    "Leontief matrix 2002": "leontief_matrix_2002",
    "Leontief matrix 2003": "leontief_matrix_2003",
    "Leontief matrix 2004": "leontief_matrix_2004",
    "Leontief matrix 2005": "leontief_matrix_2005",
    "Leontief matrix 2006": "leontief_matrix_2006",
    "Leontief matrix 2007": "leontief_matrix_2007",
    "Leontief matrix 2008": "leontief_matrix_2008",
    "Leontief matrix 2009": "leontief_matrix_2009",
    "Leontief matrix 1995": "leontief_matrix_1995",
    "replacement batteries": "replacement_batteries",
    "share of electric light vehicles": "share_of_electric_light_vehicles",
    '"share elec+hyb light vehicles"': "share_elechyb_light_vehicles",
    "T fin inlandT": "t_fin_inlandt",
    "T fin Hveh": "t_fin_hveh",
    "T ini Hveh": "t_ini_hveh",
    "variation pop SSP4": "variation_pop_ssp4",
    "variation pop SSP5": "variation_pop_ssp5",
    "start year P common rr minerals alt techn": "start_year_p_common_rr_minerals_alt_techn",
    "start year P common rr minerals Rest": "start_year_p_common_rr_minerals_rest",
    "select pop SSPs": "select_pop_ssps",
    "variation pop SSP1": "variation_pop_ssp1",
    "variation pop SSP2": "variation_pop_ssp2",
    "variation pop SSP3": "variation_pop_ssp3",
    "Annual population growth rate": "annual_population_growth_rate",
    "variation pop SSPs": "variation_pop_ssps",
    "Pop SSP2": "pop_ssp2",
    "Pop SSP4": "pop_ssp4",
    "Pop SSP1": "pop_ssp1",
    "Pop SSP5": "pop_ssp5",
    "Pop SSP3": "pop_ssp3",
    "Cp EV batteries for elec storage": "cp_ev_batteries_for_elec_storage",
    "max Cp EV batteries for elec storage": "max_cp_ev_batteries_for_elec_storage",
    "TFEC intensity until 2009": "tfec_intensity_until_2009",
    "Cumulative TFEC intensity change from 2009": "cumulative_tfec_intensity_change_from_2009",
    "lifetime EV batteries": "lifetime_ev_batteries",
    "TFEC per capita": "tfec_per_capita",
    "aux15": "aux15",
    "Cp EV batteries for Transp": "cp_ev_batteries_for_transp",
    "Annual growth rate electricity generation RES elec tot": "annual_growth_rate_electricity_generation_res_elec_tot",
    "Annual growth rate RES for heat": "annual_growth_rate_res_for_heat",
    "P customized year pop evolution": "p_customized_year_pop_evolution",
    "select Population evolution input": "select_population_evolution_input",
    "FE tot generation all RES elec TWh delayed 1yr": "fe_tot_generation_all_res_elec_twh_delayed_1yr",
    "P customized cte pop variation": "p_customized_cte_pop_variation",
    "FES RES for heat delayed 1yr": "fes_res_for_heat_delayed_1yr",
    "TPES intensity until 2009": "tpes_intensity_until_2009",
    "aux13": "aux13",
    "aux14": "aux14",
    "Cumulative TPES intensity change from 2009": "cumulative_tpes_intensity_change_from_2009",
    "Cumulative TFEC intensity change from 2009 without EROI": "cumulative_tfec_intensity_change_from_2009_without_eroi",
    "TFEC intensity until 2009 without EROI": "tfec_intensity_until_2009_without_eroi",
    "Annual TFES intensity change rate without EROI": "annual_tfes_intensity_change_rate_without_eroi",
    "TFES intensity without EROI delayed 1yr": "tfes_intensity_without_eroi_delayed_1yr",
    "required TFED sectors": "required_tfed_sectors",
    "ratio FED households vs sectors": "ratio_fed_households_vs_sectors",
    "TFES intensity EJ T$ without EROI": "tfes_intensity_ej_t_without_eroi",
    "Cumulative CO2e GHG emissions": "cumulative_co2e_ghg_emissions",
    "Target year P growth RES elec": "target_year_p_growth_res_elec",
    "Target year P growth RES heat": "target_year_p_growth_res_heat",
    '"Total GHG emissions BAU-CAT MEDEAS D3.2"': "total_ghg_emissions_baucat_medeas_d32",
    '"Total GHG emissions MLT2030 MEDEAS D3.2"': "total_ghg_emissions_mlt2030_medeas_d32",
    '"Total GHG emissions MLT2020 MEDEAS D3.2"': "total_ghg_emissions_mlt2020_medeas_d32",
    "Low range FEC good standard of living": "low_range_fec_good_standard_of_living",
    "Threshold FEC 'high development'": "threshold_fec_high_development",
    "High range FEC good standard of living": "high_range_fec_good_standard_of_living",
    "minimum fraction": "minimum_fraction",
    "Max yearly change": "max_yearly_change",
    "GWP 100 years CH4": "gwp_100_years_ch4",
    "correction factor all GHGs": "correction_factor_all_ghgs",
    '"Activate energy scarcity feedback?"': "activate_energy_scarcity_feedback",
    "max potential PHS TWh": "max_potential_phs_twh",
    "replacement rate PHS": "replacement_rate_phs",
    "real FE elec stored EV batteries TWh": "real_fe_elec_stored_ev_batteries_twh",
    "share tot FEI RES elec var": "share_tot_fei_res_elec_var",
    "Cp EV batteries required": "cp_ev_batteries_required",
    "output EV bateries for storage over lifetime": "output_ev_bateries_for_storage_over_lifetime",
    "discarded batteries": "discarded_batteries",
    "ESOI elec storage": "esoi_elec_storage",
    "ESOI EV batteries": "esoi_ev_batteries",
    "rt elec storage efficiency": "rt_elec_storage_efficiency",
    "abundance storage": "abundance_storage",
    "Used EV batteries for elec storage": "used_ev_batteries_for_elec_storage",
    "max Cp EV batteries": "max_cp_ev_batteries",
    "Total capacity elec storage TW": "total_capacity_elec_storage_tw",
    "demand EV batteries for elec storage": "demand_ev_batteries_for_elec_storage",
    "CED per TW over lifetime PHS": "ced_per_tw_over_lifetime_phs",
    "remaining potential constraint on new PHS capacity": "remaining_potential_constraint_on_new_phs_capacity",
    "new required PHS capacity": "new_required_phs_capacity",
    "share dyn FEI for RES vs TFEC": "share_dyn_fei_for_res_vs_tfec",
    "FEI EV batteries": "fei_ev_batteries",
    "output PHS over lifetime": "output_phs_over_lifetime",
    "ESOI static PHS": "esoi_static_phs",
    "Total dyn FEI RES": "total_dyn_fei_res",
    "adapt growth RES elec after allocation": "adapt_growth_res_elec_after_allocation",
    "ESOI PHS": "esoi_phs",
    "P PHS growth": "p_phs_growth",
    "constraint elec storage availability": "constraint_elec_storage_availability",
    "initial instal cap PHS": "initial_instal_cap_phs",
    "CEDtot over lifetime PHS": "cedtot_over_lifetime_phs",
    "installed capacity PHS TW": "installed_capacity_phs_tw",
    "PHS capacity under construction": "phs_capacity_under_construction",
    "past PHS capacity growth": "past_phs_capacity_growth",
    "new PHS capacity under planning": "new_phs_capacity_under_planning",
    "wear PHS": "wear_phs",
    "replacement capacity PHS": "replacement_capacity_phs",
    "real FE elec stored PHS TWh": "real_fe_elec_stored_phs_twh",
    "PHS planned capacity": "phs_planned_capacity",
    "Final energy invested PHS": "final_energy_invested_phs",
    "remaining potential PHS": "remaining_potential_phs",
    "Historic new required capacity PHS": "historic_new_required_capacity_phs",
    "table hist capacity PHS": "table_hist_capacity_phs",
    "initial capacity in construction PHS": "initial_capacity_in_construction_phs",
    "required capacity PHS": "required_capacity_phs",
    "initial required capacity PHS": "initial_required_capacity_phs",
    "Total FEI over lifetime RES elec dispatch": "total_fei_over_lifetime_res_elec_dispatch",
    "min lifetime EV batteries": "min_lifetime_ev_batteries",
    "Total final energy invested RES elec var": "total_final_energy_invested_res_elec_var",
    "materials required for EV batteries Mt": "materials_required_for_ev_batteries_mt",
    '"new+replaced batteries TW"': "newreplaced_batteries_tw",
    '"Energy intensity construction EV batteries MJ/MW"': "energy_intensity_construction_ev_batteries_mjmw",
    "new batteries": "new_batteries",
    '"batteries EV+hib+2wE"': "batteries_evhib2we",
    "kW per MW": "kw_per_mw",
    "Net stored energy EV battery over lifetime": "net_stored_energy_ev_battery_over_lifetime",
    "Grid correction factor EV batteries": "grid_correction_factor_ev_batteries",
    "Share energy requirements for decom EV batteries": "share_energy_requirements_for_decom_ev_batteries",
    "Working hours per year": "working_hours_per_year",
    "days per year": "days_per_year",
    "Total energy required for material consumption for RES elec": "total_energy_required_for_material_consumption_for_res_elec",
    "Total energy required for material consumption per RES elec": "total_energy_required_for_material_consumption_per_res_elec",
    "MW in 1 year to MJ": "mw_in_1_year_to_mj",
    "Working hours per day": "working_hours_per_day",
    "Annual work hours for RES": "annual_work_hours_for_res",
    "Hours work per GJ RES delivered": "hours_work_per_gj_res_delivered",
    "Total energy required for total material consumption for EV batteries": "total_energy_required_for_total_material_consumption_for_ev_batteries",
    "TFE required for total material consumption for alt techn": "tfe_required_for_total_material_consumption_for_alt_techn",
    "Energy required for material consumption per RES elec": "energy_required_for_material_consumption_per_res_elec",
    "Total energy required per material for alt techn": "total_energy_required_per_material_for_alt_techn",
    "Total jobs RES elec": "total_jobs_res_elec",
    "total jobs biofuels": "total_jobs_biofuels",
    "Total jobs RES": "total_jobs_res",
    '"Total D+I jobs RES heat per techn"': "total_di_jobs_res_heat_per_techn",
    "Total jobs RES heat": "total_jobs_res_heat",
    '"Total D+I jobs RES elec per techn"': "total_di_jobs_res_elec_per_techn",
    "Ratio total vs D jobs RES heat": "ratio_total_vs_d_jobs_res_heat",
    "Ratio total vs D jobs RES elec": "ratio_total_vs_d_jobs_res_elec",
    "Employment factor biofuels": "employment_factor_biofuels",
    "installed capacity RES elec delayed 1yr": "installed_capacity_res_elec_delayed_1yr",
    '"Jobs O&M RES heat per techn"': "jobs_om_res_heat_per_techn",
    "D jobs new installed RES heat per techn": "d_jobs_new_installed_res_heat_per_techn",
    "D jobs fuel supply solids bioE": "d_jobs_fuel_supply_solids_bioe",
    "new capacity installed growth rate RES elec": "new_capacity_installed_growth_rate_res_elec",
    "Employment factor fuel supply solids bioE": "employment_factor_fuel_supply_solids_bioe",
    "Exogenous growth GTL": "exogenous_growth_gtl",
    "replacement GTL": "replacement_gtl",
    '"Crash programme GTL?"': "crash_programme_gtl",
    '"Activate EROI FC system feedback?"': "activate_eroi_fc_system_feedback",
    "Exogenous growth CTL": "exogenous_growth_ctl",
    "replacement CTL": "replacement_ctl",
    "table max extraction ASPO oil EJ 0 1 0": "table_max_extraction_aspo_oil_ej_0_1_0",
    "aux12": "aux12",
    "coal to leave underground": "coal_to_leave_underground",
    "RURR coal start year PLG": "rurr_coal_start_year_plg",
    "RURR conv oil until start year PLG": "rurr_conv_oil_until_start_year_plg",
    "conv gas to leave underground": "conv_gas_to_leave_underground",
    "conv oil to leave underground": "conv_oil_to_leave_underground",
    "RURR unconv oil until start year PLG": "rurr_unconv_oil_until_start_year_plg",
    "RURR unconv gas until start year PLG": "rurr_unconv_gas_until_start_year_plg",
    "unconv gas to leave underground": "unconv_gas_to_leave_underground",
    "tot agg gas to leave underground": "tot_agg_gas_to_leave_underground",
    "unconv oil to leave underground": "unconv_oil_to_leave_underground",
    "aux11": "aux11",
    "tot agg oil to leave underground": "tot_agg_oil_to_leave_underground",
    "aux6": "aux6",
    "aux7": "aux7",
    "aux8": "aux8",
    "aux9": "aux9",
    "RURR conv gas until start year PLG": "rurr_conv_gas_until_start_year_plg",
    "aux10": "aux10",
    "table max extraction ASPO oil EJ 0 1": "table_max_extraction_aspo_oil_ej_0_1",
    "table max extraction ASPO oil EJ 0": "table_max_extraction_aspo_oil_ej_0",
    "table max extraction ASPO oil EJ 0 0": "table_max_extraction_aspo_oil_ej_0_0",
    "RURR tot gas until start year PLG": "rurr_tot_gas_until_start_year_plg",
    "RURR tot oil until start year PLG": "rurr_tot_oil_until_start_year_plg",
    "share Elec demand covered by RES": "share_elec_demand_covered_by_res",
    "RURR conv gas": "rurr_conv_gas",
    "RURR unconv gas": "rurr_unconv_gas",
    "RURR conv oil": "rurr_conv_oil",
    '"variation share transm&distr losses elec"': "variation_share_transmdistr_losses_elec",
    "Share demand solids in transport": "share_demand_solids_in_transport",
    "Share demand gas in transport": "share_demand_gas_in_transport",
    "Share demand by fuel in transport": "share_demand_by_fuel_in_transport",
    "Share demand electricity in transport": "share_demand_electricity_in_transport",
    "Share demand heat in transport": "share_demand_heat_in_transport",
    "Share demand liquids in transport": "share_demand_liquids_in_transport",
    "CO2 emissions per value added": "co2_emissions_per_value_added",
    "liquids per X bus": "liquids_per_x_bus",
    "liquids per X HV": "liquids_per_x_hv",
    "liquids per X LV": "liquids_per_x_lv",
    "energy per X train": "energy_per_x_train",
    "adjust energy for transport to inland transport": "adjust_energy_for_transport_to_inland_transport",
    '"effects shortage elec on EV/hib"': "effects_shortage_elec_on_evhib",
    "required number standard batteries": "required_number_standard_batteries",
    "Transport TFED energy intensity": "transport_tfed_energy_intensity",
    "total number light vehicles": "total_number_light_vehicles",
    "Transport TFED": "transport_tfed",
    "CO2 emissions unconv gas": "co2_emissions_unconv_gas",
    '"phase-out oil for electricity?"': "phaseout_oil_for_electricity",
    "Total CH4 emissions fossil fuels": "total_ch4_emissions_fossil_fuels",
    "max CSP TWe": "max_csp_twe",
    "gCH4 per MJ GTL": "gch4_per_mj_gtl",
    "CH4 emissions GTL": "ch4_emissions_gtl",
    '"phase-out oil for heat?"': "phaseout_oil_for_heat",
    "gCH4 per MJ CTL": "gch4_per_mj_ctl",
    "g per Gt": "g_per_gt",
    "BioE CO2 emissions": "bioe_co2_emissions",
    "P H vehicle": "p_h_vehicle",
    "EROIst system until 2015": "eroist_system_until_2015",
    "remaining potential elec storage by RES techn": "remaining_potential_elec_storage_by_res_techn",
    "Cp hydro 2015": "cp_hydro_2015",
    "ESOI PHS full potential": "esoi_phs_full_potential",
    "max capacity elec storage": "max_capacity_elec_storage",
    '"EOL-RR minerals alt techn RES vs. total economy"': "eolrr_minerals_alt_techn_res_vs_total_economy",
    '"Crash programme CTL?"': "crash_programme_ctl",
    "recycling rates minerals Rest": "recycling_rates_minerals_rest",
    "P percent elec Hveh": "p_percent_elec_hveh",
    "percents H vehicles": "percents_h_vehicles",
    "T hist H transp": "t_hist_h_transp",
    "bat number 2w": "bat_number_2w",
    "bateries ratio 2w E": "bateries_ratio_2w_e",
    "bat number EV": "bat_number_ev",
    "bat number hib": "bat_number_hib",
    "bateries ratio bus E": "bateries_ratio_bus_e",
    "bateries ratio hib bus": "bateries_ratio_hib_bus",
    "bateries ratio hib HV": "bateries_ratio_hib_hv",
    "bateries ratio hib LV": "bateries_ratio_hib_lv",
    "total number hybrid light vehicles": "total_number_hybrid_light_vehicles",
    "total number elec light vehicles": "total_number_elec_light_vehicles",
    "total number gas light vehicles": "total_number_gas_light_vehicles",
    "EV batteries TW": "ev_batteries_tw",
    "var percent T vehicles": "var_percent_t_vehicles",
    "P percent train elec": "p_percent_train_elec",
    "P percent HV gas": "p_percent_hv_gas",
    "T ini inlandT": "t_ini_inlandt",
    "P inlandT": "p_inlandt",
    "Activate policy inlandT": "activate_policy_inlandt",
    "P percent LV elec": "p_percent_lv_elec",
    "P percent LV hyb": "p_percent_lv_hyb",
    "P percent bus elec": "p_percent_bus_elec",
    "P percent bus gas": "p_percent_bus_gas",
    "P percent bus hyb": "p_percent_bus_hyb",
    "percents bus": "percents_bus",
    "percents train": "percents_train",
    "P percent HV hyb": "p_percent_hv_hyb",
    "adapt var inlandT": "adapt_var_inlandt",
    "percents LV": "percents_lv",
    "vehicles inlandT": "vehicles_inlandt",
    "Efects shortage inlandT": "efects_shortage_inlandt",
    "P percent LV gas": "p_percent_lv_gas",
    "percents HV": "percents_hv",
    "initial Xt inland": "initial_xt_inland",
    "NX bus inlandT": "nx_bus_inlandt",
    "NX HV inland T": "nx_hv_inland_t",
    "NX LV inland T": "nx_lv_inland_t",
    "N vehicles inland t0": "n_vehicles_inland_t0",
    "Energy initial inland transport": "energy_initial_inland_transport",
    "energy per X t": "energy_per_x_t",
    "NX train inland T": "nx_train_inland_t",
    "H gas adapt growth": "h_gas_adapt_growth",
    "H hyb adapt growth": "h_hyb_adapt_growth",
    "Activate policy H transp": "activate_policy_h_transp",
    "Initial energy intensity of households transport 2009": "initial_energy_intensity_of_households_transport_2009",
    "H elec adapt growth": "h_elec_adapt_growth",
    "var IH E2": "var_ih_e2",
    "var IH gas2": "var_ih_gas2",
    "A1 coef tH": "a1_coef_th",
    "var IH liq2": "var_ih_liq2",
    "Energy intensity of households transport": "energy_intensity_of_households_transport",
    "H 2w elec adapt growth": "h_2w_elec_adapt_growth",
    "Liq 4w": "liq_4w",
    "percent 2w liq": "percent_2w_liq",
    "percent 4w liq": "percent_4w_liq",
    "N vehicles H": "n_vehicles_h",
    "Demand H": "demand_h",
    "ratio N veh Demand H": "ratio_n_veh_demand_h",
    "percents 2w H vehicles": "percents_2w_h_vehicles",
    "percents 4w H vehicles": "percents_4w_h_vehicles",
    "P percent 2w elec": "p_percent_2w_elec",
    "aux hist H": "aux_hist_h",
    "P percent gas Hveh": "p_percent_gas_hveh",
    "P share 2wheelers": "p_share_2wheelers",
    "P percent hyb Hveh": "p_percent_hyb_hveh",
    "initial 2w percent": "initial_2w_percent",
    "share FEH over FED by final fuel": "share_feh_over_fed_by_final_fuel",
    "share FEH over FED oil": "share_feh_over_fed_oil",
    "share FEH over FED coal": "share_feh_over_fed_coal",
    '"share FEH over FED nat. gas"': "share_feh_over_fed_nat_gas",
    '"FED coal for heat-nc"': "fed_coal_for_heatnc",
    "PES oil EJ delayed": "pes_oil_ej_delayed",
    "Energy required for material consumption for EV batteries": "energy_required_for_material_consumption_for_ev_batteries",
    "effects shortage elec on EV": "effects_shortage_elec_on_ev",
    "effects shortage gas H veh": "effects_shortage_gas_h_veh",
    '"variation non-energy use"': "variation_nonenergy_use",
    "Number 2w": "number_2w",
    "Number 4w": "number_4w",
    "Number all": "number_all",
    "percent 4w": "percent_4w",
    "saving ratio 2wE": "saving_ratio_2we",
    "percent all": "percent_all",
    "percent 2w": "percent_2w",
    '"share FED coal vs NRE heat-nc"': "share_fed_coal_vs_nre_heatnc",
    '"share FED gas vs NRE heat-nc"': "share_fed_gas_vs_nre_heatnc",
    '"FED NRE for heat-nc"': "fed_nre_for_heatnc",
    '"share FED liquids vs NRE heat-nc"': "share_fed_liquids_vs_nre_heatnc",
    "Required FED by fuel": "required_fed_by_fuel",
    "BioE gen land marg available": "bioe_gen_land_marg_available",
    "Potential PEavail cellulosic biofuel EJ": "potential_peavail_cellulosic_biofuel_ej",
    "Potential PEavail total biofuels": "potential_peavail_total_biofuels",
    "Biofuels 3gen land compet available": "biofuels_3gen_land_compet_available",
    "FES total biofuels production EJ 2": "fes_total_biofuels_production_ej_2",
    '"FES total biofuels production Mb/d"': "fes_total_biofuels_production_mbd",
    "PEavail biofuels 2gen land compet EJ": "peavail_biofuels_2gen_land_compet_ej",
    "PEavail biofuels 3gen land compet EJ": "peavail_biofuels_3gen_land_compet_ej",
    "PEavail biofuels land marg EJ": "peavail_biofuels_land_marg_ej",
    "PE biofuels land marg EJ": "pe_biofuels_land_marg_ej",
    '"PE biofuels prod 2gen+3gen EJ"': "pe_biofuels_prod_2gen3gen_ej",
    "PE biomass for biofuels production EJ": "pe_biomass_for_biofuels_production_ej",
    "PE cellulosic biofuel EJ": "pe_cellulosic_biofuel_ej",
    "Max PEavail biofuels potential": "max_peavail_biofuels_potential",
    "start year biofuels land marg": "start_year_biofuels_land_marg",
    "Land required biofuels land marg": "land_required_biofuels_land_marg",
    "share biofuels overcapacity": "share_biofuels_overcapacity",
    "Land occupation ratio biofuels marg land": "land_occupation_ratio_biofuels_marg_land",
    "PEavail cellulosic biofuel EJ": "peavail_cellulosic_biofuel_ej",
    "start production biofuels": "start_production_biofuels",
    "Additional PE production of bioenergy for biofuels": "additional_pe_production_of_bioenergy_for_biofuels",
    "Oil liquids saved by biofuels EJ": "oil_liquids_saved_by_biofuels_ej",
    "Efficiency bioE residues to cellulosic liquids": "efficiency_bioe_residues_to_cellulosic_liquids",
    "Conv efficiency from NPP to biofuels": "conv_efficiency_from_npp_to_biofuels",
    "PED NRE Liquids": "ped_nre_liquids",
    '"Potential FES CTL+GTL EJ"': "potential_fes_ctlgtl_ej",
    "TFEC RES delayed 1yr": "tfec_res_delayed_1yr",
    '"FES CTL+GTL EJ"': "fes_ctlgtl_ej",
    "TPES RES delayed 1yr": "tpes_res_delayed_1yr",
    "Annual TPES RES growth rate": "annual_tpes_res_growth_rate",
    '"PED nat. gas EJ"': "ped_nat_gas_ej",
    "Annual share RES vs TFEC growth rate": "annual_share_res_vs_tfec_growth_rate",
    "Annual share RES vs TPES growth rate": "annual_share_res_vs_tpes_growth_rate",
    "share RES vs TPES delayed 1yr": "share_res_vs_tpes_delayed_1yr",
    "GTL production": "gtl_production",
    "PES biogas for TFC": "pes_biogas_for_tfc",
    '"share CTL+GTL overcapacity"': "share_ctlgtl_overcapacity",
    "share RES vs TFEC delayed 1yr": "share_res_vs_tfec_delayed_1yr",
    '"PED nat. gas for GTL EJ"': "ped_nat_gas_for_gtl_ej",
    "max unconv gas growth extraction": "max_unconv_gas_growth_extraction",
    "PED coal for CTL EJ": "ped_coal_for_ctl_ej",
    "Annual TFEC RES growth rate": "annual_tfec_res_growth_rate",
    "PED total oil EJ": "ped_total_oil_ej",
    "CTL production": "ctl_production",
    '"Total FE real supply RES for heat-nc EJ"': "total_fe_real_supply_res_for_heatnc_ej",
    "real extraction conv oil emissions relevant EJ": "real_extraction_conv_oil_emissions_relevant_ej",
    '"new RES capacity for heat-nc TW"': "new_res_capacity_for_heatnc_tw",
    '"Annual variation non-energy use"': "annual_variation_nonenergy_use",
    "real extraction conv gas emissions relevant EJ": "real_extraction_conv_gas_emissions_relevant_ej",
    '"PES RES for heat-nc by techn"': "pes_res_for_heatnc_by_techn",
    "FES NRE for heat": "fes_nre_for_heat",
    '"installed capacity RES heat-nc TW"': "installed_capacity_res_heatnc_tw",
    '"FED Heat-com plants fossil fuels EJ"': "fed_heatcom_plants_fossil_fuels_ej",
    "real extraction unconv gas emissions relevant EJ": "real_extraction_unconv_gas_emissions_relevant_ej",
    "real extraction unconv oil emissions relevant EJ": "real_extraction_unconv_oil_emissions_relevant_ej",
    "remaining potential RES for heat": "remaining_potential_res_for_heat",
    "extraction coal emissions relevant EJ": "extraction_coal_emissions_relevant_ej",
    '"wear RES capacity for heat-nc TW"': "wear_res_capacity_for_heatnc_tw",
    '"FE real generation RES heat-nc EJ"': "fe_real_generation_res_heatnc_ej",
    '"Total FE real supply RES for heat-com EJ"': "total_fe_real_supply_res_for_heatcom_ej",
    '"past RES growth for heat-com 0"': "past_res_growth_for_heatcom_0",
    "Efficiency conversion BioE plants to heat 0": "efficiency_conversion_bioe_plants_to_heat_0",
    '"FED Heat-com after priorities EJ"': "fed_heatcom_after_priorities_ej",
    "FES heat from BioW": "fes_heat_from_biow",
    '"abundance RES heat-nc"': "abundance_res_heatnc",
    "Efficiency geothermal for heat 0": "efficiency_geothermal_for_heat_0",
    '"FES Heat-com nuclear CHP plants EJ"': "fes_heatcom_nuclear_chp_plants_ej",
    '"FE real supply RES for heat-nc tot EJ"': "fe_real_supply_res_for_heatnc_tot_ej",
    '"initial value RES for heat-nc"': "initial_value_res_for_heatnc",
    '"past RES growth for heat-nc"': "past_res_growth_for_heatnc",
    "FED heat fossil fuels CHP plants EJ": "fed_heat_fossil_fuels_chp_plants_ej",
    '"replacement RES for heat-nc"': "replacement_res_for_heatnc",
    "Efficiency solar panels for heat 0": "efficiency_solar_panels_for_heat_0",
    '"abundance RES heat-com"': "abundance_res_heatcom",
    '"abundance RES heat-nc2"': "abundance_res_heatnc2",
    '"potential FES tot RES for heat-nc EJ"': "potential_fes_tot_res_for_heatnc_ej",
    "life time RES for heat 0": "life_time_res_for_heat_0",
    "Efficiency RES heat 0": "efficiency_res_heat_0",
    "replacement RES for heat 0": "replacement_res_for_heat_0",
    "FES RES for heat EJ": "fes_res_for_heat_ej",
    '"FE real supply RES for heat-com tot EJ"': "fe_real_supply_res_for_heatcom_tot_ej",
    "Losses solar for heat 0": "losses_solar_for_heat_0",
    '"RES heat-nc tot overcapacity"': "res_heatnc_tot_overcapacity",
    '"potential FES RES for heat-nc EJ"': "potential_fes_res_for_heatnc_ej",
    '"Historic RES capacity for heat-nc"': "historic_res_capacity_for_heatnc",
    "Historic share of transformation losses vs extraction": "historic_share_of_transformation_losses_vs_extraction",
    "Ratio gain gas vs lose solids in tranf processes": "ratio_gain_gas_vs_lose_solids_in_tranf_processes",
    "FES Elec fossil fuel CHP plants EJ": "fes_elec_fossil_fuel_chp_plants_ej",
    "Total FE Elec demand after priorities TWh": "total_fe_elec_demand_after_priorities_twh",
    "Demand Elec NRE TWh": "demand_elec_nre_twh",
    '"Non-energy use demand by final fuel EJ"': "nonenergy_use_demand_by_final_fuel_ej",
    "share solids for final energy": "share_solids_for_final_energy",
    '"Total real non-energy use consumption EJ"': "total_real_nonenergy_use_consumption_ej",
    "share gases for final energy": "share_gases_for_final_energy",
    '"ratio FED for heat-nc vs FED for heat-com"': "ratio_fed_for_heatnc_vs_fed_for_heatcom",
    "real FE consumption by fuel before heat correction": "real_fe_consumption_by_fuel_before_heat_correction",
    "Required TFED before heat dem corr": "required_tfed_before_heat_dem_corr",
    "cum materials to extract for EV batteries": "cum_materials_to_extract_for_ev_batteries",
    "Total recycled materials for EV batteries Mt": "total_recycled_materials_for_ev_batteries_mt",
    "share RES vs TFEC": "share_res_vs_tfec",
    "cum materials to extract for alt techn from 2015 EU": "cum_materials_to_extract_for_alt_techn_from_2015_eu",
    "Total materials to extract for EV batteries from 2015 Mt": "total_materials_to_extract_for_ev_batteries_from_2015_mt",
    '"materials per new capacity installed - EV batteries"': "materials_per_new_capacity_installed__ev_batteries",
    "Total materials to extract for EV batteries Mt": "total_materials_to_extract_for_ev_batteries_mt",
    "cum materials requirements for EV batteries": "cum_materials_requirements_for_ev_batteries",
    "\"'static' EROIgrid RES elec\"": "static_eroigrid_res_elec",
    "Total materials required for EV batteries": "total_materials_required_for_ev_batteries",
    "TFEC from RES per capita": "tfec_from_res_per_capita",
    "rt storage efficiency EV batteries": "rt_storage_efficiency_ev_batteries",
    "cum materials to extract for EV batteries from 2015": "cum_materials_to_extract_for_ev_batteries_from_2015",
    "initial cumulated material requirements for EV batteries 1995": "initial_cumulated_material_requirements_for_ev_batteries_1995",
    "FE tot generation all RES elec EJ": "fe_tot_generation_all_res_elec_ej",
    '"Carbon footprint tonnesC/person"': "carbon_footprint_tonnescperson",
    "Potential max HDI": "potential_max_hdi",
    "kW per battery EV": "kw_per_battery_ev",
    "PES fossil fuel extraction delayed": "pes_fossil_fuel_extraction_delayed",
    "Historic share of losses vs extraction": "historic_share_of_losses_vs_extraction",
    "Energy distr losses FF EJ": "energy_distr_losses_ff_ej",
    "Historic demand by sector": "historic_demand_by_sector",
    "historic variation demand": "historic_variation_demand",
    "share conv vs total oil extraction EU": "share_conv_vs_total_oil_extraction_eu",
    '"PES nat. gas without GTL"': "pes_nat_gas_without_gtl",
    "CO2 emissions GTL": "co2_emissions_gtl",
    '"Shortage coef without MIN without E-losses"': "shortage_coef_without_min_without_elosses",
    "share conv vs total gas extraction EU": "share_conv_vs_total_gas_extraction_eu",
    "CH4 emissions unconv gas": "ch4_emissions_unconv_gas",
    "share electricity vs TFES": "share_electricity_vs_tfes",
    "CO2 emissions peat": "co2_emissions_peat",
    "Required FED by gas": "required_fed_by_gas",
    "Required TFED": "required_tfed",
    "Total FE Elec consumption EJ": "total_fe_elec_consumption_ej",
    "PED gases": "ped_gases",
    "share solids vs TFES": "share_solids_vs_tfes",
    "share gases vs TFES": "share_gases_vs_tfes",
    "Required FED solids": "required_fed_solids",
    "share heat vs TFES": "share_heat_vs_tfes",
    "PED solids": "ped_solids",
    "scarcity conv oil": "scarcity_conv_oil",
    "share liquids vs TFES": "share_liquids_vs_tfes",
    "Real total output inland transport": "real_total_output_inland_transport",
    "TFES intensity EJ T$": "tfes_intensity_ej_t",
    "TFES intensity EJ T$ delayed 1yr": "tfes_intensity_ej_t_delayed_1yr",
    "TPES intensity EJ T$ delayed 1yr": "tpes_intensity_ej_t_delayed_1yr",
    "Annual TPES intensity change rate": "annual_tpes_intensity_change_rate",
    "Annual TFES intensity change rate": "annual_tfes_intensity_change_rate",
    "Total D jobs RES elec per techn": "total_d_jobs_res_elec_per_techn",
    "Total D jobs RES heat per techn": "total_d_jobs_res_heat_per_techn",
    "Employment factors new RES elec": "employment_factors_new_res_elec",
    "Employment factors new RES heat": "employment_factors_new_res_heat",
    '"Employment factors O&M RES elec"': "employment_factors_om_res_elec",
    '"Employment factors O&M RES heat"': "employment_factors_om_res_heat",
    "D jobs new installed RES elec per techn": "d_jobs_new_installed_res_elec_per_techn",
    '"Jobs O&M RES elec per techn"': "jobs_om_res_elec_per_techn",
    "NX0 vehicles per Xinland T": "nx0_vehicles_per_xinland_t",
    "initial percent T vehicles": "initial_percent_t_vehicles",
    "saving ratios V": "saving_ratios_v",
    "share FEH over PES gases": "share_feh_over_pes_gases",
    "increase scarcity conv gas": "increase_scarcity_conv_gas",
    "scarcity conv gas stock": "scarcity_conv_gas_stock",
    "real growth CTL": "real_growth_ctl",
    "CTL potential production": "ctl_potential_production",
    "abundance liquids GTL": "abundance_liquids_gtl",
    "GTL potential production": "gtl_potential_production",
    "abundance liquids CTL": "abundance_liquids_ctl",
    "wear GTL": "wear_gtl",
    "lifetime GTL": "lifetime_gtl",
    "lifetime CTL": "lifetime_ctl",
    "wear CTL": "wear_ctl",
    "abundance unconv oil stock": "abundance_unconv_oil_stock",
    "increase abundance unconv oil": "increase_abundance_unconv_oil",
    "abundance unconv oil": "abundance_unconv_oil",
    "abundance unconv oil delayed 1yr": "abundance_unconv_oil_delayed_1yr",
    "abundance unconv oil2": "abundance_unconv_oil2",
    "real extraction unconv oil EJ": "real_extraction_unconv_oil_ej",
    "scarcity conv oil stock": "scarcity_conv_oil_stock",
    "Share variable RES elec generation vs total gen": "share_variable_res_elec_generation_vs_total_gen",
    "extra monet invest to cope with variable Elec RES": "extra_monet_invest_to_cope_with_variable_elec_res",
    "increase scarcity conv oil": "increase_scarcity_conv_oil",
    "share extra monet invest to cope with variable Elec RES": "share_extra_monet_invest_to_cope_with_variable_elec_res",
    "initial share variable RES elec gen vs total": "initial_share_variable_res_elec_gen_vs_total",
    "cumulated invest E grid": "cumulated_invest_e_grid",
    "Total monet invest RES for elec Tdolar": "total_monet_invest_res_for_elec_tdolar",
    "Cp exogenous RES elec var reduction": "cp_exogenous_res_elec_var_reduction",
    "Cp exogenous RES elec dispatch reduction": "cp_exogenous_res_elec_dispatch_reduction",
    "increase variable RES share elec vs total generation": "increase_variable_res_share_elec_vs_total_generation",
    '"PES NRE Heat-nc"': "pes_nre_heatnc",
    "share FEH over PES liquids": "share_feh_over_pes_liquids",
    '"FED nat. gas for heat-nc"': "fed_nat_gas_for_heatnc",
    "TPES heat": "tpes_heat",
    '"FED oil for heat-nc"': "fed_oil_for_heatnc",
    "PES NRE heat": "pes_nre_heat",
    '"PES NRE Heat-com"': "pes_nre_heatcom",
    '"FED by fuel for heat-nc"': "fed_by_fuel_for_heatnc",
    '"Share FED heat-com vs total heat"': "share_fed_heatcom_vs_total_heat",
    "Average elec consumption per capita": "average_elec_consumption_per_capita",
    '"FED solid bioE for heat-nc"': "fed_solid_bioe_for_heatnc",
    "Total FED Heat EJ": "total_fed_heat_ej",
    '"Heat-nc distribution losses"': "heatnc_distribution_losses",
    '"Total FED Heat-nc EJ"': "total_fed_heatnc_ej",
    '"Total FED NRE Heat-nc"': "total_fed_nre_heatnc",
    '"PED gas Heat-nc"': "ped_gas_heatnc",
    '"PED coal Heat-nc"': "ped_coal_heatnc",
    '"PED liquids Heat-nc"': "ped_liquids_heatnc",
    "share FEH over FED solid bioE": "share_feh_over_fed_solid_bioe",
    "FES Heat from coal": "fes_heat_from_coal",
    '"FES Heat from nat. gas"': "fes_heat_from_nat_gas",
    "FES Heat from oil": "fes_heat_from_oil",
    "Abundance heat": "abundance_heat",
    "required FED sectors by fuel": "required_fed_sectors_by_fuel",
    "share trad biomass vs solids in households": "share_trad_biomass_vs_solids_in_households",
    '"new RES capacity for heat-com TW"': "new_res_capacity_for_heatcom_tw",
    "share global pop dependent on trad biomass": "share_global_pop_dependent_on_trad_biomass",
    '"Historic RES capacity for heat-com"': "historic_res_capacity_for_heatcom",
    '"share coal dem for Heat-nc"': "share_coal_dem_for_heatnc",
    '"RES heat-com tot overcapacity"': "res_heatcom_tot_overcapacity",
    "share inventories next step": "share_inventories_next_step",
    "Government expenditure share": "government_expenditure_share",
    "Changes in inventories share": "changes_in_inventories_share",
    "share Government expenditure next step": "share_government_expenditure_next_step",
    "Government expenditure and changes in inventories shares": "government_expenditure_and_changes_in_inventories_shares",
    "share Government expenditures and changes in inventories next step": "share_government_expenditures_and_changes_in_inventories_next_step",
    '"include materials for overgrids?"': "include_materials_for_overgrids",
    '"All minerals virgin?"': "all_minerals_virgin",
    "materials for new RES elec per capacity installed": "materials_for_new_res_elec_per_capacity_installed",
    "CEDtot per material RES elec var": "cedtot_per_material_res_elec_var",
    "CEDtot per TW RES elec var": "cedtot_per_tw_res_elec_var",
    "CEDtot per TW per material RES elec var": "cedtot_per_tw_per_material_res_elec_var",
    "Demand by sector FD EU": "demand_by_sector_fd_eu",
    "sum variation": "sum_variation",
    "CEDtot per TW over lifetime RES elec dispatch": "cedtot_per_tw_over_lifetime_res_elec_dispatch",
    "quality of electricity 2015": "quality_of_electricity_2015",
    "share total final energy vs TPES": "share_total_final_energy_vs_tpes",
    '"g=quality of electricity"': "gquality_of_electricity",
    "Cp exogenous RES elec reduction": "cp_exogenous_res_elec_reduction",
    '"RES elec variables?"': "res_elec_variables",
    "aux3": "aux3",
    "FEI RES elec var": "fei_res_elec_var",
    "\"'static' EROI RES elec\"": "static_eroi_res_elec",
    "materials required for new RES elec Mt": "materials_required_for_new_res_elec_mt",
    "FEI over lifetime RES elec var": "fei_over_lifetime_res_elec_var",
    "CED decom RES elec capacity": "ced_decom_res_elec_capacity",
    '"CED O&M per material RES elec var"': "ced_om_per_material_res_elec_var",
    "CEDtot new cap RES elec var": "cedtot_new_cap_res_elec_var",
    '"CEDtot O&M RES elec var"': "cedtot_om_res_elec_var",
    "b lineal regr": "b_lineal_regr",
    "a lineal regr": "a_lineal_regr",
    "ESOI PHS depleted potential": "esoi_phs_depleted_potential",
    "total demand": "total_demand",
    "initial demand by sectot": "initial_demand_by_sectot",
    "demand not covered total FD": "demand_not_covered_total_fd",
    "TPED by fuel": "tped_by_fuel",
    "abundance TPE": "abundance_tpe",
    '"PES RES for heat-com by techn"': "pes_res_for_heatcom_by_techn",
    "P RES for heat": "p_res_for_heat",
    '"FE real generation RES heat-com EJ"': "fe_real_generation_res_heatcom_ej",
    '"potential FES tot RES for heat-com EJ"': "potential_fes_tot_res_for_heatcom_ej",
    "available max FE solid bioE for elec EJ": "available_max_fe_solid_bioe_for_elec_ej",
    "max BioE TWe": "max_bioe_twe",
    '"Potential FES Heat-com nuclear CHP plants EJ"': "potential_fes_heatcom_nuclear_chp_plants_ej",
    "share of heat production in CHP plants vs total nucelar elec generation": "share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation",
    "PES waste for elec plants": "pes_waste_for_elec_plants",
    "Losses CHP biogas": "losses_chp_biogas",
    "Losses CHP waste": "losses_chp_waste",
    "share PES biogas for heat": "share_pes_biogas_for_heat",
    "PE losses RES for elec": "pe_losses_res_for_elec",
    "PES tot waste for elec": "pes_tot_waste_for_elec",
    '"PES tot waste for heat-com"': "pes_tot_waste_for_heatcom",
    '"abundance RES heat-com2"': "abundance_res_heatcom2",
    "max PE potential biogas for heat": "max_pe_potential_biogas_for_heat",
    "share efficiency biogas for elec in CHP plants": "share_efficiency_biogas_for_elec_in_chp_plants",
    "share efficiency waste for elec in CHP plants": "share_efficiency_waste_for_elec_in_chp_plants",
    '"Max potential PE non-electric RES"': "max_potential_pe_nonelectric_res",
    "PES tot biogas for elec": "pes_tot_biogas_for_elec",
    '"PES tot biogas for heat-com"': "pes_tot_biogas_for_heatcom",
    "PE losses NRE elec generation": "pe_losses_nre_elec_generation",
    "Elec gen related losses EJ": "elec_gen_related_losses_ej",
    "PE losses biogas for elec": "pe_losses_biogas_for_elec",
    "PE losses waste for elec": "pe_losses_waste_for_elec",
    "share PES biogas for elec": "share_pes_biogas_for_elec",
    "P hydro growth": "p_hydro_growth",
    "FE real tot generation RES elec TWh": "fe_real_tot_generation_res_elec_twh",
    "P solar PV growth": "p_solar_pv_growth",
    "remaining potential constraint on new RES heat capacity": "remaining_potential_constraint_on_new_res_heat_capacity",
    "Total FE Elec generation TWh EU": "total_fe_elec_generation_twh_eu",
    "FE tot generation all RES elec TWh": "fe_tot_generation_all_res_elec_twh",
    "P oceanic growth": "p_oceanic_growth",
    "PE Elec generation from RES EJ": "pe_elec_generation_from_res_ej",
    "P RES elec growth": "p_res_elec_growth",
    "share RES electricity generation": "share_res_electricity_generation",
    '"P solid bioE-elec growth"': "p_solid_bioeelec_growth",
    "P CSP growth": "p_csp_growth",
    "remaining potential tot RES elec": "remaining_potential_tot_res_elec",
    "P wind offshore growth": "p_wind_offshore_growth",
    "P wind onshore growth": "p_wind_onshore_growth",
    "Elec generation dispatch from RES TWh": "elec_generation_dispatch_from_res_twh",
    "FES elec from RES with priority TWh": "fes_elec_from_res_with_priority_twh",
    "abundance RES elec": "abundance_res_elec",
    "FES elec from BioW": "fes_elec_from_biow",
    "P geot growth": "p_geot_growth",
    "P solid bioE for heat": "p_solid_bioe_for_heat",
    "PE real generation RES elec": "pe_real_generation_res_elec",
    '"FED heat-com by NRE CHP plants EJ"': "fed_heatcom_by_nre_chp_plants_ej",
    '"share oil dem for Heat-com"': "share_oil_dem_for_heatcom",
    "Total FE Heat generation EJ": "total_fe_heat_generation_ej",
    "share coal dem for Elec": "share_coal_dem_for_elec",
    "share oil dem for Elec": "share_oil_dem_for_elec",
    '"share coal dem for Heat-com"': "share_coal_dem_for_heatcom",
    "share RES heat generation": "share_res_heat_generation",
    '"share nat. gas dem for Elec"': "share_nat_gas_dem_for_elec",
    '"share nat. gas dem for Heat-com"': "share_nat_gas_dem_for_heatcom",
    "Year scarcity Heat": "year_scarcity_heat",
    '"FES heat-com from biogas in CHP plants"': "fes_heatcom_from_biogas_in_chp_plants",
    "efficiency biogas for heat plants": "efficiency_biogas_for_heat_plants",
    "FES elec from biogas in CHP plants": "fes_elec_from_biogas_in_chp_plants",
    "FES elec from biogas EJ": "fes_elec_from_biogas_ej",
    '"PES biogas for heat-com plants"': "pes_biogas_for_heatcom_plants",
    "FES elec from biogas in elec plants": "fes_elec_from_biogas_in_elec_plants",
    "efficiency biogas for elec plants": "efficiency_biogas_for_elec_plants",
    '"FES biogas for heat-com plants"': "fes_biogas_for_heatcom_plants",
    "PES biogas for elec plants": "pes_biogas_for_elec_plants",
    "share PES biogas TFC": "share_pes_biogas_tfc",
    "Potential PES biogas for TFC": "potential_pes_biogas_for_tfc",
    "FES elec from biogas TWh": "fes_elec_from_biogas_twh",
    "PES biogas for CHP": "pes_biogas_for_chp",
    '"share PES biogas for heat-com plants"': "share_pes_biogas_for_heatcom_plants",
    "efficiency biogas for elec CHP plants": "efficiency_biogas_for_elec_chp_plants",
    '"FES heat-com from biogas EJ"': "fes_heatcom_from_biogas_ej",
    "efficiency biogas for heat CHP plants": "efficiency_biogas_for_heat_chp_plants",
    "share PES biogas for elec plants": "share_pes_biogas_for_elec_plants",
    "share PES biogas for CHP": "share_pes_biogas_for_chp",
    "demand Elec plants fossil fuels TWh": "demand_elec_plants_fossil_fuels_twh",
    "new PES biogas": "new_pes_biogas",
    "constrain rr improv for alt techn per mineral": "constrain_rr_improv_for_alt_techn_per_mineral",
    "constrain rr improv for Rest per mineral": "constrain_rr_improv_for_rest_per_mineral",
    '"CED O&M over lifetime per material RES elec var"': "ced_om_over_lifetime_per_material_res_elec_var",
    "Energy cons per unit of material cons for RES elec": "energy_cons_per_unit_of_material_cons_for_res_elec",
    "CED new cap per material RES elec var": "ced_new_cap_per_material_res_elec_var",
    "Energy required for material consumption for new RES elec": "energy_required_for_material_consumption_for_new_res_elec",
    '"Energy required for material consumption for O&M RES elec"': "energy_required_for_material_consumption_for_om_res_elec",
    "Total recycled materials for RES elec Mt": "total_recycled_materials_for_res_elec_mt",
    "P common rr minerals variation Rest": "p_common_rr_minerals_variation_rest",
    "cum materials to extract for RES elec from 2015": "cum_materials_to_extract_for_res_elec_from_2015",
    "Total materials to extract for RES elec Mt": "total_materials_to_extract_for_res_elec_mt",
    "cum materials to extract for RES elec": "cum_materials_to_extract_for_res_elec",
    "Total materials to extract for RES elec from 2015 Mt": "total_materials_to_extract_for_res_elec_from_2015_mt",
    "Max recycling rates minerals": "max_recycling_rates_minerals",
    "P common rr minerals variation alt techn": "p_common_rr_minerals_variation_alt_techn",
    "current recycling rates minerals": "current_recycling_rates_minerals",
    "Historic improvement recycling rates minerals": "historic_improvement_recycling_rates_minerals",
    '"Initial energy cons per unit of material cons (recycled)"': "initial_energy_cons_per_unit_of_material_cons_recycled",
    '"materials required for O&M RES elec Mt"': "materials_required_for_om_res_elec_mt",
    "TPES EJ": "tpes_ej",
    '"FES heat-com from waste EJ"': "fes_heatcom_from_waste_ej",
    '"FES waste for heat-com plants"': "fes_waste_for_heatcom_plants",
    "FES elec from waste in CHP plants": "fes_elec_from_waste_in_chp_plants",
    "FES elec from waste in elec plants": "fes_elec_from_waste_in_elec_plants",
    '"FES heat-com from waste in CHP plants"': "fes_heatcom_from_waste_in_chp_plants",
    '"PES waste for heat-com plants"': "pes_waste_for_heatcom_plants",
    '"share PES waste for heat-com plants"': "share_pes_waste_for_heatcom_plants",
    "share PES waste TFC": "share_pes_waste_tfc",
    "share PES waste for CHP": "share_pes_waste_for_chp",
    "share PES waste for elec plants": "share_pes_waste_for_elec_plants",
    "new waste supply EJ": "new_waste_supply_ej",
    "waste change": "waste_change",
    "FES elec from waste EJ": "fes_elec_from_waste_ej",
    "FES elec from waste TWh": "fes_elec_from_waste_twh",
    "efficiency waste for elec plants": "efficiency_waste_for_elec_plants",
    "PES waste EJ": "pes_waste_ej",
    "PES waste for CHP plants": "pes_waste_for_chp_plants",
    "efficiency waste for elec CHP plants": "efficiency_waste_for_elec_chp_plants",
    "initial PES waste": "initial_pes_waste",
    "PES waste for TFC": "pes_waste_for_tfc",
    "efficiency waste for heat CHP plants": "efficiency_waste_for_heat_chp_plants",
    "P waste change": "p_waste_change",
    "efficiency waste for heat plants": "efficiency_waste_for_heat_plants",
    "max PE waste": "max_pe_waste",
    '"PES solids bioE & waste EJ"': "pes_solids_bioe__waste_ej",
    "Past waste growth": "past_waste_growth",
    "Historic PES waste EJ": "historic_pes_waste_ej",
    "gCH4 per MJ coal": "gch4_per_mj_coal",
    "gCH4 per MJ oil": "gch4_per_mj_oil",
    "FE Elec generation from fossil fuels TWh": "fe_elec_generation_from_fossil_fuels_twh",
    "PE demand uranium EU EJ": "pe_demand_uranium_eu_ej",
    "FES Elec fossil fuel CHP plants TWh": "fes_elec_fossil_fuel_chp_plants_twh",
    '"FES heat-com fossil fuels CHP plants EJ"': "fes_heatcom_fossil_fuels_chp_plants_ej",
    "potential generation nuclear elec TWh": "potential_generation_nuclear_elec_twh",
    "threshold remaining potential new capacity": "threshold_remaining_potential_new_capacity",
    "installed capacity RES elec TW": "installed_capacity_res_elec_tw",
    '"total time plan+constr RES elec"': "total_time_planconstr_res_elec",
    "Historic new required capacity RES elec": "historic_new_required_capacity_res_elec",
    "new required capacity RES elec": "new_required_capacity_res_elec",
    "table hist capacity RES elec": "table_hist_capacity_res_elec",
    "initial capacity in construction RES elec": "initial_capacity_in_construction_res_elec",
    "remaining potential constraint on new RES elec capacity": "remaining_potential_constraint_on_new_res_elec_capacity",
    "required capacity RES elec TW": "required_capacity_res_elec_tw",
    "RES elec planned capacity TW": "res_elec_planned_capacity_tw",
    '"Initial energy cons per unit of material cons (recycled) - data"': "initial_energy_cons_per_unit_of_material_cons_recycled__data",
    "Cp PHS": "cp_phs",
    "max potential PHS TWe": "max_potential_phs_twe",
    "max capacity potential PHS": "max_capacity_potential_phs",
    '"materials per new RES elec capacity installed - HVDCs"': "materials_per_new_res_elec_capacity_installed__hvdcs",
    '"materials per new RES elec capacity installed - material overgrid high power"': "materials_per_new_res_elec_capacity_installed__material_overgrid_high_power",
    "real growth GTL": "real_growth_gtl",
    "scarcity conv gas delayed 1yr": "scarcity_conv_gas_delayed_1yr",
    "scarcity conv oil delayed 1yr": "scarcity_conv_oil_delayed_1yr",
    "PES nat gas EU": "pes_nat_gas_eu",
    "exponent availability conv oil": "exponent_availability_conv_oil",
    '"abundance total nat. gas EU"': "abundance_total_nat_gas_eu",
    "exponent availability conv gas": "exponent_availability_conv_gas",
    "scarcity conv gas": "scarcity_conv_gas",
    '"Year scarcity total nat. gas"': "year_scarcity_total_nat_gas",
    "share unconv gas vs tot agg in 2050": "share_unconv_gas_vs_tot_agg_in_2050",
    "share unconv gas vs tot agg in 2050 Lahèrrere2010": "share_unconv_gas_vs_tot_agg_in_2050_lahèrrere2010",
    "share unconv gas vs tot agg in 2050 Mohr12 BG": "share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg",
    "share unconv gas vs tot agg in 2050 User defined": "share_unconv_gas_vs_tot_agg_in_2050_user_defined",
    "cumulated tot agg gas extraction to 1995": "cumulated_tot_agg_gas_extraction_to_1995",
    "share conv gas vs tot agg": "share_conv_gas_vs_tot_agg",
    "share RURR tot agg gas to leave underground": "share_rurr_tot_agg_gas_to_leave_underground",
    "share unconv gas vs tot agg": "share_unconv_gas_vs_tot_agg",
    "Flow tot agg gas left in ground": "flow_tot_agg_gas_left_in_ground",
    "Tot RURR tot agg gas": "tot_rurr_tot_agg_gas",
    "URR total agg gas unlimited": "urr_total_agg_gas_unlimited",
    "Start policy leave in ground tot agg gas": "start_policy_leave_in_ground_tot_agg_gas",
    '"extraction unconv gas - tot agg"': "extraction_unconv_gas__tot_agg",
    "Total agg gas left in ground": "total_agg_gas_left_in_ground",
    "evolution share unconv gas vs tot agg": "evolution_share_unconv_gas_vs_tot_agg",
    "real extraction conv gas EJ": "real_extraction_conv_gas_ej",
    "URR tot agg gas": "urr_tot_agg_gas",
    "cumulated tot agg gas extraction": "cumulated_tot_agg_gas_extraction",
    '"extraction conv gas - tot agg"': "extraction_conv_gas__tot_agg",
    "real extraction unconv gas EJ": "real_extraction_unconv_gas_ej",
    "max extraction tot agg gas EJ": "max_extraction_tot_agg_gas_ej",
    '"real extraction conv oil Mb/d"': "real_extraction_conv_oil_mbd",
    "share unconv oil vs tot agg": "share_unconv_oil_vs_tot_agg",
    "evolution share unconv oil vs tot agg": "evolution_share_unconv_oil_vs_tot_agg",
    "share unconv oil vs tot agg in 2050": "share_unconv_oil_vs_tot_agg_in_2050",
    "share unconv oil vs tot agg in 2050 Lahèrrere2006": "share_unconv_oil_vs_tot_agg_in_2050_lahèrrere2006",
    "share unconv oil vs tot agg in 2050 User defined": "share_unconv_oil_vs_tot_agg_in_2050_user_defined",
    '"extraction conv oil - tot agg"': "extraction_conv_oil__tot_agg",
    '"extraction unconv oil - tot agg"': "extraction_unconv_oil__tot_agg",
    "share conv oil vs tot agg": "share_conv_oil_vs_tot_agg",
    "PES total oil EJ EU": "pes_total_oil_ej_eu",
    "real extraction conv oil EJ": "real_extraction_conv_oil_ej",
    "gCH4 per MJ conv gas": "gch4_per_mj_conv_gas",
    "Total agg oil left in ground": "total_agg_oil_left_in_ground",
    "cumulated tot agg oil extraction": "cumulated_tot_agg_oil_extraction",
    "cumulated tot agg extraction to 1995": "cumulated_tot_agg_extraction_to_1995",
    "URR tot agg oil unlimited": "urr_tot_agg_oil_unlimited",
    "Tot RURR tot agg oil": "tot_rurr_tot_agg_oil",
    "Start policy leave in ground tot agg oil": "start_policy_leave_in_ground_tot_agg_oil",
    "Flow tot agg oil left in ground": "flow_tot_agg_oil_left_in_ground",
    "g per Mt": "g_per_mt",
    "share RURR tot agg oil to leave underground": "share_rurr_tot_agg_oil_to_leave_underground",
    "gCH4 per MJ unconv gas": "gch4_per_mj_unconv_gas",
    "Tot RURR unconv gas": "tot_rurr_unconv_gas",
    "Start policy leave in ground coal": "start_policy_leave_in_ground_coal",
    "Total unconv gas left in ground": "total_unconv_gas_left_in_ground",
    "Flow coal left in ground": "flow_coal_left_in_ground",
    "Flow conv gas left in ground": "flow_conv_gas_left_in_ground",
    "Flow conv oil left in ground": "flow_conv_oil_left_in_ground",
    "Flow unconv oil left in ground": "flow_unconv_oil_left_in_ground",
    "share RURR unconv gas to leave underground": "share_rurr_unconv_gas_to_leave_underground",
    "share RURR unconv oil to leave underground": "share_rurr_unconv_oil_to_leave_underground",
    "extraction unconv gas EJ": "extraction_unconv_gas_ej",
    "Tot RURR coal": "tot_rurr_coal",
    "Tot RURR conv gas": "tot_rurr_conv_gas",
    "Tot RURR conv oil": "tot_rurr_conv_oil",
    "share RURR conv oil to leave underground": "share_rurr_conv_oil_to_leave_underground",
    "Tot RURR unconv oil": "tot_rurr_unconv_oil",
    "Total unconv oil left in ground": "total_unconv_oil_left_in_ground",
    "Total coal left in ground": "total_coal_left_in_ground",
    "Total conv gas left in ground": "total_conv_gas_left_in_ground",
    "Total conv oil left in ground": "total_conv_oil_left_in_ground",
    "RURR coal": "rurr_coal",
    "max extraction conv oil EJ": "max_extraction_conv_oil_ej",
    "Start policy leave in ground unconv gas": "start_policy_leave_in_ground_unconv_gas",
    "Flow unconv gas left in ground": "flow_unconv_gas_left_in_ground",
    "Start policy leave in ground unconv oil": "start_policy_leave_in_ground_unconv_oil",
    "Start policy leave in ground conv oil": "start_policy_leave_in_ground_conv_oil",
    "share RURR coal to leave underground": "share_rurr_coal_to_leave_underground",
    '"PES oil Mb/d"': "pes_oil_mbd",
    "Losses in charcoal plants EJ": "losses_in_charcoal_plants_ej",
    "share RURR conv gas to leave underground": "share_rurr_conv_gas_to_leave_underground",
    "Start policy leave in ground conv gas": "start_policy_leave_in_ground_conv_gas",
    "Demand conv gas": "demand_conv_gas",
    '"PED nat. gas without GTL"': "ped_nat_gas_without_gtl",
    "abundance solids": "abundance_solids",
    "FE demand coal Elec plants TWh": "fe_demand_coal_elec_plants_twh",
    "FE demand gas Elec plants TWh": "fe_demand_gas_elec_plants_twh",
    "share coal for Elec": "share_coal_for_elec",
    "share CHP plants oil": "share_chp_plants_oil",
    "historic share CHP plants gas": "historic_share_chp_plants_gas",
    "share CHP plants coal": "share_chp_plants_coal",
    "Historic share liquids for heat plants": "historic_share_liquids_for_heat_plants",
    '"share coal(coal+gas) for heat plants"': "share_coalcoalgas_for_heat_plants",
    "historic share CHP plants oil": "historic_share_chp_plants_oil",
    "output elec over lifetime RES elec for allocation2": "output_elec_over_lifetime_res_elec_for_allocation2",
    "demand storage capacity": "demand_storage_capacity",
    '"share capacity storage/RES elec var"': "share_capacity_storageres_elec_var",
    '"static/dynamic quality of electricity?"': "staticdynamic_quality_of_electricity",
    "\"'static' EROIgrid tot-effective for allocation RES elec\"": "static_eroigrid_toteffective_for_allocation_res_elec",
    '"ratio EROIgrid vs EROI (static)"': "ratio_eroigrid_vs_eroi_static",
    '"ratio EROI per techn vs EROItot (static)"': "ratio_eroi_per_techn_vs_eroitot_static",
    "Total installed capacity RES elec var": "total_installed_capacity_res_elec_var",
    '"share RES elec generation curtailed&stored"': "share_res_elec_generation_curtailedstored",
    "rt storage efficiency PHS": "rt_storage_efficiency_phs",
    "Cp baseload reduction": "cp_baseload_reduction",
    '"ratio = 1"': "ratio__1",
    "FEI over lifetime RES elec": "fei_over_lifetime_res_elec",
    "real Cp RES elec": "real_cp_res_elec",
    "FEI over lifetime RES elec for allocation": "fei_over_lifetime_res_elec_for_allocation",
    "remaining potential RES elec after intermitt": "remaining_potential_res_elec_after_intermitt",
    "remaining potential RES elec switch": "remaining_potential_res_elec_switch",
    "output elec over lifetime RES elec for allocation": "output_elec_over_lifetime_res_elec_for_allocation",
    "potential RES elec after intermitt TWh": "potential_res_elec_after_intermitt_twh",
    "replacement rate RES elec": "replacement_rate_res_elec",
    "\"'static' EROItot RES elec\"": "static_eroitot_res_elec",
    "\"'static' EROItot-effective for allocation RES elec\"": "static_eroitoteffective_for_allocation_res_elec",
    "new capacity installed onshore wind TW": "new_capacity_installed_onshore_wind_tw",
    '"CED O&M over lifetime per water RES elec var"': "ced_om_over_lifetime_per_water_res_elec_var",
    '"self-electricity consumption RES elec"': "selfelectricity_consumption_res_elec",
    "share energy requirements for decom RES elec": "share_energy_requirements_for_decom_res_elec",
    '"CED O&M over lifetime RES elec var"': "ced_om_over_lifetime_res_elec_var",
    "Grid correction factor RES elec": "grid_correction_factor_res_elec",
    '"materials for O&M per capacity installed - CSP"': "materials_for_om_per_capacity_installed__csp",
    '"Total water for O&M required by RES elec per techn"': "total_water_for_om_required_by_res_elec_per_techn",
    '"Water for O&M required for RES elec"': "water_for_om_required_for_res_elec",
    '"materials for O&M per capacity installed RES elec"': "materials_for_om_per_capacity_installed_res_elec",
    '"Total energy requirements O&M for water consumption RES elec"': "total_energy_requirements_om_for_water_consumption_res_elec",
    '"Energy requirements for O&M for water consumption RES elec"': "energy_requirements_for_om_for_water_consumption_res_elec",
    '"water for O&M - RES elec"': "water_for_om__res_elec",
    "Energy requirements per unit of water consumption": "energy_requirements_per_unit_of_water_consumption",
    '"unlimited NRE?"': "unlimited_nre",
    "extraction uranium EJ EU": "extraction_uranium_ej_eu",
    "URR uranium": "urr_uranium",
    "URR conv oil": "urr_conv_oil",
    "Historic biogas PES": "historic_biogas_pes",
    "past biogas growth": "past_biogas_growth",
    "PES Biogas EJ": "pes_biogas_ej",
    "P biogas": "p_biogas",
    "max PE biogas EJ": "max_pe_biogas_ej",
    "Historic PES peat EJ": "historic_pes_peat_ej",
    "PES peat EJ": "pes_peat_ej",
    "FEI over lifetime RES elec dispatch": "fei_over_lifetime_res_elec_dispatch",
    "activate EROI allocation rule": "activate_eroi_allocation_rule",
    "EROI allocation rule per RES elec": "eroi_allocation_rule_per_res_elec",
    "\"'dynamic' EROI RES elec var\"": "dynamic_eroi_res_elec_var",
    '"EROI-ini RES elec dispatch"': "eroiini_res_elec_dispatch",
    "RES elec capacity under construction TW": "res_elec_capacity_under_construction_tw",
    "real generation solar PV EJ": "real_generation_solar_pv_ej",
    "materials required for new CSP Mt": "materials_required_for_new_csp_mt",
    "materials required for new PV Mt": "materials_required_for_new_pv_mt",
    "materials required for new wind offshore Mt": "materials_required_for_new_wind_offshore_mt",
    "materials required for new wind onshore Mt": "materials_required_for_new_wind_onshore_mt",
    '"materials required for O&M CSP Mt"': "materials_required_for_om_csp_mt",
    '"materials required for O&M PV Mt"': "materials_required_for_om_pv_mt",
    '"materials required for O&M wind offshore Mt"': "materials_required_for_om_wind_offshore_mt",
    '"materials required for O&M wind onshore Mt"': "materials_required_for_om_wind_onshore_mt",
    "real generation RES elec EJ": "real_generation_res_elec_ej",
    "CEDtot solar PV": "cedtot_solar_pv",
    "Total materials required for new RES elec Mt": "total_materials_required_for_new_res_elec_mt",
    '"Total materials required for O&M RES elec Mt"': "total_materials_required_for_om_res_elec_mt",
    '"EROI=1"': "eroi1",
    "Electrical distribution losses TWh": "electrical_distribution_losses_twh",
    '"Max share transm&distr elec losses"': "max_share_transmdistr_elec_losses",
    '"Heat-com distribution losses"': "heatcom_distribution_losses",
    "potential generation RES elec TWh": "potential_generation_res_elec_twh",
    "output elec over lifetime RES elec": "output_elec_over_lifetime_res_elec",
    '"variation share transm&distr elec losses"': "variation_share_transmdistr_elec_losses",
    '"remaining share transm&distr elec losses"': "remaining_share_transmdistr_elec_losses",
    '"share transm&distr elec losses"': "share_transmdistr_elec_losses",
    "Total gen losses demand for Elec plants EJ": "total_gen_losses_demand_for_elec_plants_ej",
    "PE losses BioE for Elec EJ": "pe_losses_bioe_for_elec_ej",
    '"water for O&M - wind offshore"': "water_for_om__wind_offshore",
    "Total materials required for RES elec Mt": "total_materials_required_for_res_elec_mt",
    "share energy for material consumption for alt techn vs TFEC": "share_energy_for_material_consumption_for_alt_techn_vs_tfec",
    '"water for O&M - PV"': "water_for_om__pv",
    '"water for O&M - wind onshore"': "water_for_om__wind_onshore",
    '"materials for O&M per capacity installed - wind offshore"': "materials_for_om_per_capacity_installed__wind_offshore",
    '"materials for O&M per capacity installed - wind onshore"': "materials_for_om_per_capacity_installed__wind_onshore",
    '"materials for O&M per capacity installed - PV"': "materials_for_om_per_capacity_installed__pv",
    '"water for O&M - CSP"': "water_for_om__csp",
    '"materials per capacity installed - PV 0"': "materials_per_capacity_installed__pv_0",
    "cum materials requirements for RES elec": "cum_materials_requirements_for_res_elec",
    "MJ per EJ": "mj_per_ej",
    '"Initial energy cons per unit of material cons (virgin)"': "initial_energy_cons_per_unit_of_material_cons_virgin",
    '"materials per new capacity installed - CSP"': "materials_per_new_capacity_installed__csp",
    '"materials per new capacity installed - wind offshore"': "materials_per_new_capacity_installed__wind_offshore",
    '"materials per new capacity installed - wind onshore"': "materials_per_new_capacity_installed__wind_onshore",
    "initial cumulated material requirements for RES elec 1995": "initial_cumulated_material_requirements_for_res_elec_1995",
    '"materials per new capacity installed - PV"': "materials_per_new_capacity_installed__pv",
    "kg per Mt": "kg_per_mt",
    "M per T": "m_per_t",
    "Elec generation variable from RES TWh": "elec_generation_variable_from_res_twh",
    "Total gen losses demand for Heat plants EJ": "total_gen_losses_demand_for_heat_plants_ej",
    "Total gen losses demand for CHP plants EJ": "total_gen_losses_demand_for_chp_plants_ej",
    "new required capacity nuclear": "new_required_capacity_nuclear",
    '"replacement RES for heat-com"': "replacement_res_for_heatcom",
    "Losses solar for heat": "losses_solar_for_heat",
    '"Cp-ini RES for heat"': "cpini_res_for_heat",
    "Efficiency geothermal for heat": "efficiency_geothermal_for_heat",
    "f1 solar panels for heat": "f1_solar_panels_for_heat",
    "P geothermal for heat": "p_geothermal_for_heat",
    '"past RES growth for heat-com"': "past_res_growth_for_heatcom",
    '"installed capacity RES heat-com TW"': "installed_capacity_res_heatcom_tw",
    '"initial value RES for heat-com"': "initial_value_res_for_heatcom",
    "P solar for heat": "p_solar_for_heat",
    "life time RES for heat": "life_time_res_for_heat",
    '"wear RES capacity for heat-com TW"': "wear_res_capacity_for_heatcom_tw",
    "Potential FE gen Elec fossil fuel CHP plants EJ": "potential_fe_gen_elec_fossil_fuel_chp_plants_ej",
    "efficiency Heat oil CHP plants": "efficiency_heat_oil_chp_plants",
    "FED heat liquids CHP plants EJ": "fed_heat_liquids_chp_plants_ej",
    "Potential FE gen Elec liquids CHP plants EJ": "potential_fe_gen_elec_liquids_chp_plants_ej",
    "efficiency Elec coal CHP plants": "efficiency_elec_coal_chp_plants",
    "efficiency Elec gas CHP plants": "efficiency_elec_gas_chp_plants",
    "efficiency Elec oil CHP plants": "efficiency_elec_oil_chp_plants",
    "Potential FE gen Elec coal CHP plants EJ": "potential_fe_gen_elec_coal_chp_plants_ej",
    "Potential FE gen Elec gas CHP plants EJ": "potential_fe_gen_elec_gas_chp_plants_ej",
    "FED heat gas CHP plants EJ": "fed_heat_gas_chp_plants_ej",
    "efficiency Heat gas CHP plants": "efficiency_heat_gas_chp_plants",
    "PED oil for CHP plants EJ": "ped_oil_for_chp_plants_ej",
    '"Share heat-com CHP plants NRE vs NRE tot heat-com generation"': "share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation",
    "efficiency Heat coal CHP plants": "efficiency_heat_coal_chp_plants",
    "FED heat coal CHP plants EJ": "fed_heat_coal_chp_plants_ej",
    "PED gas for CHP plants EJ": "ped_gas_for_chp_plants_ej",
    "PED coal for CHP plants EJ": "ped_coal_for_chp_plants_ej",
    "PE CSP for Elec generation EJ": "pe_csp_for_elec_generation_ej",
    "Invest RES for Elec": "invest_res_for_elec",
    "FE Elec generation from CSP TWh": "fe_elec_generation_from_csp_twh",
    "invest CSP Tdolar": "invest_csp_tdolar",
    "Cp limit nuclear": "cp_limit_nuclear",
    "invest nuclear Tdolar": "invest_nuclear_tdolar",
    "Cp nuclear": "cp_nuclear",
    "installed capacity nuclear TW": "installed_capacity_nuclear_tw",
    '"nuclear capacity phase-out"': "nuclear_capacity_phaseout",
    "min Cp nuclear": "min_cp_nuclear",
    "replacement nuclear capacity": "replacement_nuclear_capacity",
    "min Cp baseload RES": "min_cp_baseload_res",
    "nuclear overcapacity": "nuclear_overcapacity",
    '"P nuclear scen3-4"': "p_nuclear_scen34",
    '"start year nuclear growth scen3-4"': "start_year_nuclear_growth_scen34",
    "P nuclear elec gen": "p_nuclear_elec_gen",
    "required capacity nuclear TW": "required_capacity_nuclear_tw",
    "time planification nuclear": "time_planification_nuclear",
    "time construction nuclear": "time_construction_nuclear",
    "initial capacity installed nuclear": "initial_capacity_installed_nuclear",
    "Nuclear capacity under construction": "nuclear_capacity_under_construction",
    "new nuclear capacity under planning": "new_nuclear_capacity_under_planning",
    "selection of nuclear scenario": "selection_of_nuclear_scenario",
    "initial gen nuclear": "initial_gen_nuclear",
    "initial capacity in construction nuclear": "initial_capacity_in_construction_nuclear",
    "initial required capacity nuclear": "initial_required_capacity_nuclear",
    "Planned nuclear capacity TW": "planned_nuclear_capacity_tw",
    "wear nuclear": "wear_nuclear",
    "TPES intensity EJ T$": "tpes_intensity_ej_t",
    "real PED intensity of Electricity": "real_ped_intensity_of_electricity",
    "Annual GDP growth rate EU": "annual_gdp_growth_rate_eu",
    "GDP delayed 1yr": "gdp_delayed_1yr",
    "share tot monet invest Elec RES vs GDP": "share_tot_monet_invest_elec_res_vs_gdp",
    "GDPpc": "gdppc",
    '"unlimited coal?"': "unlimited_coal",
    "Real TFEC": "real_tfec",
    '"unlimited uranium?"': "unlimited_uranium",
    "URR coal unlimited": "urr_coal_unlimited",
    "URR uranium unlimited": "urr_uranium_unlimited",
    "URR conv gas unlimited": "urr_conv_gas_unlimited",
    '"unlimited gas?"': "unlimited_gas",
    '"unlimited oil?"': "unlimited_oil",
    "URR conv oil unlimited": "urr_conv_oil_unlimited",
    '"activate ELF by scen?"': "activate_elf_by_scen",
    '"Total demand liquids mb/d"': "total_demand_liquids_mbd",
    "PED coal without CTL": "ped_coal_without_ctl",
    "Grid reinforcement costs Tdollar": "grid_reinforcement_costs_tdollar",
    '"Historic non-energy use"': "historic_nonenergy_use",
    '"initial non-energy use"': "initial_nonenergy_use",
    "Real total output": "real_total_output",
    "PE onshore wind for Elec generation EJ": "pe_onshore_wind_for_elec_generation_ej",
    "FE Elec generation from solar PV TWh": "fe_elec_generation_from_solar_pv_twh",
    "PE hydro for Elec generation EJ": "pe_hydro_for_elec_generation_ej",
    "invest bioW Tdolar": "invest_biow_tdolar",
    "FE Elec generation from hydro TWh": "fe_elec_generation_from_hydro_twh",
    '"invest geot-elec Tdolar"': "invest_geotelec_tdolar",
    "invest hydro Tdolar": "invest_hydro_tdolar",
    "FE Elec generation from onshore wind TWh": "fe_elec_generation_from_onshore_wind_twh",
    "invest oceanic Tdolar": "invest_oceanic_tdolar",
    "invest onshore wind Tdolar": "invest_onshore_wind_tdolar",
    "invest offshore wind Tdolar": "invest_offshore_wind_tdolar",
    '"FE Elec generation from geot-elec TWh"': "fe_elec_generation_from_geotelec_twh",
    '"PE geot-elec for Elec generation EJ"': "pe_geotelec_for_elec_generation_ej",
    "PE solar PV for Elec generation EJ": "pe_solar_pv_for_elec_generation_ej",
    "FE Elec generation from bioE TWh": "fe_elec_generation_from_bioe_twh",
    "PE oceanic for Elec generation EJ": "pe_oceanic_for_elec_generation_ej",
    "PE bioE for Elec generation EJ": "pe_bioe_for_elec_generation_ej",
    "FE Elec generation from offshore wind TWh": "fe_elec_generation_from_offshore_wind_twh",
    "FE Elec generation from oceanic TWh": "fe_elec_generation_from_oceanic_twh",
    "PE offshore wind for Elec generation EJ": "pe_offshore_wind_for_elec_generation_ej",
    "invest solar Tdolar": "invest_solar_tdolar",
    "initial value land compet biofuels 2gen Mha": "initial_value_land_compet_biofuels_2gen_mha",
    "initial value land compet biofuels 2gen ktoe": "initial_value_land_compet_biofuels_2gen_ktoe",
    "efficiency liquids for heat plants": "efficiency_liquids_for_heat_plants",
    '"share gas/(coal+gas) for heat plants"': "share_gascoalgas_for_heat_plants",
    "Share heat distribution losses": "share_heat_distribution_losses",
    "efficiency coal for heat plants": "efficiency_coal_for_heat_plants",
    "efficiency gases for heat plants": "efficiency_gases_for_heat_plants",
    "potential tot RES elec after intermitt": "potential_tot_res_elec_after_intermitt",
    "invest RES elec Tdolar": "invest_res_elec_tdolar",
    "PE BioW for Elec generation Mtoe": "pe_biow_for_elec_generation_mtoe",
    "remaining potential tot RES elec after intermitt": "remaining_potential_tot_res_elec_after_intermitt",
    "invest cost RES elec": "invest_cost_res_elec",
    "Time 95pc TS potential RES elec": "time_95pc_ts_potential_res_elec",
    '"max geot-elec TWe"': "max_geotelec_twe",
    '"max PE geot-elec TWth"': "max_pe_geotelec_twth",
    "Efficiency conversion geot PE to Elec": "efficiency_conversion_geot_pe_to_elec",
    "Geot PE potential for heat EJ": "geot_pe_potential_for_heat_ej",
    "initial instal cap RES elec": "initial_instal_cap_res_elec",
    "abundance RES elec2": "abundance_res_elec2",
    "potential tot generation RES elec TWh": "potential_tot_generation_res_elec_twh",
    "RES elec tot overcapacity": "res_elec_tot_overcapacity",
    "wear RES elec": "wear_res_elec",
    '"Cp-ini RES elec"': "cpini_res_elec",
    "G per T": "g_per_t",
    "time construction RES elec": "time_construction_res_elec",
    "time planification RES elec": "time_planification_res_elec",
    "initial required capacity RES elec": "initial_required_capacity_res_elec",
    "new RES elec capacity under planning": "new_res_elec_capacity_under_planning",
    "lifetime RES elec": "lifetime_res_elec",
    "past RES elec capacity growth": "past_res_elec_capacity_growth",
    "Afforestation program 2020 GtCO2": "afforestation_program_2020_gtco2",
    "Mt per Gt": "mt_per_gt",
    "GTL efficiency": "gtl_efficiency",
    "CTL efficiency": "ctl_efficiency",
    '"CTL+GTL Gb"': "ctlgtl_gb",
    '"Mb/d per EJ/year"': "mbd_per_ejyear",
    "Hist growth CTL": "hist_growth_ctl",
    "Gboe per EJ": "gboe_per_ej",
    "table max extraction uranium user defined": "table_max_extraction_uranium_user_defined",
    '"User-defined extraction growth unconv gas"': "userdefined_extraction_growth_unconv_gas",
    '"User-defined extraction growth unconv oil"': "userdefined_extraction_growth_unconv_oil",
    "Hist growth GTL": "hist_growth_gtl",
    "URR uranium User defined": "urr_uranium_user_defined",
    "replacement rate nuclear": "replacement_rate_nuclear",
    "demand gas for oil refinery gains": "demand_gas_for_oil_refinery_gains",
    "share RES vs TPES": "share_res_vs_tpes",
    "TPES Mtoe": "tpes_mtoe",
    "FE Elec generation from NRE TWh": "fe_elec_generation_from_nre_twh",
    "PEpc consumption people depending on trad biomass": "pepc_consumption_people_depending_on_trad_biomass",
    "share gas for oil refinery gains": "share_gas_for_oil_refinery_gains",
    "People relying trad biomass ref": "people_relying_trad_biomass_ref",
    "PE consumption trad biomass ref": "pe_consumption_trad_biomass_ref",
    "TPEFpc threshold high development": "tpefpc_threshold_high_development",
    "TPEDpc acceptable standard living": "tpedpc_acceptable_standard_living",
    "Pop not dependent on trad biomass": "pop_not_dependent_on_trad_biomass",
    '"Carbon footprint tCO2/person"': "carbon_footprint_tco2person",
    '"Average TPESpc (without trad biomass)"': "average_tpespc_without_trad_biomass",
    '"TPES (without trad biomass)"': "tpes_without_trad_biomass",
    '"Max NPP potential BioE residues for non-biofuels"': "max_npp_potential_bioe_residues_for_nonbiofuels",
    "Max NPP potential BioE residues for cellulosic biofuels": "max_npp_potential_bioe_residues_for_cellulosic_biofuels",
    "Total cumulative emissions GtCO2": "total_cumulative_emissions_gtco2",
    "GtCO2 historic emissions RCPs": "gtco2_historic_emissions_rcps",
    "Carbon emissions GtC": "carbon_emissions_gtc",
    "Historic unconv oil": "historic_unconv_oil",
    "gCO2 per MJ unconv gas": "gco2_per_mj_unconv_gas",
    "gCO2 per MJ unconv oil": "gco2_per_mj_unconv_oil",
    "gCO2 per MJ conv gas": "gco2_per_mj_conv_gas",
    "gCO2 per MJ CTL": "gco2_per_mj_ctl",
    "gCO2 per MJ GTL": "gco2_per_mj_gtl",
    "Historic unconv gas": "historic_unconv_gas",
    "gCO2 per MJ coal": "gco2_per_mj_coal",
    "gCO2 per MJ conv oil": "gco2_per_mj_conv_oil",
    "gCO2 per MJ shale oil": "gco2_per_mj_shale_oil",
    "dollars to Tdollars": "dollars_to_tdollars",
    "variation historic pop": "variation_historic_pop",
    "Historic pop": "historic_pop",
    "land compet 2gen vs total land compet": "land_compet_2gen_vs_total_land_compet",
    "GJ per EJ": "gj_per_ej",
    "Average TPES per capita": "average_tpes_per_capita",
    "Geot PE potential for heat TWth": "geot_pe_potential_for_heat_twth",
    "share RES for Elec vs TPE RES": "share_res_for_elec_vs_tpe_res",
    "\"TPES de Castro PhD - Scen 'madcoal' EJ\"": "tpes_de_castro_phd__scen_madcoal_ej",
    "extraction coal Mtoe": "extraction_coal_mtoe",
    "max extraction coal Mtoe": "max_extraction_coal_mtoe",
    "TPE from RES EJ": "tpe_from_res_ej",
    "TPE from RES Mtoe": "tpe_from_res_mtoe",
    '"TPES de Castro PhD - Scen II EJ"': "tpes_de_castro_phd__scen_ii_ej",
    "Electrical distribution losses EJ": "electrical_distribution_losses_ej",
    "Efficiency conversion BioE plants to heat": "efficiency_conversion_bioe_plants_to_heat",
    "Efficiency improvement biofuels 3gen": "efficiency_improvement_biofuels_3gen",
    "Potential PEavail biofuels 2gen land compet EJ": "potential_peavail_biofuels_2gen_land_compet_ej",
    "Annual additional historic land use biofuels 2gen": "annual_additional_historic_land_use_biofuels_2gen",
    "Max NPP potential bioE residues": "max_npp_potential_bioe_residues",
    "Grid reinforcement costs": "grid_reinforcement_costs",
    "Balancing costs": "balancing_costs",
    "Historic land compet available for biofuels 2gen": "historic_land_compet_available_for_biofuels_2gen",
    "Land productivity biofuels 2gen EJ MHa": "land_productivity_biofuels_2gen_ej_mha",
    "Max PEavail potential biofuels land compet": "max_peavail_potential_biofuels_land_compet",
    "Balancing costs ref": "balancing_costs_ref",
    "efficiency conversion bioE to Elec": "efficiency_conversion_bioe_to_elec",
    "Potential PEavail biofuels prod 3gen EJ": "potential_peavail_biofuels_prod_3gen_ej",
    "Max PEavail potential bioE residues for cellulosic biofuels": "max_peavail_potential_bioe_residues_for_cellulosic_biofuels",
    "P biofuels 3gen land compet": "p_biofuels_3gen_land_compet",
    '"constrain gas exogenous growth? delayed 1yr"': "constrain_gas_exogenous_growth_delayed_1yr",
    '"constrain gas exogenous growth?"': "constrain_gas_exogenous_growth",
    '"constrain liquids exogenous growth? delayed 1yr"': "constrain_liquids_exogenous_growth_delayed_1yr",
    "check liquids delayed 1yr": "check_liquids_delayed_1yr",
    "check gas delayed 1yr": "check_gas_delayed_1yr",
    '"constrain liquids exogenous growth?"': "constrain_liquids_exogenous_growth",
    "Share variable RES elec vs total generation delayed 1yr": "share_variable_res_elec_vs_total_generation_delayed_1yr",
    '"overcapacity vs. intermittent RES penetration 0"': "overcapacity_vs_intermittent_res_penetration_0",
    "Total electrical losses EJ": "total_electrical_losses_ej",
    "Gen losses vs PE for elec": "gen_losses_vs_pe_for_elec",
    "initial GTL production": "initial_gtl_production",
    "variation CTL": "variation_ctl",
    "variation GTL": "variation_gtl",
    "Historic GTL production": "historic_gtl_production",
    "initial CTL production": "initial_ctl_production",
    "Historic CTL production": "historic_ctl_production",
    "improvement efficiency gas for electricity": "improvement_efficiency_gas_for_electricity",
    "PE demand gas Elec plants EJ": "pe_demand_gas_elec_plants_ej",
    "PE demand coal Elec plants EJ": "pe_demand_coal_elec_plants_ej",
    "Max efficiency gas power plants": "max_efficiency_gas_power_plants",
    "Total PE for electricity consumption EJ": "total_pe_for_electricity_consumption_ej",
    "initial efficiency gas for electricity": "initial_efficiency_gas_for_electricity",
    "remaining efficiency improv gas for electricity": "remaining_efficiency_improv_gas_for_electricity",
    "Efficiency improv gas for electricity": "efficiency_improv_gas_for_electricity",
    "efficiency gas for electricity": "efficiency_gas_for_electricity",
    "percent to share": "percent_to_share",
    '"Additional PE production of CTL+GTL for liquids"': "additional_pe_production_of_ctlgtl_for_liquids",
    "Annual additional historic product biofuels 2gen": "annual_additional_historic_product_biofuels_2gen",
    "Historic produc biofuels 2gen": "historic_produc_biofuels_2gen",
    "Cumulative emissions to 1995": "cumulative_emissions_to_1995",
    '"start year BioE residues for non-biofuels"': "start_year_bioe_residues_for_nonbiofuels",
    "CO2 fossil fuel emissions": "co2_fossil_fuel_emissions",
    "t per Gt": "t_per_gt",
    "Share land compet biofuels": "share_land_compet_biofuels",
    "share land total RES vs arable": "share_land_total_res_vs_arable",
    "Year scarcity oil": "year_scarcity_oil",
    "cumulated conv gas extraction": "cumulated_conv_gas_extraction",
    "cumulated conv gas extraction to 1995": "cumulated_conv_gas_extraction_to_1995",
    "Cumulated unconv gas extraction": "cumulated_unconv_gas_extraction",
    "cumulated unconv gas extraction to 1995": "cumulated_unconv_gas_extraction_to_1995",
    "RURR uranium": "rurr_uranium",
    "cumulated uranium extraction to 1995": "cumulated_uranium_extraction_to_1995",
    "cumulated conv oil extraction": "cumulated_conv_oil_extraction",
    "cumulated conv oil extraction to 1995": "cumulated_conv_oil_extraction_to_1995",
    "cumulated unconv oil extraction": "cumulated_unconv_oil_extraction",
    "Cumulated coal extraction": "cumulated_coal_extraction",
    "cumulated coal extraction to 1995": "cumulated_coal_extraction_to_1995",
    "cumulated unconv oil extraction to 1995": "cumulated_unconv_oil_extraction_to_1995",
    "Cumulated uranium extraction": "cumulated_uranium_extraction",
    "Oil refinery gains EJ": "oil_refinery_gains_ej",
    "Oil refinery gains share": "oil_refinery_gains_share",
    "Efficiency gas for oil refinery gains": "efficiency_gas_for_oil_refinery_gains",
    "one year": "one_year",
    "Land compet required dedicated crops for biofuels": "land_compet_required_dedicated_crops_for_biofuels",
    "Annual shift from 2gen to 3gen": "annual_shift_from_2gen_to_3gen",
    "P bioE residues": "p_bioe_residues",
    "Cellulosic biofuels available": "cellulosic_biofuels_available",
    '"BioE residues for non-biofuels available"': "bioe_residues_for_nonbiofuels_available",
    '"PE bioE residues non-biofuels EJ"': "pe_bioe_residues_nonbiofuels_ej",
    "share cellulosic biofuels vs BioE residues": "share_cellulosic_biofuels_vs_bioe_residues",
    "share land total RES vs urban surface": "share_land_total_res_vs_urban_surface",
    "Max land compet biofuels 2gen": "max_land_compet_biofuels_2gen",
    "P biofuels 2gen land compet": "p_biofuels_2gen_land_compet",
    "past biofuels 2gen": "past_biofuels_2gen",
    "EJ per ktoe": "ej_per_ktoe",
    "abundance total oil EU": "abundance_total_oil_eu",
    "Cp nuclear initial": "cp_nuclear_initial",
    "extraction coal without CTL EJ": "extraction_coal_without_ctl_ej",
    "extraction coal for CTL EJ": "extraction_coal_for_ctl_ej",
    "Other liquids supply EJ": "other_liquids_supply_ej",
    "max offshore wind TWe": "max_offshore_wind_twe",
    "URR unconv oil High Mohr15": "urr_unconv_oil_high_mohr15",
    "URR unconv oil Low Mohr15": "urr_unconv_oil_low_mohr15",
    "URR unconv oil User defined": "urr_unconv_oil_user_defined",
    "URR conv oil Mohr15 High": "urr_conv_oil_mohr15_high",
    "URR conv oil Mohr15 Low": "urr_conv_oil_mohr15_low",
    "table max extraction Mohr15 High conv oil EJ": "table_max_extraction_mohr15_high_conv_oil_ej",
    "table max extraction Mohr15 Low conv oil EJ": "table_max_extraction_mohr15_low_conv_oil_ej",
    "table max extraction Mohr15 BG conv oil EJ": "table_max_extraction_mohr15_bg_conv_oil_ej",
    '"separate conv and unconv gas?"': "separate_conv_and_unconv_gas",
    "table max extraction unconv oil User defined": "table_max_extraction_unconv_oil_user_defined",
    "URR tot agg oil User defined": "urr_tot_agg_oil_user_defined",
    "choose extraction curve tot agg oil": "choose_extraction_curve_tot_agg_oil",
    "URR conv oil Mohr15 BG": "urr_conv_oil_mohr15_bg",
    "URR conv oil User defined": "urr_conv_oil_user_defined",
    "choose extraction tot agg gas curve": "choose_extraction_tot_agg_gas_curve",
    "table max extraction unconv oil Low Mohr15": "table_max_extraction_unconv_oil_low_mohr15",
    "URR unconv oil BG Mohr15": "urr_unconv_oil_bg_mohr15",
    "table max extraction unconv oil High Mohr15": "table_max_extraction_unconv_oil_high_mohr15",
    "table max extraction tot agg oil User defined": "table_max_extraction_tot_agg_oil_user_defined",
    "table max conv oil extraction User defined": "table_max_conv_oil_extraction_user_defined",
    '"separate conv and unconv oil?"': "separate_conv_and_unconv_oil",
    "kt uranium per EJ": "kt_uranium_per_ej",
    "life time nuclear": "life_time_nuclear",
    '"Hist share oil/FF Elec"': "hist_share_oilff_elec",
    "Cumulated uranium extraction kt": "cumulated_uranium_extraction_kt",
    "extraction uranium kt": "extraction_uranium_kt",
    "efficiency uranium for electricity": "efficiency_uranium_for_electricity",
    '"Hist share gas/(coal +gas) Elec"': "hist_share_gascoal_gas_elec",
    "Historic nuclear generation TWh": "historic_nuclear_generation_twh",
    "invest cost nuclear": "invest_cost_nuclear",
    "kWh per TWh": "kwh_per_twh",
    "Total FE Elec demand EJ": "total_fe_elec_demand_ej",
    "gCO2e per KWh biomass": "gco2e_per_kwh_biomass",
    "MToe per EJ": "mtoe_per_ej",
    '"share transm&distr elec losses initial"': "share_transmdistr_elec_losses_initial",
    "EJ per TWh": "ej_per_twh",
    "TWe per TWh": "twe_per_twh",
    "initial population": "initial_population",
    "Population": "population",
    "VE objetive UE2020 extrap": "ve_objetive_ue2020_extrap",
    "VE objetive UE2020": "ve_objetive_ue2020",
    "Choose extraction uranium curve": "choose_extraction_uranium_curve",
    "Year scarcity TPE": "year_scarcity_tpe",
    "Year scarcity uranium": "year_scarcity_uranium",
    "Year scarcity coal": "year_scarcity_coal",
    "Year scarcity liquids": "year_scarcity_liquids",
    "effects shortage gas": "effects_shortage_gas",
    "Year scarcity gases": "year_scarcity_gases",
    "max percent of change": "max_percent_of_change",
    "choose extraction coal curve": "choose_extraction_coal_curve",
    "Selection constraint extraction unconv gas": "selection_constraint_extraction_unconv_gas",
    "Year scarcity Elec": "year_scarcity_elec",
    "extraction unconv gas delayed": "extraction_unconv_gas_delayed",
    "max unconv gas growth extraction EJ": "max_unconv_gas_growth_extraction_ej",
    "P constraint growth extraction unconv gas": "p_constraint_growth_extraction_unconv_gas",
    "choose extraction curve unconv gas": "choose_extraction_curve_unconv_gas",
    "choose extraction curve unconv oil": "choose_extraction_curve_unconv_oil",
    "Biofuels land compet available": "biofuels_land_compet_available",
    "URR oil ASPO": "urr_oil_aspo",
    "URR gas Mohr High2013": "urr_gas_mohr_high2013",
    "URR gas Leherrere2010": "urr_gas_leherrere2010",
    "URR gas Mohr BG2012": "urr_gas_mohr_bg2012",
    "RES to fossil accounting": "res_to_fossil_accounting",
    "new C GtC": "new_c_gtc",
    "year adjust": "year_adjust",
    "\"TPES de Castro PhD - Scen 'madcoal'\"": "tpes_de_castro_phd__scen_madcoal",
    "urban surface 2015": "urban_surface_2015",
    "C per CO2": "c_per_co2",
    "GtC historic emissions RCPs": "gtc_historic_emissions_rcps",
    "activate Affores program": "activate_affores_program",
    "Afforestation program 2020": "afforestation_program_2020",
    "Agricultural land 2015": "agricultural_land_2015",
    "choose extraction curve conv oil": "choose_extraction_curve_conv_oil",
    "choose extraction conv gas curve": "choose_extraction_conv_gas_curve",
    "Cumulated total monet invest RES for Elec": "cumulated_total_monet_invest_res_for_elec",
    "efficiency coal for electricity": "efficiency_coal_for_electricity",
    "Historic efficiency gas for electricity": "historic_efficiency_gas_for_electricity",
    "efficiency liquids for electricity": "efficiency_liquids_for_electricity",
    "Additional land compet available for biofuels": "additional_land_compet_available_for_biofuels",
    "max hydro TWe": "max_hydro_twe",
    "max oceanic TWe": "max_oceanic_twe",
    "max onshore wind TWe": "max_onshore_wind_twe",
    "P timeseries pop growth rate": "p_timeseries_pop_growth_rate",
    "P CTL": "p_ctl",
    "P GTL": "p_gtl",
    "start year 3gen cellulosic biofuels": "start_year_3gen_cellulosic_biofuels",
    "Time dmnl": "time_dmnl",
    "Share variable RES elec generation vs total": "share_variable_res_elec_generation_vs_total",
    "table max extraction ASPO oil EJ": "table_max_extraction_aspo_oil_ej",
    "table max extraction gas Laherrere2010": "table_max_extraction_gas_laherrere2010",
    "table max extraction gas Mohr High2012": "table_max_extraction_gas_mohr_high2012",
    "table max extraction gas Mohr BG2012": "table_max_extraction_gas_mohr_bg2012",
    "Total cumulative emissions GtC": "total_cumulative_emissions_gtc",
    '"TNES de Castro PhD - Scen I"': "tnes_de_castro_phd__scen_i",
    '"Net oil extraction de Castro PhD - Scen I"': "net_oil_extraction_de_castro_phd__scen_i",
    '"PE oil extraction de Castro PhD - Scen II"': "pe_oil_extraction_de_castro_phd__scen_ii",
    '"Net oil extraction de Castro PhD - Scen III"': "net_oil_extraction_de_castro_phd__scen_iii",
    '"PE coal extraction de Castro PhD - Scen II"': "pe_coal_extraction_de_castro_phd__scen_ii",
    '"Net gas extraction de Castro PhD - Scen I"': "net_gas_extraction_de_castro_phd__scen_i",
    '"PE gas extraction de Castro PhD - Scen II"': "pe_gas_extraction_de_castro_phd__scen_ii",
    '"Net gas extraction de Castro PhD - Scen III"': "net_gas_extraction_de_castro_phd__scen_iii",
    '"Net coal extraction de Castro PhD - Scen III"': "net_coal_extraction_de_castro_phd__scen_iii",
    '"Net coal extraction de Castro PhD - Scen I"': "net_coal_extraction_de_castro_phd__scen_i",
    '"TNES de Castro PhD - Scen III"': "tnes_de_castro_phd__scen_iii",
    "\"Primary coal extraction de Castro PhD - Scen 'madcoal'\"": "primary_coal_extraction_de_castro_phd__scen_madcoal",
    '"TPES de Castro PhD - Scen II"': "tpes_de_castro_phd__scen_ii",
    "P nuclear scen 1": "p_nuclear_scen_1",
    '"P nuclear 2-3"': "p_nuclear_23",
    "gCO2e per GTCO2e 4": "gco2e_per_gtco2e_4",
    "gCO2e per GTCO2e 3": "gco2e_per_gtco2e_3",
    "gCO2e per GTCO2e 0": "gco2e_per_gtco2e_0",
    "gCO2e per GTCO2e 1": "gco2e_per_gtco2e_1",
    "TWh per gCO2e 0": "twh_per_gco2e_0",
    "Other liquids required EJ": "other_liquids_required_ej",
    "Agricultural land": "agricultural_land",
    "Compet agricultural land for biofuels": "compet_agricultural_land_for_biofuels",
    "Marginal land for biofuels": "marginal_land_for_biofuels",
    "Real GFCF by sector": "real_gfcf_by_sector",
    "URR coal": "urr_coal",
    "Real demand by sector delayed EU": "real_demand_by_sector_delayed_eu",
    "Real final energy by sector and fuel EU": "real_final_energy_by_sector_and_fuel_eu",
    "Required final energy by sector and fuel EU": "required_final_energy_by_sector_and_fuel_eu",
    "Real total output by fuel and sector": "real_total_output_by_fuel_and_sector",
    "FE demand Elec consum TWh": "fe_demand_elec_consum_twh",
    '"FED Heat-com EJ"': "fed_heatcom_ej",
    "initial marginal land occupied by biofuels": "initial_marginal_land_occupied_by_biofuels",
    "PED oil for Heat plants EJ": "ped_oil_for_heat_plants_ej",
    "Total FE Elec demand TWh": "total_fe_elec_demand_twh",
    "Real domestic demand by sector EU": "real_domestic_demand_by_sector_eu",
    "Total domestic output required by sector": "total_domestic_output_required_by_sector",
    "RURR unconv oil EJ": "rurr_unconv_oil_ej",
    "share liquids for final energy": "share_liquids_for_final_energy",
    "PED liquids EJ": "ped_liquids_ej",
    "FED Heat liquids plants EJ": "fed_heat_liquids_plants_ej",
    "hist var inlandT": "hist_var_inlandt",
    "inland transport variation intensity": "inland_transport_variation_intensity",
    "max unconv oil growth extraction": "max_unconv_oil_growth_extraction",
    '"FED Heat-com NRE EJ"': "fed_heatcom_nre_ej",
    "real FE consumption by fuel": "real_fe_consumption_by_fuel",
    "Required FED by liquids EJ": "required_fed_by_liquids_ej",
    "extraction unconv oil EJ": "extraction_unconv_oil_ej",
    "Demand conv oil EJ": "demand_conv_oil_ej",
    "max unconv oil growth extraction EJ": "max_unconv_oil_growth_extraction_ej",
    '"Total FED Heat-com EJ"': "total_fed_heatcom_ej",
    "URR unconv oil": "urr_unconv_oil",
    "max extraction unconv gas": "max_extraction_unconv_gas",
    "max extraction unconv oil": "max_extraction_unconv_oil",
    "max extraction coal EJ": "max_extraction_coal_ej",
    "max extraction conv gas EJ": "max_extraction_conv_gas_ej",
    "FED Heat gas plants EJ": "fed_heat_gas_plants_ej",
    "FED Heat coal plants EJ": "fed_heat_coal_plants_ej",
    "URR conv gas": "urr_conv_gas",
    "Required final energy other transport": "required_final_energy_other_transport",
    "PED gases for Heat plants EJ": "ped_gases_for_heat_plants_ej",
    "PED coal for Heat plants EJ": "ped_coal_for_heat_plants_ej",
    "Real total output by sector EU": "real_total_output_by_sector_eu",
    "Required final energy air transport": "required_final_energy_air_transport",
    "Required final energy inland transport": "required_final_energy_inland_transport",
    "Required final energy water transport": "required_final_energy_water_transport",
    "table max extraction conv gas Low Mohr15": "table_max_extraction_conv_gas_low_mohr15",
    "table max extraction conv gas User defined": "table_max_extraction_conv_gas_user_defined",
    "table max extraction total gas User defined": "table_max_extraction_total_gas_user_defined",
    "table max extraction unconv gas BG Mohr15": "table_max_extraction_unconv_gas_bg_mohr15",
    "table max extraction unconv gas High Mohr15": "table_max_extraction_unconv_gas_high_mohr15",
    "table max extraction unconv gas Low Mohr15": "table_max_extraction_unconv_gas_low_mohr15",
    "table max extraction unconv gas User defined": "table_max_extraction_unconv_gas_user_defined",
    "table max extraction coal BG Mohr15": "table_max_extraction_coal_bg_mohr15",
    "table max extraction coal High Mohr15": "table_max_extraction_coal_high_mohr15",
    "URR coal BG Mohr15": "urr_coal_bg_mohr15",
    "URR coal User defined EJ": "urr_coal_user_defined_ej",
    "URR conv gas BG Mohr15": "urr_conv_gas_bg_mohr15",
    "URR conv gas High Mohr15": "urr_conv_gas_high_mohr15",
    "URR conv gas Low Mohr15": "urr_conv_gas_low_mohr15",
    "URR conv gas User defined": "urr_conv_gas_user_defined",
    "URR total gas User defined": "urr_total_gas_user_defined",
    "URR unconv gas": "urr_unconv_gas",
    "URR unconv gas BG Mohr15": "urr_unconv_gas_bg_mohr15",
    "table max extraction coal Low Mohr15": "table_max_extraction_coal_low_mohr15",
    "table max extraction coal User defined": "table_max_extraction_coal_user_defined",
    "table max extraction conv gas BG Mohr15": "table_max_extraction_conv_gas_bg_mohr15",
    "table max extraction conv gas High Mohr15": "table_max_extraction_conv_gas_high_mohr15",
    "URR unconv gas Low Mohr15": "urr_unconv_gas_low_mohr15",
    "URR coal High15": "urr_coal_high15",
    "URR coal Low Mohr15": "urr_coal_low_mohr15",
    "URR unconv gas High Mohr15": "urr_unconv_gas_high_mohr15",
    "URR unconv gas User defined": "urr_unconv_gas_user_defined",
    "table max extraction unconv oil BG Mohr15": "table_max_extraction_unconv_oil_bg_mohr15",
    "Selection constraint extraction unconv oil": "selection_constraint_extraction_unconv_oil",
    "Abundance electricity": "abundance_electricity",
    "P constraint growth extraction unconv oil": "p_constraint_growth_extraction_unconv_oil",
    "extraction unconv oil delayed": "extraction_unconv_oil_delayed",
    "FINAL TIME": "final_time",
    "INITIAL TIME": "initial_time",
    "SAVEPER": "saveper",
    "TIME STEP": "time_step",
}

__pysd_version__ = "1.2.0"

__data = {"scope": None, "time": lambda: 0}

_root = path.dirname(__file__)


def _init_outer_references(data):
    for key in data:
        __data[key] = data[key]


def time():
    return __data["time"]()


@cache.step
@to_float
def historic_share_e_industry_ownuse_vs_tfec():
    """
    Real Name: "Historic share E industry own-use vs TFEC"
    Original Eqn: IF THEN ELSE(Time<2016, "Historic energy industry own-use"(Time)/(Real TFEC-FE tot generation all RES elec EJ), 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Historic share of the energy industry own-energy use vs TFEC.
    """
    return if_then_else(
        time() < 2016,
        lambda: historic_energy_industry_ownuse(time())
        / (real_tfec() - fe_tot_generation_all_res_elec_ej()),
        lambda: 0,
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def inertial_rate_energy_intensity_top_down():
    """
    Real Name: inertial rate energy intensity TOP DOWN
    Original Eqn: IF THEN ELSE(Time<2009, historic rate final energy intensity[sectors,final sources],IF THEN ELSE(Choose final sectoral energy intensities evolution method =1,IF THEN ELSE(Activate BOTTOM UP method [sectors]=0:OR:rate change intensity BOTTOM UP[ sectors,final sources]=0, IF THEN ELSE(Efficiency energy aceleration [sectors,final sources]<0,Evol final energy intensity by sector and fuel [sectors,final sources]*Efficiency energy aceleration[sectors,final sources]*available improvement efficiency [sectors],Initial energy intensity by fuel and sector 1995 [sectors,final sources] *Efficiency energy aceleration[ sectors,final sources]),0), IF THEN ELSE(Time<year energy intensity target,IF THEN ELSE(Activate BOTTOM UP method [sectors]=0:OR:rate change intensity BOTTOM UP[ sectors,final sources]=0, IF THEN ELSE((historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration [sectors,final sources])<0,Evol final energy intensity by sector and fuel [sectors,final sources]*(historical mean rate energy intensity[sectors,final sources] +Efficiency energy aceleration[sectors,final sources])*available improvement efficiency[sectors],Initial energy intensity by fuel and sector 1995 [sectors,final sources] *(historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration[ sectors,final sources])),0), IF THEN ELSE(Choose final sectoral energy intensities evolution method=2,IF THEN ELSE(Activate BOTTOM UP method [sectors]=0:OR:rate change intensity BOTTOM UP[ sectors,final sources]=0, IF THEN ELSE((historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration [sectors,final sources])<0,Evol final energy intensity by sector and fuel [sectors,final sources]*(historical mean rate energy intensity[sectors,final sources] +Efficiency energy aceleration[sectors,final sources])*available improvement efficiency[sectors],Initial energy intensity by fuel and sector 1995 [sectors,final sources] *(historical mean rate energy intensity[sectors,final sources]+Efficiency energy aceleration[ sectors,final sources])),0), IF THEN ELSE(Activate BOTTOM UP method[sectors]=0:OR:rate change intensity BOTTOM UP[ sectors,final sources]=0, IF THEN ELSE((Efficiency energy aceleration [sectors,final sources])<0,Evol final energy intensity by sector and fuel [sectors,final sources]*Efficiency energy aceleration[sectors,final sources]*available improvement efficiency [sectors],Initial energy intensity by fuel and sector 1995 [sectors,final sources] *Efficiency energy aceleration[ sectors,final sources])+variation energy intensity TARGET[sectors,final sources],0)))))
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    This variable models the variation of the energy intensity according to the
        historical trend and represents the variation of the technological energy
        efficiency in each economic sector for each type of energy. By default it
        will follow the historical trend but can be modified by policies or market
        conditions that accelerate change.        IF THEN ELSE(Choose final sectoral energy intensities evolution method=3,IF THEN
        ELSE(Time<2009,        historic rate final energy intensity[sectors,final sources],IF THEN
        ELSE(Time<2020,IF THEN ELSE(Activate BOTTOM UP method        [sectors]=0:OR:rate change intensity BOTTOM UP[        sectors,final sources]=0, IF THEN ELSE((historical mean rate energy
        intensity[sectors,final sources]+Efficiency energy aceleration        [sectors,final sources])<0,Evol final energy intensity by sector and fuel        [sectors,final sources]*(historical mean rate energy intensity[sectors,final sources]        +Efficiency energy aceleration[sectors,final sources])*available improvement
        efficiency[sectors],Initial energy intensity by fuel and sector 1995        [sectors,final sources]        *(historical mean rate energy intensity[sectors,final sources]+Efficiency energy
        aceleration[        sectors,final sources])),0), IF THEN ELSE        (Activate BOTTOM UP method[sectors]=0:OR:rate change intensity BOTTOM UP[        sectors,final sources]=0, IF THEN ELSE((Efficiency energy aceleration        [sectors,final sources])<0,Evol final energy intensity by sector and fuel        [sectors,final sources]*(Efficiency energy aceleration[sectors,final
        sources])*available improvement efficiency        [sectors],Initial energy intensity by fuel and sector 1995        [sectors,final sources]        *(Efficiency energy aceleration[        sectors,final sources])),0)))+variation energy intensity TARGET[sectors,final
        sources],IF THEN ELSE(Time>2009, IF THEN ELSE(Activate BOTTOM UP method        [sectors]=0:OR:rate change intensity BOTTOM UP[        sectors,final sources]=0, IF THEN ELSE((historical mean rate energy
        intensity[sectors,final sources]+Efficiency energy aceleration        [sectors,final sources])<0,Evol final energy intensity by sector and fuel        [sectors,final sources]*(historical mean rate energy intensity[sectors,final sources]        +Efficiency energy aceleration[sectors,final sources])*available improvement
        efficiency[sectors],Initial energy intensity by fuel and sector 1995        [sectors,final sources]        *(historical mean rate energy intensity[sectors,final sources]+Efficiency energy
        aceleration[sectors,final sources])),0),        historic rate final energy intensity[sectors,final sources]))
    """
    return if_then_else(
        time() < 2009,
        lambda: historic_rate_final_energy_intensity(),
        lambda: if_then_else(
            choose_final_sectoral_energy_intensities_evolution_method() == 1,
            lambda: if_then_else(
                logical_or(
                    rearrange(activate_bottom_up_method(), ["sectors"], _subscript_dict)
                    == 0,
                    rearrange(
                        rate_change_intensity_bottom_up(),
                        ["sectors", "final sources"],
                        _subscript_dict,
                    )
                    == 0,
                ),
                lambda: if_then_else(
                    efficiency_energy_aceleration() < 0,
                    lambda: evol_final_energy_intensity_by_sector_and_fuel()
                    * efficiency_energy_aceleration()
                    * available_improvement_efficiency(),
                    lambda: rearrange(
                        initial_energy_intensity_by_fuel_and_sector_1995(),
                        ["sectors", "final sources"],
                        _subscript_dict,
                    )
                    * efficiency_energy_aceleration(),
                ),
                lambda: 0,
            ),
            lambda: if_then_else(
                time() < year_energy_intensity_target(),
                lambda: if_then_else(
                    logical_or(
                        rearrange(
                            activate_bottom_up_method(), ["sectors"], _subscript_dict
                        )
                        == 0,
                        rearrange(
                            rate_change_intensity_bottom_up(),
                            ["sectors", "final sources"],
                            _subscript_dict,
                        )
                        == 0,
                    ),
                    lambda: if_then_else(
                        (
                            rearrange(
                                historical_mean_rate_energy_intensity(),
                                ["sectors", "final sources"],
                                _subscript_dict,
                            )
                            + efficiency_energy_aceleration()
                        )
                        < 0,
                        lambda: evol_final_energy_intensity_by_sector_and_fuel()
                        * (
                            rearrange(
                                historical_mean_rate_energy_intensity(),
                                ["sectors", "final sources"],
                                _subscript_dict,
                            )
                            + efficiency_energy_aceleration()
                        )
                        * available_improvement_efficiency(),
                        lambda: rearrange(
                            initial_energy_intensity_by_fuel_and_sector_1995(),
                            ["sectors", "final sources"],
                            _subscript_dict,
                        )
                        * (
                            rearrange(
                                historical_mean_rate_energy_intensity(),
                                ["sectors", "final sources"],
                                _subscript_dict,
                            )
                            + efficiency_energy_aceleration()
                        ),
                    ),
                    lambda: 0,
                ),
                lambda: if_then_else(
                    choose_final_sectoral_energy_intensities_evolution_method() == 2,
                    lambda: if_then_else(
                        logical_or(
                            rearrange(
                                activate_bottom_up_method(),
                                ["sectors"],
                                _subscript_dict,
                            )
                            == 0,
                            rearrange(
                                rate_change_intensity_bottom_up(),
                                ["sectors", "final sources"],
                                _subscript_dict,
                            )
                            == 0,
                        ),
                        lambda: if_then_else(
                            (
                                rearrange(
                                    historical_mean_rate_energy_intensity(),
                                    ["sectors", "final sources"],
                                    _subscript_dict,
                                )
                                + efficiency_energy_aceleration()
                            )
                            < 0,
                            lambda: evol_final_energy_intensity_by_sector_and_fuel()
                            * (
                                rearrange(
                                    historical_mean_rate_energy_intensity(),
                                    ["sectors", "final sources"],
                                    _subscript_dict,
                                )
                                + efficiency_energy_aceleration()
                            )
                            * available_improvement_efficiency(),
                            lambda: rearrange(
                                initial_energy_intensity_by_fuel_and_sector_1995(),
                                ["sectors", "final sources"],
                                _subscript_dict,
                            )
                            * (
                                rearrange(
                                    historical_mean_rate_energy_intensity(),
                                    ["sectors", "final sources"],
                                    _subscript_dict,
                                )
                                + efficiency_energy_aceleration()
                            ),
                        ),
                        lambda: 0,
                    ),
                    lambda: if_then_else(
                        logical_or(
                            rearrange(
                                activate_bottom_up_method(),
                                ["sectors"],
                                _subscript_dict,
                            )
                            == 0,
                            rearrange(
                                rate_change_intensity_bottom_up(),
                                ["sectors", "final sources"],
                                _subscript_dict,
                            )
                            == 0,
                        ),
                        lambda: if_then_else(
                            (efficiency_energy_aceleration()) < 0,
                            lambda: evol_final_energy_intensity_by_sector_and_fuel()
                            * efficiency_energy_aceleration()
                            * available_improvement_efficiency(),
                            lambda: rearrange(
                                initial_energy_intensity_by_fuel_and_sector_1995(),
                                ["sectors", "final sources"],
                                _subscript_dict,
                            )
                            * efficiency_energy_aceleration(),
                        )
                        + variation_energy_intensity_target(),
                        lambda: 0,
                    ),
                ),
            ),
        ),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def year_policy_to_improve_efficiency():
    """
    Real Name: Year policy to improve efficiency
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Year policy to improve efficiency by sector [sectors ,final sources],"Year policy to improve efficiency sector-uniform"[final sources])
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Year when the policy to improve efficiency in sectors start. For each of
        five final energies.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: rearrange(
            year_policy_to_improve_efficiency_by_sector(),
            ["sectors", "final sources"],
            _subscript_dict,
        ),
        lambda: year_policy_to_improve_efficiency_sectoruniform(),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def policy_change_energy_speed():
    """
    Real Name: Policy change energy speed
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Policy change energy speed by sector[sectors,final sources],"Policy change energy speed sector-uniform"[final sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Selection of the speed of application of the different policies to change
        the final energy
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: rearrange(
            policy_change_energy_speed_by_sector(),
            ["sectors", "final sources"],
            _subscript_dict,
        ),
        lambda: policy_change_energy_speed_sectoruniform(),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def variation_energy_intensity_target():
    """
    Real Name: variation energy intensity TARGET
    Original Eqn: IF THEN ELSE(Choose energy intensity target method=1,IF THEN ELSE(Time>final year target,0,IF THEN ELSE (Time <year energy intensity target,0,((Energy intensity target by sector and fuel[sectors,final sources ]-Final energy intensity 2020 [final sources,sectors])/(final year target-year energy intensity target)))),IF THEN ELSE (Time>final year target,0,IF THEN ELSE(Time <year energy intensity target,0,((Final energy intensity 2020[final sources,sectors]*(1+pct change energy intensity target )-Final energy intensity 2020 [final sources,sectors])/(final year target-year energy intensity target)))))
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Variation in energy intensity by sector and final energy defined by user
        targets.
    """
    return if_then_else(
        choose_energy_intensity_target_method() == 1,
        lambda: if_then_else(
            time() > final_year_target(),
            lambda: 0,
            lambda: if_then_else(
                time() < year_energy_intensity_target(),
                lambda: 0,
                lambda: (
                    (
                        rearrange(
                            energy_intensity_target_by_sector_and_fuel(),
                            ["sectors", "final sources"],
                            _subscript_dict,
                        )
                        - final_energy_intensity_2020()
                    )
                    / (final_year_target() - year_energy_intensity_target())
                ),
            ),
        ),
        lambda: if_then_else(
            time() > final_year_target(),
            lambda: 0,
            lambda: if_then_else(
                time() < year_energy_intensity_target(),
                lambda: 0,
                lambda: (
                    (
                        final_energy_intensity_2020()
                        * (1 + pct_change_energy_intensity_target())
                        - final_energy_intensity_2020()
                    )
                    / (final_year_target() - year_energy_intensity_target())
                ),
            ),
        ),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def policy_to_improve_efficiency_speed():
    """
    Real Name: Policy to improve efficiency speed
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Policy to improve efficiency speed by sector [sectors,final sources],"Policy to improve efficiency speed sector-uniform")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Selection of the speed of application of the different policies to improve
        the efficiency.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: rearrange(
            policy_to_improve_efficiency_speed_by_sector(),
            ["sectors", "final sources"],
            _subscript_dict,
        ),
        lambda: policy_to_improve_efficiency_speed_sectoruniform(),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def year_policy_change_energy():
    """
    Real Name: Year policy change energy
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Year policy change energy by sector[sectors,final sources],"Year policy change energy sector-uniform"[final sources])
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Year when the policy to change final energy in the sectors start. For each
        of five final energies.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: rearrange(
            year_policy_change_energy_by_sector(),
            ["sectors", "final sources"],
            _subscript_dict,
        ),
        lambda: year_policy_change_energy_sectoruniform(),
    )


@cache.step
@subs(["sectors", "final sources", "final sources1"], _subscript_dict)
def efficiency_rate_of_substitution():
    """
    Real Name: efficiency rate of substitution
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,efficiency rate of substitution by sector [sectors,final sources,final sources1],"efficiency rate of substitution sector-uniform"[final sources,final sources1 ])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources', 'final sources1']

    It is necessary to take into account that the energy efficiencies of the
        two technologies exchanged do not necessarily have to be the same. In
        other words, a decrease in the energy intensity of (a) will not imply the
        same increase in the energy intensity of (b). This possible difference is
        compensated through the parameter “Efficiency rate of substitution”.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: rearrange(
            efficiency_rate_of_substitution_by_sector(),
            ["sectors", "final sources", "final sources1"],
            _subscript_dict,
        ),
        lambda: efficiency_rate_of_substitution_sectoruniform(),
    )


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def final_energy_intensity_2020():
    """
    Real Name: Final energy intensity 2020
    Original Eqn: IF THEN ELSE(Time<year energy intensity target,Evol final energy intensity by sector and fuel [sectors,final sources],aux20 0[final sources,sectors])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Energy intensity by sector and final source in 2009
    """
    return if_then_else(
        time() < year_energy_intensity_target(),
        lambda: evol_final_energy_intensity_by_sector_and_fuel(),
        lambda: aux20_0(),
    )


@cache.step
@to_float
def abundance_coal_world():
    """
    Real Name: abundance coal World
    Original Eqn: abundance coal
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return abundance_coal(time())


@cache.step
@to_float
def abundance_total_nat_gas_world():
    """
    Real Name: "abundance total nat. gas World"
    Original Eqn: abundance total nat gas
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return abundance_total_nat_gas(time())


@cache.step
@to_float
def abundance_total_oil_world():
    """
    Real Name: abundance total oil World
    Original Eqn: abundance total oil
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return abundance_total_oil(time())


@cache.step
@subs(["primary sources1"], _subscript_dict)
def abundance_primary_sources():
    """
    Real Name: Abundance primary sources
    Original Eqn:
      abundance coal World
      abundance total oil World
      "abundance total nat. gas World"
      1
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['primary sources1']

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return xrmerge(
        [
            rearrange(
                abundance_coal_world(),
                ["primary sources1"],
                {"primary sources1": ["coal"]},
            ),
            rearrange(
                abundance_total_oil_world(),
                ["primary sources1"],
                {"primary sources1": ["oil"]},
            ),
            rearrange(
                abundance_total_nat_gas_world(),
                ["primary sources1"],
                {"primary sources1": ["natural gas"]},
            ),
            xr.DataArray(1, {"primary sources1": ["others"]}, ["primary sources1"]),
        ]
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def pressure_to_change_energy_technology():
    """
    Real Name: Pressure to change energy technology
    Original Eqn: MIN(MAX(Implementatio policy to change final energy[sectors,final sources], 0) , 1 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    This variable represents the pressure in each economic sector for
        substituting a final energy source for another. This change depending on
        the sectors will have different technological difficulty and different
        cost. This pressure may be due to (1) energy policies, eg substitution of
        fossil fuels for electrical energy, or (2) by variations in the price of
        each type of final energy. This price variation will be related to the
        relative abundance of energy sources.
    """
    return np.minimum(np.maximum(implementatio_policy_to_change_final_energy(), 0), 1)


@cache.step
@to_float
def share_gascoal_gas_for_elec():
    """
    Real Name: "share gas/(coal +gas) for Elec"
    Original Eqn: IF THEN ELSE("switch scarcity-PS elec substit"=0, "Hist share gas/(coal +gas) Elec", IF THEN ELSE(Time>2014, "Future share gas/(coal+gas) for Elec","Hist share gas/(coal +gas) Elec"))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of natural gas for electricity in relation to the total fossil fuels
        for electricity.
    """
    return if_then_else(
        switch_scarcityps_elec_substit() == 0,
        lambda: hist_share_gascoal_gas_elec(),
        lambda: if_then_else(
            time() > 2014,
            lambda: future_share_gascoalgas_for_elec(),
            lambda: hist_share_gascoal_gas_elec(),
        ),
    )


@cache.run
@to_float
def share_gascoalgas_for_elec_in_2014():
    """
    Real Name: "share gas/(coal+gas) for Elec in 2014"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'AA40')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Historic data
    """
    return _ext_constant_share_gascoalgas_for_elec_in_2014()


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_coalgas():
    """
    Real Name: "perception of inter-fuel PS scarcity coal-gas"
    Original Eqn: MAX(0,"perception of inter-fuel primary sources scarcity"[coal,natural gas])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels (gas-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc["coal", "natural gas"]
        .reset_coords(drop=True),
    )


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_coaloil():
    """
    Real Name: "perception of inter-fuel PS scarcity coal-oil"
    Original Eqn: MAX(0,"perception of inter-fuel primary sources scarcity"[coal,oil])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels (oil-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc["coal", "oil"]
        .reset_coords(drop=True),
    )


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_ffoil():
    """
    Real Name: "perception of inter-fuel PS scarcity FF-oil"
    Original Eqn: MAX("perception of inter-fuel PS scarcity coal-oil","perception of inter-fuel PS scarcity nat. gas-oil")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels (oil-fossil
        fuels)
    """
    return np.maximum(
        perception_of_interfuel_ps_scarcity_coaloil(),
        perception_of_interfuel_ps_scarcity_nat_gasoil(),
    )


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_gascoal():
    """
    Real Name: "perception of inter-fuel PS scarcity gas-coal"
    Original Eqn: MAX(0,"perception of inter-fuel primary sources scarcity"[natural gas,coal])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels (gas-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc["natural gas", "coal"]
        .reset_coords(drop=True),
    )


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_nat_gasoil():
    """
    Real Name: "perception of inter-fuel PS scarcity nat. gas-oil"
    Original Eqn: MAX(0,"perception of inter-fuel primary sources scarcity"[natural gas,oil])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels
        (oil-natural gas)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc["natural gas", "oil"]
        .reset_coords(drop=True),
    )


@cache.step
@to_float
def decrease_share_gas_for_elec():
    """
    Real Name: decrease share gas for Elec
    Original Eqn: max auxiliar Elec*"perception of inter-fuel PS scarcity coal-gas"*("Future share gas/(coal+gas) for Elec")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Decrease in future share of gas over coal+gas for electricity generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_coalgas()
        * (future_share_gascoalgas_for_elec())
    )


@cache.step
@to_float
def decrease_share_oil_for_elec():
    """
    Real Name: decrease share oil for Elec
    Original Eqn: max auxiliar Elec*"perception of inter-fuel PS scarcity FF-oil"*("Future share oil/FF for Elec")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Decrease in future share of oil over (oil+coal+gas) for electricity
        generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_ffoil()
        * (future_share_oilff_for_elec())
    )


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_oilnatgas():
    """
    Real Name: "perception of inter-fuel PS scarcity oil-nat.gas"
    Original Eqn: MAX(0,"perception of inter-fuel primary sources scarcity"[oil,natural gas])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels
        (oil-natural gas)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc["oil", "natural gas"]
        .reset_coords(drop=True),
    )


@cache.run
@to_float
def max_auxiliar_elec():
    """
    Real Name: max auxiliar Elec
    Original Eqn: 0.03
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Auxiliarity variable that limit the interchange between fuels to cover
        electricity.
    """
    return 0.03


@cache.step
@to_float
def increase_share_oil_for_elec():
    """
    Real Name: increase share oil for Elec
    Original Eqn: max auxiliar Elec*"perception of inter-fuel PS scarcity oil-FF"*((1-"Future share oil/FF for Elec"))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Increase in future share of oil over (oil+coal+gas) for electricity
        generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_oilff()
        * ((1 - future_share_oilff_for_elec()))
    )


@cache.step
@to_float
def future_share_gascoalff_for_elec():
    """
    Real Name: "Future share gas+coal/FF for elec"
    Original Eqn: 1-"Future share oil/FF for Elec"
    Units: Dnml
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return 1 - future_share_oilff_for_elec()


@cache.step
@to_float
def future_share_gascoalgas_for_elec():
    """
    Real Name: "Future share gas/(coal+gas) for Elec"
    Original Eqn: INTEG ( increase share gas for Elec-decrease share gas for Elec, "share gas/(coal+gas) for Elec in 2014")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Endogenous future share of gas over coal+gas for electricity generation.
    """
    return _integ_future_share_gascoalgas_for_elec()


@cache.step
@to_float
def future_share_oilff_for_elec():
    """
    Real Name: "Future share oil/FF for Elec"
    Original Eqn: INTEG ( increase share oil for Elec-decrease share oil for Elec, "share oil/FF for Elec in 2015")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Endogenous future share of oil over (oil+coal+gas) for electricity
        generation.
    """
    return _integ_future_share_oilff_for_elec()


@cache.run
@to_float
def switch_scarcityps_elec_substit():
    """
    Real Name: "switch scarcity-PS elec substit"
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    This swith allows the endogenous replacement of primary and final fuels depending on
        their relative abundance:        =1: activated.        =0: not activated
    """
    return 1


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_oilcoal():
    """
    Real Name: "perception of inter-fuel PS scarcity oil-coal"
    Original Eqn: MAX(0,"perception of inter-fuel primary sources scarcity"[oil,coal])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels (oil-coal)
    """
    return np.maximum(
        0,
        perception_of_interfuel_primary_sources_scarcity()
        .loc["oil", "coal"]
        .reset_coords(drop=True),
    )


@cache.step
@to_float
def perception_of_interfuel_ps_scarcity_oilff():
    """
    Real Name: "perception of inter-fuel PS scarcity oil-FF"
    Original Eqn: MAX("perception of inter-fuel PS scarcity oil-coal","perception of inter-fuel PS scarcity oil-nat.gas")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Socieconomic perception of final energy scarcity between fuels (oil-fossil
        fuels)
    """
    return np.maximum(
        perception_of_interfuel_ps_scarcity_oilcoal(),
        perception_of_interfuel_ps_scarcity_oilnatgas(),
    )


@cache.run
@to_float
def share_oilff_for_elec_in_2015():
    """
    Real Name: "share oil/FF for Elec in 2015"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'AB39')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Historic data
    """
    return _ext_constant_share_oilff_for_elec_in_2015()


@cache.step
@to_float
def increase_share_gas_for_elec():
    """
    Real Name: increase share gas for Elec
    Original Eqn: max auxiliar Elec*"perception of inter-fuel PS scarcity gas-coal"*((1-"Future share gas/(coal+gas) for Elec"))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Increase in future share of gas over coal+gas for electricity generation.
    """
    return (
        max_auxiliar_elec()
        * perception_of_interfuel_ps_scarcity_gascoal()
        * ((1 - future_share_gascoalgas_for_elec()))
    )


@cache.step
@subs(["primary sources"], _subscript_dict)
def perception_in_primary_sources_scarcity():
    """
    Real Name: perception in primary sources scarcity
    Original Eqn: INTEG ( increase in perception PS scarcity[primary sources]-reduction in perception PS scarcity[primary sources], 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['primary sources']

    Perception of primary sources scarcity of each fuel by economic sectors.
        This perception drives the fuel replacement for electriciy and heat.
    """
    return _integ_perception_in_primary_sources_scarcity()


@cache.step
@to_float
def households_total_final_energy_demand():
    """
    Real Name: Households total final energy demand
    Original Eqn: SUM(Households final energy demand[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy demand of households.
    """
    return sum(households_final_energy_demand(), dim=("final sources",))


@cache.step
@subs(["primary sources"], _subscript_dict)
def reduction_in_perception_ps_scarcity():
    """
    Real Name: reduction in perception PS scarcity
    Original Eqn: perception in primary sources scarcity[primary sources]/energy scarcity forgetting time
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['primary sources']

    Reduction of the perception of energy scarcity of economic sectors due to
        the "forgetting" effect.
    """
    return perception_in_primary_sources_scarcity() / energy_scarcity_forgetting_time()


@cache.step
@subs(["final sources"], _subscript_dict)
def fuel_scarcity_pressure():
    """
    Real Name: Fuel scarcity pressure
    Original Eqn: IF THEN ELSE("Activate scarcity feedback final fuel replacement? 0"=1,perception of final energy scarcity[final sources], 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Pressure due significant variations in the fuel scarcity of each type of
        final energy.
    """
    return if_then_else(
        activate_scarcity_feedback_final_fuel_replacement_0() == 1,
        lambda: perception_of_final_energy_scarcity(),
        lambda: 0,
    )


@cache.step
@subs(["primary sources1", "primary sources"], _subscript_dict)
def perception_of_interfuel_primary_sources_scarcity():
    """
    Real Name: "perception of inter-fuel primary sources scarcity"
    Original Eqn:
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception in primary sources scarcity[primary sources]-perception in primary sources scarcity[coal], 1))
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception in primary sources scarcity[primary sources]-perception in primary sources scarcity[oil], 1))
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ(perception in primary sources scarcity[primary sources]-perception in primary sources scarcity[natural gas], 1))
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception in primary sources scarcity[primary sources]-perception in primary sources scarcity[others], 1))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['primary sources1', 'primary sources']

    Perception of primary energy scarcity between fuels. This perception
        drives the fuel replacement in electricity and heat sectors.
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_in_primary_sources_scarcity()
                        - perception_in_primary_sources_scarcity()
                        .loc["coal"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["primary sources1", "primary sources"],
                {
                    "primary sources1": ["coal"],
                    "primary sources": ["coal", "oil", "natural gas", "others"],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_in_primary_sources_scarcity()
                        - perception_in_primary_sources_scarcity()
                        .loc["oil"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["primary sources1", "primary sources"],
                {
                    "primary sources1": ["oil"],
                    "primary sources": ["coal", "oil", "natural gas", "others"],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_in_primary_sources_scarcity()
                        - perception_in_primary_sources_scarcity()
                        .loc["natural gas"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["primary sources1", "primary sources"],
                {
                    "primary sources1": ["natural gas"],
                    "primary sources": ["coal", "oil", "natural gas", "others"],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_in_primary_sources_scarcity()
                        - perception_in_primary_sources_scarcity()
                        .loc["others"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["primary sources1", "primary sources"],
                {
                    "primary sources1": ["others"],
                    "primary sources": ["coal", "oil", "natural gas", "others"],
                },
            ),
        ]
    )


@cache.step
@subs(["primary sources"], _subscript_dict)
def scarcity_primary_sources():
    """
    Real Name: scarcity primary sources
    Original Eqn: 1-Abundance primary sources[primary sources]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['primary sources']

    The parameter scarcity varies between (1;0). (Scarcity =1-Abundance)        Scarcity=0 while the supply covers the demand; the closest to 1 indicates
        a higher divergence between supply and demand.
    """
    return 1 - rearrange(
        abundance_primary_sources(), ["primary sources"], _subscript_dict
    )


@cache.step
@subs(["primary sources"], _subscript_dict)
def increase_in_perception_ps_scarcity():
    """
    Real Name: increase in perception PS scarcity
    Original Eqn: scarcity primary sources[primary sources]*sensitivity to scarcity*(1-perception in primary sources scarcity[primary sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['primary sources']

    Increase in socieconomic perception of primary sources scarcity of each
        fuel
    """
    return (
        scarcity_primary_sources()
        * sensitivity_to_scarcity()
        * (1 - perception_in_primary_sources_scarcity())
    )


@cache.step
@subs(["final sources", "final sources1"], _subscript_dict)
def interfuel_scarcity_pressure():
    """
    Real Name: "Inter-fuel scarcity pressure"
    Original Eqn: IF THEN ELSE("Activate scarcity feedback final fuel replacement? 0"=1,MAX(0,"perception of inter-fuel final energy scarcities" [final sources,final sources1]),0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'final sources1']

    Pressure due to variations in the inter-fuel scarcity of each final energy.
    """
    return if_then_else(
        activate_scarcity_feedback_final_fuel_replacement_0() == 1,
        lambda: np.maximum(
            0,
            rearrange(
                perception_of_interfuel_final_energy_scarcities(),
                ["final sources", "final sources1"],
                _subscript_dict,
            ),
        ),
        lambda: 0,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def fuel_scarcity_pressure_h():
    """
    Real Name: Fuel scarcity pressure H
    Original Eqn: IF THEN ELSE("Activate scarcity feedback final fuel replacement?"=1,perception of final energy scarcity H[final sources],0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Pressure due significant variations in the fuel scarcity of each type of
        final energy.
    """
    return if_then_else(
        activate_scarcity_feedback_final_fuel_replacement() == 1,
        lambda: perception_of_final_energy_scarcity_h(),
        lambda: 0,
    )


@cache.step
@subs(["final sources", "final sources1"], _subscript_dict)
def interfuel_scarcity_pressure_h():
    """
    Real Name: "Inter-fuel scarcity pressure H"
    Original Eqn: IF THEN ELSE("Activate scarcity feedback final fuel replacement?"=1,MAX(0,"perception of inter-fuel final energy scarcities H" [final sources,final sources1]),0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'final sources1']

    Pressure due to variations in the inter-fuel scarcity of each type of
        final energy.
    """
    return if_then_else(
        activate_scarcity_feedback_final_fuel_replacement() == 1,
        lambda: np.maximum(
            0,
            rearrange(
                perception_of_interfuel_final_energy_scarcities_h(),
                ["final sources", "final sources1"],
                _subscript_dict,
            ),
        ),
        lambda: 0,
    )


@cache.run
@to_float
def sensitivity_to_scarcity_option():
    """
    Real Name: sensitivity to scarcity option
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C257')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Option defined by user about the sensitivity of economic sectors to energy scarcity:        1-Low        2-Medium        3-High
    """
    return _ext_constant_sensitivity_to_scarcity_option()


@cache.step
@subs(["final sources"], _subscript_dict)
def perception_of_final_energy_scarcity():
    """
    Real Name: perception of final energy scarcity
    Original Eqn: INTEG ( increase in perception FE scarcity[final sources]-reduction in perception FE scarcity[final sources], 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Perception of final energy scarcity of each fuel by economic sectors. This
        perception drives the fuel replacement and efficiency improvement.
    """
    return _integ_perception_of_final_energy_scarcity()


@cache.run
@to_float
def sensitivity_to_energy_scarcity_medium():
    """
    Real Name: sensitivity to energy scarcity Medium
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'O47')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Medium value option of sensitivity to energy scarcity.
    """
    return _ext_constant_sensitivity_to_energy_scarcity_medium()


@cache.step
@subs(["final sources"], _subscript_dict)
def scarcity_final_fuels():
    """
    Real Name: scarcity final fuels
    Original Eqn: 1-Abundance final fuels[final sources]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    The parameter scarcity varies between (1;0). (Scarcity =1-Abundance)        Scarcity=0 while the supply covers the demand; the closest to 1 indicates
        a higher divergence between supply and demand.
    """
    return 1 - rearrange(abundance_final_fuels(), ["final sources"], _subscript_dict)


@cache.run
@to_float
def sensitivity_to_energy_scarcity_high():
    """
    Real Name: sensitivity to energy scarcity High
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'O46')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    High value option of sensitivity to energy scarcity.
    """
    return _ext_constant_sensitivity_to_energy_scarcity_high()


@cache.run
@to_float
def sensitivity_to_energy_scarcity_low():
    """
    Real Name: sensitivity to energy scarcity Low
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'O48')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Low value option of sensitivity to energy scarcity.
    """
    return _ext_constant_sensitivity_to_energy_scarcity_low()


@cache.run
@to_float
def sensitivity_to_scarcity_option_h():
    """
    Real Name: sensitivity to scarcity option H
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F257')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Option defined by user about the sensitivity of households to the energy scarcity:        1-Low        2-Medium        3-High
    """
    return _ext_constant_sensitivity_to_scarcity_option_h()


@cache.step
@to_float
def sensitivity_to_scarcity():
    """
    Real Name: sensitivity to scarcity
    Original Eqn: IF THEN ELSE(sensitivity to scarcity option=1,sensitivity to energy scarcity Low,IF THEN ELSE(sensitivity to scarcity option=2,sensitivity to energy scarcity Medium ,sensitivity to energy scarcity High))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Sensitivity of the economic sectors to the energy scarcity. Value defined
        by user.
    """
    return if_then_else(
        sensitivity_to_scarcity_option() == 1,
        lambda: sensitivity_to_energy_scarcity_low(),
        lambda: if_then_else(
            sensitivity_to_scarcity_option() == 2,
            lambda: sensitivity_to_energy_scarcity_medium(),
            lambda: sensitivity_to_energy_scarcity_high(),
        ),
    )


@cache.step
@to_float
def sensitivity_to_scarcity_h():
    """
    Real Name: sensitivity to scarcity H
    Original Eqn: IF THEN ELSE(sensitivity to scarcity option H=1,sensitivity to energy scarcity Low,IF THEN ELSE(sensitivity to scarcity option H=2,sensitivity to energy scarcity Medium ,sensitivity to energy scarcity High))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Sensitivity of the households to the energy scarcity. Value defined by
        user.
    """
    return if_then_else(
        sensitivity_to_scarcity_option_h() == 1,
        lambda: sensitivity_to_energy_scarcity_low(),
        lambda: if_then_else(
            sensitivity_to_scarcity_option_h() == 2,
            lambda: sensitivity_to_energy_scarcity_medium(),
            lambda: sensitivity_to_energy_scarcity_high(),
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def reduction_in_perception_fe_scarcity_h():
    """
    Real Name: reduction in perception FE scarcity H
    Original Eqn: perception of final energy scarcity H[final sources]/energy scarcity forgetting time H
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Reduction of the perception of energy scarcity of households due to the
        "forgetting" effect.
    """
    return perception_of_final_energy_scarcity_h() / energy_scarcity_forgetting_time_h()


@cache.step
@subs(["final sources1", "final sources"], _subscript_dict)
def perception_of_interfuel_final_energy_scarcities_h():
    """
    Real Name: "perception of inter-fuel final energy scarcities H"
    Original Eqn:
      IF THEN ELSE(sensitivity to scarcity H=0,0,ZIDZ( perception of final energy scarcity H[final sources]-perception of final energy scarcity H[liquids ], 1))
      IF THEN ELSE(sensitivity to scarcity H=0,0,ZIDZ( perception of final energy scarcity H[final sources]-perception of final energy scarcity H[solids ], 1))
      IF THEN ELSE(sensitivity to scarcity H=0,0,ZIDZ( perception of final energy scarcity H[final sources]-perception of final energy scarcity H[gases ], 1))
      IF THEN ELSE(sensitivity to scarcity H=0,0,ZIDZ( perception of final energy scarcity H[final sources]-perception of final energy scarcity H[electricity ], 1))
      IF THEN ELSE(sensitivity to scarcity H=0,0,ZIDZ( perception of final energy scarcity H[final sources]-perception of final energy scarcity H[heat ], 1))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources1', 'final sources']

    Socieconomic perception of final energy scarcity between fuels for
        households. Matrix 5x5. This perception drives the fuel replacement and
        efficiency improvement.
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity_h() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity_h()
                        - perception_of_final_energy_scarcity_h()
                        .loc["liquids"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["liquids"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity_h() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity_h()
                        - perception_of_final_energy_scarcity_h()
                        .loc["solids"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["solids"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity_h() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity_h()
                        - perception_of_final_energy_scarcity_h()
                        .loc["gases"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["gases"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity_h() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity_h()
                        - perception_of_final_energy_scarcity_h()
                        .loc["electricity"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["electricity"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity_h() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity_h()
                        - perception_of_final_energy_scarcity_h()
                        .loc["heat"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["heat"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
        ]
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def scarcity_final_fuels_h():
    """
    Real Name: scarcity final fuels H
    Original Eqn: 1-Abundance final fuels[final sources]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    The parameter scarcity varies between (1;0). (Scarcity =1-Abundance)        Scarcity=0 while the supply covers the demand; the closest to 1 indicates
        a higher divergence between supply and demand.
    """
    return 1 - rearrange(abundance_final_fuels(), ["final sources"], _subscript_dict)


@cache.step
@subs(["final sources"], _subscript_dict)
def reduction_in_perception_fe_scarcity():
    """
    Real Name: reduction in perception FE scarcity
    Original Eqn: perception of final energy scarcity[final sources]/energy scarcity forgetting time
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Reduction of the perception of energy scarcity of economic sectors due to
        the "forgetting" effect.
    """
    return perception_of_final_energy_scarcity() / energy_scarcity_forgetting_time()


@cache.step
@subs(["final sources"], _subscript_dict)
def increase_in_perception_fe_scarcity():
    """
    Real Name: increase in perception FE scarcity
    Original Eqn: scarcity final fuels[final sources]*sensitivity to scarcity*(1-perception of final energy scarcity [final sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Increase in the perception of economic sectors of final energy scarcity of
        each fuel
    """
    return (
        scarcity_final_fuels()
        * sensitivity_to_scarcity()
        * (1 - perception_of_final_energy_scarcity())
    )


@cache.step
@subs(["final sources1", "final sources"], _subscript_dict)
def perception_of_interfuel_final_energy_scarcities():
    """
    Real Name: "perception of inter-fuel final energy scarcities"
    Original Eqn:
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception of final energy scarcity[final sources]-perception of final energy scarcity[liquids ], 1))
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception of final energy scarcity[final sources]-perception of final energy scarcity[solids ], 1))
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception of final energy scarcity[final sources]-perception of final energy scarcity[gases] , 1))
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception of final energy scarcity[final sources]-perception of final energy scarcity[electricity ], 1))
      IF THEN ELSE(sensitivity to scarcity=0,0,ZIDZ( perception of final energy scarcity[final sources]-perception of final energy scarcity[heat], 1))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources1', 'final sources']

    Perception of economic sectors of final energy scarcity between fuels.
        Matrix 5x5. This perception drives the fuel replacement and efficiency
        improvement.
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity()
                        - perception_of_final_energy_scarcity()
                        .loc["liquids"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["liquids"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity()
                        - perception_of_final_energy_scarcity()
                        .loc["solids"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["solids"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity()
                        - perception_of_final_energy_scarcity()
                        .loc["gases"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["gases"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity()
                        - perception_of_final_energy_scarcity()
                        .loc["electricity"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["electricity"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            rearrange(
                if_then_else(
                    sensitivity_to_scarcity() == 0,
                    lambda: 0,
                    lambda: zidz(
                        perception_of_final_energy_scarcity()
                        - perception_of_final_energy_scarcity()
                        .loc["heat"]
                        .reset_coords(drop=True),
                        1,
                    ),
                ),
                ["final sources1", "final sources"],
                {
                    "final sources1": ["heat"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
        ]
    )


@cache.run
@to_float
def energy_scarcity_forgetting_time_h():
    """
    Real Name: energy scarcity forgetting time H
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F260')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Time in years that households take to forget the percepticon of scarcity.
    """
    return _ext_constant_energy_scarcity_forgetting_time_h()


@cache.step
@subs(["final sources"], _subscript_dict)
def increase_in_perception_fe_scarcity_h():
    """
    Real Name: increase in perception FE scarcity H
    Original Eqn: scarcity final fuels H[final sources]*sensitivity to scarcity H*(1-perception of final energy scarcity H[final sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Increase in socieconomic perception of final energy scarcity of each fuel
        for households.
    """
    return (
        scarcity_final_fuels_h()
        * sensitivity_to_scarcity_h()
        * (1 - perception_of_final_energy_scarcity_h())
    )


@cache.run
@to_float
def energy_scarcity_forgetting_time():
    """
    Real Name: energy scarcity forgetting time
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C260')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Time in years that society takes to forget the percepticon of scarcity for
        economic sectors.
    """
    return _ext_constant_energy_scarcity_forgetting_time()


@cache.step
@subs(["final sources"], _subscript_dict)
def perception_of_final_energy_scarcity_h():
    """
    Real Name: perception of final energy scarcity H
    Original Eqn: INTEG ( increase in perception FE scarcity H[final sources]-reduction in perception FE scarcity H[final sources], 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Socieconomic perception of final energy scarcity of each fuel for
        households. This perception drives the fuel replacement and efficiency
        improvement.
    """
    return _integ_perception_of_final_energy_scarcity_h()


@cache.run
@to_float
def year_to_finish_energy_intensity_policies_h():
    """
    Real Name: Year to finish energy intensity policies H
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C205')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to improve efficiency in households finish.
    """
    return _ext_constant_year_to_finish_energy_intensity_policies_h()


@cache.run
@subs(["final sources"], _subscript_dict)
def minimum_fraction_h():
    """
    Real Name: minimum fraction H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FU856')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    minimum energy of each type of energy that should be used in each sector
        because it is irreplaceable
    """
    return _ext_constant_minimum_fraction_h()


@cache.step
@subs(["final sources"], _subscript_dict)
def efficiency_energy_aceleration_h():
    """
    Real Name: Efficiency energy aceleration H
    Original Eqn: (-Maximum yearly aceleration of intensity improvement pct H[final sources]*(1+Percentage of change over the historic maximun variation of energy intensities 0))*Pressure to improve energy intensity efficiency H [final sources]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    This variable represents the acceleration of the process of variation of
        the energy intensity that can be produced by policies or scarcity
        pressures.
    """
    return (
        -maximum_yearly_aceleration_of_intensity_improvement_pct_h()
        * (
            1
            + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0()
        )
    ) * pressure_to_improve_energy_intensity_efficiency_h()


@cache.step
@subs(["final sources"], _subscript_dict)
def inertial_rate_energy_intensity_h_top_down():
    """
    Real Name: inertial rate energy intensity H TOP DOWN
    Original Eqn: IF THEN ELSE(Time<2009, historic rate final energy intensity H[final sources],IF THEN ELSE(Choose final sectoral energy intensities evolution method =1,IF THEN ELSE(Efficiency energy aceleration H[final sources]<0,Evol final energy intensity H[ final sources]*Efficiency energy aceleration H[final sources]*available improvement efficiency H, Initial energy intensity 1995 H [final sources] *Efficiency energy aceleration H[final sources]), IF THEN ELSE(Time<year energy intensity target,IF THEN ELSE((historical mean rate energy intensity H[final sources ]+Efficiency energy aceleration H[final sources])<0,Evol final energy intensity H[final sources]*(historical mean rate energy intensity H [final sources] +Efficiency energy aceleration H[final sources])*available improvement efficiency H,Initial energy intensity 1995 H [final sources] *(historical mean rate energy intensity H[final sources]+Efficiency energy aceleration H[final sources])), IF THEN ELSE(Choose final sectoral energy intensities evolution method=2,IF THEN ELSE((historical mean rate energy intensity H [final sources]+Efficiency energy aceleration H[final sources])<0,Evol final energy intensity H[final sources ]*(historical mean rate energy intensity H[final sources] +Efficiency energy aceleration H[final sources])*available improvement efficiency H,Initial energy intensity 1995 H [final sources] *(historical mean rate energy intensity H[final sources]+Efficiency energy aceleration H[final sources])),IF THEN ELSE ((Efficiency energy aceleration H[final sources])<0,Evol final energy intensity H[final sources]*Efficiency energy aceleration H [final sources]*available improvement efficiency H,Initial energy intensity 1995 H[final sources] *Efficiency energy aceleration H[final sources])+Variation energy intensity TARGET H[final sources] ))))
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    This variable models the variation of the energy intensity according to
        the historical trend and represents the variation of the technological
        energy efficiency in households for each type of energy. By default it
        will follow the historical trend but can be modified by policies or market
        conditions that accelerate change.
    """
    return if_then_else(
        time() < 2009,
        lambda: historic_rate_final_energy_intensity_h(),
        lambda: if_then_else(
            choose_final_sectoral_energy_intensities_evolution_method() == 1,
            lambda: if_then_else(
                efficiency_energy_aceleration_h() < 0,
                lambda: evol_final_energy_intensity_h()
                * efficiency_energy_aceleration_h()
                * available_improvement_efficiency_h(),
                lambda: initial_energy_intensity_1995_h()
                * efficiency_energy_aceleration_h(),
            ),
            lambda: if_then_else(
                time() < year_energy_intensity_target(),
                lambda: if_then_else(
                    (
                        historical_mean_rate_energy_intensity_h()
                        + efficiency_energy_aceleration_h()
                    )
                    < 0,
                    lambda: evol_final_energy_intensity_h()
                    * (
                        historical_mean_rate_energy_intensity_h()
                        + efficiency_energy_aceleration_h()
                    )
                    * available_improvement_efficiency_h(),
                    lambda: initial_energy_intensity_1995_h()
                    * (
                        historical_mean_rate_energy_intensity_h()
                        + efficiency_energy_aceleration_h()
                    ),
                ),
                lambda: if_then_else(
                    choose_final_sectoral_energy_intensities_evolution_method() == 2,
                    lambda: if_then_else(
                        (
                            historical_mean_rate_energy_intensity_h()
                            + efficiency_energy_aceleration_h()
                        )
                        < 0,
                        lambda: evol_final_energy_intensity_h()
                        * (
                            historical_mean_rate_energy_intensity_h()
                            + efficiency_energy_aceleration_h()
                        )
                        * available_improvement_efficiency_h(),
                        lambda: initial_energy_intensity_1995_h()
                        * (
                            historical_mean_rate_energy_intensity_h()
                            + efficiency_energy_aceleration_h()
                        ),
                    ),
                    lambda: if_then_else(
                        (efficiency_energy_aceleration_h()) < 0,
                        lambda: evol_final_energy_intensity_h()
                        * efficiency_energy_aceleration_h()
                        * available_improvement_efficiency_h(),
                        lambda: initial_energy_intensity_1995_h()
                        * efficiency_energy_aceleration_h(),
                    )
                    + variation_energy_intensity_target_h(),
                ),
            ),
        ),
    )


@cache.run
@to_float
def final_year_target_h():
    """
    Real Name: final year target H
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario' , 'B243')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year defined by user in which the energy intensity targets are set.
    """
    return _ext_constant_final_year_target_h()


@cache.run
@subs(["final sources"], _subscript_dict)
def historical_mean_rate_energy_intensity_h():
    """
    Real Name: historical mean rate energy intensity H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'GM48')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Historical trend of households energy intensity by final souerce (OLS
        method)
    """
    return _ext_constant_historical_mean_rate_energy_intensity_h()


@cache.step
@to_float
def available_improvement_efficiency_h():
    """
    Real Name: available improvement efficiency H
    Original Eqn: MIN(1,IF THEN ELSE(Time>2009, ZIDZ( (Global energy intensity H-(min energy intensity vs intial H*Initial global energy intensity 2009 H)), (1-min energy intensity vs intial H)*Initial global energy intensity 2009 H), 1))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remainig improvement of energy intensity respect to the minimum value.
    """
    return np.minimum(
        1,
        if_then_else(
            time() > 2009,
            lambda: zidz(
                (
                    global_energy_intensity_h()
                    - (
                        min_energy_intensity_vs_intial_h()
                        * initial_global_energy_intensity_2009_h()
                    )
                ),
                (1 - min_energy_intensity_vs_intial_h())
                * initial_global_energy_intensity_2009_h(),
            ),
            lambda: 1,
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def aux19_0():
    """
    Real Name: aux19 0
    Original Eqn: DELAY FIXED ( Final energy intensity 2020 H[final sources], TIME STEP , 0)
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Auxiliarity variable to maintain constant the value of 2009
    """
    return _delayfixed_aux19_0()


@cache.step
@subs(["final sources"], _subscript_dict)
def households_final_energy_demand():
    """
    Real Name: Households final energy demand
    Original Eqn: Household demand total*Energy intensity of households[final sources]/1e+06
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Final energy demand of households
    """
    return household_demand_total() * energy_intensity_of_households() / 1e06


@cache.run
@to_float
def choose_energy_intensity_target_method():
    """
    Real Name: Choose energy intensity target method
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C241')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Choose energy intensity target method:        1- Energy intensity target defined by user        2- Variation in energy intensity over the intensity in defined year
    """
    return _ext_constant_choose_energy_intensity_target_method()


@cache.step
@subs(["final sources"], _subscript_dict)
def decrease_of_intensity_due_to_change_energy_technology_h_top_down():
    """
    Real Name: Decrease of intensity due to change energy technology H TOP DOWN
    Original Eqn: IF THEN ELSE((ZIDZ(Evol final energy intensity H[final sources], Global energy intensity H)) >= minimum fraction H [final sources] ,(Max yearly change H[final sources]*(1+Percentage of change over the historic maximun variation of energy intensities 0)) *Evol final energy intensity H[final sources] * Pressure to change energy technology H [final sources] , 0 )
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    When in households, one type of energy (a) is replaced by another (b), the energy
        intensity of (b) will increase and the energy intensity of (a) will
        decrease. This flow represents the decrease of (a).        IF THEN ELSE((ZIDZ(Evol final energy intensity H[final sources], Global energy
        intensity H)) >= minimum fraction H[final sources]        ,Max yearly change H[final sources]  *Evol final energy intensity H[final sources] *
        Pressure to change energy technology H        [final sources] , 0 )
    """
    return if_then_else(
        (zidz(evol_final_energy_intensity_h(), global_energy_intensity_h()))
        >= minimum_fraction_h(),
        lambda: (
            max_yearly_change_h()
            * (
                1
                + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0()
            )
        )
        * evol_final_energy_intensity_h()
        * pressure_to_change_energy_technology_h(),
        lambda: 0,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def implementatio_policy_to_change_final_energy_h():
    """
    Real Name: Implementatio policy to change final energy H
    Original Eqn: IF THEN ELSE(Year policy change energy H[final sources]<2015:OR:Year policy change energy H[final sources ]>Year to finish energy intensity policies H,0,IF THEN ELSE(Time<Year policy change energy H[final sources],0,IF THEN ELSE (Time >Year to finish energy intensity policies H,1,IF THEN ELSE(Policy change energy speed H[final sources]= 1,((Time-Year policy change energy H[final sources])/(Year to finish energy intensity policies H-Year policy change energy H [final sources]))^(exp rapid evolution change energy H),IF THEN ELSE(Policy change energy speed H[final sources ]=2,((Time-Year policy change energy H[final sources])/(Year to finish energy intensity policies H -Year policy change energy H[final sources])),IF THEN ELSE(Policy change energy speed H[final sources ]=3,((Time-Year policy change energy H[final sources])/(Year to finish energy intensity policies H-Year policy change energy H [final sources]))^exp slow evolution change energy H,0))))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Pressure due to energy policies, eg incentives for change the final energy
    """
    return if_then_else(
        logical_or(
            year_policy_change_energy_h() < 2015,
            year_policy_change_energy_h()
            > year_to_finish_energy_intensity_policies_h(),
        ),
        lambda: 0,
        lambda: if_then_else(
            time() < year_policy_change_energy_h(),
            lambda: 0,
            lambda: if_then_else(
                time() > year_to_finish_energy_intensity_policies_h(),
                lambda: 1,
                lambda: if_then_else(
                    policy_change_energy_speed_h() == 1,
                    lambda: (
                        (time() - year_policy_change_energy_h())
                        / (
                            year_to_finish_energy_intensity_policies_h()
                            - year_policy_change_energy_h()
                        )
                    )
                    ** (exp_rapid_evolution_change_energy_h()),
                    lambda: if_then_else(
                        policy_change_energy_speed_h() == 2,
                        lambda: (
                            (time() - year_policy_change_energy_h())
                            / (
                                year_to_finish_energy_intensity_policies_h()
                                - year_policy_change_energy_h()
                            )
                        ),
                        lambda: if_then_else(
                            policy_change_energy_speed_h() == 3,
                            lambda: (
                                (time() - year_policy_change_energy_h())
                                / (
                                    year_to_finish_energy_intensity_policies_h()
                                    - year_policy_change_energy_h()
                                )
                            )
                            ** exp_slow_evolution_change_energy_h(),
                            lambda: 0,
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def pressure_to_change_energy_technology_h():
    """
    Real Name: Pressure to change energy technology H
    Original Eqn: MIN(1,SUM(Pressure to change energy technology by fuel H[final sources1!,final sources]))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    This variable represents the pressure in households for substituting a
        final energy source for all the other energies.
    """
    return np.minimum(
        1,
        sum(
            rearrange(
                pressure_to_change_energy_technology_by_fuel_h(),
                ["final sources1", "final sources"],
                _subscript_dict,
            ),
            dim=("final sources1",),
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def implementation_policy_to_improve_energy_intensity_efficiency_h():
    """
    Real Name: Implementation policy to improve energy intensity efficiency H
    Original Eqn: IF THEN ELSE(Year policy to improve efficiency H[final sources]<2015:OR:Year policy to improve efficiency H[ final sources]>Year to finish energy intensity policies H,0,IF THEN ELSE(Time<Year policy to improve efficiency H [final sources],0,IF THEN ELSE(Time >Year to finish energy intensity policies H,1,IF THEN ELSE(Policy to improve efficiency speed H[final sources]= 1,((Time-Year policy to improve efficiency H [final sources])/(Year to finish energy intensity policies H-Year policy to improve efficiency H[final sources ]))^(exp rapid evolution improve efficiency H),IF THEN ELSE(Policy to improve efficiency speed H [final sources]=2,((Time-Year policy to improve efficiency H[final sources])/(Year to finish energy intensity policies H -Year policy to improve efficiency H [final sources])),IF THEN ELSE(Policy to improve efficiency speed H[final sources]=3,((Time-Year policy to improve efficiency H [final sources])/(Year to finish energy intensity policies H-Year policy to improve efficiency H[final sources ]))^exp slow evolution improve efficiency H,0))))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Pressure due to energy policies, eg incentives for energy efficiency,
    """
    return if_then_else(
        logical_or(
            year_policy_to_improve_efficiency_h() < 2015,
            year_policy_to_improve_efficiency_h()
            > year_to_finish_energy_intensity_policies_h(),
        ),
        lambda: 0,
        lambda: if_then_else(
            time() < year_policy_to_improve_efficiency_h(),
            lambda: 0,
            lambda: if_then_else(
                time() > year_to_finish_energy_intensity_policies_h(),
                lambda: 1,
                lambda: if_then_else(
                    policy_to_improve_efficiency_speed_h() == 1,
                    lambda: (
                        (time() - year_policy_to_improve_efficiency_h())
                        / (
                            year_to_finish_energy_intensity_policies_h()
                            - year_policy_to_improve_efficiency_h()
                        )
                    )
                    ** (exp_rapid_evolution_improve_efficiency_h()),
                    lambda: if_then_else(
                        policy_to_improve_efficiency_speed_h() == 2,
                        lambda: (
                            (time() - year_policy_to_improve_efficiency_h())
                            / (
                                year_to_finish_energy_intensity_policies_h()
                                - year_policy_to_improve_efficiency_h()
                            )
                        ),
                        lambda: if_then_else(
                            policy_to_improve_efficiency_speed_h() == 3,
                            lambda: (
                                (time() - year_policy_to_improve_efficiency_h())
                                / (
                                    year_to_finish_energy_intensity_policies_h()
                                    - year_policy_to_improve_efficiency_h()
                                )
                            )
                            ** exp_slow_evolution_improve_efficiency_h(),
                            lambda: 0,
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def pressure_to_improve_energy_intensity_efficiency_h():
    """
    Real Name: Pressure to improve energy intensity efficiency H
    Original Eqn: MIN(1,Fuel scarcity pressure H[final sources]+Implementation policy to improve energy intensity efficiency H[final sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    This variable represents the pressure in households to improve energy
        efficiency in the technology used.  This pressure may be due to (1) energy
        policies, eg incentives for energy efficiency, or (2) significant
        variations in the scarcity of each type of final energy.
    """
    return np.minimum(
        1,
        fuel_scarcity_pressure_h()
        + implementation_policy_to_improve_energy_intensity_efficiency_h(),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def variation_energy_intensity_target_h():
    """
    Real Name: Variation energy intensity TARGET H
    Original Eqn: IF THEN ELSE(Choose energy intensity target method=1,IF THEN ELSE(Time>final year target H,0,IF THEN ELSE(Time <year energy intensity target,0,((Energy intensity target H[final sources]-Final energy intensity 2020 H[final sources])/(final year target H-year energy intensity target)))),IF THEN ELSE(Time>final year target H,0,IF THEN ELSE(Time <year energy intensity target,0,((Final energy intensity 2020 H[final sources]*(1+pct change energy intensity target)-Final energy intensity 2020 H[final sources])/(final year target H-year energy intensity target)))))
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Variation in energy intensity of households by final energy defined by
        user targets.
    """
    return if_then_else(
        choose_energy_intensity_target_method() == 1,
        lambda: if_then_else(
            time() > final_year_target_h(),
            lambda: 0,
            lambda: if_then_else(
                time() < year_energy_intensity_target(),
                lambda: 0,
                lambda: (
                    (energy_intensity_target_h() - final_energy_intensity_2020_h())
                    / (final_year_target_h() - year_energy_intensity_target())
                ),
            ),
        ),
        lambda: if_then_else(
            time() > final_year_target_h(),
            lambda: 0,
            lambda: if_then_else(
                time() < year_energy_intensity_target(),
                lambda: 0,
                lambda: (
                    (
                        final_energy_intensity_2020_h()
                        * (1 + pct_change_energy_intensity_target())
                        - final_energy_intensity_2020_h()
                    )
                    / (final_year_target_h() - year_energy_intensity_target())
                ),
            ),
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def final_energy_intensity_2020_h():
    """
    Real Name: Final energy intensity 2020 H
    Original Eqn: IF THEN ELSE(Time<year energy intensity target,Evol final energy intensity H[final sources],aux19 0[final sources])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Energy intensity of households by final source in 2009
    """
    return if_then_else(
        time() < year_energy_intensity_target(),
        lambda: evol_final_energy_intensity_h(),
        lambda: aux19_0(),
    )


@cache.run
@to_float
def activate_scarcity_feedback_final_fuel_replacement():
    """
    Real Name: "Activate scarcity feedback final fuel replacement?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B256')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to (de)activate the scarcity feedback fuel replacement.
    """
    return _ext_constant_activate_scarcity_feedback_final_fuel_replacement()


@cache.run
@to_float
def activate_transport_h_bottom_up_method():
    """
    Real Name: Activate transport H BOTTOM UP method
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FY207')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0. Bottom-up NOT activated        1. Bottom-up activated
    """
    return _ext_constant_activate_transport_h_bottom_up_method()


@cache.run
@to_float
def percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0():
    """
    Real Name: Percentage of change over the historic maximun variation of energy intensities 0
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C200')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    From the available data, the maximum historical variations of the energy
        intensities have been statistically estimated. If in the future these
        maximum variations are different, this variable establishes the percentage
        of variation that can occur over the defined data.
    """
    return (
        _ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0()
    )


@cache.run
@subs(["final sources", "final sources1"], _subscript_dict)
def efficiency_rate_of_substitution_h_by_sector():
    """
    Real Name: efficiency rate of substitution H by sector
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FU216')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources', 'final sources1']

    It is necessary to take into account that the energy efficiencies of the
        two technologies exchanged do not necessarily have to be the same. In
        other words, a decrease in the energy intensity of (a) will not imply the
        same increase in the energy intensity of (b). This possible difference is
        compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_h_by_sector()


@cache.run
@subs(["final sources", "final sources1"], _subscript_dict)
def efficiency_rate_of_substitution_h_sectoruniform():
    """
    Real Name: "efficiency rate of substitution H sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G233')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources', 'final sources1']

    It is necessary to take into account that the energy efficiencies of the
        two technologies exchanged do not necessarily have to be the same. In
        other words, a decrease in the energy intensity of (a) will not imply the
        same increase in the energy intensity of (b). This possible difference is
        compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_h_sectoruniform()


@cache.run
@subs(["final sources"], _subscript_dict)
def year_policy_change_energy_h_sectoruniform():
    """
    Real Name: "Year policy change energy H sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G230')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Year when the policy to change final energy in households start. For each
        of five final energies.
    """
    return _ext_constant_year_policy_change_energy_h_sectoruniform()


@cache.run
@subs(["final sources"], _subscript_dict)
def max_yearly_change_h():
    """
    Real Name: Max yearly change H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FU857')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    maximum annual change for one type of energy in a sector.
    """
    return _ext_constant_max_yearly_change_h()


@cache.step
@to_float
def global_energy_intensity_h():
    """
    Real Name: Global energy intensity H
    Original Eqn: SUM(Evol final energy intensity H[final sources!])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Global energy intensity of households considering the energy intensity of
        five final fuels.
    """
    return sum(evol_final_energy_intensity_h(), dim=("final sources",))


@cache.run
@subs(["final sources"], _subscript_dict)
def maximum_yearly_aceleration_of_intensity_improvement_pct_h():
    """
    Real Name: Maximum yearly aceleration of intensity improvement pct H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FU854')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Maximum feasible annual changes that could be sustained in the future in
        the energy intensity of each economic sector have been estimated based on
        the observation of trends and historical changes in the available data.
    """
    return _ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct_h()


@cache.step
@subs(["final sources1", "final sources"], _subscript_dict)
def share_tech_change_fuel_h():
    """
    Real Name: share tech change fuel H
    Original Eqn: ZIDZ( Pressure to change energy technology by fuel H[final sources1,final sources] ,SUM(Pressure to change energy technology by fuel H[final sources1!,final sources]))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources1', 'final sources']

    Share of the global pressure to change energy technology that corresponds
        to each fuel.
    """
    return zidz(
        rearrange(
            pressure_to_change_energy_technology_by_fuel_h(),
            ["final sources1", "final sources"],
            _subscript_dict,
        ),
        sum(
            rearrange(
                pressure_to_change_energy_technology_by_fuel_h(),
                ["final sources1", "final sources"],
                _subscript_dict,
            ),
            dim=("final sources1",),
        ),
    )


@cache.run
@subs(["final sources"], _subscript_dict)
def year_policy_to_improve_efficiency_h_sectoruniform():
    """
    Real Name: "Year policy to improve efficiency H sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G227')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Year when the policy to improve efficiency in households start. For each
        of five final energies. Global option.
    """
    return _ext_constant_year_policy_to_improve_efficiency_h_sectoruniform()


@cache.step
@subs(["final sources"], _subscript_dict)
def increase_of_intensity_due_to_change_energy_technology_h_top_down():
    """
    Real Name: Increase of intensity due to change energy technology H TOP DOWN
    Original Eqn: SUM(Increase of intensity due to change energy technology eff H[final sources,final sources1!])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    When in households, one type of energy (a) is replaced by another (b), the energy
        intensity of (b) will increase and the energy intensity of (a) will
        decrease. This flow represents the increase of (b).        Decrease of intensity due to energy a technology change H TOP
        DOWN[solids]*efficiency rate of substitution H[        liquids,solids]+Decrease of intensity due to energy a technology change H TOP
        DOWN[gases]*efficiency rate of substitution H        [liquids,gases]+Decrease of intensity due to energy a technology change H TOP
        DOWN[electricity]*efficiency rate of substitution H        [liquids,electricity]+Decrease of intensity due to energy a technology change H TOP
        DOWN[heat]*efficiency rate of substitution H        [liquids,heat]        ------        Decrease of intensity due to energy a technology change H TOP
        DOWN[solids]*efficiency rate of substitution H[        gases,solids]+Decrease of intensity due to energy a technology change H TOP
        DOWN[electricity]*efficiency rate of substitution H        [gases,electricity]+Decrease of intensity due to energy a technology change H TOP
        DOWN[heat]*efficiency rate of substitution H        [gases,heat]+Decrease of intensity due to energy a technology change H TOP
        DOWN[liquids]*efficiency rate of substitution H        [gases,liquids]        -----        Decrease of intensity due to energy a technology change H TOP DOWN[gases]*efficiency
        rate of substitution H[        solids,gases]+Decrease of intensity due to energy a technology change H TOP
        DOWN[electricity]*efficiency rate of substitution H        [solids,electricity]+Decrease of intensity due to energy a technology change H TOP
        DOWN[heat]*efficiency rate of substitution H        [solids,heat]+Decrease of intensity due to energy a technology change H TOP
        DOWN[liquids]*efficiency rate of substitution H        [solids,liquids]        ----        Decrease of intensity due to energy a technology change H TOP
        DOWN[solids]*efficiency rate of substitution H[        electricity,solids]+Decrease of intensity due to energy a technology change H TOP
        DOWN[gases]*efficiency rate of substitution H        [electricity,gases]+Decrease of intensity due to energy a technology change H TOP
        DOWN[heat]*efficiency rate of substitution H        [electricity,heat]+Decrease of intensity due to energy a technology change H TOP
        DOWN[liquids]*efficiency rate of substitution H        [electricity,liquids]        --        Decrease of intensity due to energy a technology change H TOP
        DOWN[solids]*efficiency rate of substitution H[        heat,solids]+Decrease of intensity due to energy a technology change H TOP
        DOWN[gases]*efficiency rate of substitution H        [heat,gases]+Decrease of intensity due to energy a technology change H TOP
        DOWN[electricity]*efficiency rate of substitution H        [heat,electricity]+Decrease of intensity due to energy a technology change H TOP
        DOWN[liquids]*efficiency rate of substitution H        [heat,liquids]
    """
    return sum(
        rearrange(
            increase_of_intensity_due_to_change_energy_technology_eff_h(),
            ["final sources", "final sources1"],
            _subscript_dict,
        ),
        dim=("final sources1",),
    )


@cache.run
@to_float
def min_energy_intensity_vs_intial_h():
    """
    Real Name: min energy intensity vs intial H
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C199')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Minimum value that the energy intensity for each economic sector could
        reach, obviously always above zero. This minimum value is very difficult
        to estimate, but based on historical values it has been considered that it
        can reach 30% of the value of 2009. (Capellán-Pérez et al., 2014)
    """
    return _ext_constant_min_energy_intensity_vs_intial_h()


@cache.step
@subs(["final sources1", "final sources"], _subscript_dict)
def increase_of_intensity_due_to_change_energy_technology_net_h():
    """
    Real Name: Increase of intensity due to change energy technology net H
    Original Eqn: Decrease of intensity due to change energy technology H TOP DOWN[final sources]*share tech change fuel H[final sources1,final sources]
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources1', 'final sources']

    Increase of intensity due to change a energy technology without
        considering efficieny rate of susbsitution by fuel
    """
    return (
        decrease_of_intensity_due_to_change_energy_technology_h_top_down()
        * share_tech_change_fuel_h()
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def historic_rate_final_energy_intensity_h():
    """
    Real Name: historic rate final energy intensity H
    Original Eqn: Historic final energy intensity H[final sources](INTEGER(Time+1))-Historic final energy intensity H[final sources](INTEGER(Time))
    Units: EJ/Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Historic variation of final energy intensity by final souerce (WIOD data)
    """
    return rearrange(
        historic_final_energy_intensity_h(int(time() + 1)),
        ["final sources"],
        _subscript_dict,
    ) - rearrange(
        historic_final_energy_intensity_h(int(time())),
        ["final sources"],
        _subscript_dict,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def year_policy_to_improve_efficiency_h():
    """
    Real Name: Year policy to improve efficiency H
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Year policy to improve efficiency H by sector[final sources],"Year policy to improve efficiency H sector-uniform"[final sources])
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Year when the policy to improve efficiency in households start. For each
        of five final energies.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: year_policy_to_improve_efficiency_h_by_sector(),
        lambda: year_policy_to_improve_efficiency_h_sectoruniform(),
    )


@cache.run
@subs(["final sources"], _subscript_dict)
def energy_intensity_target_h():
    """
    Real Name: Energy intensity target H
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FU247')
    Units: EJ/Tdollar
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Energy intensity targets by final energy defined by user
    """
    return _ext_constant_energy_intensity_target_h()


@cache.run
@to_float
def exp_slow_evolution_improve_efficiency_h():
    """
    Real Name: exp slow evolution improve efficiency H
    Original Eqn: 2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


@cache.step
@subs(["final sources"], _subscript_dict)
def year_policy_change_energy_h():
    """
    Real Name: Year policy change energy H
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Year policy change energy H by sector[final sources],"Year policy change energy H sector-uniform"[final sources])
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Year when the policy to change final energy in households start. For each
        of five final energies.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: year_policy_change_energy_h_by_sector(),
        lambda: year_policy_change_energy_h_sectoruniform(),
    )


@cache.run
@subs(["final sources"], _subscript_dict)
def year_policy_change_energy_h_by_sector():
    """
    Real Name: Year policy change energy H by sector
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FU213')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Year when the policy to change final energy in households start. For each
        of five final energies.
    """
    return _ext_constant_year_policy_change_energy_h_by_sector()


@cache.run
@to_float
def choose_policies_of_intensities_global_or_by_sector():
    """
    Real Name: Choose policies of intensities global or by sector
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Choose policies of intensities global or by sector        1- Sectors        0- Global
    """
    return _ext_constant_choose_policies_of_intensities_global_or_by_sector()


@cache.step
@to_float
def year_energy_intensity_target():
    """
    Real Name: year energy intensity target
    Original Eqn: IF THEN ELSE(Choose energy intensity target method=1,2020,year change pct energy intensity target)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year over which the energy intensities target is calculated
    """
    return if_then_else(
        choose_energy_intensity_target_method() == 1,
        lambda: 2020,
        lambda: year_change_pct_energy_intensity_target(),
    )


@cache.run
@subs(["final sources"], _subscript_dict)
def initial_energy_intensity_1995_h():
    """
    Real Name: Initial energy intensity 1995 H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'GM49')
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Initial energy intensity for households in 1995
    """
    return _ext_constant_initial_energy_intensity_1995_h()


@cache.step
@subs(["final sources"], _subscript_dict)
def policy_to_improve_efficiency_speed_h():
    """
    Real Name: Policy to improve efficiency speed H
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Policy to improve efficiency speed H by sector[final sources],"Policy to improve efficiency speed H sector-uniform"[final sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Selection of the speed of application of the different policies to improve
        the efficiency.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: policy_to_improve_efficiency_speed_h_by_sector(),
        lambda: policy_to_improve_efficiency_speed_h_sectoruniform(),
    )


@cache.run
@subs(["final sources"], _subscript_dict)
def policy_to_improve_efficiency_speed_h_by_sector():
    """
    Real Name: Policy to improve efficiency speed H by sector
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FU211')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Selection of the speed of application of the different policies to improve
        the efficiency by sector
    """
    return _ext_constant_policy_to_improve_efficiency_speed_h_by_sector()


@cache.step
@to_float
def total_fed_households():
    """
    Real Name: Total FED households
    Original Eqn: SUM(Households final energy demand[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of households
    """
    return sum(households_final_energy_demand(), dim=("final sources",))


@cache.run
@subs(["final sources"], _subscript_dict)
def year_policy_to_improve_efficiency_h_by_sector():
    """
    Real Name: Year policy to improve efficiency H by sector
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FU210')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Year when the policy to improve efficiency in households start. For each
        of five final energies. By sector option.
    """
    return _ext_constant_year_policy_to_improve_efficiency_h_by_sector()


@cache.step
@to_float
def total_fed_trasnport_households():
    """
    Real Name: Total FED trasnport households
    Original Eqn: SUM(Transport households final energy demand[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy in transport households
    """
    return sum(transport_households_final_energy_demand(), dim=("final sources",))


def historic_final_energy_intensity_h(x):
    """
    Real Name: Historic final energy intensity H
    Original Eqn:
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C83')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C119')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C155')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C227')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C191')
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: lookup
    Subs: ['final sources1']

    Historic final energy intensity by final souerce (WIOD data)
    """
    return _ext_lookup_historic_final_energy_intensity_h(x)


@cache.step
@subs(["final sources"], _subscript_dict)
def energy_intensity_of_households():
    """
    Real Name: Energy intensity of households
    Original Eqn: IF THEN ELSE(Time<2009,Energy intensity of households rest[final sources], IF THEN ELSE(Activate transport H BOTTOM UP method=0,Energy intensity of households rest[final sources],Energy intensity of households transport [final sources]+Energy intensity of households rest[final sources]))
    Units: EJ/Tdollar
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Energy intensity of households by final source
    """
    return if_then_else(
        time() < 2009,
        lambda: rearrange(
            energy_intensity_of_households_rest(), ["final sources"], _subscript_dict
        ),
        lambda: if_then_else(
            activate_transport_h_bottom_up_method() == 0,
            lambda: rearrange(
                energy_intensity_of_households_rest(),
                ["final sources"],
                _subscript_dict,
            ),
            lambda: energy_intensity_of_households_transport()
            + rearrange(
                energy_intensity_of_households_rest(),
                ["final sources"],
                _subscript_dict,
            ),
        ),
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def energy_intensity_of_households_rest():
    """
    Real Name: Energy intensity of households rest
    Original Eqn:
      IF THEN ELSE(Activate transport H BOTTOM UP method=1,Evol final energy intensity H[liquids]*change total intensity to rest[liquids],Evol final energy intensity H[liquids])
      Evol final energy intensity H[solids]
      IF THEN ELSE(Activate transport H BOTTOM UP method=1,Evol final energy intensity H[gases]*change total intensity to rest [gases],Evol final energy intensity H[gases])
      IF THEN ELSE(Activate transport H BOTTOM UP method=1,Evol final energy intensity H[electricity ]*change total intensity to rest[electricity],Evol final energy intensity H[electricity])
      Evol final energy intensity H[heat]
    Units: EJ/Tdollar
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Energy intensity of households by final source without considering the
        energy of transports for households
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    activate_transport_h_bottom_up_method() == 1,
                    lambda: evol_final_energy_intensity_h()
                    .loc["liquids"]
                    .reset_coords(drop=True)
                    * change_total_intensity_to_rest()
                    .loc["liquids"]
                    .reset_coords(drop=True),
                    lambda: evol_final_energy_intensity_h()
                    .loc["liquids"]
                    .reset_coords(drop=True),
                ),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                evol_final_energy_intensity_h().loc["solids"].reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
            rearrange(
                if_then_else(
                    activate_transport_h_bottom_up_method() == 1,
                    lambda: evol_final_energy_intensity_h()
                    .loc["gases"]
                    .reset_coords(drop=True)
                    * change_total_intensity_to_rest()
                    .loc["gases"]
                    .reset_coords(drop=True),
                    lambda: evol_final_energy_intensity_h()
                    .loc["gases"]
                    .reset_coords(drop=True),
                ),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                if_then_else(
                    activate_transport_h_bottom_up_method() == 1,
                    lambda: evol_final_energy_intensity_h()
                    .loc["electricity"]
                    .reset_coords(drop=True)
                    * change_total_intensity_to_rest()
                    .loc["electricity"]
                    .reset_coords(drop=True),
                    lambda: evol_final_energy_intensity_h()
                    .loc["electricity"]
                    .reset_coords(drop=True),
                ),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            rearrange(
                evol_final_energy_intensity_h().loc["heat"].reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["heat"]},
            ),
        ]
    )


@cache.step
@subs(["final sources1", "final sources"], _subscript_dict)
def increase_of_intensity_due_to_change_energy_technology_eff_h():
    """
    Real Name: Increase of intensity due to change energy technology eff H
    Original Eqn: IF THEN ELSE(efficiency rate of substitution H[final sources1,final sources]=0,Increase of intensity due to change energy technology net H [final sources1,final sources],Increase of intensity due to change energy technology net H[final sources1 ,final sources]*efficiency rate of substitution H[final sources1,final sources])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources1', 'final sources']

    Increase of intensity due to change a energy technology by fuel
    """
    return if_then_else(
        rearrange(
            efficiency_rate_of_substitution_h(),
            ["final sources1", "final sources"],
            _subscript_dict,
        )
        == 0,
        lambda: increase_of_intensity_due_to_change_energy_technology_net_h(),
        lambda: increase_of_intensity_due_to_change_energy_technology_net_h()
        * rearrange(
            efficiency_rate_of_substitution_h(),
            ["final sources1", "final sources"],
            _subscript_dict,
        ),
    )


@cache.run
@subs(["final sources"], _subscript_dict)
def policy_change_energy_speed_h_sectoruniform():
    """
    Real Name: "Policy change energy speed H sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G231')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Selection of the speed of application of the different policies to change
        the final energy global.
    """
    return _ext_constant_policy_change_energy_speed_h_sectoruniform()


@cache.run
@subs(["final sources"], _subscript_dict)
def policy_to_improve_efficiency_speed_h_sectoruniform():
    """
    Real Name: "Policy to improve efficiency speed H sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G228')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Selection of the speed of application of the different policies to improve
        the efficiency global
    """
    return _ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform()


@cache.run
@to_float
def exp_slow_evolution_change_energy_h():
    """
    Real Name: exp slow evolution change energy H
    Original Eqn: 2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


@cache.step
@subs(["final sources"], _subscript_dict)
def transport_households_final_energy_demand():
    """
    Real Name: Transport households final energy demand
    Original Eqn: Energy intensity of households transport[final sources]*Household demand total/1e+06
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Final energy in transport households
    """
    return energy_intensity_of_households_transport() * household_demand_total() / 1e06


@cache.run
@to_float
def pct_change_energy_intensity_target():
    """
    Real Name: pct change energy intensity target
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C250')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    In energy intensity target method option 2, the percentage of change in
        energy intensities over the given year
    """
    return _ext_constant_pct_change_energy_intensity_target()


@cache.step
@subs(["final sources"], _subscript_dict)
def policy_change_energy_speed_h():
    """
    Real Name: Policy change energy speed H
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,Policy change energy speed H by sector[final sources],"Policy change energy speed H sector-uniform"[final sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Selection of the speed of application of the different policies to change
        the final energy
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: policy_change_energy_speed_h_by_sector(),
        lambda: policy_change_energy_speed_h_sectoruniform(),
    )


@cache.run
@to_float
def exp_rapid_evolution_improve_efficiency_h():
    """
    Real Name: exp rapid evolution improve efficiency H
    Original Eqn: 1/2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the rapid
        way.
    """
    return 1 / 2


@cache.run
@subs(["final sources"], _subscript_dict)
def policy_change_energy_speed_h_by_sector():
    """
    Real Name: Policy change energy speed H by sector
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FU214')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Selection of the speed of application of the different policies to change
        the final energy by sector.
    """
    return _ext_constant_policy_change_energy_speed_h_by_sector()


@cache.step
@subs(["final sources1"], _subscript_dict)
def change_total_intensity_to_rest():
    """
    Real Name: change total intensity to rest
    Original Eqn:
      1-STEP(0.78, 2009)
      1-STEP(0.025, 2009)
      1-STEP(0.007, 2009)
    Units: EJ/Tdollar
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Adjust to separate in 2009 among transport households and the rest in households. We
        assume that in 2009, 78% of the households liquids are from transport.
        This data is from WIOD (Diesel & gasoline from households is for
        transport) 1,245=0.78*1.596        For other sources, we asume 0% of the energy is for transport
    """
    return xrmerge(
        [
            rearrange(
                1 - step(__data["time"], 0.78, 2009),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                1 - step(__data["time"], 0.025, 2009),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                1 - step(__data["time"], 0.007, 2009),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
        ]
    )


@cache.run
@to_float
def initial_global_energy_intensity_2009_h():
    """
    Real Name: Initial global energy intensity 2009 H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'AK230')
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: constant
    Subs: None

    Global energy intensity of households in 2009
    """
    return _ext_constant_initial_global_energy_intensity_2009_h()


@cache.step
@subs(["final sources"], _subscript_dict)
def evol_final_energy_intensity_h():
    """
    Real Name: Evol final energy intensity H
    Original Eqn: INTEG ( Increase of intensity due to change energy technology H TOP DOWN[final sources ]+inertial rate energy intensity H TOP DOWN[final sources]-Decrease of intensity due to change energy technology H TOP DOWN [final sources], Initial energy intensity 1995 H[final sources])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Energy intensity of households by final source. This variable models the
        dynamic evolution of the vetor of final energy intensities of the 5 types
        of final energy. The evolution of the intensities is considered to be due
        to two main effects: (1) the variation of the energy efficiency (flow due
        to the variable inertial rate energy intensity) and (2) the change of one
        type of final energy by another, As a consequence of a technological
        change (flow due to the variables Increase / decrease of intensity due to
        energy to technology change), as for example the change due to the
        electrification of the transport.
    """
    return _integ_evol_final_energy_intensity_h()


@cache.step
@subs(["final sources", "final sources1"], _subscript_dict)
def pressure_to_change_energy_technology_by_fuel_h():
    """
    Real Name: Pressure to change energy technology by fuel H
    Original Eqn: IF THEN ELSE(efficiency rate of substitution H[final sources,final sources1]=0,MIN(MAX("Inter-fuel scarcity pressure H" [final sources,final sources1],0),1) ,MIN(MAX("Inter-fuel scarcity pressure H"[final sources,final sources1 ] + Implementatio policy to change final energy H [final sources1], 0) , 1 ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'final sources1']

    This variable represents the pressure in households for substituting a
        final energy source for another. This pressure may be due to (1) energy
        policies, eg substitution of fossil fuels for electrical energy, or (2) by
        variations in the scarcity of each type of final energy.
    """
    return if_then_else(
        efficiency_rate_of_substitution_h() == 0,
        lambda: np.minimum(np.maximum(interfuel_scarcity_pressure_h(), 0), 1),
        lambda: np.minimum(
            np.maximum(
                interfuel_scarcity_pressure_h()
                + rearrange(
                    implementatio_policy_to_change_final_energy_h(),
                    ["final sources1"],
                    _subscript_dict,
                ),
                0,
            ),
            1,
        ),
    )


@cache.run
@to_float
def exp_rapid_evolution_change_energy_h():
    """
    Real Name: exp rapid evolution change energy H
    Original Eqn: 1/2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the rapid
        way.
    """
    return 1 / 2


@cache.step
@subs(["final sources", "final sources1"], _subscript_dict)
def efficiency_rate_of_substitution_h():
    """
    Real Name: efficiency rate of substitution H
    Original Eqn: IF THEN ELSE(Choose policies of intensities global or by sector=1,efficiency rate of substitution H by sector[final sources,final sources1],"efficiency rate of substitution H sector-uniform"[final sources,final sources1])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'final sources1']

    It is necessary to take into account that the energy efficiencies of the
        two technologies exchanged do not necessarily have to be the same. In
        other words, a decrease in the energy intensity of (a) will not imply the
        same increase in the energy intensity of (b). This possible difference is
        compensated through the parameter “Efficiency rate of substitution”.
    """
    return if_then_else(
        choose_policies_of_intensities_global_or_by_sector() == 1,
        lambda: efficiency_rate_of_substitution_h_by_sector(),
        lambda: efficiency_rate_of_substitution_h_sectoruniform(),
    )


@cache.run
@to_float
def year_to_finish_policy_change_energy():
    """
    Real Name: Year to finish policy change energy
    Original Eqn: 2050
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to change final energy in the sectors finish.
    """
    return 2050


@cache.run
@to_float
def final_year_target():
    """
    Real Name: final year target
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario' , 'B243')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year defined by user in which the energy intensity targets are set.
    """
    return _ext_constant_final_year_target()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def maximum_yearly_aceleration_of_intensity_improvement_pct():
    """
    Real Name: Maximum yearly aceleration of intensity improvement pct
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B854')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FP854')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Maximum feasible annual changes that could be sustained in the future in
        the energy intensity of each economic sector have been estimated based on
        the observation of trends and historical changes in the available data.
    """
    return _ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct()


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def pressure_to_change_energy_technology_0():
    """
    Real Name: Pressure to change energy technology 0
    Original Eqn: MIN(1,SUM(Pressure to change energy technology by fuel[sectors,final sources1!,final sources]))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    This variable represents the pressure in one sector for substituting a
        final energy source for all the other energies.
    """
    return np.minimum(
        1,
        sum(
            rearrange(
                pressure_to_change_energy_technology_by_fuel(),
                ["sectors", "final sources1", "final sources"],
                _subscript_dict,
            ),
            dim=("final sources1",),
        ),
    )


@cache.step
@subs(["sectors", "final sources", "final sources1"], _subscript_dict)
def pressure_to_change_energy_technology_by_fuel():
    """
    Real Name: Pressure to change energy technology by fuel
    Original Eqn: IF THEN ELSE(efficiency rate of substitution[sectors, final sources,final sources1]=0,MIN(MAX("Inter-fuel scarcity pressure" [final sources,final sources1],0),1) ,MIN(MAX("Inter-fuel scarcity pressure"[final sources,final sources1 ] + Implementatio policy to change final energy [sectors,final sources1], 0) , 1 ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources', 'final sources1']

    This variable represents the pressure in each economic sector for
        substituting a final energy source for another. This change depending on
        the sectors will have different technological difficulty and different
        cost. This pressure may be due to (1) energy policies, eg substitution of
        fossil fuels for electrical energy, or (2) by variations in the scarcity
        of each type of final energy.
    """
    return if_then_else(
        efficiency_rate_of_substitution() == 0,
        lambda: np.minimum(np.maximum(interfuel_scarcity_pressure(), 0), 1),
        lambda: np.minimum(
            np.maximum(
                interfuel_scarcity_pressure()
                + rearrange(
                    implementatio_policy_to_change_final_energy(),
                    ["sectors", "final sources1"],
                    _subscript_dict,
                ),
                0,
            ),
            1,
        ),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def efficiency_energy_aceleration():
    """
    Real Name: Efficiency energy aceleration
    Original Eqn: -Maximum yearly aceleration of intensity improvement pct[sectors,final sources]*(1+Percentage of change over the historic maximun variation of energy intensities)*Pressure to improve energy intensity efficiency [sectors,final sources]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    This variable represents the acceleration of the process of variation of
        the energy intensity that can be produced by polítcas or scarcity
        pressures.
    """
    return (
        -rearrange(
            maximum_yearly_aceleration_of_intensity_improvement_pct(),
            ["sectors", "final sources"],
            _subscript_dict,
        )
        * (
            1
            + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities()
        )
        * pressure_to_improve_energy_intensity_efficiency()
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def pressure_to_improve_energy_intensity_efficiency():
    """
    Real Name: Pressure to improve energy intensity efficiency
    Original Eqn: MIN(1,Fuel scarcity pressure[final sources]+Implementation policy to improve energy intensity efficiency[sectors,final sources])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    This variable represents the pressure in each economic sector to improve
        energy efficiency in the technology used. This change according to the
        sectors will have different technological difficulty and different cost.
        This pressure may be due to (1) energy policies, eg incentives for energy
        efficiency, or (2) significant variations in the scarcity of each type of
        final energy.
    """
    return np.minimum(
        1,
        fuel_scarcity_pressure()
        + implementation_policy_to_improve_energy_intensity_efficiency(),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def implementatio_policy_to_change_final_energy():
    """
    Real Name: Implementatio policy to change final energy
    Original Eqn: IF THEN ELSE(Year policy change energy[sectors,final sources]<2015:OR:Year policy change energy[sectors ,final sources]>Year to finish energy intensity policies,0,IF THEN ELSE(Time<Year policy change energy[sectors,final sources ],0,IF THEN ELSE(Time >Year to finish energy intensity policies,1,IF THEN ELSE(Policy change energy speed[sectors,final sources]= 1,((Time-Year policy change energy[sectors,final sources])/(Year to finish energy intensity policies-Year policy change energy [sectors,final sources]))^(exp rapid evol change energy),IF THEN ELSE(Policy change energy speed[sectors ,final sources]=2,((Time-Year policy change energy[sectors,final sources])/(Year to finish energy intensity policies -Year policy change energy[sectors,final sources])),IF THEN ELSE(Policy change energy speed[sectors ,final sources]=3,((Time-Year policy change energy[sectors,final sources])/(Year to finish energy intensity policies-Year policy change energy[sectors,final sources]))^exp slow evol change energy,0))))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Pressure due to energy policies, eg incentives for change the final energy
    """
    return if_then_else(
        logical_or(
            year_policy_change_energy() < 2015,
            year_policy_change_energy() > year_to_finish_energy_intensity_policies(),
        ),
        lambda: 0,
        lambda: if_then_else(
            time() < year_policy_change_energy(),
            lambda: 0,
            lambda: if_then_else(
                time() > year_to_finish_energy_intensity_policies(),
                lambda: 1,
                lambda: if_then_else(
                    policy_change_energy_speed() == 1,
                    lambda: (
                        (time() - year_policy_change_energy())
                        / (
                            year_to_finish_energy_intensity_policies()
                            - year_policy_change_energy()
                        )
                    )
                    ** (exp_rapid_evol_change_energy()),
                    lambda: if_then_else(
                        policy_change_energy_speed() == 2,
                        lambda: (
                            (time() - year_policy_change_energy())
                            / (
                                year_to_finish_energy_intensity_policies()
                                - year_policy_change_energy()
                            )
                        ),
                        lambda: if_then_else(
                            policy_change_energy_speed() == 3,
                            lambda: (
                                (time() - year_policy_change_energy())
                                / (
                                    year_to_finish_energy_intensity_policies()
                                    - year_policy_change_energy()
                                )
                            )
                            ** exp_slow_evol_change_energy(),
                            lambda: 0,
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def implementation_policy_to_improve_energy_intensity_efficiency():
    """
    Real Name: Implementation policy to improve energy intensity efficiency
    Original Eqn: IF THEN ELSE(Year policy to improve efficiency[sectors,final sources]<2015:OR:Year policy to improve efficiency [sectors,final sources]>Year to finish energy intensity policies,0,IF THEN ELSE(Time<Year policy to improve efficiency [sectors ,final sources],0,IF THEN ELSE(Time >Year to finish energy intensity policies,1,IF THEN ELSE(Policy to improve efficiency speed[sectors ,final sources]= 1,((Time-Year policy to improve efficiency [sectors,final sources])/(Year to finish energy intensity policies-Year policy to improve efficiency [sectors,final sources ]))^(exp rapid evolution improve efficiency),IF THEN ELSE(Policy to improve efficiency speed[sectors,final sources ]=2,((Time-Year policy to improve efficiency[sectors,final sources])/(Year to finish energy intensity policies -Year policy to improve efficiency [sectors,final sources])),IF THEN ELSE(Policy to improve efficiency speed[sectors,final sources]=3, ((Time-Year policy to improve efficiency [sectors,final sources])/(Year to finish energy intensity policies-Year policy to improve efficiency [sectors,final sources ]))^exp slow evolution improve efficiency,0))))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Pressure due to energy policies, eg incentives for energy efficiency,
    """
    return if_then_else(
        logical_or(
            year_policy_to_improve_efficiency() < 2015,
            year_policy_to_improve_efficiency()
            > year_to_finish_energy_intensity_policies(),
        ),
        lambda: 0,
        lambda: if_then_else(
            time() < year_policy_to_improve_efficiency(),
            lambda: 0,
            lambda: if_then_else(
                time() > year_to_finish_energy_intensity_policies(),
                lambda: 1,
                lambda: if_then_else(
                    policy_to_improve_efficiency_speed() == 1,
                    lambda: (
                        (time() - year_policy_to_improve_efficiency())
                        / (
                            year_to_finish_energy_intensity_policies()
                            - year_policy_to_improve_efficiency()
                        )
                    )
                    ** (exp_rapid_evolution_improve_efficiency()),
                    lambda: if_then_else(
                        policy_to_improve_efficiency_speed() == 2,
                        lambda: (
                            (time() - year_policy_to_improve_efficiency())
                            / (
                                year_to_finish_energy_intensity_policies()
                                - year_policy_to_improve_efficiency()
                            )
                        ),
                        lambda: if_then_else(
                            policy_to_improve_efficiency_speed() == 3,
                            lambda: (
                                (time() - year_policy_to_improve_efficiency())
                                / (
                                    year_to_finish_energy_intensity_policies()
                                    - year_policy_to_improve_efficiency()
                                )
                            )
                            ** exp_slow_evolution_improve_efficiency(),
                            lambda: 0,
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.run
@to_float
def year_change_pct_energy_intensity_target():
    """
    Real Name: year change pct energy intensity target
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C249')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    In energy intensity target method option 2, the year over which the energy
        intensities target is calculated
    """
    return _ext_constant_year_change_pct_energy_intensity_target()


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def aux20_0():
    """
    Real Name: aux20 0
    Original Eqn: DELAY FIXED ( Final energy intensity 2020[final sources,sectors], TIME STEP , 0)
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Auxiliarity variable to maintain constant the value of 2009
    """
    return _delayfixed_aux20_0()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def rate_change_intensity_bottom_up():
    """
    Real Name: rate change intensity BOTTOM UP
    Original Eqn:
      0
        .
        .
        .
      0
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Variation of the energy intensity of inland transport in BOTTOM UP method
    """
    return xrmerge(
        [
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Agriculture Hunting Forestry and Fishing"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Mining and Quarrying"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Food Beverages and Tobacco"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Textiles and Textile Products"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Leather Leather and Footwear"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Wood and Products of Woood and Cork"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Pulp Paper Printing and Publishing"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Chemicals and Chemical products"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Rubber and Plastics"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Other Non Metalic Mineral"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Basic Metals and Fabricated Metal"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Machinery Nec"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Electrical and Optical Equipment"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Transport Equipment"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Manufacturing Nec Recycling"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Electricity Gas and Water Supply"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Construction"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": [
                        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                    ],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": [
                        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                    ],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": [
                        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                    ],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Hotels and Restaurants"],
                },
                ["sectors1", "final sources"],
            ),
            rearrange(
                if_then_else(
                    activate_bottom_up_method()
                    .loc["Inland Transport"]
                    .reset_coords(drop=True)
                    == 1,
                    lambda: rearrange(
                        inland_transport_variation_intensity(),
                        ["final sources"],
                        _subscript_dict,
                    ),
                    lambda: 0,
                ),
                ["sectors1", "final sources"],
                {
                    "sectors1": ["Inland Transport"],
                    "final sources": [
                        "electricity",
                        "heat",
                        "liquids",
                        "gases",
                        "solids",
                    ],
                },
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Water Transport"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Air Transport"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": [
                        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                    ],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Post and Telecommunications"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Financial Intermedation"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Real Estate Activities"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Renting od MEq and Other Business Activities"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Public Admin and Defence Compulsory Social Security"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Education"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Health and Social Work"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Other Community Social and Persona Services"],
                },
                ["sectors1", "final sources"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["final sources"]},
                    "sectors1": ["Private Households with Employed Persons"],
                },
                ["sectors1", "final sources"],
            ),
        ]
    )


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def policy_change_energy_speed_by_sector():
    """
    Real Name: Policy change energy speed by sector
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B214')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP214')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Selection of the speed of application of the different policies to change
        the final energy
    """
    return _ext_constant_policy_change_energy_speed_by_sector()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def policy_to_improve_efficiency_speed_by_sector():
    """
    Real Name: Policy to improve efficiency speed by sector
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B211')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP211')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Selection of the speed of application of the different policies to improve
        the efficiency.
    """
    return _ext_constant_policy_to_improve_efficiency_speed_by_sector()


@cache.run
@to_float
def percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities():
    """
    Real Name: Percentage of change over the historic maximun variation of energy intensities
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C200')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    From the available data, the maximum historical variations of the energy
        intensities have been statistically estimated. If in the future these
        maximum variations are different, this variable establishes the percentage
        of variation that can occur over the defined data.
    """
    return (
        _ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities()
    )


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def max_yearly_change_0():
    """
    Real Name: Max yearly change 0
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B857')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FP857')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    maximum annual change for one type of energy in a sector.
    """
    return _ext_constant_max_yearly_change_0()


@cache.step
@subs(["final sources"], _subscript_dict)
def total_transport_fed_by_fuel():
    """
    Real Name: Total transport FED by fuel
    Original Eqn: Required final energy transport IOT sectors[final sources]+Transport households final energy demand[final sources]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Total energy in transport. This model considers transport the four sector
        in WIOD related with transport and households transport.
    """
    return (
        required_final_energy_transport_iot_sectors()
        + transport_households_final_energy_demand()
    )


@cache.run
@subs(["sectors1", "final sources", "final sources1"], _subscript_dict)
def efficiency_rate_of_substitution_by_sector():
    """
    Real Name: efficiency rate of substitution by sector
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B216')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP216')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources', 'final sources1']

    It is necessary to take into account that the energy efficiencies of the
        two technologies exchanged do not necessarily have to be the same. In
        other words, a decrease in the energy intensity of (a) will not imply the
        same increase in the energy intensity of (b). This possible difference is
        compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_by_sector()


@cache.run
@subs(["final sources", "final sources1"], _subscript_dict)
def efficiency_rate_of_substitution_sectoruniform():
    """
    Real Name: "efficiency rate of substitution sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B233')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources', 'final sources1']

    It is necessary to take into account that the energy efficiencies of the
        two technologies exchanged do not necessarily have to be the same. In
        other words, a decrease in the energy intensity of (a) will not imply the
        same increase in the energy intensity of (b). This possible difference is
        compensated through the parameter “Efficiency rate of substitution”.
    """
    return _ext_constant_efficiency_rate_of_substitution_sectoruniform()


@cache.run
@subs(["final sources"], _subscript_dict)
def year_policy_change_energy_sectoruniform():
    """
    Real Name: "Year policy change energy sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B230')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Year when the policy to change final energy in the sectors start. For each
        of five final energies.
    """
    return _ext_constant_year_policy_change_energy_sectoruniform()


@cache.run
@to_float
def min_energy_intensity_vs_intial():
    """
    Real Name: min energy intensity vs intial
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C199')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Minimum value that the energy intensity for each economic sector could
        reach, obviously always above zero. This minimum value is very difficult
        to estimate, but based on historical values it has been considered that it
        can reach 30% of the value of 2009. (Capellán-Pérez et al., 2014)
    """
    return _ext_constant_min_energy_intensity_vs_intial()


@cache.step
@subs(["sectors", "final sources1", "final sources"], _subscript_dict)
def increase_of_intensity_due_to_energy_a_technology_net():
    """
    Real Name: Increase of intensity due to energy a technology net
    Original Eqn: Decrease of intensity due to energy a technology change TOP DOWN[sectors,final sources]*share tech change fuel[sectors,final sources1,final sources]
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources1', 'final sources']

    Increase of intensity due to change a energy technology without
        considering efficieny rate of susbsitution by fuel
    """
    return (
        decrease_of_intensity_due_to_energy_a_technology_change_top_down()
        * share_tech_change_fuel()
    )


@cache.step
@subs(["sectors", "final sources1", "final sources"], _subscript_dict)
def increase_of_intensity_due_to_energy_a_technology_eff():
    """
    Real Name: Increase of intensity due to energy a technology eff
    Original Eqn: IF THEN ELSE(efficiency rate of substitution[sectors,final sources1,final sources]=0,Increase of intensity due to energy a technology net [sectors,final sources1,final sources],Increase of intensity due to energy a technology net[sectors, final sources1,final sources]*efficiency rate of substitution[sectors,final sources1,final sources])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources1', 'final sources']

    Increase of intensity due to change a energy technology by fuel
    """
    return if_then_else(
        rearrange(
            efficiency_rate_of_substitution(),
            ["sectors", "final sources1", "final sources"],
            _subscript_dict,
        )
        == 0,
        lambda: increase_of_intensity_due_to_energy_a_technology_net(),
        lambda: increase_of_intensity_due_to_energy_a_technology_net()
        * rearrange(
            efficiency_rate_of_substitution(),
            ["sectors", "final sources1", "final sources"],
            _subscript_dict,
        ),
    )


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def minimum_fraction_0():
    """
    Real Name: minimum fraction 0
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B856')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FP856')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    minimum energy of each type of energy that should be used in each sector
        because it is irreplaceable
    """
    return _ext_constant_minimum_fraction_0()


@cache.step
@subs(["final sources"], _subscript_dict)
def final_energy_footprint_by_fuel():
    """
    Real Name: Final energy footprint by fuel
    Original Eqn: Households final energy demand[final sources]+required FED sectors by fuel[final sources]+Total energy embedded in EU28 imports [final sources]-Total energy embedded in EU28 exports[final sources]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Final energy consumption to satisfy EU28 domestic final demand by sector
    """
    return (
        households_final_energy_demand()
        + required_fed_sectors_by_fuel()
        + total_energy_embedded_in_eu28_imports()
        - total_energy_embedded_in_eu28_exports()
    )


@cache.step
@to_float
def modern_solids_bioe_demand_households():
    """
    Real Name: modern solids BioE demand households
    Original Eqn: Households final energy demand[solids]-PE traditional biomass demand EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of modern solids bioenergy in households.
    """
    return (
        households_final_energy_demand().loc["solids"].reset_coords(drop=True)
        - pe_traditional_biomass_demand_ej()
    )


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def initial_energy_intensity_by_fuel_and_sector_1995():
    """
    Real Name: Initial energy intensity by fuel and sector 1995
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'T49')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'GH49')
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Initial energy intensity by sector and fuel in 1995
    """
    return _ext_constant_initial_energy_intensity_by_fuel_and_sector_1995()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def energy_intensity_target_by_sector_and_fuel():
    """
    Real Name: Energy intensity target by sector and fuel
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B247')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP247')
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Energy intensity targets by sector and final energy defined by user
    """
    return _ext_constant_energy_intensity_target_by_sector_and_fuel()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def historical_mean_rate_energy_intensity():
    """
    Real Name: historical mean rate energy intensity
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'T48')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'GH48')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Historical trend of sectors energy intensity by final souerce (OLS method)
    """
    return _ext_constant_historical_mean_rate_energy_intensity()


@cache.run
@to_float
def policy_to_improve_efficiency_speed_sectoruniform():
    """
    Real Name: "Policy to improve efficiency speed sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B228')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Selection of the speed of application of the different policies to improve
        the efficiency.
    """
    return _ext_constant_policy_to_improve_efficiency_speed_sectoruniform()


@cache.run
@to_float
def activate_scarcity_feedback_final_fuel_replacement_0():
    """
    Real Name: "Activate scarcity feedback final fuel replacement? 0"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B256')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to (de)activate the scarcity feedback fuel replacement.
    """
    return _ext_constant_activate_scarcity_feedback_final_fuel_replacement_0()


@cache.run
@subs(["sectors"], _subscript_dict)
def initial_global_energy_intensity_by_sector_2009():
    """
    Real Name: Initial global energy intensity by sector 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B230')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']

    Initial global energy intensity by sector 2009
    """
    return _ext_constant_initial_global_energy_intensity_by_sector_2009()


@cache.run
@to_float
def exp_slow_evol_change_energy():
    """
    Real Name: exp slow evol change energy
    Original Eqn: 2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


def historic_final_energy_intensity_by_sector_and_fuel(x):
    """
    Real Name: Historic final energy intensity by sector and fuel
    Original Eqn:
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C48')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C84')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C120')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C156')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '47', 'C192')
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: lookup
    Subs: ['final sources1', 'sectors']

    Energy intensity. (35 WIOD sectors & final sources). US$1995
    """
    return _ext_lookup_historic_final_energy_intensity_by_sector_and_fuel(x)


@cache.run
@subs(["final sources"], _subscript_dict)
def year_policy_to_improve_efficiency_sectoruniform():
    """
    Real Name: "Year policy to improve efficiency sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B227')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Year when the policy to improve efficiency in sectors start. For each of
        five final energies.
    """
    return _ext_constant_year_policy_to_improve_efficiency_sectoruniform()


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def evol_final_energy_intensity_by_sector_and_fuel():
    """
    Real Name: Evol final energy intensity by sector and fuel
    Original Eqn: INTEG ( Increase of intensity due to energy a technology change TOP DOWN[sectors,final sources]+inertial rate energy intensity TOP DOWN[sectors,final sources]+rate change intensity BOTTOM UP[sectors,final sources]-Decrease of intensity due to energy a technology change TOP DOWN[sectors,final sources], Initial energy intensity by fuel and sector 1995[sectors,final sources])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    This variable models the dynamic evolution of the matrix of energy intensities of
        the 35 economic sectors and the 5 types of final energy. It is a 35x5
        matrix.        The evolution of the intensities is considered to be due to two main
        effects: (1) the variation of the energy efficiency (flow due to the
        variable inertial rate energy intensity) and (2) the change of one type of
        final energy by another, As a consequence of a technological change (flow
        due to the variables Increase / decrease of intensity due to energy to
        technology change), as for example the change due to the electrification
        of the transport.
    """
    return _integ_evol_final_energy_intensity_by_sector_and_fuel()


@cache.step
@to_float
def pe_traditional_biomass_demand_ej():
    """
    Real Name: PE traditional biomass demand EJ
    Original Eqn: Households final energy demand[solids]*share trad biomass vs solids in households
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy demand of traditional biomass driven by population
        and energy intensity evolution. It also includes charcoal and biosolids
        for solids.
    """
    return (
        households_final_energy_demand().loc["solids"].reset_coords(drop=True)
        * share_trad_biomass_vs_solids_in_households()
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def historic_rate_final_energy_intensity():
    """
    Real Name: historic rate final energy intensity
    Original Eqn: Historic final energy intensity by sector and fuel[final sources,sectors](INTEGER(Time+1))-Historic final energy intensity by sector and fuel[final sources,sectors](INTEGER(Time))
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    Historic variation of final energy intensity by final souerce (WIOD data)
    """
    return rearrange(
        historic_final_energy_intensity_by_sector_and_fuel(int(time() + 1)),
        ["final sources", "sectors"],
        _subscript_dict,
    ) - rearrange(
        historic_final_energy_intensity_by_sector_and_fuel(int(time())),
        ["final sources", "sectors"],
        _subscript_dict,
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def decrease_of_intensity_due_to_energy_a_technology_change_top_down():
    """
    Real Name: Decrease of intensity due to energy a technology change TOP DOWN
    Original Eqn: IF THEN ELSE(Activate BOTTOM UP method[sectors]=0,IF THEN ELSE((ZIDZ(Evol final energy intensity by sector and fuel [sectors,final sources], Global energy intensity by sector [sectors])) >= minimum fraction 0[sectors,final sources] ,(Max yearly change 0[sectors,final sources]*(1+Percentage of change over the historic maximun variation of energy intensities)) *Evol final energy intensity by sector and fuel[sectors, final sources ] * Pressure to change energy technology 0[sectors,final sources] , 0 ),0)
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    When in one economic sector, one type of energy (a) is replaced by another
        (b), the energy intensity of (b) will increase and the energy intensity of
        (a) will decrease. This flow represents the decrease of (a).
    """
    return if_then_else(
        rearrange(activate_bottom_up_method(), ["sectors"], _subscript_dict) == 0,
        lambda: if_then_else(
            (
                zidz(
                    evol_final_energy_intensity_by_sector_and_fuel(),
                    global_energy_intensity_by_sector(),
                )
            )
            >= rearrange(
                minimum_fraction_0(), ["sectors", "final sources"], _subscript_dict
            ),
            lambda: (
                rearrange(
                    max_yearly_change_0(), ["sectors", "final sources"], _subscript_dict
                )
                * (
                    1
                    + percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities()
                )
            )
            * evol_final_energy_intensity_by_sector_and_fuel()
            * pressure_to_change_energy_technology_0(),
            lambda: 0,
        ),
        lambda: 0,
    )


@cache.run
@to_float
def year_to_finish_energy_intensity_policies():
    """
    Real Name: Year to finish energy intensity policies
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C204')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to improve efficiency in sectors finish.
    """
    return _ext_constant_year_to_finish_energy_intensity_policies()


@cache.run
@to_float
def exp_rapid_evol_change_energy():
    """
    Real Name: exp rapid evol change energy
    Original Eqn: 1/2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the rapid
        way.
    """
    return 1 / 2


@cache.run
@to_float
def choose_final_sectoral_energy_intensities_evolution_method():
    """
    Real Name: Choose final sectoral energy intensities evolution method
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C195')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0- Dynamic evolution with policies and feedback of final fuel scarcity        1- Constant at 2009 levels        2- Sectoral energy intensity targets defined by user
    """
    return _ext_constant_choose_final_sectoral_energy_intensities_evolution_method()


@cache.run
@subs(["final sources"], _subscript_dict)
def policy_change_energy_speed_sectoruniform():
    """
    Real Name: "Policy change energy speed sector-uniform"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B231')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources']

    Selection of the speed of application of the different policies to change
        the final energy
    """
    return _ext_constant_policy_change_energy_speed_sectoruniform()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def year_policy_to_improve_efficiency_by_sector():
    """
    Real Name: Year policy to improve efficiency by sector
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B210')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP210')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Year when the policy to improve efficiency in sectors start. For each of
        five final energies.
    """
    return _ext_constant_year_policy_to_improve_efficiency_by_sector()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def year_policy_change_energy_by_sector():
    """
    Real Name: Year policy change energy by sector
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B213')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP213')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']

    Year when the policy to change final energy in the sectors start. For each
        of five final energies.
    """
    return _ext_constant_year_policy_change_energy_by_sector()


@cache.step
@subs(["sectors", "final sources1", "final sources"], _subscript_dict)
def share_tech_change_fuel():
    """
    Real Name: share tech change fuel
    Original Eqn: ZIDZ( Pressure to change energy technology by fuel[sectors,final sources1,final sources] , SUM(Pressure to change energy technology by fuel[sectors,final sources1!,final sources]))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources1', 'final sources']

    Share of the global pressure to change energy technology that corresponds
        to each fuel.
    """
    return zidz(
        rearrange(
            pressure_to_change_energy_technology_by_fuel(),
            ["sectors", "final sources1", "final sources"],
            _subscript_dict,
        ),
        sum(
            rearrange(
                pressure_to_change_energy_technology_by_fuel(),
                ["sectors", "final sources1", "final sources"],
                _subscript_dict,
            ),
            dim=("final sources1",),
        ),
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def increase_of_intensity_due_to_energy_a_technology_change_top_down():
    """
    Real Name: Increase of intensity due to energy a technology change TOP DOWN
    Original Eqn: SUM(Increase of intensity due to energy a technology eff[sectors,final sources,final sources1!])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'final sources']

    When in one economic sector, one type of energy (a) is replaced by another
        (b), the energy intensity of (b) will increase and the energy intensity of
        (a) will decrease. This flow represents the increase of (b).
    """
    return sum(
        rearrange(
            increase_of_intensity_due_to_energy_a_technology_eff(),
            ["sectors", "final sources", "final sources1"],
            _subscript_dict,
        ),
        dim=("final sources1",),
    )


@cache.run
@to_float
def exp_slow_evolution_improve_efficiency():
    """
    Real Name: exp slow evolution improve efficiency
    Original Eqn: 2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the slow way.
    """
    return 2


@cache.run
@subs(["sectors1"], _subscript_dict)
def activate_bottom_up_method():
    """
    Real Name: Activate BOTTOM UP method
    Original Eqn:
      0
        .
        .
        .
      0
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1']

    Activate BOTTOM UP method or maintain TOP DOWN method. Activate for each sector (by
        default, only inland transport sector)        0. Bottom-up NOT activated        1. Bottom-up activated
    """
    return xrmerge(
        [
            xr.DataArray(
                0,
                {"sectors1": ["Agriculture Hunting Forestry and Fishing"]},
                ["sectors1"],
            ),
            xr.DataArray(0, {"sectors1": ["Mining and Quarrying"]}, ["sectors1"]),
            xr.DataArray(0, {"sectors1": ["Food Beverages and Tobacco"]}, ["sectors1"]),
            xr.DataArray(
                0, {"sectors1": ["Textiles and Textile Products"]}, ["sectors1"]
            ),
            xr.DataArray(
                0, {"sectors1": ["Leather Leather and Footwear"]}, ["sectors1"]
            ),
            xr.DataArray(
                0, {"sectors1": ["Wood and Products of Woood and Cork"]}, ["sectors1"]
            ),
            xr.DataArray(
                0, {"sectors1": ["Pulp Paper Printing and Publishing"]}, ["sectors1"]
            ),
            xr.DataArray(
                0,
                {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"]},
                ["sectors1"],
            ),
            xr.DataArray(
                0, {"sectors1": ["Chemicals and Chemical products"]}, ["sectors1"]
            ),
            xr.DataArray(0, {"sectors1": ["Rubber and Plastics"]}, ["sectors1"]),
            xr.DataArray(0, {"sectors1": ["Other Non Metalic Mineral"]}, ["sectors1"]),
            xr.DataArray(
                0, {"sectors1": ["Basic Metals and Fabricated Metal"]}, ["sectors1"]
            ),
            xr.DataArray(0, {"sectors1": ["Machinery Nec"]}, ["sectors1"]),
            xr.DataArray(
                0, {"sectors1": ["Electrical and Optical Equipment"]}, ["sectors1"]
            ),
            xr.DataArray(0, {"sectors1": ["Transport Equipment"]}, ["sectors1"]),
            xr.DataArray(
                0, {"sectors1": ["Manufacturing Nec Recycling"]}, ["sectors1"]
            ),
            xr.DataArray(
                0, {"sectors1": ["Electricity Gas and Water Supply"]}, ["sectors1"]
            ),
            xr.DataArray(0, {"sectors1": ["Construction"]}, ["sectors1"]),
            xr.DataArray(
                0,
                {
                    "sectors1": [
                        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                    ]
                },
                ["sectors1"],
            ),
            xr.DataArray(
                0,
                {
                    "sectors1": [
                        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                    ]
                },
                ["sectors1"],
            ),
            xr.DataArray(
                0,
                {
                    "sectors1": [
                        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                    ]
                },
                ["sectors1"],
            ),
            xr.DataArray(0, {"sectors1": ["Hotels and Restaurants"]}, ["sectors1"]),
            _ext_constant_activate_bottom_up_method(),
            xr.DataArray(0, {"sectors1": ["Water Transport"]}, ["sectors1"]),
            xr.DataArray(0, {"sectors1": ["Air Transport"]}, ["sectors1"]),
            xr.DataArray(
                0,
                {
                    "sectors1": [
                        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                    ]
                },
                ["sectors1"],
            ),
            xr.DataArray(
                0, {"sectors1": ["Post and Telecommunications"]}, ["sectors1"]
            ),
            xr.DataArray(0, {"sectors1": ["Financial Intermedation"]}, ["sectors1"]),
            xr.DataArray(0, {"sectors1": ["Real Estate Activities"]}, ["sectors1"]),
            xr.DataArray(
                0,
                {"sectors1": ["Renting od MEq and Other Business Activities"]},
                ["sectors1"],
            ),
            xr.DataArray(
                0,
                {"sectors1": ["Public Admin and Defence Compulsory Social Security"]},
                ["sectors1"],
            ),
            xr.DataArray(0, {"sectors1": ["Education"]}, ["sectors1"]),
            xr.DataArray(0, {"sectors1": ["Health and Social Work"]}, ["sectors1"]),
            xr.DataArray(
                0,
                {"sectors1": ["Other Community Social and Persona Services"]},
                ["sectors1"],
            ),
            xr.DataArray(
                0,
                {"sectors1": ["Private Households with Employed Persons"]},
                ["sectors1"],
            ),
        ]
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def global_energy_intensity_by_sector():
    """
    Real Name: Global energy intensity by sector
    Original Eqn: SUM(Evol final energy intensity by sector and fuel[sectors,final sources!])
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Global energy intensity of one sector considering the energy intensity of
        five final fuels.
    """
    return sum(evol_final_energy_intensity_by_sector_and_fuel(), dim=("final sources",))


@cache.step
@subs(["final sources"], _subscript_dict)
def required_fed_by_fuel_before_heat_correction():
    """
    Real Name: Required FED by fuel before heat correction
    Original Eqn: (required FED sectors by fuel[final sources]+Households final energy demand[final sources]) *EROI FC system from 2015
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Required final energy demand by fuel before heat demand correction.        The final energy demand is modified with the feedback from the change of
        the EROEI.
    """
    return (
        required_fed_sectors_by_fuel() + households_final_energy_demand()
    ) * eroi_fc_system_from_2015()


@cache.step
@subs(["sectors"], _subscript_dict)
def available_improvement_efficiency():
    """
    Real Name: available improvement efficiency
    Original Eqn: MIN(1,IF THEN ELSE(Time>2009, ZIDZ( (Global energy intensity by sector[sectors]-(min energy intensity vs intial*Initial global energy intensity by sector 2009[sectors])), (1-min energy intensity vs intial)*Initial global energy intensity by sector 2009[sectors]), 1))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Remainig improvement of energy intensity respect to the minimum value.
    """
    return np.minimum(
        1,
        if_then_else(
            time() > 2009,
            lambda: zidz(
                (
                    global_energy_intensity_by_sector()
                    - (
                        min_energy_intensity_vs_intial()
                        * initial_global_energy_intensity_by_sector_2009()
                    )
                ),
                (1 - min_energy_intensity_vs_intial())
                * initial_global_energy_intensity_by_sector_2009(),
            ),
            lambda: 1,
        ),
    )


@cache.run
@to_float
def exp_rapid_evolution_improve_efficiency():
    """
    Real Name: exp rapid evolution improve efficiency
    Original Eqn: 1/2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Parameter that define the speed of application of policies in the rapid
        way.
    """
    return 1 / 2


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def final_energy_intensity_by_sector_and_fuel_eu():
    """
    Real Name: Final energy intensity by sector and fuel EU
    Original Eqn: Evol final energy intensity by sector and fuel[sectors,final sources]
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Evolution of final energy intensity by sector and fuel.
    """
    return evol_final_energy_intensity_by_sector_and_fuel()


@cache.step
@to_float
def adapt_max_share_imports_oil_ue():
    """
    Real Name: adapt max share imports oil UE
    Original Eqn: IF THEN ELSE(Time<2016,Historic share net imports oil until 2016,IF THEN ELSE(Time<2021,Historic share net imports oil until 2016+(max share imports oil UE-Historic share net imports oil until 2016)*((Time-2016)/(2021-2016)),max share imports oil UE))
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_net_imports_oil_until_2016(),
        lambda: if_then_else(
            time() < 2021,
            lambda: historic_share_net_imports_oil_until_2016()
            + (max_share_imports_oil_ue() - historic_share_net_imports_oil_until_2016())
            * ((time() - 2016) / (2021 - 2016)),
            lambda: max_share_imports_oil_ue(),
        ),
    )


@cache.step
@to_float
def imports_eu_coal_from_row_ej():
    """
    Real Name: imports EU coal from RoW EJ
    Original Eqn: IF THEN ELSE(Time<2016, PED EU coal from RoW, IF THEN ELSE("Limited coal imports from RoW?"=1, PED EU coal from RoW, IF THEN ELSE ("Limited coal imports from RoW?"=2, MIN(PED EU coal from RoW,Historic share net imports coal EU until 2016 *extraction coal EJ World), IF THEN ELSE("Limited coal imports from RoW?"=3, MIN(PED EU coal from RoW, adapt max share import coal UE*extraction coal EJ World ), PED EU coal from RoW))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    IF THEN ELSE(Time<2016, Historic share net imports coal EU until 2016*extraction
        coal EJ World,        IF THEN ELSE("Limited coal imports from RoW?"=0, PED EU coal from RoW,        IF THEN ELSE ("Limited coal imports from RoW?"=1, MIN(PED EU coal from RoW, Historic
        share net imports coal EU until 2016*extraction coal EJ World), PED EU
        coal from RoW)))        IF THEN ELSE(Time<2016, PED EU coal from RoW,        IF THEN ELSE("Limited coal imports from RoW?"=0, PED EU coal from RoW,        IF THEN ELSE ("Limited coal imports from RoW?"=1, MIN(PED EU coal from
        RoW, Historic share net imports coal EU until 2016*extraction coal EJ
        World), PED EU coal from RoW)))
    """
    return if_then_else(
        time() < 2016,
        lambda: ped_eu_coal_from_row(),
        lambda: if_then_else(
            limited_coal_imports_from_row() == 1,
            lambda: ped_eu_coal_from_row(),
            lambda: if_then_else(
                limited_coal_imports_from_row() == 2,
                lambda: np.minimum(
                    ped_eu_coal_from_row(),
                    historic_share_net_imports_coal_eu_until_2016()
                    * extraction_coal_ej_world(),
                ),
                lambda: if_then_else(
                    limited_coal_imports_from_row() == 3,
                    lambda: np.minimum(
                        ped_eu_coal_from_row(),
                        adapt_max_share_import_coal_ue() * extraction_coal_ej_world(),
                    ),
                    lambda: ped_eu_coal_from_row(),
                ),
            ),
        ),
    )


@cache.step
@to_float
def adapt_max_share_import_coal_ue():
    """
    Real Name: adapt max share import coal UE
    Original Eqn: IF THEN ELSE(Time<2016,Historic share net imports coal EU until 2016,IF THEN ELSE(Time<2021,Historic share net imports coal EU until 2016+(max share import coal UE-Historic share net imports coal EU until 2016)*((Time-2016)/(2021-2016)),max share import coal UE))
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_net_imports_coal_eu_until_2016(),
        lambda: if_then_else(
            time() < 2021,
            lambda: historic_share_net_imports_coal_eu_until_2016()
            + (
                max_share_import_coal_ue()
                - historic_share_net_imports_coal_eu_until_2016()
            )
            * ((time() - 2016) / (2021 - 2016)),
            lambda: max_share_import_coal_ue(),
        ),
    )


@cache.step
@to_float
def adapt_max_share_imports_nat_gas_ue():
    """
    Real Name: "adapt max share imports nat. gas UE"
    Original Eqn: IF THEN ELSE(Time<2016,"Historic share net imports nat. gas until 2016",IF THEN ELSE(Time<2021,"Historic share net imports nat. gas until 2016"+("max share imports nat. gas. UE"-"Historic share net imports nat. gas until 2016")*((Time-2016)/(2021-2016)),"max share imports nat. gas. UE"))
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_net_imports_nat_gas_until_2016(),
        lambda: if_then_else(
            time() < 2021,
            lambda: historic_share_net_imports_nat_gas_until_2016()
            + (
                max_share_imports_nat_gas_ue()
                - historic_share_net_imports_nat_gas_until_2016()
            )
            * ((time() - 2016) / (2021 - 2016)),
            lambda: max_share_imports_nat_gas_ue(),
        ),
    )


@cache.step
@to_float
def imports_eu_nat_gas_from_row_ej():
    """
    Real Name: "imports EU nat. gas from RoW EJ"
    Original Eqn: IF THEN ELSE(Time<2016, "PED EU nat. gas from RoW", IF THEN ELSE("Limited nat. gas. imports from RoW?"=1, "PED EU nat. gas from RoW", IF THEN ELSE ("Limited nat. gas. imports from RoW?"=2, MIN("PED EU nat. gas from RoW","Historic share net imports nat. gas until 2016" *"extraction nat. gas EJ World"), IF THEN ELSE("Limited nat. gas. imports from RoW?"=3, MIN("PED EU nat. gas from RoW","adapt max share imports nat. gas UE"*"extraction nat. gas EJ World"), "PED EU nat. gas from RoW"))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: ped_eu_nat_gas_from_row(),
        lambda: if_then_else(
            limited_nat_gas_imports_from_row() == 1,
            lambda: ped_eu_nat_gas_from_row(),
            lambda: if_then_else(
                limited_nat_gas_imports_from_row() == 2,
                lambda: np.minimum(
                    ped_eu_nat_gas_from_row(),
                    historic_share_net_imports_nat_gas_until_2016()
                    * extraction_nat_gas_ej_world(),
                ),
                lambda: if_then_else(
                    limited_nat_gas_imports_from_row() == 3,
                    lambda: np.minimum(
                        ped_eu_nat_gas_from_row(),
                        adapt_max_share_imports_nat_gas_ue()
                        * extraction_nat_gas_ej_world(),
                    ),
                    lambda: ped_eu_nat_gas_from_row(),
                ),
            ),
        ),
    )


@cache.step
@to_float
def imports_eu_total_oil_from_row_ej():
    """
    Real Name: imports EU total oil from RoW EJ
    Original Eqn: IF THEN ELSE(Time<2016, PED EU total oil from RoW, IF THEN ELSE("Limited oil imports from RoW?"=1, PED EU total oil from RoW, IF THEN ELSE ("Limited oil imports from RoW?"=2, MIN(PED EU total oil from RoW,Historic share net imports oil until 2016 *Extraction oil EJ World), IF THEN ELSE("Limited oil imports from RoW?"=3, MIN(PED EU total oil from RoW,adapt max share imports oil UE*Extraction oil EJ World ), PED EU total oil from RoW))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: ped_eu_total_oil_from_row(),
        lambda: if_then_else(
            limited_oil_imports_from_row() == 1,
            lambda: ped_eu_total_oil_from_row(),
            lambda: if_then_else(
                limited_oil_imports_from_row() == 2,
                lambda: np.minimum(
                    ped_eu_total_oil_from_row(),
                    historic_share_net_imports_oil_until_2016()
                    * extraction_oil_ej_world(),
                ),
                lambda: if_then_else(
                    limited_oil_imports_from_row() == 3,
                    lambda: np.minimum(
                        ped_eu_total_oil_from_row(),
                        adapt_max_share_imports_oil_ue() * extraction_oil_ej_world(),
                    ),
                    lambda: ped_eu_total_oil_from_row(),
                ),
            ),
        ),
    )


@cache.step
@to_float
def historic_share_coal_domestic_ue_extraction():
    """
    Real Name: Historic share coal domestic UE extraction
    Original Eqn: ZIDZ(Historic coal domestic EU extracted EJ, PED coal EJ)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(historic_coal_domestic_eu_extracted_ej(), ped_coal_ej())


@cache.step
@to_float
def historic_share_coal_domestic_ue_extraction_until_2016():
    """
    Real Name: Historic share coal domestic UE extraction until 2016
    Original Eqn: IF THEN ELSE(Time<2016, Historic share coal domestic UE extraction , aux19)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_coal_domestic_ue_extraction(),
        lambda: aux19(),
    )


@cache.step
@to_float
def aux19():
    """
    Real Name: aux19
    Original Eqn: DELAY FIXED ( Historic share coal domestic UE extraction until 2016, TIME STEP , 0.75)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the EROIst of the system in the year 2015.
    """
    return _delayfixed_aux19()


@cache.run
@to_float
def max_share_import_coal_ue():
    """
    Real Name: max share import coal UE
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F327')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_max_share_import_coal_ue()


@cache.step
@to_float
def historic_net_imports_coal_eu():
    """
    Real Name: Historic net imports coal EU
    Original Eqn: PED coal EJ-Historic coal domestic EU extracted EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return ped_coal_ej() - historic_coal_domestic_eu_extracted_ej()


@cache.run
@to_float
def limited_coal_imports_from_row():
    """
    Real Name: "Limited coal imports from RoW?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D325')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1: Unlimited coal imports share from RoW (constrained by total global production)        2: Limited imports coal of UE from RoW (at 2016 share of EU imports vs global
        production)        3: Limited imports coal of UE from Row (user defined)
    """
    return _ext_constant_limited_coal_imports_from_row()


@cache.step
@to_float
def ped_domestic_eu_coal_ej():
    """
    Real Name: PED domestic EU coal EJ
    Original Eqn: PED coal EJ*Historic share coal domestic UE extraction until 2016
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return ped_coal_ej() * historic_share_coal_domestic_ue_extraction_until_2016()


@cache.step
@to_float
def historic_share_unconv_nat_gas_domestric_eu_extraction():
    """
    Real Name: "Historic share unconv. nat. gas domestric EU extraction"
    Original Eqn: ZIDZ("Historic unconv nat. gas domestic EU extracted EJ","PED nat. gas EJ")
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(historic_unconv_nat_gas_domestic_eu_extracted_ej(), ped_nat_gas_ej())


@cache.run
@to_float
def limited_nat_gas_imports_from_row():
    """
    Real Name: "Limited nat. gas. imports from RoW?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D321')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1: Unlimited coal imports share from RoW (constrained by total global production)        2: Limited imports coal of UE from RoW (at 2016 share of EU imports vs global
        production)        3: Limited imports coal of UE from Row (user defined)
    """
    return _ext_constant_limited_nat_gas_imports_from_row()


@cache.step
@to_float
def historic_net_imports_nat_gas_eu():
    """
    Real Name: "Historic net imports nat. gas EU"
    Original Eqn: "PED nat. gas EJ"-"Historic conv nat. gas domestic EU extracted EJ"-"Historic unconv nat. gas domestic EU extracted EJ"
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        ped_nat_gas_ej()
        - historic_conv_nat_gas_domestic_eu_extracted_ej()
        - historic_unconv_nat_gas_domestic_eu_extracted_ej()
    )


@cache.step
@to_float
def aux21():
    """
    Real Name: aux21
    Original Eqn: DELAY FIXED ( "Historic share unconv. nat. gas domestric EU extraction until 2016", TIME STEP, 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux21()


@cache.step
@to_float
def historic_share_conv_nat_gas_domestic_eu_extraction():
    """
    Real Name: "Historic share conv. nat gas domestic EU extraction"
    Original Eqn: ZIDZ("Historic conv nat. gas domestic EU extracted EJ","PED nat. gas EJ")
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(historic_conv_nat_gas_domestic_eu_extracted_ej(), ped_nat_gas_ej())


@cache.run
@to_float
def max_share_imports_nat_gas_ue():
    """
    Real Name: "max share imports nat. gas. UE"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F323')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_max_share_imports_nat_gas_ue()


@cache.step
@to_float
def historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016():
    """
    Real Name: "Historic share unconv. nat. gas domestric EU extraction until 2016"
    Original Eqn: IF THEN ELSE(Time<2016, "Historic share unconv. nat. gas domestric EU extraction", aux21)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_unconv_nat_gas_domestric_eu_extraction(),
        lambda: aux21(),
    )


@cache.step
@to_float
def historic_share_conv_nat_gas_domestic_eu_extraction_until_2016():
    """
    Real Name: "Historic share conv. nat gas domestic EU extraction until 2016"
    Original Eqn: IF THEN ELSE(Time<2016, "Historic share conv. nat gas domestic EU extraction", aux20)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_conv_nat_gas_domestic_eu_extraction(),
        lambda: aux20(),
    )


@cache.step
@to_float
def ped_domestic_eu_total_natgas_ej():
    """
    Real Name: "PED domestic EU total nat.gas EJ"
    Original Eqn: "PED nat. gas EJ"*("Historic share conv. nat gas domestic EU extraction until 2016"+"Historic share unconv. nat. gas domestric EU extraction until 2016")
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return ped_nat_gas_ej() * (
        historic_share_conv_nat_gas_domestic_eu_extraction_until_2016()
        + historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016()
    )


@cache.run
@to_float
def max_share_imports_oil_ue():
    """
    Real Name: max share imports oil UE
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F319')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_max_share_imports_oil_ue()


@cache.run
@to_float
def limited_oil_imports_from_row():
    """
    Real Name: "Limited oil imports from RoW?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D317')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1: Unlimited coal imports share from RoW (constrained by total global production)        2: Limited imports coal of UE from RoW (at 2016 share of EU imports vs global
        production)        3: Limited imports coal of UE from Row (user defined)
    """
    return _ext_constant_limited_oil_imports_from_row()


@cache.step
@to_float
def aux24():
    """
    Real Name: aux24
    Original Eqn: DELAY FIXED ( "Historic share unconv. oil domestric EU extraction until 2016", TIME STEP, 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux24()


@cache.step
@to_float
def historic_share_unconv_oil_domestric_eu_extraction_until_2016():
    """
    Real Name: "Historic share unconv. oil domestric EU extraction until 2016"
    Original Eqn: IF THEN ELSE(Time<2016, "Historic share unconv. oil domestric EU extraction", aux24)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_unconv_oil_domestric_eu_extraction(),
        lambda: aux24(),
    )


@cache.step
@to_float
def historic_share_unconv_oil_domestric_eu_extraction():
    """
    Real Name: "Historic share unconv. oil domestric EU extraction"
    Original Eqn: ZIDZ(Historic unconv oil domestic EU extracted EJ,PED liquids EJ)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(historic_unconv_oil_domestic_eu_extracted_ej(), ped_liquids_ej())


@cache.step
@to_float
def aux23():
    """
    Real Name: aux23
    Original Eqn: DELAY FIXED ( "Historic share conv. oil domestic EU extraction\" until 2016", TIME STEP, 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux23()


@cache.step
@to_float
def ped_domestic_eu_conv_oil_ej():
    """
    Real Name: "PED domestic EU conv. oil EJ"
    Original Eqn: PED total oil EJ*"Historic share conv. oil domestic EU extraction\" until 2016"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        ped_total_oil_ej() * historic_share_conv_oil_domestic_eu_extraction_until_2016()
    )


@cache.step
@to_float
def historic_share_conv_oil_domestic_eu_extraction():
    """
    Real Name: "Historic share conv. oil domestic EU extraction"
    Original Eqn: ZIDZ(Historic conv oil domestic EU extracted EJ,PED liquids EJ)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(historic_conv_oil_domestic_eu_extracted_ej(), ped_liquids_ej())


@cache.step
@to_float
def historic_share_conv_oil_domestic_eu_extraction_until_2016():
    """
    Real Name: "Historic share conv. oil domestic EU extraction\" until 2016"
    Original Eqn: IF THEN ELSE(Time<2016,"Historic share conv. oil domestic EU extraction" , aux23)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: historic_share_conv_oil_domestic_eu_extraction(),
        lambda: aux23(),
    )


@cache.step
@to_float
def historic_net_imports_oil_eu():
    """
    Real Name: Historic net imports oil EU
    Original Eqn: PED liquids EJ-Historic conv oil domestic EU extracted EJ-Historic unconv oil domestic EU extracted EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        ped_liquids_ej()
        - historic_conv_oil_domestic_eu_extracted_ej()
        - historic_unconv_oil_domestic_eu_extracted_ej()
    )


@cache.step
@to_float
def ped_domestic_eu_total_oil_ej():
    """
    Real Name: PED domestic EU total oil EJ
    Original Eqn: PED total oil EJ*("Historic share conv. oil domestic EU extraction\" until 2016"+"Historic share unconv. oil domestric EU extraction until 2016")
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return ped_total_oil_ej() * (
        historic_share_conv_oil_domestic_eu_extraction_until_2016()
        + historic_share_unconv_oil_domestric_eu_extraction_until_2016()
    )


@cache.step
@to_float
def fed_heat_gascoal_ej():
    """
    Real Name: "FED Heat gas+coal EJ"
    Original Eqn: "FED Heat-com plants fossil fuels EJ"-FED Heat liquids plants EJ
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return fed_heatcom_plants_fossil_fuels_ej() - fed_heat_liquids_plants_ej()


@cache.step
@to_float
def urr_tot_agg_oil():
    """
    Real Name: URR tot agg oil
    Original Eqn: IF THEN ELSE("separate conv and unconv oil?"=1, 0, IF THEN ELSE("unlimited oil?"=1,URR tot agg oil unlimited, IF THEN ELSE("unlimited NRE?"=1,URR tot agg oil unlimited, IF THEN ELSE(choose extraction curve tot agg oil=2, URR tot agg oil User defined, URR tot agg oil User defined))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Ultimately Recoverable Resources (URR) associated to the selected
        depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: 0,
        lambda: if_then_else(
            unlimited_oil() == 1,
            lambda: urr_tot_agg_oil_unlimited(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: urr_tot_agg_oil_unlimited(),
                lambda: if_then_else(
                    choose_extraction_curve_tot_agg_oil() == 2,
                    lambda: urr_tot_agg_oil_user_defined(),
                    lambda: urr_tot_agg_oil_user_defined(),
                ),
            ),
        ),
    )


@cache.step
@to_float
def desired_annual_gdp_growth_rate():
    """
    Real Name: Desired annual GDP growth rate
    Original Eqn: (-1+Desire GDP next step/Desired GDP)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Desired annual GDP growth rate.
    """
    return -1 + desire_gdp_next_step() / desired_gdp()


@cache.step
@subs(["materials"], _subscript_dict)
def materials_availability_reserves():
    """
    Real Name: "materials availability (reserves)"
    Original Eqn: IF THEN ELSE(share cum materials to extract alt techn EU vs reserves World[materials]<1,1,0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    =1 while the cumulative demand is lower than the estimated resources, and
        =0 when the cumulative demand surpasses the estimated resources.
    """
    return if_then_else(
        share_cum_materials_to_extract_alt_techn_eu_vs_reserves_world() < 1,
        lambda: 1,
        lambda: 0,
    )


@cache.step
@to_float
def max_extraction_tot_agg_oil_ej():
    """
    Real Name: max extraction tot agg oil EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv oil?"=0, IF THEN ELSE(choose extraction curve tot agg oil=1, table max extraction tot agg oil User defined(Tot RURR tot agg oil), table max extraction tot agg oil User defined(Tot RURR tot agg oil)), 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve for total aggregated oil selected for the
        simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 0,
        lambda: if_then_else(
            choose_extraction_curve_tot_agg_oil() == 1,
            lambda: table_max_extraction_tot_agg_oil_user_defined(
                tot_rurr_tot_agg_oil()
            ),
            lambda: table_max_extraction_tot_agg_oil_user_defined(
                tot_rurr_tot_agg_oil()
            ),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def demand_elec_gas_and_coal_twh():
    """
    Real Name: demand Elec gas and coal TWh
    Original Eqn: IF THEN ELSE("switch scarcity-PS elec substit"=0, demand Elec plants fossil fuels TWh*(1-"Hist share oil/FF Elec" ), IF THEN ELSE(Time<2016, demand Elec plants fossil fuels TWh*(1-"Hist share oil/FF Elec"), demand Elec plants fossil fuels TWh *"Future share gas+coal/FF for elec"))
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        switch_scarcityps_elec_substit() == 0,
        lambda: demand_elec_plants_fossil_fuels_twh() * (1 - hist_share_oilff_elec()),
        lambda: if_then_else(
            time() < 2016,
            lambda: demand_elec_plants_fossil_fuels_twh()
            * (1 - hist_share_oilff_elec()),
            lambda: demand_elec_plants_fossil_fuels_twh()
            * future_share_gascoalff_for_elec(),
        ),
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_availability_resources():
    """
    Real Name: "materials availability (resources)"
    Original Eqn: IF THEN ELSE(share cum materials to extract alt techn EU vs resources World[materials]<1,1,0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    =1 while the cumulative demand is lower than the estimated reserves, and
        =0 when the cumulative demand surpasses the estimated reserves.
    """
    return if_then_else(
        share_cum_materials_to_extract_alt_techn_eu_vs_resources_world() < 1,
        lambda: 1,
        lambda: 0,
    )


@cache.step
@to_float
def share_pipeline_transport_fecgl_in_2015():
    """
    Real Name: "Share pipeline transport FECg+l in 2015"
    Original Eqn: IF THEN ELSE(Time<2015, Historic share pipeline transport , aux18 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of energy dedicated for pipeline transport vs final energy
        consumption of gases and liquids.
    """
    return if_then_else(
        time() < 2015, lambda: historic_share_pipeline_transport(), lambda: aux18_0()
    )


@cache.step
@to_float
def aux18_0():
    """
    Real Name: aux18 0
    Original Eqn: DELAY FIXED ( "Share pipeline transport FECg+l in 2015", TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the value of "Share pipeline transport
        FECg+l" in 2015.
    """
    return _delayfixed_aux18_0()


@cache.step
@to_float
def fec_gasesliquids():
    """
    Real Name: "FEC gases+liquids"
    Original Eqn: real FE consumption by fuel[gases]+real FE consumption by fuel[liquids]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_fe_consumption_by_fuel().loc["gases"].reset_coords(
        drop=True
    ) + real_fe_consumption_by_fuel().loc["liquids"].reset_coords(drop=True)


@cache.step
@to_float
def total_distribution_losses():
    """
    Real Name: Total distribution losses
    Original Eqn: Electrical distribution losses EJ+"Heat-com distribution losses" +"Heat-nc distribution losses" +Pipeline transport+SUM(Energy distr losses FF EJ[final sources!])
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total energy distribution losses.
    """
    return (
        electrical_distribution_losses_ej()
        + heatcom_distribution_losses()
        + heatnc_distribution_losses()
        + pipeline_transport()
        + sum(
            rearrange(energy_distr_losses_ff_ej(), ["final sources"], _subscript_dict),
            dim=("final sources",),
        )
    )


def historic_pipeline_transport(x):
    """
    Real Name: Historic pipeline transport
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '242', 'C244')
    Units: EJ
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic pipeline transport
    """
    return _ext_lookup_historic_pipeline_transport(x)


@cache.step
@to_float
def pipeline_transport():
    """
    Real Name: Pipeline transport
    Original Eqn: "Share pipeline transport FECg+l in 2015"*"FEC gases+liquids"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Pipeline transport. IEA definition: Pipeline transport includes energy
        used in the support and operation of pipelines transporting gases,
        liquids, slurries and other commodities, including the energy used for
        pump stations and maintenance of the pipeline.
    """
    return share_pipeline_transport_fecgl_in_2015() * fec_gasesliquids()


@cache.step
@to_float
def historic_share_pipeline_transport():
    """
    Real Name: Historic share pipeline transport
    Original Eqn: IF THEN ELSE(Time<2016, ZIDZ(Historic pipeline transport(Time), "FEC gases+liquids"), 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Historic share of energy for pipeline transport vs TFEC of liquids and
        gases.
    """
    return if_then_else(
        time() < 2016,
        lambda: zidz(historic_pipeline_transport(time()), fec_gasesliquids()),
        lambda: 0,
    )


@cache.step
@to_float
def eroist_system():
    """
    Real Name: EROIst system
    Original Eqn: MAX(0, (Real TFEC)/FEIst system)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROI standard of the system.
    """
    return np.maximum(0, (real_tfec()) / feist_system())


@cache.step
@to_float
def feist_system():
    """
    Real Name: FEIst system
    Original Eqn: "Share E industry own-use vs TFEC in 2015"*(Real TFEC-FE tot generation all RES elec EJ)+Total dyn FEI RES
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total (dynamic) final energy investment of the whole energy system
        (standard EROI approach)..
    """
    return (
        share_e_industry_ownuse_vs_tfec_in_2015()
        * (real_tfec() - fe_tot_generation_all_res_elec_ej())
        + total_dyn_fei_res()
    )


def historic_energy_industry_ownuse(x):
    """
    Real Name: "Historic energy industry own-use"
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '242', 'C243')
    Units: EJ
    Limits: (None, None)
    Type: lookup
    Subs: None

    Energy industry own-use.
    """
    return _ext_lookup_historic_energy_industry_ownuse(x)


@cache.step
@to_float
def share_e_industry_ownuse_vs_tfec_in_2015():
    """
    Real Name: "Share E industry own-use vs TFEC in 2015"
    Original Eqn: IF THEN ELSE(Time<2015, "Historic share E industry own-use vs TFEC" , aux1 1 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2015,
        lambda: historic_share_e_industry_ownuse_vs_tfec(),
        lambda: aux1_1_1(),
    )


@cache.step
@to_float
def aux1_1_1():
    """
    Real Name: aux1 1 1
    Original Eqn: DELAY FIXED ( "Share E industry own-use vs TFEC in 2015", TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the energy losses due to climate change
        impacts in the year 2015.
    """
    return _delayfixed_aux1_1_1()


@cache.step
@to_float
def max_extraction_uranium_ej():
    """
    Real Name: max extraction uranium EJ
    Original Eqn: IF THEN ELSE(Choose extraction uranium curve=1, table max extraction uranium user defined(RURR uranium), IF THEN ELSE(Choose extraction uranium curve=2, table max extraction uranium user defined(RURR uranium), IF THEN ELSE(Choose extraction uranium curve=3, av past EU domestic uranium extraction/(kt uranium per EJ*1000),table max extraction uranium user defined(RURR uranium))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_uranium_curve() == 1,
        lambda: table_max_extraction_uranium_user_defined(rurr_uranium()),
        lambda: if_then_else(
            choose_extraction_uranium_curve() == 2,
            lambda: table_max_extraction_uranium_user_defined(rurr_uranium()),
            lambda: if_then_else(
                choose_extraction_uranium_curve() == 3,
                lambda: av_past_eu_domestic_uranium_extraction()
                / (kt_uranium_per_ej() * 1000),
                lambda: table_max_extraction_uranium_user_defined(rurr_uranium()),
            ),
        ),
    )


@cache.run
@to_float
def tonnes_per_kt():
    """
    Real Name: tonnes per kt
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G22')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_tonnes_per_kt()


@cache.step
@to_float
def desired_variation_gdppc():
    """
    Real Name: Desired variation GDPpc
    Original Eqn: IF THEN ELSE(Time<2015, desired variation GDPpc per scen , smooth Desired variation GDPpc)
    Units: $/person
    Limits: (None, None)
    Type: component
    Subs: None

    Desired variation of GDP per capita.
    """
    return if_then_else(
        time() < 2015,
        lambda: desired_variation_gdppc_per_scen(),
        lambda: smooth_desired_variation_gdppc(),
    )


@cache.step
@to_float
def smooth_desired_variation_gdppc():
    """
    Real Name: smooth Desired variation GDPpc
    Original Eqn: IF THEN ELSE(Time<P customized year GDPpc evolution,desired variation GDPpc per scen,smooth Desired GDPpc)
    Units: $/person
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < p_customized_year_gdppc_evolution(),
        lambda: desired_variation_gdppc_per_scen(),
        lambda: smooth_desired_gdppc(),
    )


@cache.step
@to_float
def smooth_desired_gdppc():
    """
    Real Name: smooth Desired GDPpc
    Original Eqn: SMOOTH N(desired variation GDPpc per scen, 2 , desired variation GDPpc per scen , 2 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _smooth_smooth_desired_gdppc()


@cache.step
@to_float
def gdppc_variation_asymptote_scen():
    """
    Real Name: GDPpc variation asymptote scen
    Original Eqn: (GDPpc until P customized year GDPpc evolution-(P GDPpc asymptote-1600))*(-1/T asymptote GDPpc) *EXP(-(Time-P customized year GDPpc evolution)/T asymptote GDPpc)
    Units: $/(Year*person)
    Limits: (None, None)
    Type: component
    Subs: None

    Desired GDPpc variation to reach asymptote target.
    """
    return (
        (gdppc_until_p_customized_year_gdppc_evolution() - (p_gdppc_asymptote() - 1600))
        * (-1 / t_asymptote_gdppc())
        * np.exp(-(time() - p_customized_year_gdppc_evolution()) / t_asymptote_gdppc())
    )


@cache.step
@to_float
def desired_variation_gdppc_per_scen():
    """
    Real Name: desired variation GDPpc per scen
    Original Eqn: IF THEN ELSE(Time<2015, variation historic GDPpc, IF THEN ELSE(select GDPpc evolution input=3:AND:Time<P customized year GDPpc evolution,Desired GDPpc*Annual GDPpc growth rate, IF THEN ELSE(select GDPpc evolution input=0,Desired GDPpc*Annual GDPpc growth rate, IF THEN ELSE(select GDPpc evolution input=1,Desired GDPpc*Annual GDPpc growth rate, IF THEN ELSE(select GDPpc evolution input=2,Desired GDPpc*Annual GDPpc growth rate, GDPpc variation asymptote scen)))))
    Units: $/person
    Limits: (None, None)
    Type: component
    Subs: None

    Desired GDPpc variation depending on the policy target selected by the
        user.
    """
    return if_then_else(
        time() < 2015,
        lambda: variation_historic_gdppc(),
        lambda: if_then_else(
            logical_and(
                select_gdppc_evolution_input() == 3,
                time() < p_customized_year_gdppc_evolution(),
            ),
            lambda: desired_gdppc() * annual_gdppc_growth_rate(),
            lambda: if_then_else(
                select_gdppc_evolution_input() == 0,
                lambda: desired_gdppc() * annual_gdppc_growth_rate(),
                lambda: if_then_else(
                    select_gdppc_evolution_input() == 1,
                    lambda: desired_gdppc() * annual_gdppc_growth_rate(),
                    lambda: if_then_else(
                        select_gdppc_evolution_input() == 2,
                        lambda: desired_gdppc() * annual_gdppc_growth_rate(),
                        lambda: gdppc_variation_asymptote_scen(),
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def pop_variation():
    """
    Real Name: pop variation
    Original Eqn: IF THEN ELSE(Time<P customized year pop evolution, pop variation by scen, 0.05*pop variation by scen+0.05*pop variation delay 1 step+0.1*pop variation delay 2 step+0.15*pop variation delay 3 step +0.2*pop variation delay 4 step+0.3*pop variation delay 5 step+0.15*pop variation delay 6 step)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Population growth. (Historic data from 1990-2010; projection 2011-2100)
        2011 UST$
    """
    return if_then_else(
        time() < p_customized_year_pop_evolution(),
        lambda: pop_variation_by_scen(),
        lambda: 0.05 * pop_variation_by_scen()
        + 0.05 * pop_variation_delay_1_step()
        + 0.1 * pop_variation_delay_2_step()
        + 0.15 * pop_variation_delay_3_step()
        + 0.2 * pop_variation_delay_4_step()
        + 0.3 * pop_variation_delay_5_step()
        + 0.15 * pop_variation_delay_6_step(),
    )


@cache.step
@to_float
def smooth_pop():
    """
    Real Name: smooth pop
    Original Eqn: SMOOTH N(pop variation by scen, 4 , pop variation by scen , 2 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _smooth_smooth_pop()


@cache.step
@to_float
def smooth_probe():
    """
    Real Name: smooth probe
    Original Eqn: IF THEN ELSE(Time<P customized year pop evolution,pop variation by scen,smooth pop)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < p_customized_year_pop_evolution(),
        lambda: pop_variation_by_scen(),
        lambda: smooth_pop(),
    )


@cache.step
@to_float
def aux1_1_0():
    """
    Real Name: aux1 1 0
    Original Eqn: DELAY FIXED ( GDPpc until P customized year GDPpc evolution, TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the energy losses due to climate change
        impacts in the year 2015.
    """
    return _delayfixed_aux1_1_0()


@cache.step
@to_float
def pop_variation_delay_5_step():
    """
    Real Name: pop variation delay 5 step
    Original Eqn: DELAY FIXED ( pop variation by scen,4 , pop variation by scen)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_pop_variation_delay_5_step()


@cache.step
@to_float
def pop_variation_delay_6_step():
    """
    Real Name: pop variation delay 6 step
    Original Eqn: DELAY FIXED ( pop variation by scen,5 , pop variation by scen)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_pop_variation_delay_6_step()


@cache.step
@to_float
def pop_variation_by_scen():
    """
    Real Name: pop variation by scen
    Original Eqn: IF THEN ELSE(Time<2014, variation historic pop, IF THEN ELSE(select Population evolution input=3:AND:Time<P customized year pop evolution,Population*Annual population growth rate, IF THEN ELSE(select Population evolution input=0,Population*Annual population growth rate, IF THEN ELSE(select Population evolution input=2,Population*Annual population growth rate, IF THEN ELSE(select Population evolution input=3,pop variation asymptote scen,Population*Annual population growth rate)))))
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Population variation depending on the policy target selected by the user.
    """
    return if_then_else(
        time() < 2014,
        lambda: variation_historic_pop(),
        lambda: if_then_else(
            logical_and(
                select_population_evolution_input() == 3,
                time() < p_customized_year_pop_evolution(),
            ),
            lambda: population() * annual_population_growth_rate(),
            lambda: if_then_else(
                select_population_evolution_input() == 0,
                lambda: population() * annual_population_growth_rate(),
                lambda: if_then_else(
                    select_population_evolution_input() == 2,
                    lambda: population() * annual_population_growth_rate(),
                    lambda: if_then_else(
                        select_population_evolution_input() == 3,
                        lambda: pop_variation_asymptote_scen(),
                        lambda: population() * annual_population_growth_rate(),
                    ),
                ),
            ),
        ),
    )


@cache.run
@to_float
def p_gdppc_asymptote():
    """
    Real Name: P GDPpc asymptote
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'G8')
    Units: $/person
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy target of GDPpc in target year to be approached
        smoothly-asymptotically.
    """
    return _ext_constant_p_gdppc_asymptote()


@cache.run
@to_float
def target_year_gdppc_asymptote():
    """
    Real Name: Target year GDPpc asymptote
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'I8')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_target_year_gdppc_asymptote()


@cache.step
@to_float
def pop_variation_delay_4_step():
    """
    Real Name: pop variation delay 4 step
    Original Eqn: DELAY FIXED ( pop variation by scen,3, pop variation by scen)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_pop_variation_delay_4_step()


@cache.step
@to_float
def pop_variation_delay_1_step():
    """
    Real Name: pop variation delay 1 step
    Original Eqn: DELAY FIXED ( pop variation by scen,0.5 , pop variation by scen)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_pop_variation_delay_1_step()


@cache.step
@to_float
def pop_variation_delay_2_step():
    """
    Real Name: pop variation delay 2 step
    Original Eqn: DELAY FIXED ( pop variation by scen, 1, pop variation by scen)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_pop_variation_delay_2_step()


@cache.step
@to_float
def pop_variation_delay_3_step():
    """
    Real Name: pop variation delay 3 step
    Original Eqn: DELAY FIXED ( pop variation by scen, 2, pop variation by scen)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_pop_variation_delay_3_step()


@cache.step
@to_float
def gdppc_until_p_customized_year_gdppc_evolution():
    """
    Real Name: GDPpc until P customized year GDPpc evolution
    Original Eqn: IF THEN ELSE(Time<P customized year GDPpc evolution, Desired GDPpc, aux1 1 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    GDPpc until starting customized year of the policy target.
    """
    return if_then_else(
        time() < p_customized_year_gdppc_evolution(),
        lambda: desired_gdppc(),
        lambda: aux1_1_0(),
    )


@cache.step
@to_float
def t_asymptote_gdppc():
    """
    Real Name: T asymptote GDPpc
    Original Eqn: (Target year GDPpc asymptote-P customized year GDPpc evolution)/3
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (target_year_gdppc_asymptote() - p_customized_year_gdppc_evolution()) / 3


@cache.run
@to_float
def p_pop_asymptote_millions():
    """
    Real Name: P pop asymptote millions
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario' , 'G15' )
    Units: Mpeople
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy target of population in target year to be approached
        smoothly-asymptotically.
    """
    return _ext_constant_p_pop_asymptote_millions()


@cache.step
@to_float
def pop_asymptote():
    """
    Real Name: pop asymptote
    Original Eqn: (P pop asymptote millions*1e+06)-1e+07
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (p_pop_asymptote_millions() * 1e06) - 1e07


@cache.step
@to_float
def aux1_1():
    """
    Real Name: aux1 1
    Original Eqn: DELAY FIXED ( pop until P customized year pop evolution, TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the energy losses due to climate change
        impacts in the year 2015.
    """
    return _delayfixed_aux1_1()


@cache.step
@to_float
def pop_variation_asymptote_scen():
    """
    Real Name: pop variation asymptote scen
    Original Eqn: (pop until P customized year pop evolution-pop asymptote)*(-1/T asymptote pop)*EXP(-(Time -P customized year pop evolution)/T asymptote pop)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Population variation to reach asymptote target.
    """
    return (
        (pop_until_p_customized_year_pop_evolution() - pop_asymptote())
        * (-1 / t_asymptote_pop())
        * np.exp(-(time() - p_customized_year_pop_evolution()) / t_asymptote_pop())
    )


@cache.step
@to_float
def pop_until_p_customized_year_pop_evolution():
    """
    Real Name: pop until P customized year pop evolution
    Original Eqn: IF THEN ELSE(Time<P customized year pop evolution, Population , aux1 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Population until starting customized year of the policy target.
    """
    return if_then_else(
        time() < p_customized_year_pop_evolution(),
        lambda: population(),
        lambda: aux1_1(),
    )


@cache.step
@to_float
def t_asymptote_pop():
    """
    Real Name: T asymptote pop
    Original Eqn: (Target year pop asymptote-P customized year pop evolution)/3
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (target_year_pop_asymptote() - p_customized_year_pop_evolution()) / 3


@cache.run
@to_float
def target_year_pop_asymptote():
    """
    Real Name: Target year pop asymptote
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'I15')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when population target reaches around 95% of the target population
        (asymptote).
    """
    return _ext_constant_target_year_pop_asymptote()


@cache.step
@subs(["sectors"], _subscript_dict)
def variation_exports_demand():
    """
    Real Name: variation exports demand
    Original Eqn: IF THEN ELSE(Exports demand[sectors]<0,0,IF THEN ELSE(Time<2009, variation historic exports demand[sectors],(EXP(beta 0 exp)*EXP(beta 1 exp[sectors])) *(((EXP(beta 2 exp*real exchange next step))*(real demand world next step^beta 3 exp))-((EXP(beta 2 exp*real exchange )*(Real demand World^beta 3 exp))))))
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Variation of exports by industrial sectors
    """
    return if_then_else(
        exports_demand() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2009,
            lambda: variation_historic_exports_demand(),
            lambda: (np.exp(beta_0_exp()) * np.exp(beta_1_exp()))
            * (
                (
                    (np.exp(beta_2_exp() * real_exchange_next_step()))
                    * (real_demand_world_next_step() ** beta_3_exp())
                )
                - (
                    (
                        np.exp(beta_2_exp() * real_exchange())
                        * (real_demand_world() ** beta_3_exp())
                    )
                )
            ),
        ),
    )


@cache.step
@subs(["sectors1"], _subscript_dict)
def variation_gfcf():
    """
    Real Name: variation GFCF
    Original Eqn:
      IF THEN ELSE(Gross fixed capital formation[Agriculture Hunting Forestry and Fishing]<0,0,IF THEN ELSE(Time<2009, variation historic GFCF[Agriculture Hunting Forestry and Fishing],((EXP(beta 0 gfcf)* EXP(beta 1 gfcf[Agriculture Hunting Forestry and Fishing]))*((EXP(beta 2 gfcf*real long term interest rate next step)*CC total ^beta 3 gfcf)-(EXP(beta 2 gfcf*real long term interest rate)*CC total delayed^beta 3 gfcf)))))
        .
        .
        .
      IF THEN ELSE(Gross fixed capital formation[Private Households with Employed Persons]<0,0,IF THEN ELSE(Time<2009, variation historic GFCF[Private Households with Employed Persons],((EXP(beta 0 gfcf)* EXP(beta 1 gfcf[Private Households with Employed Persons]))*((EXP(beta 2 gfcf*real long term interest rate next step)*CC total ^beta 3 gfcf)-(EXP(beta 2 gfcf*real long term interest rate)*CC total delayed^beta 3 gfcf)))))
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors1']

    Variation of domestic gross fixed capital formation by industrial sectors
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Agriculture Hunting Forestry and Fishing"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Agriculture Hunting Forestry and Fishing"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Agriculture Hunting Forestry and Fishing"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Agriculture Hunting Forestry and Fishing"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Mining and Quarrying"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Mining and Quarrying"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Mining and Quarrying"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Mining and Quarrying"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Food Beverages and Tobacco"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Food Beverages and Tobacco"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Food Beverages and Tobacco"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Food Beverages and Tobacco"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Textiles and Textile Products"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Textiles and Textile Products"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Textiles and Textile Products"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Textiles and Textile Products"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Leather Leather and Footwear"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Leather Leather and Footwear"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Leather Leather and Footwear"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Leather Leather and Footwear"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Wood and Products of Woood and Cork"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Wood and Products of Woood and Cork"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Wood and Products of Woood and Cork"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Wood and Products of Woood and Cork"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Pulp Paper Printing and Publishing"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Pulp Paper Printing and Publishing"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Pulp Paper Printing and Publishing"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Pulp Paper Printing and Publishing"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Coke Refined Petroleum and Nuclear Fuel"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Coke Refined Petroleum and Nuclear Fuel"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Coke Refined Petroleum and Nuclear Fuel"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Chemicals and Chemical products"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Chemicals and Chemical products"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Chemicals and Chemical products"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Chemicals and Chemical products"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Rubber and Plastics"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Rubber and Plastics"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Rubber and Plastics"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Rubber and Plastics"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Other Non Metalic Mineral"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Other Non Metalic Mineral"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Other Non Metalic Mineral"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Other Non Metalic Mineral"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Basic Metals and Fabricated Metal"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Basic Metals and Fabricated Metal"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Basic Metals and Fabricated Metal"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Basic Metals and Fabricated Metal"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Machinery Nec"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Machinery Nec"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Machinery Nec"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Machinery Nec"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Electrical and Optical Equipment"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Electrical and Optical Equipment"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Electrical and Optical Equipment"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Electrical and Optical Equipment"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Transport Equipment"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Transport Equipment"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Transport Equipment"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Transport Equipment"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Manufacturing Nec Recycling"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Manufacturing Nec Recycling"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Manufacturing Nec Recycling"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Manufacturing Nec Recycling"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Electricity Gas and Water Supply"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Electricity Gas and Water Supply"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Electricity Gas and Water Supply"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Electricity Gas and Water Supply"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Construction"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Construction"]
                        .reset_coords(drop=True),
                        lambda: (
                            (np.exp(beta_0_con()))
                            * (
                                (
                                    np.exp(
                                        beta_1_cons()
                                        * real_interest_rate_for_corporations_next_step()
                                    )
                                    * np.exp(
                                        beta_2_cons()
                                        * real_interest_rate_for_house_purchases_next_step()
                                    )
                                    * lc_next_step() ** beta_3_cons()
                                )
                                - (
                                    np.exp(
                                        beta_1_cons()
                                        * real_interest_rate_for_corporations()
                                    )
                                    * np.exp(
                                        beta_2_cons()
                                        * real_interest_rate_for_house_purchases()
                                    )
                                    * lc() ** beta_3_cons()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Construction"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc[
                        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                    ]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc[
                            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                        ]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc[
                                        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                                    ]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {
                    "sectors1": [
                        "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
                    ]
                },
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc[
                        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                    ]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc[
                            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                        ]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc[
                                        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                                    ]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {
                    "sectors1": [
                        "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
                    ]
                },
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc[
                        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                    ]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc[
                            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                        ]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc[
                                        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                                    ]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {
                    "sectors1": [
                        "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
                    ]
                },
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Hotels and Restaurants"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Hotels and Restaurants"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Hotels and Restaurants"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Hotels and Restaurants"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Inland Transport"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Inland Transport"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Inland Transport"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Inland Transport"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Water Transport"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Water Transport"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Water Transport"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Water Transport"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Air Transport"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Air Transport"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Air Transport"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Air Transport"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc[
                        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                    ]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc[
                            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                        ]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc[
                                        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                                    ]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {
                    "sectors1": [
                        "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
                    ]
                },
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Post and Telecommunications"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Post and Telecommunications"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Post and Telecommunications"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Post and Telecommunications"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Financial Intermedation"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Financial Intermedation"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Financial Intermedation"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Financial Intermedation"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Real Estate Activities"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Real Estate Activities"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Real Estate Activities"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Real Estate Activities"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Renting od MEq and Other Business Activities"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Renting od MEq and Other Business Activities"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Renting od MEq and Other Business Activities"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Renting od MEq and Other Business Activities"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Public Admin and Defence Compulsory Social Security"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Public Admin and Defence Compulsory Social Security"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc[
                                        "Public Admin and Defence Compulsory Social Security"
                                    ]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Public Admin and Defence Compulsory Social Security"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Education"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Education"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Education"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Education"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Health and Social Work"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Health and Social Work"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Health and Social Work"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Health and Social Work"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Other Community Social and Persona Services"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Other Community Social and Persona Services"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Other Community Social and Persona Services"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Other Community Social and Persona Services"]},
            ),
            rearrange(
                if_then_else(
                    gross_fixed_capital_formation()
                    .loc["Private Households with Employed Persons"]
                    .reset_coords(drop=True)
                    < 0,
                    lambda: 0,
                    lambda: if_then_else(
                        time() < 2009,
                        lambda: variation_historic_gfcf()
                        .loc["Private Households with Employed Persons"]
                        .reset_coords(drop=True),
                        lambda: (
                            (
                                np.exp(beta_0_gfcf())
                                * np.exp(
                                    beta_1_gfcf()
                                    .loc["Private Households with Employed Persons"]
                                    .reset_coords(drop=True)
                                )
                            )
                            * (
                                (
                                    np.exp(
                                        beta_2_gfcf()
                                        * real_long_term_interest_rate_next_step()
                                    )
                                    * cc_total() ** beta_3_gfcf()
                                )
                                - (
                                    np.exp(
                                        beta_2_gfcf() * real_long_term_interest_rate()
                                    )
                                    * cc_total_delayed() ** beta_3_gfcf()
                                )
                            )
                        ),
                    ),
                ),
                ["sectors1"],
                {"sectors1": ["Private Households with Employed Persons"]},
            ),
        ]
    )


@cache.run
@to_float
def beta_0_con():
    """
    Real Name: beta 0 con
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'AL330')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_beta_0_con()


@cache.run
@to_float
def beta_1_cons():
    """
    Real Name: beta 1 cons
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'AN330')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_beta_1_cons()


@cache.run
@to_float
def beta_3_cons():
    """
    Real Name: beta 3 cons
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'AR330')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_beta_3_cons()


@cache.run
@to_float
def beta_2_cons():
    """
    Real Name: beta 2 cons
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'AP330')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_beta_2_cons()


@cache.step
@to_float
def variation_historic_real_long_term_interest_rate():
    """
    Real Name: variation historic real long term interest rate
    Original Eqn: historic real long term interest rate(INTEGER(Time+1))-historic real long term interest rate(INTEGER(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_long_term_interest_rate(
        int(time() + 1)
    ) - historic_real_long_term_interest_rate(int(time()))


@cache.step
@to_float
def variation_historic_real_interest_rate_for_house_purchases():
    """
    Real Name: variation historic real interest rate for house purchases
    Original Eqn: historic real interest rate for house purchases(INTEGER(Time+1))-historic real interest rate for house purchases(INTEGER(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_interest_rate_for_house_purchases(
        int(time() + 1)
    ) - historic_real_interest_rate_for_house_purchases(int(time()))


@cache.step
@to_float
def variation_real_interest_rate_for_corporations():
    """
    Real Name: variation real interest rate for corporations
    Original Eqn: variation historic real interest rate for corporations
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_interest_rate_for_corporations()


@cache.step
@to_float
def variation_real_long_term_interest_rate():
    """
    Real Name: variation real long term interest rate
    Original Eqn: variation historic real long term interest rate
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_long_term_interest_rate()


def historic_real_interest_rate_for_corporations(x):
    """
    Real Name: historic real interest rate for corporations
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '343' ,'B345')
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_interest_rate_for_corporations(x)


def historic_real_interest_rate_for_house_purchases(x):
    """
    Real Name: historic real interest rate for house purchases
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '343' ,'B346')
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_interest_rate_for_house_purchases(x)


def historic_real_long_term_interest_rate(x):
    """
    Real Name: historic real long term interest rate
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '343' ,'B347')
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_long_term_interest_rate(x)


@cache.step
@to_float
def lc():
    """
    Real Name: LC
    Original Eqn: INTEG ( variation LC-LC not covered, initial LC total)
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Labour compensation
    """
    return _integ_lc()


@cache.step
@to_float
def lc_next_step():
    """
    Real Name: LC next step
    Original Eqn: LC+variation LC
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return lc() + variation_lc()


@cache.step
@to_float
def lc_not_covered():
    """
    Real Name: LC not covered
    Original Eqn: demand not covered total FD*labour share
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Gap between labour compensation required and real labour compensation
        (after energy-economy feedback)
    """
    return demand_not_covered_total_fd() * labour_share()


@cache.step
@to_float
def variation_historic_real_interest_rate_for_corporations():
    """
    Real Name: variation historic real interest rate for corporations
    Original Eqn: historic real interest rate for corporations(INTEGER(Time+1))-historic real interest rate for corporations(INTEGER(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_interest_rate_for_corporations(
        int(time() + 1)
    ) - historic_real_interest_rate_for_corporations(int(time()))


@cache.step
@to_float
def real_long_term_interest_rate():
    """
    Real Name: real long term interest rate
    Original Eqn: INTEG ( variation real long term interest rate, 2.616)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Real Effective Exchange Rate
    """
    return _integ_real_long_term_interest_rate()


@cache.run
@to_float
def beta_4_exp():
    """
    Real Name: beta 4 exp
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'I329')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_beta_4_exp()


@cache.step
@to_float
def variation_real_interest_rate_for_house_purchases():
    """
    Real Name: variation real interest rate for house purchases
    Original Eqn: variation historic real interest rate for house purchases
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_interest_rate_for_house_purchases()


@cache.step
@to_float
def real_interest_rate_for_house_purchases():
    """
    Real Name: real interest rate for house purchases
    Original Eqn: INTEG ( variation real interest rate for house purchases, 6.49)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Real Effective Exchange Rate
    """
    return _integ_real_interest_rate_for_house_purchases()


@cache.step
@to_float
def real_interest_rate_for_corporations_next_step():
    """
    Real Name: real interest rate for corporations next step
    Original Eqn: real interest rate for corporations+variation real interest rate for corporations
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        real_interest_rate_for_corporations()
        + variation_real_interest_rate_for_corporations()
    )


@cache.step
@to_float
def real_long_term_interest_rate_next_step():
    """
    Real Name: real long term interest rate next step
    Original Eqn: real long term interest rate+variation real long term interest rate
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_long_term_interest_rate() + variation_real_long_term_interest_rate()


@cache.step
@to_float
def real_interest_rate_for_house_purchases_next_step():
    """
    Real Name: real interest rate for house purchases next step
    Original Eqn: real interest rate for house purchases+variation real interest rate for house purchases
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        real_interest_rate_for_house_purchases()
        + variation_real_interest_rate_for_house_purchases()
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def variation_household_demand():
    """
    Real Name: variation household demand
    Original Eqn: IF THEN ELSE(Time<2009,variation historic demand[sectors],EXP(Bet 0 hh)*EXP(Beta 1 hh[sectors])*(((LC next step )^beta 2 hh)*(CC next step^beta 3 hh)-((LC)^beta 2 hh)*(CC total^beta 3 hh )))
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Variation of final demand by households by industrial sectors
    """
    return if_then_else(
        time() < 2009,
        lambda: variation_historic_demand(),
        lambda: np.exp(bet_0_hh())
        * np.exp(beta_1_hh())
        * (
            ((lc_next_step()) ** beta_2_hh()) * (cc_next_step() ** beta_3_hh())
            - ((lc()) ** beta_2_hh()) * (cc_total() ** beta_3_hh())
        ),
    )


@cache.step
@to_float
def real_interest_rate_for_corporations():
    """
    Real Name: real interest rate for corporations
    Original Eqn: INTEG ( variation real interest rate for corporations, 5.58)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Real Effective Exchange Rate
    """
    return _integ_real_interest_rate_for_corporations()


@cache.step
@to_float
def ped2():
    """
    Real Name: PED2
    Original Eqn: PED solids-Transformation FF losses EJ[solids]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return ped_solids() - transformation_ff_losses_ej().loc["solids"].reset_coords(
        drop=True
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def transformation_ff_losses_ej():
    """
    Real Name: Transformation FF losses EJ
    Original Eqn:
      PES fossil fuel extraction delayed[liquids]*Historic share of transformation losses vs extraction[liquids]
      PES fossil fuel extraction delayed[solids]*Historic share of transformation losses vs extraction[solids]
      0
      PES fossil fuel extraction delayed[solids]*Historic share of transformation losses vs extraction[solids]*Ratio gain gas vs lose solids in tranf processes
      0
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Losses in transformation processes of each fossil fuel
    """
    return xrmerge(
        [
            rearrange(
                pes_fossil_fuel_extraction_delayed()
                .loc["liquids"]
                .reset_coords(drop=True)
                * historic_share_of_transformation_losses_vs_extraction()
                .loc["liquids"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                pes_fossil_fuel_extraction_delayed()
                .loc["solids"]
                .reset_coords(drop=True)
                * historic_share_of_transformation_losses_vs_extraction()
                .loc["solids"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
            xr.DataArray(0, {"final sources1": ["electricity"]}, ["final sources1"]),
            rearrange(
                pes_fossil_fuel_extraction_delayed()
                .loc["solids"]
                .reset_coords(drop=True)
                * historic_share_of_transformation_losses_vs_extraction()
                .loc["solids"]
                .reset_coords(drop=True)
                * ratio_gain_gas_vs_lose_solids_in_tranf_processes(),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
        ]
    )


@cache.step
@to_float
def other_gases_required():
    """
    Real Name: Other gases required
    Original Eqn: +Transformation FF losses EJ[gases]+Energy distr losses FF EJ[gases]+"Non-energy use demand by final fuel EJ"[gases]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        transformation_ff_losses_ej().loc["gases"].reset_coords(drop=True)
        + energy_distr_losses_ff_ej().loc["gases"].reset_coords(drop=True)
        + nonenergy_use_demand_by_final_fuel_ej().loc["gases"].reset_coords(drop=True)
    )


@cache.step
@to_float
def other_solids_required():
    """
    Real Name: Other solids required
    Original Eqn: Transformation FF losses EJ[solids]+Energy distr losses FF EJ[solids]+"Non-energy use demand by final fuel EJ"[solids]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        transformation_ff_losses_ej().loc["solids"].reset_coords(drop=True)
        + energy_distr_losses_ff_ej().loc["solids"].reset_coords(drop=True)
        + nonenergy_use_demand_by_final_fuel_ej().loc["solids"].reset_coords(drop=True)
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def pes_fossil_fuel_extraction():
    """
    Real Name: PES fossil fuel extraction
    Original Eqn:
      PES total oil EJ EU+imports EU total oil from RoW EJ
      extraction coal EJ EU+imports EU coal from RoW EJ
      PES nat gas EU+"imports EU nat. gas from RoW EJ"
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Annual extraction of fossil fuels
    """
    return xrmerge(
        [
            rearrange(
                pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej(),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                extraction_coal_ej_eu() + imports_eu_coal_from_row_ej(),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
            rearrange(
                pes_nat_gas_eu() + imports_eu_nat_gas_from_row_ej(),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
        ]
    )


@cache.step
@to_float
def urban_land_density_t1():
    """
    Real Name: "urban land density t-1"
    Original Eqn: DELAY FIXED ( urban land density, 1, 108.5)
    Units: m2/person
    Limits: (None, None)
    Type: component
    Subs: None

    Policy target to set urban land density in a target year delayed 1 year.
    """
    return _delayfixed_urban_land_density_t1()


@cache.step
@to_float
def urban_land_density_variation():
    """
    Real Name: urban land density variation
    Original Eqn: urban land density-"urban land density t-1"
    Units: m2/people/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Urban land density annual variation.
    """
    return urban_land_density() - urban_land_density_t1()


@cache.step
@to_float
def historic_urban_land_density():
    """
    Real Name: Historic urban land density
    Original Eqn: Historic urban land(Time)*Mha to m2/Historic pop(Time)
    Units: m2/people
    Limits: (None, None)
    Type: component
    Subs: None

    Historic urban land density evolution (defined as urban land vs total
        population).
    """
    return historic_urban_land(time()) * mha_to_m2() / historic_pop(time())


@cache.run
@to_float
def p_variation_primary_forest():
    """
    Real Name: P variation primary forest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C271')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy target to increase/decrease the rate of expansion of primary forest.
    """
    return _ext_constant_p_variation_primary_forest()


@cache.step
@to_float
def primary_forests_area():
    """
    Real Name: Primary forests area
    Original Eqn: INTEG ( "'Available' to primary forest rate", initial primary forest area)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Primary forests area.
    """
    return _integ_primary_forests_area()


@cache.step
@to_float
def available_forest_area():
    """
    Real Name: "'Available' forest area"
    Original Eqn: INTEG ( -Deforestation rate-Forest loss to sustain agriculture-"'Available' to primary forest rate", initial 'available' forest area)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Used forests, removing primary forest which are not used for wood
        extraction
    """
    return _integ_available_forest_area()


@cache.step
@to_float
def available_to_primary_forest_rate():
    """
    Real Name: "'Available' to primary forest rate"
    Original Eqn: IF THEN ELSE(Time<2014, hist variation primary forest , IF THEN ELSE(Time<Start year P variation primary forest, Historic av variation primary forests area*Primary forests area, P variation primary forest *Primary forests area))
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Rate of variation of the area occupied by primary forests.
    """
    return if_then_else(
        time() < 2014,
        lambda: hist_variation_primary_forest(),
        lambda: if_then_else(
            time() < start_year_p_variation_primary_forest(),
            lambda: historic_av_variation_primary_forests_area()
            * primary_forests_area(),
            lambda: p_variation_primary_forest() * primary_forests_area(),
        ),
    )


@cache.run
@to_float
def start_year_p_variation_primary_forest():
    """
    Real Name: Start year P variation primary forest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E271')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of the policy target to increase primary forests area.
    """
    return _ext_constant_start_year_p_variation_primary_forest()


@cache.run
@to_float
def mha_to_m2():
    """
    Real Name: Mha to m2
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G21')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion from Mha to m2.
    """
    return _ext_constant_mha_to_m2()


@cache.step
@to_float
def urban_land_density():
    """
    Real Name: urban land density
    Original Eqn: IF THEN ELSE(Time<2015, Historic urban land density, IF THEN ELSE(Time<Start year P urban land density, Historic urban land density, IF THEN ELSE(Time<Target year P urban land density, Historic urban land density+(P urban land density-Historic urban land density)*(Time dmnl(Time)-Start year P urban land density)/(Target year P urban land density-Start year P urban land density), P urban land density)))
    Units: m2/people
    Limits: (None, None)
    Type: component
    Subs: None

    Urban land density evolution as a result of the application of a policy
        target.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_urban_land_density(),
        lambda: if_then_else(
            time() < start_year_p_urban_land_density(),
            lambda: historic_urban_land_density(),
            lambda: if_then_else(
                time() < target_year_p_urban_land_density(),
                lambda: historic_urban_land_density()
                + (p_urban_land_density() - historic_urban_land_density())
                * (time_dmnl(time()) - start_year_p_urban_land_density())
                / (
                    target_year_p_urban_land_density()
                    - start_year_p_urban_land_density()
                ),
                lambda: p_urban_land_density(),
            ),
        ),
    )


@cache.run
@to_float
def start_year_p_urban_land_density():
    """
    Real Name: Start year P urban land density
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C275')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of the policy target to modify urban land density.
    """
    return _ext_constant_start_year_p_urban_land_density()


@cache.step
@to_float
def forest_extraction_ej():
    """
    Real Name: forest extraction EJ
    Original Eqn: IF THEN ELSE( "'Available' forest area">P minimum forest*forest extraction per Ha, MIN(total demand forest biomass EJ ,max sustainable forest extraction EJ *(1+P forest overexplotation)), 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Forest extration of all kinds of products. If the total demand of forest
        is greater than sustainable potential multiplied by the overxplotation
        accepted in policy P_forest_extraction the demand is cut to this amount.
        If the demand is lower than the sustainable*P_forest_extraction the
        extraction equals the demand
    """
    return if_then_else(
        available_forest_area() > p_minimum_forest() * forest_extraction_per_ha(),
        lambda: np.minimum(
            total_demand_forest_biomass_ej(),
            max_sustainable_forest_extraction_ej() * (1 + p_forest_overexplotation()),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def natural_lands():
    """
    Real Name: Natural lands
    Original Eqn: "'Available land'"+Primary forests area+"'Available' forest area"*0
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Lands within EU which are not affected by human activities.
    """
    return available_land() + primary_forests_area() + available_forest_area() * 0


@cache.step
@to_float
def deforestation_rate():
    """
    Real Name: Deforestation rate
    Original Eqn: IF THEN ELSE( "'Available' forest area">P minimum forest, unsustainable loggin,0)
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Forest land deforestation rate due to unsustainable loggin and converted
        to agriculture uses.
    """
    return if_then_else(
        available_forest_area() > p_minimum_forest(),
        lambda: unsustainable_loggin(),
        lambda: 0,
    )


@cache.run
@to_float
def target_year_p_urban_land_density():
    """
    Real Name: Target year P urban land density
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C276')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year of the policy target to modify urban land density.
    """
    return _ext_constant_target_year_p_urban_land_density()


@cache.run
@to_float
def historic_av_variation_primary_forests_area():
    """
    Real Name: Historic av variation primary forests area
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'AD24')
    Units: MHa/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Historic average variation (1990-2015) of primary forests area.
    """
    return _ext_constant_historic_av_variation_primary_forests_area()


@cache.step
@to_float
def total_eu_land_endogenous():
    """
    Real Name: Total EU land endogenous
    Original Eqn: Agricultural land+Compet agricultural land for biofuels+"'Available' forest area"+Land for solar and hydro RES +Marginal land for biofuels+"permanent snows&glaciers area"+Primary forests area+Urban land+"'Available land'"
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        agricultural_land()
        + compet_agricultural_land_for_biofuels()
        + available_forest_area()
        + land_for_solar_and_hydro_res()
        + marginal_land_for_biofuels()
        + permanent_snowsglaciers_area()
        + primary_forests_area()
        + urban_land()
        + available_land()
    )


@cache.step
@to_float
def consum_wood_products_ej():
    """
    Real Name: consum wood products EJ
    Original Eqn: MIN( demand wood products EJ ,(forest consumption EJ-consum forest energy traditional EJ))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Priority to energy uses        Part of the forest biomass extration that goes into non energy uses. P
        wood/energy uses divides the possible extration into the two uses.
        Traditional uses are not restricted
    """
    return np.minimum(
        demand_wood_products_ej(),
        (forest_consumption_ej() - consum_forest_energy_traditional_ej()),
    )


@cache.step
@to_float
def share_imports_eu_nre_from_row_vs_world_extraction():
    """
    Real Name: share imports EU NRE from RoW vs world extraction
    Original Eqn: Total imports EU NRE from Row/Total extraction NRE EJ World
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return total_imports_eu_nre_from_row() / total_extraction_nre_ej_world()


@cache.step
@to_float
def share_imports_eu_nre_vs_tpec():
    """
    Real Name: share imports EU NRE vs TPEC
    Original Eqn: Total imports EU NRE from Row/TPES EJ
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return total_imports_eu_nre_from_row() / tpes_ej()


@cache.run
@to_float
def initial_agricultural_area():
    """
    Real Name: initial agricultural area
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'H23')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_initial_agricultural_area()


@cache.step
@to_float
def total_extraction_nre_ej_world():
    """
    Real Name: Total extraction NRE EJ World
    Original Eqn: Total extraction NRE EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Global total non-renewable primary energy extraction. Source: global model.
    """
    return total_extraction_nre_ej(time())


@cache.run
@to_float
def ratio_power_plants_energy_conversion_extraction_and_distribution_vs_total_ch4_emissions():
    """
    Real Name: "ratio Power Plants, Energy Conversion, Extraction, and Distribution vs total CH4 emissions"
    Original Eqn: 0.2752
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 0.2752


@cache.run
@to_float
def nvs_1_to_m():
    """
    Real Name: "1 to M"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G20')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_nvs_1_to_m()


@cache.step
@to_float
def eu_forest_energy_imports_from_row():
    """
    Real Name: EU forest energy imports from RoW
    Original Eqn: total demand forest biomass EJ-forest extraction EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    EU imports of wood from RoW.
    """
    return total_demand_forest_biomass_ej() - forest_extraction_ej()


@cache.run
@to_float
def growing_stock_forest_per_ha():
    """
    Real Name: Growing stock forest per Ha
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'C5')
    Units: m3/Ha
    Limits: (None, None)
    Type: constant
    Subs: None

    Hectares of forest lost per m3 of unsustainable wood extraction, based on
        stock per extraction ratios, source FAO2015  129m3/Ha for the world.
    """
    return _ext_constant_growing_stock_forest_per_ha()


@cache.step
@to_float
def forest_stock_ratio():
    """
    Real Name: forest stock ratio
    Original Eqn: 1/(Growing stock forest per Ha*"1 to M"*wood energy density)
    Units: MHa/EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Forest stock ratio.
    """
    return 1 / (growing_stock_forest_per_ha() * nvs_1_to_m() * wood_energy_density())


@cache.step
@to_float
def forest_loss_to_sustain_agriculture():
    """
    Real Name: Forest loss to sustain agriculture
    Original Eqn: IF THEN ELSE(aux reach available land<1, agricultural land until 2015-Agricultural land, 0)
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Forest loss rate to maintain the area dedicated to agriculture in EU in
        the year 2015.
    """
    return if_then_else(
        aux_reach_available_land() < 1,
        lambda: agricultural_land_until_2015() - agricultural_land(),
        lambda: 0,
    )


@cache.step
@to_float
def forest_consumption_ej():
    """
    Real Name: forest consumption EJ
    Original Eqn: forest extraction EJ+EU forest energy imports from RoW
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    EU forest consumption.
    """
    return forest_extraction_ej() + eu_forest_energy_imports_from_row()


@cache.step
@to_float
def consum_forest_energy_non_traditional_ej():
    """
    Real Name: consum forest energy non traditional EJ
    Original Eqn: MIN (demand forest energy non tradition EJ, (forest consumption EJ-consum forest energy traditional EJ-consum wood products EJ))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Part of the forest biomass extration that goes into non energy uses. P
        wood-energy uses divides the possible extration into the two uses.
        Traditional biomass is not restricted
    """
    return np.minimum(
        demand_forest_energy_non_tradition_ej(),
        (
            forest_consumption_ej()
            - consum_forest_energy_traditional_ej()
            - consum_wood_products_ej()
        ),
    )


@cache.step
@to_float
def urban_land_rate():
    """
    Real Name: urban land rate
    Original Eqn: IF THEN ELSE(Time<2014, hist variation urban land, 0.0478639*urban land density variation+1.99746*1e-08*pop variation)
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Rate of urban surface rate.
    """
    return if_then_else(
        time() < 2014,
        lambda: hist_variation_urban_land(),
        lambda: 0.0478639 * urban_land_density_variation()
        + 1.99746 * 1e-08 * pop_variation(),
    )


@cache.step
@to_float
def total_land_occupied_by_res():
    """
    Real Name: Total land occupied by RES
    Original Eqn: Compet agricultural land for biofuels+Land for solar and hydro RES+Marginal land for biofuels
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Total land occupied by RES (biofuel crops and RES elec PV on land, CSP and
        hydro).
    """
    return (
        compet_agricultural_land_for_biofuels()
        + land_for_solar_and_hydro_res()
        + marginal_land_for_biofuels()
    )


@cache.step
@to_float
def consum_forest_energy_traditional_ej():
    """
    Real Name: consum forest energy traditional EJ
    Original Eqn: MIN(forest consumption EJ, demand forest energy traditional EJ)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Consumption of traditional biomass. Traditional wood extraction is got
        priority over other uses but is limited by forest extraction, which
        depends on the stock and the policies taken to protect forests.
    """
    return np.minimum(forest_consumption_ej(), demand_forest_energy_traditional_ej())


@cache.step
@to_float
def total_imports_eu_nre_from_row():
    """
    Real Name: Total imports EU NRE from Row
    Original Eqn: extraction uranium RoW+imports EU coal from RoW EJ+"imports EU nat. gas from RoW EJ"+imports EU total oil from RoW EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        extraction_uranium_row()
        + imports_eu_coal_from_row_ej()
        + imports_eu_nat_gas_from_row_ej()
        + imports_eu_total_oil_from_row_ej()
    )


@cache.step
@to_float
def ch4_anthro_emissions():
    """
    Real Name: CH4 anthro emissions
    Original Eqn: Total CH4 emissions fossil fuels+IF THEN ELSE(Choose RCP=1, CH4 anthro emissions RCP[RCP26], IF THEN ELSE(Choose RCP=2, CH4 anthro emissions RCP[RCP45], IF THEN ELSE(Choose RCP=3, CH4 anthro emissions RCP[RCP60], CH4 anthro emissions RCP[RCP85])))*(1-"ratio Power Plants, Energy Conversion, Extraction, and Distribution vs total CH4 emissions")
    Units: Mton/Year
    Limits: (None, None)
    Type: component
    Subs: None

    "Representative Concentration Pathways" (RCPs, see
        http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
        except  Power Plants, Energy Conversion, Extraction, and Distribution.
        Corrected with endogenous data "Total CH4 emissions fossil fuels"        Choose RCP:        1. RCP 2.6        2. RCP 4.5        3. RCP 6.0        4. RCP 8.5
    """
    return total_ch4_emissions_fossil_fuels() + if_then_else(
        choose_rcp() == 1,
        lambda: ch4_anthro_emissions_rcp().loc["RCP26"].reset_coords(drop=True),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: ch4_anthro_emissions_rcp().loc["RCP45"].reset_coords(drop=True),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: ch4_anthro_emissions_rcp().loc["RCP60"].reset_coords(drop=True),
                lambda: ch4_anthro_emissions_rcp().loc["RCP85"].reset_coords(drop=True),
            ),
        ),
    ) * (
        1
        - ratio_power_plants_energy_conversion_extraction_and_distribution_vs_total_ch4_emissions()
    )


@cache.step
@to_float
def pe_supply_res_nonelec_ej():
    """
    Real Name: "PE supply RES non-Elec EJ"
    Original Eqn: "PE supply from RES non-elec without trad bioE EJ"+PE traditional biomass EJ delayed 1yr+Losses in charcoal plants EJ+modern solids BioE demand households
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy (non electricity) from RES, including traditional biomass.
    """
    return (
        pe_supply_from_res_nonelec_without_trad_bioe_ej()
        + pe_traditional_biomass_ej_delayed_1yr()
        + losses_in_charcoal_plants_ej()
        + modern_solids_bioe_demand_households()
    )


@cache.step
@to_float
def ped_coal_ej():
    """
    Real Name: PED coal EJ
    Original Eqn: MAX(0, PED solids-(PE traditional biomass EJ delayed 1yr+modern solids BioE demand households+PES peat EJ+PES waste for TFC +Losses in charcoal plants EJ))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(
        0,
        ped_solids()
        - (
            pe_traditional_biomass_ej_delayed_1yr()
            + modern_solids_bioe_demand_households()
            + pes_peat_ej()
            + pes_waste_for_tfc()
            + losses_in_charcoal_plants_ej()
        ),
    )


@cache.step
@to_float
def real_fe_consumption_solids_ej():
    """
    Real Name: real FE consumption solids EJ
    Original Eqn: (extraction coal EJ EU+imports EU coal from RoW EJ+(modern solids BioE demand households+PE traditional biomass EJ delayed 1yr+PES waste for TFC +PES peat EJ+Losses in charcoal plants EJ)-PED coal for CTL EJ-Other solids required)*share solids for final energy
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Real final energy consumption by solids after accounting for energy
        availability.
    """
    return (
        extraction_coal_ej_eu()
        + imports_eu_coal_from_row_ej()
        + (
            modern_solids_bioe_demand_households()
            + pe_traditional_biomass_ej_delayed_1yr()
            + pes_waste_for_tfc()
            + pes_peat_ej()
            + losses_in_charcoal_plants_ej()
        )
        - ped_coal_for_ctl_ej()
        - other_solids_required()
    ) * share_solids_for_final_energy()


@cache.step
@to_float
def pes_solids():
    """
    Real Name: PES solids
    Original Eqn: PEC coal+PE traditional biomass EJ delayed 1yr+PES peat EJ+PES waste for TFC +Losses in charcoal plants EJ+modern solids BioE demand households
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply solids.
    """
    return (
        pec_coal()
        + pe_traditional_biomass_ej_delayed_1yr()
        + pes_peat_ej()
        + pes_waste_for_tfc()
        + losses_in_charcoal_plants_ej()
        + modern_solids_bioe_demand_households()
    )


@cache.step
@to_float
def tfec_res_ej():
    """
    Real Name: TFEC RES EJ
    Original Eqn: FE tot generation all RES elec EJ+FES RES for heat EJ+PE traditional biomass consum EJ +FES total biofuels production EJ +PES biogas for TFC+modern solids BioE demand households
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy consumption from RES.
    """
    return (
        fe_tot_generation_all_res_elec_ej()
        + fes_res_for_heat_ej()
        + pe_traditional_biomass_consum_ej()
        + fes_total_biofuels_production_ej()
        + pes_biogas_for_tfc()
        + modern_solids_bioe_demand_households()
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def variation_energy_intensity_of_households_transport():
    """
    Real Name: variation energy intensity of households transport
    Original Eqn:
      IF THEN ELSE(Time<2009,0,var IH liq2)*aux reach zero
      0
      IF THEN ELSE(Time>2009,var IH gas2,0)*aux reach zero
      IF THEN ELSE(Time>2009,var IH E2,0)*aux reach zero
      0
    Units: EJ/T$/yr
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Variation of intensity of households due to change of vehicles
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(time() < 2009, lambda: 0, lambda: var_ih_liq2())
                * aux_reach_zero(),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            xr.DataArray(0, {"final sources1": ["solids"]}, ["final sources1"]),
            rearrange(
                if_then_else(time() > 2009, lambda: var_ih_gas2(), lambda: 0)
                * aux_reach_zero(),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                if_then_else(time() > 2009, lambda: var_ih_e2(), lambda: 0)
                * aux_reach_zero(),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
        ]
    )


@cache.run
@to_float
def liq_2w():
    """
    Real Name: Liq 2w
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B59')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial liquids used by 2 wheelers in the year of start of policies (2015
        default)
    """
    return _ext_constant_liq_2w()


def aux_reach_zero():
    """
    Real Name: aux reach zero
    Original Eqn: WITH LOOKUP ( Energy intensity of households transport[liquids], ([(-0.01,0)-(100,10)],(-0.01,0),(0,0),(1e-08,0),(1e-06,1),(0.01,1),(1,1),(100,1) ))
    Units:
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return lookup(
        energy_intensity_of_households_transport()
        .loc["liquids"]
        .reset_coords(drop=True),
        [-0.01, 0, 1e-08, 1e-06, 0.01, 1, 100],
        [0, 0, 0, 1, 1, 1, 1],
    )


@cache.step
@to_float
def extraction_conv_oil_ej():
    """
    Real Name: extraction conv oil EJ
    Original Eqn: IF THEN ELSE(RURR conv oil<0,0,IF THEN ELSE(Time<2016,"PED domestic EU conv. oil EJ", IF THEN ELSE("unlimited NRE?"=1, "PED domestic EU conv. oil EJ", IF THEN ELSE("unlimited oil?"=1, "PED domestic EU conv. oil EJ", MIN("PED domestic EU conv. oil EJ", max extraction conv oil EJ)))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of conventional oil.
    """
    return if_then_else(
        rurr_conv_oil() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_conv_oil_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_conv_oil_ej(),
                lambda: if_then_else(
                    unlimited_oil() == 1,
                    lambda: ped_domestic_eu_conv_oil_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_conv_oil_ej(), max_extraction_conv_oil_ej()
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def extraction_tot_agg_gas_ej():
    """
    Real Name: extraction tot agg gas EJ
    Original Eqn: IF THEN ELSE(RURR tot agg gas<0,0,IF THEN ELSE(Time<2016,"PED domestic EU total nat.gas EJ", IF THEN ELSE("unlimited NRE?"=1,"PED domestic EU total nat.gas EJ", IF THEN ELSE("unlimited gas?"=1, "PED domestic EU total nat.gas EJ", MIN("PED domestic EU total nat.gas EJ", max extraction tot agg gas EJ)))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of total aggregated natural gas.
    """
    return if_then_else(
        rurr_tot_agg_gas() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_total_natgas_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_total_natgas_ej(),
                lambda: if_then_else(
                    unlimited_gas() == 1,
                    lambda: ped_domestic_eu_total_natgas_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_total_natgas_ej(),
                        max_extraction_tot_agg_gas_ej(),
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def extraction_tot_agg_oil_ej():
    """
    Real Name: extraction tot agg oil EJ
    Original Eqn: IF THEN ELSE(RURR tot agg oil<0,0,IF THEN ELSE(Time<2016,PED domestic EU total oil EJ, IF THEN ELSE("unlimited NRE?"=1, PED domestic EU total oil EJ, IF THEN ELSE("unlimited oil?"=1, PED domestic EU total oil EJ, MIN(PED domestic EU total oil EJ, max extraction tot agg oil EJ )))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of total aggregated oil.
    """
    return if_then_else(
        rurr_tot_agg_oil() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_total_oil_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_total_oil_ej(),
                lambda: if_then_else(
                    unlimited_oil() == 1,
                    lambda: ped_domestic_eu_total_oil_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_total_oil_ej(), max_extraction_tot_agg_oil_ej()
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def historic_share_net_imports_oil_until_2016():
    """
    Real Name: Historic share net imports oil until 2016
    Original Eqn: IF THEN ELSE(Time<2016, ZIDZ(Historic net imports oil EU, Extraction oil EJ World ) , aux25)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: zidz(historic_net_imports_oil_eu(), extraction_oil_ej_world()),
        lambda: aux25(),
    )


@cache.step
@to_float
def aux25():
    """
    Real Name: aux25
    Original Eqn: DELAY FIXED ( Historic share net imports oil until 2016, TIME STEP, 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux25()


@cache.step
@to_float
def extraction_conv_gas_ej():
    """
    Real Name: extraction conv gas EJ
    Original Eqn: IF THEN ELSE(RURR conv gas<0,0,IF THEN ELSE(Time<2016,"PED domestic EU conv. nat. gas EJ", IF THEN ELSE("unlimited NRE?"=1,"PED domestic EU conv. nat. gas EJ", IF THEN ELSE("unlimited gas?"=1, "PED domestic EU conv. nat. gas EJ", MIN("PED domestic EU conv. nat. gas EJ", max extraction conv gas EJ)))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of conventional gas.        IF THEN ELSE(RURR coal<0,0,        IF THEN ELSE(Time<2016, PED domestic EU coal EJ,        IF THEN ELSE("unlimited NRE?"=1, PED domestic EU coal EJ,        IF THEN ELSE("unlimited coal?"=1, PED domestic EU coal EJ,MIN(PED domestic
        EU coal EJ, max extraction coal EJ)))))
    """
    return if_then_else(
        rurr_conv_gas() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_conv_nat_gas_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_conv_nat_gas_ej(),
                lambda: if_then_else(
                    unlimited_gas() == 1,
                    lambda: ped_domestic_eu_conv_nat_gas_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_conv_nat_gas_ej(), max_extraction_conv_gas_ej()
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def ped_domestic_eu_conv_nat_gas_ej():
    """
    Real Name: "PED domestic EU conv. nat. gas EJ"
    Original Eqn: "PED nat. gas EJ"*"Historic share conv. nat gas domestic EU extraction until 2016"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        ped_nat_gas_ej()
        * historic_share_conv_nat_gas_domestic_eu_extraction_until_2016()
    )


@cache.step
@to_float
def historic_share_net_imports_nat_gas_until_2016():
    """
    Real Name: "Historic share net imports nat. gas until 2016"
    Original Eqn: IF THEN ELSE(Time<2016, ZIDZ("Historic net imports nat. gas EU", "extraction nat. gas EJ World") , aux22)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: zidz(historic_net_imports_nat_gas_eu(), extraction_nat_gas_ej_world()),
        lambda: aux22(),
    )


@cache.step
@to_float
def aux22():
    """
    Real Name: aux22
    Original Eqn: DELAY FIXED ( "Historic share net imports nat. gas until 2016", TIME STEP, 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux22()


@cache.step
@to_float
def aux20():
    """
    Real Name: aux20
    Original Eqn: DELAY FIXED ( "Historic share conv. nat gas domestic EU extraction until 2016", TIME STEP, 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux20()


@cache.step
@to_float
def desired_variation_gdp():
    """
    Real Name: Desired variation GDP
    Original Eqn: IF THEN ELSE(Time<2015,Desired GDPpc*variation pop2/dollars to Tdollars+variation historic gdppc 2*Population/dollars to Tdollars+variation historic gdppc 2*variation pop2/dollars to Tdollars,Desired GDPpc*pop variation/dollars to Tdollars+Desired variation GDPpc*Population/dollars to Tdollars+Desired variation GDPpc *pop variation/dollars to Tdollars)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2015,
        lambda: desired_gdppc() * variation_pop2() / dollars_to_tdollars()
        + variation_historic_gdppc_2() * population() / dollars_to_tdollars()
        + variation_historic_gdppc_2() * variation_pop2() / dollars_to_tdollars(),
        lambda: desired_gdppc() * pop_variation() / dollars_to_tdollars()
        + desired_variation_gdppc() * population() / dollars_to_tdollars()
        + desired_variation_gdppc() * pop_variation() / dollars_to_tdollars(),
    )


@cache.step
@to_float
def variation_pop2():
    """
    Real Name: variation pop2
    Original Eqn: IF THEN ELSE(Time<2014, Historic pop(Time+1)-Historic pop(Time), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2014,
        lambda: historic_pop(time() + 1) - historic_pop(time()),
        lambda: 0,
    )


@cache.step
@to_float
def desired_annual_total_demand_growth_rate_delayed_1_yr():
    """
    Real Name: Desired annual total demand growth rate delayed 1 yr
    Original Eqn: DELAY FIXED(Desired annual total demand growth rate, 1, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Lagged variation of final demand
    """
    return _delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr()


@cache.step
@to_float
def diff_demand_eu():
    """
    Real Name: diff demand EU
    Original Eqn: IF THEN ELSE(Time<2009, 1, (Real demand delayed 1yr*(1+Desired annual total demand growth rate delayed 1 yr))/total demand)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Ratio between the desired GDP and the real GDP level after applying the
        demand function.
    """
    return if_then_else(
        time() < 2009,
        lambda: 1,
        lambda: (
            real_demand_delayed_1yr()
            * (1 + desired_annual_total_demand_growth_rate_delayed_1_yr())
        )
        / total_demand(),
    )


@cache.step
@to_float
def variation_historic_gdppc_2():
    """
    Real Name: variation historic gdppc 2
    Original Eqn: IF THEN ELSE(Time<2015, Historic GDPpc(Time+1)-Historic GDPpc(Time), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2015,
        lambda: historic_gdppc(time() + 1) - historic_gdppc(time()),
        lambda: 0,
    )


@cache.step
@to_float
def desire_gdp_next_step():
    """
    Real Name: Desire GDP next step
    Original Eqn: Desired GDP+Desired variation GDP
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return desired_gdp() + desired_variation_gdp()


@cache.run
@to_float
def t_hist_inlandt():
    """
    Real Name: T hist inlandT
    Original Eqn: 2015
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year used to calibrate the historical growth of vehicles, 2015
    """
    return 2015


@cache.step
@subs(["vehicleT"], _subscript_dict)
def percent_t_veh_tini():
    """
    Real Name: percent T veh Tini
    Original Eqn: IF THEN ELSE( Time<T ini Hveh, initial percent T vehicles[vehicleT],aaux Tveh ini[vehicleT])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    percents in the year of beguining of policies of vehicles relative to each
        type
    """
    return if_then_else(
        time() < t_ini_hveh(),
        lambda: initial_percent_t_vehicles(),
        lambda: aaux_tveh_ini(),
    )


@cache.step
@subs(["vehicleT"], _subscript_dict)
def percent_t_vehicles():
    """
    Real Name: percent T vehicles
    Original Eqn: INTEG ( var percent T vehicles[vehicleT], percent Tveh 1995[vehicleT])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    Percents of inland transport vehicles, each type relative to its own:
        heavy vehicles (%liq+%hib+%gas) add 1, light vehicles
        (%liq+%elec+%gas+%hib) add 1, bus (%liq+%elec+%gas+%hib) add 1 and trains
        ((%liq+%elec) add 1.
    """
    return _integ_percent_t_vehicles()


@cache.step
@subs(["vehicleT"], _subscript_dict)
def aux_hist_tveh():
    """
    Real Name: aux hist Tveh
    Original Eqn:
      -hist var percent Tveh[HV hib]-hist var percent Tveh[HV gas]
        .
        .
        .
      hist var percent Tveh[train elec]
    Units: 1/yr
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    auxiliar variable to set the variation of liquid vehicles
    """
    return xrmerge(
        [
            rearrange(
                -hist_var_percent_tveh().loc["HV hib"].reset_coords(drop=True)
                - hist_var_percent_tveh().loc["HV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV liq"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["HV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV hib"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["HV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV gas"]},
            ),
            rearrange(
                -hist_var_percent_tveh().loc["LV elec"].reset_coords(drop=True)
                - hist_var_percent_tveh().loc["LV hib"].reset_coords(drop=True)
                - hist_var_percent_tveh().loc["LV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV liq"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["LV elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV elec"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["LV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV hib"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["LV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV gas"]},
            ),
            rearrange(
                -hist_var_percent_tveh().loc["bus elec"].reset_coords(drop=True)
                - hist_var_percent_tveh().loc["bus hib"].reset_coords(drop=True)
                - hist_var_percent_tveh().loc["bus gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus liq"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["bus hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus hib"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["bus gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus gas"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["train liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["train liq"]},
            ),
            rearrange(
                hist_var_percent_tveh().loc["train elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["train elec"]},
            ),
        ]
    )


@cache.step
@subs(["vehicleT"], _subscript_dict)
def aux_p_inland_transp():
    """
    Real Name: aux P inland transp
    Original Eqn: IF THEN ELSE(Time<T fin inlandT,IF THEN ELSE( Activate policy inlandT=1 :AND:Time>T ini inlandT, (P inlandT [vehicleT]-percent T veh Tini[vehicleT] )/(T fin inlandT-T ini inlandT) , hist var inlandT [vehicleT]),0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    auxiliar variable to introduce begining and ending times of policies and
        calculate the lineal growth in time
    """
    return if_then_else(
        time() < t_fin_inlandt(),
        lambda: if_then_else(
            logical_and(activate_policy_inlandt() == 1, time() > t_ini_inlandt()),
            lambda: (p_inlandt() - percent_t_veh_tini())
            / (t_fin_inlandt() - t_ini_inlandt()),
            lambda: hist_var_inlandt(),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def var_i_inlandt_gas():
    """
    Real Name: var I inlandT Gas
    Original Eqn: energy per X t[HV gas]*ratio var T vehicles[HV gas]+energy per X t[bus gas]*ratio var T vehicles [bus gas]+energy per X t[LV gas]*ratio var T vehicles[LV gas]
    Units: EJ/T$/yr
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of the energy intensity of inland transport relative to gas and
        due to the variations of gas based vehicles
    """
    return (
        energy_per_x_t().loc["HV gas"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["HV gas"].reset_coords(drop=True)
        + energy_per_x_t().loc["bus gas"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["bus gas"].reset_coords(drop=True)
        + energy_per_x_t().loc["LV gas"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["LV gas"].reset_coords(drop=True)
    )


@cache.step
@to_float
def var_i_inlandt_liq():
    """
    Real Name: var I inlandT liq
    Original Eqn: energy per X t[HV liq]*ratio var T vehicles[HV liq]+energy per X t[LV liq]*ratio var T vehicles [LV liq]+energy per X t[bus liq]*ratio var T vehicles[bus liq]+energy per X t[HV liq ]*ratio var T vehicles[HV hib]+energy per X t[LV liq]*ratio var T vehicles[LV hib]+energy per X t [bus liq]*ratio var T vehicles[bus hib]+ energy per X t[train liq]*ratio var T vehicles[train liq]
    Units: EJ/T$/yr
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of the energy intensity of inland transport relative to liquids
        and due to the variations of liquids based vehicles
    """
    return (
        energy_per_x_t().loc["HV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["HV liq"].reset_coords(drop=True)
        + energy_per_x_t().loc["LV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["LV liq"].reset_coords(drop=True)
        + energy_per_x_t().loc["bus liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["bus liq"].reset_coords(drop=True)
        + energy_per_x_t().loc["HV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["HV hib"].reset_coords(drop=True)
        + energy_per_x_t().loc["LV liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["LV hib"].reset_coords(drop=True)
        + energy_per_x_t().loc["bus liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["bus hib"].reset_coords(drop=True)
        + energy_per_x_t().loc["train liq"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["train liq"].reset_coords(drop=True)
    )


@cache.step
@subs(["vehicleT"], _subscript_dict)
def ratio_var_t_vehicles():
    """
    Real Name: ratio var T vehicles
    Original Eqn: var percent T vehicles[vehicleT]/100
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']


    """
    return var_percent_t_vehicles() / 100


@cache.step
@subs(["vehicleT"], _subscript_dict)
def aaux_tveh_ini():
    """
    Real Name: aaux Tveh ini
    Original Eqn: MAX(aaux Tveh[vehicleT],aaux Tveh t[vehicleT])
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']


    """
    return np.maximum(aaux_tveh(), aaux_tveh_t())


@cache.step
@to_float
def var_i_inland_elec():
    """
    Real Name: var I inland Elec
    Original Eqn: energy per X t[LV elec]*ratio var T vehicles[LV elec]+energy per X t[train elec]*ratio var T vehicles [train elec]+energy per X t[bus elec]*ratio var T vehicles[bus elec]
    Units: EJ/T$/yr
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of the energy intensity of inland transport relative to
        electricity and due to the variations of electricity based vehicles
    """
    return (
        energy_per_x_t().loc["LV elec"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["LV elec"].reset_coords(drop=True)
        + energy_per_x_t().loc["train elec"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["train elec"].reset_coords(drop=True)
        + energy_per_x_t().loc["bus elec"].reset_coords(drop=True)
        * ratio_var_t_vehicles().loc["bus elec"].reset_coords(drop=True)
    )


@cache.step
@subs(["vehicleT"], _subscript_dict)
def aaux_tveh_t():
    """
    Real Name: aaux Tveh t
    Original Eqn: DELAY FIXED( aaux Tveh ini[vehicleT] , TIME STEP , 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']


    """
    return _delayfixed_aaux_tveh_t()


@cache.run
@subs(["vehicleT"], _subscript_dict)
def percent_tveh_1995():
    """
    Real Name: percent Tveh 1995
    Original Eqn:
      100
        .
        .
        .
      initial percent T vehicles[train elec]
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']


    """
    return xrmerge(
        [
            xr.DataArray(100, {"vehicleT": ["HV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV gas"]}, ["vehicleT"]),
            xr.DataArray(100, {"vehicleT": ["LV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV gas"]}, ["vehicleT"]),
            xr.DataArray(100, {"vehicleT": ["bus liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus gas"]}, ["vehicleT"]),
            rearrange(
                initial_percent_t_vehicles().loc["train liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["train liq"]},
            ),
            rearrange(
                initial_percent_t_vehicles().loc["train elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["train elec"]},
            ),
        ]
    )


@cache.run
@subs(["vehicleT"], _subscript_dict)
def hist_var_percent_tveh():
    """
    Real Name: hist var percent Tveh
    Original Eqn:
      0
        .
        .
        .
      0
    Units: 1/yr
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    historical evolution of percent of vehicles based on the linear
        interpolation between 2005 and T hist H transp(default 2015). Before 2005
        all vehicles are liquid based except trains. Percents relative to each
        type of vehicle
    """
    return xrmerge(
        [
            xr.DataArray(0, {"vehicleT": ["HV liq"]}, ["vehicleT"]),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["HV hib"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["HV hib"]},
            ),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["HV gas"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["HV gas"]},
            ),
            xr.DataArray(0, {"vehicleT": ["LV liq"]}, ["vehicleT"]),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["LV elec"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["LV elec"]},
            ),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["LV hib"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["LV hib"]},
            ),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["LV gas"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["LV gas"]},
            ),
            xr.DataArray(0, {"vehicleT": ["bus liq"]}, ["vehicleT"]),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["bus elec"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["bus elec"]},
            ),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["bus hib"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["bus hib"]},
            ),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        initial_percent_t_vehicles()
                        .loc["bus gas"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_inlandt() - 2005),
                    lambda: 0,
                ),
                ["vehicleT"],
                {"vehicleT": ["bus gas"]},
            ),
            xr.DataArray(0, {"vehicleT": ["train liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["train elec"]}, ["vehicleT"]),
        ]
    )


@cache.step
@subs(["vehicleT"], _subscript_dict)
def aaux_tveh():
    """
    Real Name: aaux Tveh
    Original Eqn: IF THEN ELSE( ABS(Time-T ini inlandT)<1*TIME STEP, percent T vehicles[vehicleT] , 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']


    """
    return if_then_else(
        abs(time() - t_ini_inlandt()) < 1 * time_step(),
        lambda: percent_t_vehicles(),
        lambda: 0,
    )


@cache.step
@to_float
def new_cellulosic_biofuels():
    """
    Real Name: new cellulosic biofuels
    Original Eqn: IF THEN ELSE(Time<start year 3gen cellulosic biofuels, 0, IF THEN ELSE(Max NPP potential bioE residues=0, 0, IF THEN ELSE(Time<start year 3gen cellulosic biofuels+5, start production biofuels(Time-start year 3gen cellulosic biofuels )*EJ per ktoe, IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?"*Potential PE cellulosic biofuel EJ , P bioE residues*Potential PE cellulosic biofuel EJ*Cellulosic biofuels available))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New annual production of cellulosic biofuels from bioE residues. For the
        first 5 years, we assume the same rate of energy produced than the one
        achieved by conventional biofuels (2nd generation).
    """
    return if_then_else(
        time() < start_year_3gen_cellulosic_biofuels(),
        lambda: 0,
        lambda: if_then_else(
            max_npp_potential_bioe_residues() == 0,
            lambda: 0,
            lambda: if_then_else(
                time() < start_year_3gen_cellulosic_biofuels() + 5,
                lambda: start_production_biofuels(
                    time() - start_year_3gen_cellulosic_biofuels()
                )
                * ej_per_ktoe(),
                lambda: if_then_else(
                    check_liquids() < 0,
                    lambda: constrain_liquids_exogenous_growth()
                    * potential_pe_cellulosic_biofuel_ej(),
                    lambda: p_bioe_residues()
                    * potential_pe_cellulosic_biofuel_ej()
                    * cellulosic_biofuels_available(),
                ),
            ),
        ),
    )


@cache.step
@to_float
def new_land_marg_for_biofuels():
    """
    Real Name: new land marg for biofuels
    Original Eqn: new biofuels land marg*Land occupation ratio biofuels marg land/Conv efficiency from NPP to biofuels
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        new_biofuels_land_marg()
        * land_occupation_ratio_biofuels_marg_land()
        / conv_efficiency_from_npp_to_biofuels()
    )


@cache.step
@to_float
def new_biofuels_land_marg():
    """
    Real Name: new biofuels land marg
    Original Eqn: IF THEN ELSE(Time<start year biofuels land marg, 0, IF THEN ELSE(Potential marginal lands MHa=0, 0, IF THEN ELSE(Time<start year biofuels land marg+5, start production biofuels(Time-start year biofuels land marg )*EJ per ktoe/ratio land productivity 2gen vs marg, IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?"*Potential PEavail biofuels land marg EJ ,P biofuels marg lands*BioE gen land marg available*Potential PEavail biofuels land marg EJ ))))*Land availability constraint
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New annual production from biofuels in marginal lands. For the first 5
        years, we assume the same rate of land occupation (MHa/year) than the one
        achieved by conventional biofuels -this is the reason to take into account
        the relative land productivity between both types of crops.
    """
    return (
        if_then_else(
            time() < start_year_biofuels_land_marg(),
            lambda: 0,
            lambda: if_then_else(
                potential_marginal_lands_mha() == 0,
                lambda: 0,
                lambda: if_then_else(
                    time() < start_year_biofuels_land_marg() + 5,
                    lambda: start_production_biofuels(
                        time() - start_year_biofuels_land_marg()
                    )
                    * ej_per_ktoe()
                    / ratio_land_productivity_2gen_vs_marg(),
                    lambda: if_then_else(
                        check_liquids() < 0,
                        lambda: constrain_liquids_exogenous_growth()
                        * potential_peavail_biofuels_land_marg_ej(),
                        lambda: p_biofuels_marg_lands()
                        * bioe_gen_land_marg_available()
                        * potential_peavail_biofuels_land_marg_ej(),
                    ),
                ),
            ),
        )
        * land_availability_constraint()
    )


@cache.step
@to_float
def max_potential_csp_twe():
    """
    Real Name: max potential CSP TWe
    Original Eqn: max solar on land Mha*power density CSP*(1-share solar PV vs tot solar gen)
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum potential of CSP PV for producing electricity on land. To
        distribute the area potential with the CSP, we assume the potential share
        proportional to the generation share in each time period.
    """
    return (
        max_solar_on_land_mha()
        * power_density_csp()
        * (1 - share_solar_pv_vs_tot_solar_gen())
    )


@cache.step
@to_float
def new_biofuels_2gen_land_compet():
    """
    Real Name: new biofuels 2gen land compet
    Original Eqn: IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?"*Land compet biofuels 2gen Mha , MAX(Annual additional historic land use biofuels 2gen+adapt growth biofuels 2gen *Land compet biofuels 2gen Mha*Biofuels land compet available,0))*Land availability constraint
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New land dedicated to biofuels 2nd generation in land competing with other
        uses.
    """
    return (
        if_then_else(
            check_liquids() < 0,
            lambda: constrain_liquids_exogenous_growth()
            * land_compet_biofuels_2gen_mha(),
            lambda: np.maximum(
                annual_additional_historic_land_use_biofuels_2gen()
                + adapt_growth_biofuels_2gen()
                * land_compet_biofuels_2gen_mha()
                * biofuels_land_compet_available(),
                0,
            ),
        )
        * land_availability_constraint()
    )


@cache.step
@to_float
def max_potential_solar_pv_twe():
    """
    Real Name: max potential solar PV TWe
    Original Eqn: max solar on land Mha*"power density solar PV on land TWe/Mha"*share solar PV vs tot solar gen
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum potential of solar PV for producing electricity on land. To
        distribute the area potential with the CSP, we assume the potential share
        proportional to the generation share in each time period.
    """
    return (
        max_solar_on_land_mha()
        * power_density_solar_pv_on_land_twemha()
        * share_solar_pv_vs_tot_solar_gen()
    )


@cache.step
@to_float
def land_availability_constraint():
    """
    Real Name: Land availability constraint
    Original Eqn: aux reach available land
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Land availability constraint: when this variable is 0 it limits the
        expansion of biofuel crops.
    """
    return aux_reach_available_land()


@cache.step
@to_float
def marginal_land_for_biofuels_rate():
    """
    Real Name: Marginal land for biofuels rate
    Original Eqn: new land marg for biofuels*aux reach available land
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Biofuels plantation rate on marginal lands.
    """
    return new_land_marg_for_biofuels() * aux_reach_available_land()


@cache.step
@to_float
def available_land():
    """
    Real Name: "'Available land'"
    Original Eqn: INTEG ( -Land for RES elec rate-increase agricultural land-Marginal land for biofuels rate, initial 'available land')
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    "Available land" as defined in MEDEAS-EU framework, representing the
        terrestrial land that is currently neither being used by the primary
        sector (arable land, permanent crops, permanent meadows and pastures and
        productive forest area) nor built-up, nor occupied by permanent
        snows&glaciers.
    """
    return _integ_available_land()


@cache.step
@to_float
def max_csp_on_land_mha():
    """
    Real Name: max CSP on land MHa
    Original Eqn: max solar on land Mha-surface solar PV on land Mha
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Available land for solar CSP taking into account the total land
        availability for solar and the actual occupation from solar PV on land.
    """
    return max_solar_on_land_mha() - surface_solar_pv_on_land_mha()


@cache.step
@to_float
def compet_land_for_biofuels_rate():
    """
    Real Name: compet land for biofuels rate
    Original Eqn: new biofuels 2gen land compet
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Biofuels plantation rate on land subject to competition with other
        agricultural uses.
    """
    return new_biofuels_2gen_land_compet()


@cache.step
@to_float
def new_bioe_residues_for_nonbiofuels():
    """
    Real Name: "new BioE residues for non-biofuels"
    Original Eqn: IF THEN ELSE(Time<"start year BioE residues for non-biofuels", 0, IF THEN ELSE(Max NPP potential bioE residues=0, 0, IF THEN ELSE(Time<"start year BioE residues for non-biofuels"+5, start production biofuels(Time-"start year BioE residues for non-biofuels" )*EJ per ktoe, P bioE residues*"PE bioE residues non-biofuels EJ"*"BioE residues for non-biofuels available" )))
    Units: EJ/(Year*Year)
    Limits: (None, None)
    Type: component
    Subs: None

    BioE residues used for other uses than biofuels (heat, solids and
        electricity). For the first 5 years, we assume the same rate of energy
        produced than the one achieved by conventional biofuels (2nd generation).
    """
    return if_then_else(
        time() < start_year_bioe_residues_for_nonbiofuels(),
        lambda: 0,
        lambda: if_then_else(
            max_npp_potential_bioe_residues() == 0,
            lambda: 0,
            lambda: if_then_else(
                time() < start_year_bioe_residues_for_nonbiofuels() + 5,
                lambda: start_production_biofuels(
                    time() - start_year_bioe_residues_for_nonbiofuels()
                )
                * ej_per_ktoe(),
                lambda: p_bioe_residues()
                * pe_bioe_residues_nonbiofuels_ej()
                * bioe_residues_for_nonbiofuels_available(),
            ),
        ),
    )


@cache.step
@to_float
def max_solar_pv_on_land_mha():
    """
    Real Name: max solar PV on land MHa
    Original Eqn: max solar on land Mha-surface CSP Mha
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Available land for solar PV taking into account the total land
        availability for solar and the actual occupation from CSP.
    """
    return max_solar_on_land_mha() - surface_csp_mha()


@cache.step
@to_float
def max_solar_on_land_mha():
    """
    Real Name: max solar on land Mha
    Original Eqn: "'Available land'"+surface CSP Mha+surface solar PV on land Mha
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum area potential to be occupied by solar power plants on land.
    """
    return available_land() + surface_csp_mha() + surface_solar_pv_on_land_mha()


@cache.step
@to_float
def permanent_snowsglaciers_area():
    """
    Real Name: "permanent snows&glaciers area"
    Original Eqn: INTEG ( 0, "initial permanent snows&glaciers area")
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Permanent snow & glaciers from FAOSTAT.
    """
    return _integ_permanent_snowsglaciers_area()


@cache.run
@to_float
def initial_permanent_snowsglaciers_area():
    """
    Real Name: "initial permanent snows&glaciers area"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'H28')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial area occupied by permanent snows & glaciers.
    """
    return _ext_constant_initial_permanent_snowsglaciers_area()


@cache.step
@to_float
def warning_biodiversity_loss_12():
    """
    Real Name: "Warning biodiversity loss <12%"
    Original Eqn: IF THEN ELSE(Natural lands/Total EU land > 0.12, 0, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    0: natural lands > 12%        1:natural lands < 12%
    """
    return if_then_else(natural_lands() / total_eu_land() > 0.12, lambda: 0, lambda: 1)


@cache.run
@to_float
def total_eu_land():
    """
    Real Name: Total EU land
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'C9')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    EU terrestrial land.
    """
    return _ext_constant_total_eu_land()


@cache.step
@to_float
def land_for_res_elec_rate():
    """
    Real Name: Land for RES elec rate
    Original Eqn: (Land requirements RES elec compet uses-"Land requirements RES elec compet uses t-1")*aux reach available land
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Land requirements for renewable technologies to generate electricity (PV
        on land, CSP and hydro).
    """
    return (
        land_requirements_res_elec_compet_uses()
        - land_requirements_res_elec_compet_uses_t1()
    ) * aux_reach_available_land()


def aux_reach_available_land():
    """
    Real Name: aux reach available land
    Original Eqn: WITH LOOKUP ( "'Available land'", ([(-0.01,0)-(100,10)],(-0.01,0),(0,0),(1e-08,0),(0.0001,1),(0.01,1),(1,1),(100,1) ))
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    This variable = 0 when there is no more land available.
    """
    return lookup(
        available_land(), [-0.01, 0, 1e-08, 0.0001, 0.01, 1, 100], [0, 0, 0, 1, 1, 1, 1]
    )


@cache.step
@to_float
def increase_agricultural_land():
    """
    Real Name: increase agricultural land
    Original Eqn: IF THEN ELSE(Time<2014,0, agricultural land until 2015-Agricultural land)*aux reach available land
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        if_then_else(
            time() < 2014,
            lambda: 0,
            lambda: agricultural_land_until_2015() - agricultural_land(),
        )
        * aux_reach_available_land()
    )


@cache.step
@to_float
def total_land_requirements_renew_mha():
    """
    Real Name: Total land requirements renew Mha
    Original Eqn: Land requirements RES elec compet uses+Land compet required dedicated crops for biofuels+Land required biofuels land marg+surface onshore wind Mha
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land required for RES power plants and total bioenergy (land competition +
        marginal lands).
    """
    return (
        land_requirements_res_elec_compet_uses()
        + land_compet_required_dedicated_crops_for_biofuels()
        + land_required_biofuels_land_marg()
        + surface_onshore_wind_mha()
    )


@cache.step
@to_float
def land_requirements_res_elec_compet_uses_t1():
    """
    Real Name: "Land requirements RES elec compet uses t-1"
    Original Eqn: DELAY FIXED ( Land requirements RES elec compet uses , 1 , 0.9115)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Land requirements for renewable technologies to generate electricity (PV
        on land, CSP and hydro) requiring land and not easily compatible with
        double uses delayed 1 year.
    """
    return _delayfixed_land_requirements_res_elec_compet_uses_t1()


@cache.run
@to_float
def initial_available_land():
    """
    Real Name: initial 'available land'
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'C8')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial "available land" as defined in MEDEAS-EU framework, representing
        the terrestrial land that is currently neither being used by the primary
        sector (arable land, permanent crops, permanent meadows and pastures and
        productive forest area) nor built-up, nor occupied by permanent
        snows&glaciers.
    """
    return _ext_constant_initial_available_land()


@cache.step
@to_float
def land_for_solar_and_hydro_res():
    """
    Real Name: Land for solar and hydro RES
    Original Eqn: INTEG ( Land for RES elec rate, 0.9)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land for solar on land and hydro power plants.
    """
    return _integ_land_for_solar_and_hydro_res()


@cache.step
@to_float
def aux16():
    """
    Real Name: aux16
    Original Eqn: DELAY FIXED ( agricultural land until 2015, TIME STEP, initial agricultural area)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate "agricultural land until 2015".
    """
    return _delayfixed_aux16()


@cache.step
@to_float
def agricultural_land_until_2015():
    """
    Real Name: agricultural land until 2015
    Original Eqn: IF THEN ELSE(Time<2015, Agricultural land, aux16)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Agricultural land in EU until the year 2015. From that year, this variable
        reports the value of agricultural land in 2015.
    """
    return if_then_else(time() < 2015, lambda: agricultural_land(), lambda: aux16())


@cache.run
@to_float
def p_urban_land_density():
    """
    Real Name: P urban land density
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C274')
    Units: m2/people
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy target to set urban land density in a target year.
    """
    return _ext_constant_p_urban_land_density()


def historic_urban_land(x):
    """
    Real Name: Historic urban land
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Land', '20', 'H27'))
    Units: MHa
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic urban land.
    """
    return _ext_lookup_historic_urban_land(x)


@cache.step
@to_float
def hist_variation_urban_land():
    """
    Real Name: hist variation urban land
    Original Eqn: IF THEN ELSE(Time<2014, Historic urban land(INTEGER(Time+1))-Historic urban land(INTEGER(Time)), 0)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Annual variation of historic urban land.
    """
    return if_then_else(
        time() < 2014,
        lambda: historic_urban_land(int(time() + 1)) - historic_urban_land(int(time())),
        lambda: 0,
    )


@cache.run
@subs(["Households vehicles"], _subscript_dict)
def percent_h_vehicles_initial():
    """
    Real Name: percent H vehicles initial
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B26')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B31')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['Households vehicles']

    percents in the year of calibration (2015 ) of vehciles relative to total
        4w+2w:
    """
    return _ext_constant_percent_h_vehicles_initial()


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def var_percents_h_vehicles():
    """
    Real Name: var percents H vehicles
    Original Eqn:
      IF THEN ELSE( Time<T ini Hveh,aux hist H[liq 4wheels], -H elec adapt growth-H hyb adapt growth-H gas adapt growth-H 2w elec adapt growth-H 2w liq adapt growth)
        .
        .
        .
      IF THEN ELSE( Time<T ini Hveh,aux hist H[elec 2wheels] ,H 2w elec adapt growth)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    Variation of vehicles percetages. Percentages relative to total 4w+2w.
        Before T_ini_H_veh the percentages follow historical variations
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    time() < t_ini_hveh(),
                    lambda: aux_hist_h().loc["liq 4wheels"].reset_coords(drop=True),
                    lambda: -h_elec_adapt_growth()
                    - h_hyb_adapt_growth()
                    - h_gas_adapt_growth()
                    - h_2w_elec_adapt_growth()
                    - h_2w_liq_adapt_growth(),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["liq 4wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_hveh(),
                    lambda: aux_hist_h().loc["elec 4wheels"].reset_coords(drop=True),
                    lambda: h_elec_adapt_growth(),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["elec 4wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_hveh(),
                    lambda: aux_hist_h().loc["hib 4wheels"].reset_coords(drop=True),
                    lambda: h_hyb_adapt_growth(),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["hib 4wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_hveh(),
                    lambda: aux_hist_h().loc["gas 4wheels"].reset_coords(drop=True),
                    lambda: h_gas_adapt_growth(),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["gas 4wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_hveh(),
                    lambda: aux_hist_h().loc["liq 2wheels"].reset_coords(drop=True),
                    lambda: h_2w_liq_adapt_growth(),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_hveh(),
                    lambda: aux_hist_h().loc["elec 2wheels"].reset_coords(drop=True),
                    lambda: h_2w_elec_adapt_growth(),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["elec 2wheels"]},
            ),
        ]
    )


@cache.step
@to_float
def h_gas_initial_growth():
    """
    Real Name: H gas initial growth
    Original Eqn: IF THEN ELSE(Time<T fin Hveh,IF THEN ELSE( Activate policy H transp=1:AND:Time>T ini Hveh, (P H vehicle[gas 4wheels]-percent H vehicles Tini[gas 4wheels] )/(T fin Hveh-T ini Hveh),aux hist H[gas 4wheels ]),0)
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Growth of percent of gas 4w without restrictions derived from saturation
        and shortage of electricity  Percent relative to total number of vehicles
        2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc["gas 4wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini().loc["gas 4wheels"].reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc["gas 4wheels"].reset_coords(drop=True),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def h_2w_liq_initial_growth():
    """
    Real Name: H 2w liq initial growth
    Original Eqn: IF THEN ELSE(Time<T fin Hveh,IF THEN ELSE( Activate policy H transp=1:AND:Time>T ini Hveh, (P H vehicle[liq 2wheels]-percent H vehicles Tini[liq 2wheels] )/(T fin Hveh-T ini Hveh),aux hist H[liq 2wheels ]),0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc["liq 2wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini().loc["liq 2wheels"].reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc["liq 2wheels"].reset_coords(drop=True),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def h_hyb_initial_growth():
    """
    Real Name: H hyb initial growth
    Original Eqn: IF THEN ELSE(Time<T fin Hveh,IF THEN ELSE( Activate policy H transp=1:AND:Time>T ini Hveh,(P H vehicle[hib 4wheels]-percent H vehicles Tini[hib 4wheels] )/(T fin Hveh-T ini Hveh),aux hist H[hib 4wheels ]),0)
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Growth of percent of hibrid 4w without restrictions derived from
        saturation and shortage of electricity  Percent relative to total number
        of vehicles 2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc["hib 4wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini().loc["hib 4wheels"].reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc["hib 4wheels"].reset_coords(drop=True),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def h_2w_elec_initial_growth():
    """
    Real Name: H 2w elec initial growth
    Original Eqn: IF THEN ELSE(Time<T fin Hveh,IF THEN ELSE( Activate policy H transp=1:AND:Time>T ini Hveh, (P H vehicle[elec 2wheels]-percent H vehicles Tini[elec 2wheels] )/(T fin Hveh-T ini Hveh),aux hist H[elec 2wheels ]),0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Growth of percent of electric 2w without restrictions derived from
        saturation and shortage of electricity  Percent relative to total number
        of vehicles 2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc["elec 2wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini().loc["elec 2wheels"].reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc["elec 2wheels"].reset_coords(drop=True),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def h_2w_liq_adapt_growth():
    """
    Real Name: H 2w liq adapt growth
    Original Eqn: H 2w liq initial growth
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return h_2w_liq_initial_growth()


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def aaux_hveh_t():
    """
    Real Name: aaux Hveh t
    Original Eqn: DELAY FIXED( aaux Hveh ini[Households vehicles] , TIME STEP , 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']


    """
    return _delayfixed_aaux_hveh_t()


@cache.step
@to_float
def a2_coef_th():
    """
    Real Name: A2 coef tH
    Original Eqn: Liq 2w/(Demand H*(percent 2w liq/100))
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None

    Coeficients for the calculation of variations of trasnport intensities
    """
    return liq_2w() / (demand_h() * (percent_2w_liq() / 100))


@cache.step
@to_float
def h_elec_initial_growth():
    """
    Real Name: H elec initial growth
    Original Eqn: IF THEN ELSE(Time<T fin Hveh,IF THEN ELSE( Activate policy H transp=1:AND: Time>T ini Hveh,(P H vehicle[elec 4wheels]-percent H vehicles Tini[elec 4wheels] )/(T fin Hveh-T ini Hveh), aux hist H[elec 4wheels]),0)
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Growth of percent of electrical 4w without restrictions derived from
        saturation and shortage of electricity  Percent relative to total number
        of vehicles 2w+4w.
    """
    return if_then_else(
        time() < t_fin_hveh(),
        lambda: if_then_else(
            logical_and(activate_policy_h_transp() == 1, time() > t_ini_hveh()),
            lambda: (
                p_h_vehicle().loc["elec 4wheels"].reset_coords(drop=True)
                - percent_h_vehicles_tini().loc["elec 4wheels"].reset_coords(drop=True)
            )
            / (t_fin_hveh() - t_ini_hveh()),
            lambda: aux_hist_h().loc["elec 4wheels"].reset_coords(drop=True),
        ),
        lambda: 0,
    )


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def aaux_hveh_ini():
    """
    Real Name: aaux Hveh ini
    Original Eqn: MAX(aaux Hveh[Households vehicles],aaux Hveh t[Households vehicles])
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']


    """
    return np.maximum(aaux_hveh(), aaux_hveh_t())


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def aaux_hveh():
    """
    Real Name: aaux Hveh
    Original Eqn: IF THEN ELSE( ABS(Time-T ini Hveh)<1*TIME STEP, percents H vehicles[ Households vehicles] , 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']


    """
    return if_then_else(
        abs(time() - t_ini_hveh()) < 1 * time_step(),
        lambda: percents_h_vehicles(),
        lambda: 0,
    )


@cache.run
@subs(["Households vehicles"], _subscript_dict)
def hist_var_percent_h():
    """
    Real Name: hist var percent H
    Original Eqn:
      0
        .
        .
        .
      IF THEN ELSE( Time<2005,0, (percent H vehicles Tini[elec 2wheels]-0)/(T hist H transp-2005))
    Units: 1/yr
    Limits: (None, None)
    Type: constant
    Subs: ['Households vehicles']

    historical evolution of percent of vehicles based on the linear
        interpolation between 2005 and T hist H transp(default 2015). Before 2005
        all vehicle s are liquid based. Percents relative to 2w+4w
    """
    return xrmerge(
        [
            xr.DataArray(
                0, {"Households vehicles": ["liq 4wheels"]}, ["Households vehicles"]
            ),
            rearrange(
                if_then_else(
                    time() > 2005,
                    lambda: (
                        percent_h_vehicles_tini()
                        .loc["hib 4wheels"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_h_transp() - 2005),
                    lambda: 0,
                ),
                ["Households vehicles"],
                {"Households vehicles": ["hib 4wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2005,
                    lambda: 0,
                    lambda: (
                        percent_h_vehicles_tini()
                        .loc["elec 4wheels"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_h_transp() - 2005),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["elec 4wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2005,
                    lambda: 0,
                    lambda: (
                        percent_h_vehicles_tini()
                        .loc["gas 4wheels"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_h_transp() - 2005),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["gas 4wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2005,
                    lambda: 0,
                    lambda: (
                        percent_h_vehicles_tini()
                        .loc["liq 2wheels"]
                        .reset_coords(drop=True)
                        - initial_2w_percent()
                    )
                    / (t_hist_h_transp() - 2005),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2005,
                    lambda: 0,
                    lambda: (
                        percent_h_vehicles_tini()
                        .loc["elec 2wheels"]
                        .reset_coords(drop=True)
                        - 0
                    )
                    / (t_hist_h_transp() - 2005),
                ),
                ["Households vehicles"],
                {"Households vehicles": ["elec 2wheels"]},
            ),
        ]
    )


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def percent_h_vehicles_tini():
    """
    Real Name: percent H vehicles Tini
    Original Eqn: IF THEN ELSE( Time<T ini Hveh , percent H vehicles initial[Households vehicles],aaux Hveh ini[Households vehicles])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    percents in the year Tini of start of policy of vehicles relative to total
        4w+2w:
    """
    return if_then_else(
        time() < t_ini_hveh(),
        lambda: percent_h_vehicles_initial(),
        lambda: aaux_hveh_ini(),
    )


@cache.run
@to_float
def p_labour_share():
    """
    Real Name: P labour share
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C3')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Labour share targetted by 2050.
    """
    return _ext_constant_p_labour_share()


@cache.run
@to_float
def initial_labour_share():
    """
    Real Name: Initial Labour share
    Original Eqn: 0.473592
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Historic 2015 Labour share
    """
    return 0.473592


@cache.step
@subs(["sectors"], _subscript_dict)
def gfcf_not_covered():
    """
    Real Name: GFCF not covered
    Original Eqn: IF THEN ELSE(Time<2009,0,Gross fixed capital formation[sectors]-Real GFCF by sector[sectors])
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Gap between gross fixed capital formation required and real gross fixed
        capital formation (after energy-economy feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: 0,
        lambda: gross_fixed_capital_formation() - real_gfcf_by_sector(),
    )


@cache.step
@to_float
def cc_total_not_covered():
    """
    Real Name: CC total not covered
    Original Eqn: demand not covered total FD*capital share
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Gap between capital compensation required and real capital compensation
        (after energy-economy feedback)
    """
    return demand_not_covered_total_fd() * capital_share()


@cache.step
@to_float
def historic_labour_share_growth():
    """
    Real Name: Historic labour share growth
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Economy', '324', 'B326')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic variation of labour share (own calculations from Eurostats).
    """
    return _ext_data_historic_labour_share_growth(time())


@cache.step
@to_float
def real_exchange_next_step():
    """
    Real Name: real exchange next step
    Original Eqn: real exchange+variation real exchange
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_exchange() + variation_real_exchange()


@cache.step
@subs(["sectors"], _subscript_dict)
def share_exp_vs_gfcfhdexp():
    """
    Real Name: "share Exp vs GFCF+HD+Exp"
    Original Eqn: Exports demand[sectors]/(Gross fixed capital formation[sectors]+Household demand[sectors]+Exports demand[sectors])
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Ratio 'Exports/GFCF+Exports+Households demand'.
    """
    return exports_demand() / (
        gross_fixed_capital_formation() + household_demand() + exports_demand()
    )


@cache.run
@subs(["sectors"], _subscript_dict)
def beta_1_gfcf():
    """
    Real Name: beta 1 gfcf
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B331')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']

    Sectorial Beta coefficients of panel data regression of Gross fixed
        capital formation
    """
    return _ext_constant_beta_1_gfcf()


@cache.run
@subs(["sectors"], _subscript_dict)
def beta_1_exp():
    """
    Real Name: beta 1 exp
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B337')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']

    Sectorial Beta coefficients of panel data regression of exports
    """
    return _ext_constant_beta_1_exp()


@cache.step
@to_float
def variation_real_exchange():
    """
    Real Name: variation real exchange
    Original Eqn: variation historic real exchange
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of Real Effective Exchange Rate
    """
    return variation_historic_real_exchange()


@cache.run
@to_float
def beta_2_gfcf():
    """
    Real Name: beta 2 gfcf
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'E329')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Beta coefficient of first independent variable in panel data regression of
        Gross fixed capital formation
    """
    return _ext_constant_beta_2_gfcf()


@cache.step
@to_float
def total_gfcf():
    """
    Real Name: Total GFCF
    Original Eqn: SUM(Gross fixed capital formation[sectors!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Whole economy domestic gross fixed capital formation
    """
    return sum(gross_fixed_capital_formation(), dim=("sectors",))


@cache.run
@to_float
def beta_2_hh():
    """
    Real Name: beta 2 hh
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'E332')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    beta coefficient for first independent variable in panel data regression
        of households consumption
    """
    return _ext_constant_beta_2_hh()


@cache.run
@to_float
def beta_3_gfcf():
    """
    Real Name: beta 3 gfcf
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'G329')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Beta coefficient of second independent variable in panel data regression
        of Gross fixed capital formation
    """
    return _ext_constant_beta_3_gfcf()


@cache.run
@to_float
def beta_3_exp():
    """
    Real Name: beta 3 exp
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'G335')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Beta coefficient of second independent variable in panel data regression
        of exports
    """
    return _ext_constant_beta_3_exp()


@cache.run
@to_float
def initial_capital_share():
    """
    Real Name: Initial capital share
    Original Eqn: 0.407001
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Historic 2015 Labour share
    """
    return 0.407001


@cache.run
@to_float
def initial_cc_total():
    """
    Real Name: initial CC total
    Original Eqn: 3.59433e+06
    Units: Mdollars
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial capital compensation
    """
    return 3.59433e06


@cache.step
@to_float
def annual_gdppc_growth_rate():
    """
    Real Name: Annual GDPpc growth rate
    Original Eqn: IF THEN ELSE(select GDPpc evolution input=0, GDPpc annual growth SSP2(Time), IF THEN ELSE(select GDPpc evolution input=1, P timeseries GDPpc growth rate, IF THEN ELSE (Time<P customized year GDPpc evolution, P timeseries GDPpc growth rate, P customized cte GDPpc variation )))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        select_gdppc_evolution_input() == 0,
        lambda: gdppc_annual_growth_ssp2(time()),
        lambda: if_then_else(
            select_gdppc_evolution_input() == 1,
            lambda: p_timeseries_gdppc_growth_rate(),
            lambda: if_then_else(
                time() < p_customized_year_gdppc_evolution(),
                lambda: p_timeseries_gdppc_growth_rate(),
                lambda: p_customized_cte_gdppc_variation(),
            ),
        ),
    )


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def number_vehicles_h():
    """
    Real Name: Number vehicles H
    Original Eqn: ratio N veh Demand H*Household demand total*1e-06*percents H vehicles[Households vehicles]/100
    Units: vehicles
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    Estimated number of households vehicles asuming constant ratios of
        vehicles per households demand
    """
    return (
        ratio_n_veh_demand_h()
        * household_demand_total()
        * 1e-06
        * percents_h_vehicles()
        / 100
    )


@cache.step
@to_float
def total_government_expenditure():
    """
    Real Name: Total government expenditure
    Original Eqn: SUM(Sectoral Government expenditures[sectors!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Whole economy government expenditures
    """
    return sum(sectoral_government_expenditures(), dim=("sectors",))


@cache.step
@subs(["sectors"], _subscript_dict)
def sectoral_government_expenditures():
    """
    Real Name: Sectoral Government expenditures
    Original Eqn: Real final demand by sector EU[sectors]*Government expenditure share[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Expenditures made by the public sector in each sector.
    """
    return real_final_demand_by_sector_eu() * government_expenditure_share()


@cache.step
@subs(["water"], _subscript_dict)
def initial_water_intensity_for_households():
    """
    Real Name: Initial water intensity for households
    Original Eqn: IF THEN ELSE(Time<1996, Initial water use by households[water]/Household demand total, 0)
    Units: dam3/Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['water']


    """
    return if_then_else(
        time() < 1996,
        lambda: initial_water_use_by_households() / household_demand_total(),
        lambda: 0,
    )


def historic_real_exchange(x):
    """
    Real Name: historic real exchange
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '343' ,'B344')
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic Real Effective Exchange Rate (Eurostats)
    """
    return _ext_lookup_historic_real_exchange(x)


@cache.run
@to_float
def select_gdppc_evolution_input():
    """
    Real Name: select GDPpc evolution input
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'B4')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0. SSP2        1. Timeseries        2. From customized year, set annual constant variation
    """
    return _ext_constant_select_gdppc_evolution_input()


@cache.step
@subs(["sectors"], _subscript_dict)
def gross_fixed_capital_formation():
    """
    Real Name: Gross fixed capital formation
    Original Eqn: INTEG ( variation GFCF[sectors]-GFCF not covered[sectors], initial GFCF[sectors])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Sectorial domestic value of gross fixed capital formation
    """
    return _integ_gross_fixed_capital_formation()


@cache.step
@to_float
def growth_capital_share():
    """
    Real Name: growth capital share
    Original Eqn: IF THEN ELSE(Time>2014,IF THEN ELSE(Time>2050,0,capital share growth*"Labor/Capital share cte?"),Historic capital share growth)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() > 2014,
        lambda: if_then_else(
            time() > 2050,
            lambda: 0,
            lambda: capital_share_growth() * laborcapital_share_cte(),
        ),
        lambda: historic_capital_share_growth(),
    )


@cache.step
@to_float
def growth_labour_share():
    """
    Real Name: growth labour share
    Original Eqn: IF THEN ELSE(Time>2014,IF THEN ELSE(Time>2050,0,Labour share growth*"Labor/Capital share cte?"),Historic labour share growth)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Real variation rate of labour share depending on activation.
    """
    return if_then_else(
        time() > 2014,
        lambda: if_then_else(
            time() > 2050,
            lambda: 0,
            lambda: labour_share_growth() * laborcapital_share_cte(),
        ),
        lambda: historic_labour_share_growth(),
    )


@cache.step
@subs(["water"], _subscript_dict)
def water_use_by_households():
    """
    Real Name: Water use by households
    Original Eqn: Water intensity for households[water]*Household demand total
    Units: dam3
    Limits: (None, None)
    Type: component
    Subs: ['water']

    Water use by type by households.
    """
    return water_intensity_for_households() * household_demand_total()


@cache.run
@subs(["sectors"], _subscript_dict)
def initial_exports_demand():
    """
    Real Name: Initial exports demand
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B342')
    Units: Mdollars
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']

    Initial value of sectorial exports
    """
    return _ext_constant_initial_exports_demand()


@cache.step
@to_float
def total_exports():
    """
    Real Name: Total exports
    Original Eqn: SUM(Exports demand[sectors!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Whole economy exports
    """
    return sum(exports_demand(), dim=("sectors",))


@cache.step
@to_float
def capital_share():
    """
    Real Name: capital share
    Original Eqn: INTEG ( variation capital share, 0.413596)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Ratio 'Capital compensation/GDP'
    """
    return _integ_capital_share()


@cache.run
@subs(["sectors"], _subscript_dict)
def initial_gfcf():
    """
    Real Name: initial GFCF
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B340')
    Units: Mdollars
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']

    Initial value of gross fixed capital formation
    """
    return _ext_constant_initial_gfcf()


def historic_exports_demand(x):
    """
    Real Name: Historic exports demand
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '348', 'B349')
    Units: Mdollars
    Limits: (None, None)
    Type: lookup
    Subs: ['sectors']

    Historic exports (WIOD-35 sectors)
    """
    return _ext_lookup_historic_exports_demand(x)


@cache.step
@subs(["sectors"], _subscript_dict)
def variation_historic_gfcf():
    """
    Real Name: variation historic GFCF
    Original Eqn: Historic GFCF[sectors](INTEGER(Time+1))-Historic GFCF[sectors](INTEGER(Time))
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Historic variation of gross fixed capital formation (WIOD-35 sectors)
    """
    return historic_gfcf(int(time() + 1)) - historic_gfcf(int(time()))


@cache.step
@to_float
def real_demand_world_next_step():
    """
    Real Name: real demand world next step
    Original Eqn: Real demand World*(1+Annual GDP growth rate World)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_demand_world() * (1 + annual_gdp_growth_rate_world())


@cache.step
@subs(["sectors"], _subscript_dict)
def real_exports_demand_by_sector():
    """
    Real Name: Real Exports demand by sector
    Original Eqn: Real final demand by sector EU[sectors]*(1-Government expenditure and changes in inventories shares[sectors])*"share Exp vs GFCF+HD+Exp" [sectors]
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Real exports after energy feedback.
    """
    return (
        real_final_demand_by_sector_eu()
        * (1 - government_expenditure_and_changes_in_inventories_shares())
        * share_exp_vs_gfcfhdexp()
    )


def historic_gdppc(x):
    """
    Real Name: Historic GDPpc
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '324', 'B328'))
    Units: $/person
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic GDP per capita. Data from WIOD for 1995-2009 and from World Bank
        stats for 2010-2016.
    """
    return _ext_lookup_historic_gdppc(x)


@cache.step
@subs(["final sources"], _subscript_dict)
def increase_households_energy_final_demand_for_transp():
    """
    Real Name: increase Households energy final demand for Transp
    Original Eqn: (Energy intensity of households transport[final sources]-Initial energy intensity of households transport 2009 [final sources])*Household demand total/1e+06
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: ['final sources']


    """
    return (
        (
            energy_intensity_of_households_transport()
            - rearrange(
                initial_energy_intensity_of_households_transport_2009(),
                ["final sources"],
                _subscript_dict,
            )
        )
        * household_demand_total()
        / 1e06
    )


@cache.step
@to_float
def variation_labour_share():
    """
    Real Name: variation labour share
    Original Eqn: growth labour share*labour share
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Real variation of labour share.
    """
    return growth_labour_share() * labour_share()


@cache.run
@to_float
def initial_lc_total():
    """
    Real Name: initial LC total
    Original Eqn: 4.18172e+06
    Units: Mdollars
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial labour compensation
    """
    return 4.18172e06


@cache.run
@to_float
def bet_0_hh():
    """
    Real Name: Bet 0 hh
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'C332')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Beta coefficient (intercept) in panel data regression of households
        consumption
    """
    return _ext_constant_bet_0_hh()


@cache.run
@to_float
def beta_0_gfcf():
    """
    Real Name: beta 0 gfcf
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'C329')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Beta coefficient (intercept) of panel data regression of Gross fixed
        capital formation
    """
    return _ext_constant_beta_0_gfcf()


@cache.run
@to_float
def beta_0_exp():
    """
    Real Name: beta 0 exp
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'C335')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Beta coefficient (intercept) of panel data regression of exports
    """
    return _ext_constant_beta_0_exp()


def historic_hd(x):
    """
    Real Name: Historic HD
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '475', 'B476')
    Units:
    Limits: (None, None)
    Type: lookup
    Subs: ['sectors']

    Historical final demand by households (WIOD-35 sectors)
    """
    return _ext_lookup_historic_hd(x)


@cache.run
@to_float
def year_final_capial_share():
    """
    Real Name: Year final capial share
    Original Eqn: 2050
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Year of final capital share by scenarios to use in the mean accumulative
        growth rate.
    """
    return 2050


@cache.run
@subs(["sectors"], _subscript_dict)
def beta_1_hh():
    """
    Real Name: Beta 1 hh
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B334')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']

    Sectorial Beta coefficient in panel data regression of households
        consumption
    """
    return _ext_constant_beta_1_hh()


@cache.step
@subs(["sectors"], _subscript_dict)
def share_gfcf_vs_gfcfhdexp():
    """
    Real Name: "share GFCF vs GFCF+HD+Exp"
    Original Eqn: Gross fixed capital formation[sectors]/(Gross fixed capital formation[sectors]+Household demand[sectors]+Exports demand[sectors])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Ratio 'GFCF/GFCF+Exports+Households demand'.
    """
    return gross_fixed_capital_formation() / (
        gross_fixed_capital_formation() + household_demand() + exports_demand()
    )


@cache.run
@to_float
def beta_2_exp():
    """
    Real Name: beta 2 exp
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'E335')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Beta coefficient of first independent variable in panel data regression of
        exports
    """
    return _ext_constant_beta_2_exp()


@cache.run
@to_float
def laborcapital_share_cte():
    """
    Real Name: "Labor/Capital share cte?"
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0: Labor share: cte        1: Labor share evolves following "P labor share"
    """
    return 1


@cache.run
@to_float
def p_capital_share():
    """
    Real Name: P capital share
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F3')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Capital share targetted by 2050.
    """
    return _ext_constant_p_capital_share()


@cache.step
@subs(["sectors"], _subscript_dict)
def demand_not_covered_by_sector_fd_eu():
    """
    Real Name: demand not covered by sector FD EU
    Original Eqn: IF THEN ELSE(Time<2009,0,Demand by sector FD EU[sectors]-Real final demand by sector EU[sectors])
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Gap between final demand required and real final demand (after
        energy-economy feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: 0,
        lambda: demand_by_sector_fd_eu() - real_final_demand_by_sector_eu(),
    )


@cache.step
@to_float
def historic_capital_share_growth():
    """
    Real Name: Historic capital share growth
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Economy', '324', 'B325')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic variation of capital share (own calculations from Eurostats).
    """
    return _ext_data_historic_capital_share_growth(time())


@cache.step
@to_float
def variation_capital_share():
    """
    Real Name: variation capital share
    Original Eqn: capital share*growth capital share
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Real variation of capital share.
    """
    return capital_share() * growth_capital_share()


@cache.step
@to_float
def variation_cc():
    """
    Real Name: variation CC
    Original Eqn: capital share*(Desired annual total demand growth rate+growth capital share+Desired annual total demand growth rate *growth capital share)*GDP EU*1e+06
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of capital compensation
    """
    return (
        capital_share()
        * (
            desired_annual_total_demand_growth_rate()
            + growth_capital_share()
            + desired_annual_total_demand_growth_rate() * growth_capital_share()
        )
        * gdp_eu()
        * 1e06
    )


@cache.step
@to_float
def p_timeseries_gdppc_growth_rate():
    """
    Real Name: P timeseries GDPpc growth rate
    Original Eqn: GET DIRECT DATA('?../../scenarios/scen_eu.xlsx', 'User scenario', '5', 'E6')
    Units: 1/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Annual GDPpc growth from timeseries.
    """
    return _ext_data_p_timeseries_gdppc_growth_rate(time())


@cache.run
@to_float
def p_customized_cte_gdppc_variation():
    """
    Real Name: P customized cte GDPpc variation
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'G7')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_cte_gdppc_variation()


@cache.step
@subs(["sectors"], _subscript_dict)
def variation_demand_flow_fd_eu():
    """
    Real Name: variation demand flow FD EU
    Original Eqn: IF THEN ELSE(Time<2009 ,historic variation demand[sectors],(Gross fixed capital formation[sectors]* (1-((1-share Government expenditures and changes in inventories next step[sectors])/(1-Government expenditure and changes in inventories shares[sectors])) )+Exports demand[sectors]* (1-((1-share Government expenditures and changes in inventories next step[sectors])/(1-Government expenditure and changes in inventories shares[sectors])) ) +Household demand[sectors]*(1-((1-share Government expenditures and changes in inventories next step[sectors])/(1-Government expenditure and changes in inventories shares [sectors])))+variation GFCF[sectors]+variation household demand[sectors]+variation exports demand[ sectors])/(1-share Government expenditures and changes in inventories next step [sectors]))
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    variation of final demand by EU28 industrial sectors
    """
    return if_then_else(
        time() < 2009,
        lambda: historic_variation_demand(),
        lambda: (
            gross_fixed_capital_formation()
            * (
                1
                - (
                    (
                        1
                        - share_government_expenditures_and_changes_in_inventories_next_step()
                    )
                    / (1 - government_expenditure_and_changes_in_inventories_shares())
                )
            )
            + exports_demand()
            * (
                1
                - (
                    (
                        1
                        - share_government_expenditures_and_changes_in_inventories_next_step()
                    )
                    / (1 - government_expenditure_and_changes_in_inventories_shares())
                )
            )
            + household_demand()
            * (
                1
                - (
                    (
                        1
                        - share_government_expenditures_and_changes_in_inventories_next_step()
                    )
                    / (1 - government_expenditure_and_changes_in_inventories_shares())
                )
            )
            + rearrange(variation_gfcf(), ["sectors"], _subscript_dict)
            + variation_household_demand()
            + variation_exports_demand()
        )
        / (1 - share_government_expenditures_and_changes_in_inventories_next_step()),
    )


@cache.step
@to_float
def desired_gdp():
    """
    Real Name: Desired GDP
    Original Eqn: Desired GDPpc*Population/dollars to Tdollars
    Units: T$
    Limits: (None, None)
    Type: component
    Subs: None

    Desired GDP level for each scenario (user selection).
    """
    return desired_gdppc() * population() / dollars_to_tdollars()


@cache.step
@to_float
def desired_gdp_delayed_1yr():
    """
    Real Name: Desired GDP delayed 1yr
    Original Eqn: DELAY FIXED ( Desired GDP, 1, 8.6)
    Units: T$/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Desired GDP delayed 1 year.
    """
    return _delayfixed_desired_gdp_delayed_1yr()


@cache.step
@subs(["sectors"], _subscript_dict)
def real_household_demand_by_sector():
    """
    Real Name: Real Household demand by sector
    Original Eqn: Real final demand by sector EU[sectors]*(1-Government expenditure and changes in inventories shares[sectors])*(1-"share GFCF vs GFCF+HD+Exp" [sectors]-"share Exp vs GFCF+HD+Exp"[sectors])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Real Households demand after energy feedback.
    """
    return (
        real_final_demand_by_sector_eu()
        * (1 - government_expenditure_and_changes_in_inventories_shares())
        * (1 - share_gfcf_vs_gfcfhdexp() - share_exp_vs_gfcfhdexp())
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def sectoral_changes_in_inventories():
    """
    Real Name: Sectoral changes in inventories
    Original Eqn: Real final demand by sector EU[sectors]*Changes in inventories share[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Changes in inventories by sector
    """
    return real_final_demand_by_sector_eu() * changes_in_inventories_share()


@cache.step
@to_float
def desired_gdppc():
    """
    Real Name: Desired GDPpc
    Original Eqn: INTEG ( Desired variation GDPpc, GDPpc initial year)
    Units: $/person
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _integ_desired_gdppc()


@cache.step
@to_float
def diff_annual_gdp_growth_rate():
    """
    Real Name: diff annual GDP growth rate
    Original Eqn: ZIDZ( (Annual GDP growth rate EU-Desired annual GDP growth rate) , Desired annual GDP growth rate )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Difference between the annual GDP growth rate desired and the real
        obtained.
    """
    return zidz(
        (annual_gdp_growth_rate_eu() - desired_annual_gdp_growth_rate()),
        desired_annual_gdp_growth_rate(),
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def variation_historic_demand():
    """
    Real Name: variation historic demand
    Original Eqn: Historic HD[sectors](INTEGER(Time+1))-Historic HD[sectors](INTEGER(Time))
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Variation of final demand by households
    """
    return historic_hd(int(time() + 1)) - historic_hd(int(time()))


@cache.step
@to_float
def capital_share_growth():
    """
    Real Name: capital share growth
    Original Eqn: ((P capital share/Initial capital share)^(1/(Year final capial share-Year initial capital share)))-1
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Real variation rate of capital share depending on activation.
    """
    return (
        (p_capital_share() / initial_capital_share())
        ** (1 / (year_final_capial_share() - year_initial_capital_share()))
    ) - 1


@cache.step
@to_float
def variation_historic_real_exchange():
    """
    Real Name: variation historic real exchange
    Original Eqn: historic real exchange(INTEGER(Time+1))-historic real exchange(INTEGER(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of historic Real Effective exchange Rate (Eurostats)
    """
    return historic_real_exchange(int(time() + 1)) - historic_real_exchange(int(time()))


@cache.run
@subs(["sectors"], _subscript_dict)
def initial_household_demand():
    """
    Real Name: initial household demand
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B339')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']

    Initial final demand by households
    """
    return _ext_constant_initial_household_demand()


@cache.run
@to_float
def gdppc_initial_year():
    """
    Real Name: GDPpc initial year
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B328')
    Units: $/person
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_gdppc_initial_year()


@cache.step
@to_float
def cc_next_step():
    """
    Real Name: CC next step
    Original Eqn: CC total+variation CC
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return cc_total() + variation_cc()


@cache.step
@to_float
def cc_total_delayed():
    """
    Real Name: CC total delayed
    Original Eqn: DELAY FIXED ( CC total, 1, 0)
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Lagged capital compensation
    """
    return _delayfixed_cc_total_delayed()


@cache.step
@to_float
def real_exchange():
    """
    Real Name: real exchange
    Original Eqn: INTEG ( variation real exchange, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Real Effective Exchange Rate
    """
    return _integ_real_exchange()


def historic_gfcf(x):
    """
    Real Name: Historic GFCF
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '514', 'B515')
    Units: Mdollars
    Limits: (None, None)
    Type: lookup
    Subs: ['sectors']

    Historic gross fixed capital formation (WIOD-35 sectors)
    """
    return _ext_lookup_historic_gfcf(x)


@cache.step
@subs(["water"], _subscript_dict)
def historic_water_by_type_intensities_for_households():
    """
    Real Name: Historic water by type intensities for households
    Original Eqn: IF THEN ELSE( Time<2009, Historic water use by type for households[water](Time)/Household demand total, 0)
    Units: dam3/Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['water']


    """
    return if_then_else(
        time() < 2009,
        lambda: historic_water_use_by_type_for_households(time())
        / household_demand_total(),
        lambda: 0,
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def exports_demand_not_covered():
    """
    Real Name: Exports demand not covered
    Original Eqn: IF THEN ELSE(Time<2009,0,Exports demand[sectors]-Real Exports demand by sector[sectors])
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Gap between exports required and real exports (after energy-economy
        feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: 0,
        lambda: exports_demand() - real_exports_demand_by_sector(),
    )


@cache.run
@to_float
def year_final_labour_share():
    """
    Real Name: Year Final Labour share
    Original Eqn: 2050
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Year of final labour share by scenarios to use in the mean accumulative
        growth rate.
    """
    return 2050


@cache.step
@subs(["sectors"], _subscript_dict)
def household_demand_not_covered():
    """
    Real Name: Household demand not covered
    Original Eqn: IF THEN ELSE(Time<2009,0,Household demand[sectors]-Real Household demand by sector[sectors])
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Gap between households consumption required and households real
        consumption (after energy-economy feedback)
    """
    return if_then_else(
        time() < 2009,
        lambda: 0,
        lambda: household_demand() - real_household_demand_by_sector(),
    )


@cache.step
@to_float
def hh_demand_pc():
    """
    Real Name: HH demand pc
    Original Eqn: Household demand total*1e+06/Population
    Units: $/people
    Limits: (None, None)
    Type: component
    Subs: None

    Households demand per capita
    """
    return household_demand_total() * 1e06 / population()


@cache.step
@subs(["sectors"], _subscript_dict)
def exports_demand():
    """
    Real Name: Exports demand
    Original Eqn: INTEG ( variation exports demand[sectors]-Exports demand not covered[sectors], Initial exports demand[sectors])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Sectorial value of exports
    """
    return _integ_exports_demand()


@cache.run
@to_float
def p_customized_year_gdppc_evolution():
    """
    Real Name: P customized year GDPpc evolution
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'E7')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_year_gdppc_evolution()


@cache.step
@to_float
def variation_historic_gdppc():
    """
    Real Name: variation historic GDPpc
    Original Eqn: IF THEN ELSE(Time<2015, Historic GDPpc(INTEGER(Time+1))-Historic GDPpc(INTEGER(Time)), 0)
    Units: $/(person*Year)
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of historic GDPpc.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_gdppc(int(time() + 1)) - historic_gdppc(int(time())),
        lambda: 0,
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def household_demand():
    """
    Real Name: Household demand
    Original Eqn: INTEG ( variation household demand[sectors]-Household demand not covered[sectors], initial household demand[sectors])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Sectorial domestic final demand made by Households
    """
    return _integ_household_demand()


@cache.run
@to_float
def beta_3_hh():
    """
    Real Name: beta 3 hh
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'G332')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    beta coefficient for second independent variable in panel data regression
        of households consumption
    """
    return _ext_constant_beta_3_hh()


@cache.run
@to_float
def year_initial_capital_share():
    """
    Real Name: Year initial capital share
    Original Eqn: 2015
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Last year with historical data to use in the mean cummulative growth rate.
    """
    return 2015


@cache.step
@to_float
def cc_total():
    """
    Real Name: CC total
    Original Eqn: INTEG (variation CC-CC total not covered, initial CC total)
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Capital compensation
    """
    return _integ_cc_total()


@cache.step
@to_float
def labour_share_growth():
    """
    Real Name: Labour share growth
    Original Eqn: ((P labour share/Initial Labour share)^(1/(Year Final Labour share-Year Initial Labour share)))-1
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Mean cummulative growth rate of labour share.
    """
    return (
        (p_labour_share() / initial_labour_share())
        ** (1 / (year_final_labour_share() - year_initial_labour_share()))
    ) - 1


@cache.run
@to_float
def year_initial_labour_share():
    """
    Real Name: Year Initial Labour share
    Original Eqn: 2015
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Last year with historical data to use in the mean cummulative growth rate.
    """
    return 2015


@cache.step
@to_float
def variation_lc():
    """
    Real Name: variation LC
    Original Eqn: GDP EU*1e+06*labour share*(Desired annual total demand growth rate+growth labour share +Desired annual total demand growth rate*growth labour share)
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of labour compensation
    """
    return (
        gdp_eu()
        * 1e06
        * labour_share()
        * (
            desired_annual_total_demand_growth_rate()
            + growth_labour_share()
            + desired_annual_total_demand_growth_rate() * growth_labour_share()
        )
    )


@cache.step
@to_float
def desired_annual_total_demand_growth_rate():
    """
    Real Name: Desired annual total demand growth rate
    Original Eqn: Desired annual GDP growth rate
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Real variation of Final Demand. Assumed to be equal according to sample
        data from WIOD.
    """
    return desired_annual_gdp_growth_rate()


@cache.step
@to_float
def labour_share():
    """
    Real Name: labour share
    Original Eqn: INTEG ( variation labour share, 0.481186 )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Ratio 'Labour compensation/GDP'
    """
    return _integ_labour_share()


@cache.step
@to_float
def household_demand_total():
    """
    Real Name: Household demand total
    Original Eqn: SUM(Household demand[sectors!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Whole economy domestic households demand
    """
    return sum(household_demand(), dim=("sectors",))


@cache.step
@subs(["sectors"], _subscript_dict)
def variation_historic_exports_demand():
    """
    Real Name: variation historic exports demand
    Original Eqn: Historic exports demand[sectors](INTEGER(Time+1))-Historic exports demand[sectors](INTEGER(Time))
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Historic variation of exports (WIOD-35 sectors)
    """
    return historic_exports_demand(int(time() + 1)) - historic_exports_demand(
        int(time())
    )


def gdppc_annual_growth_ssp2(x):
    """
    Real Name: GDPpc annual growth SSP2
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Result comparison', '33', 'C35'))
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_gdppc_annual_growth_ssp2(x)


@cache.run
@to_float
def initial_planted_forests():
    """
    Real Name: initial planted forests
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'H26')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial "Planted Forests" (FAOSTAT category).
    """
    return _ext_constant_initial_planted_forests()


@cache.step
@to_float
def initial_available_forest_area():
    """
    Real Name: initial 'available' forest area
    Original Eqn: initial planted forests+initial other naturally regen forest
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Initial "available" forest area.
    """
    return initial_planted_forests() + initial_other_naturally_regen_forest()


@cache.run
@to_float
def initial_urban_land():
    """
    Real Name: initial urban land
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'H27')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Artificial surfaces (including urban and associated areas).
    """
    return _ext_constant_initial_urban_land()


def historic_primary_forest(x):
    """
    Real Name: Historic primary forest
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Land', '20', 'H24'))
    Units: MHa
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic primary forest evolution.
    """
    return _ext_lookup_historic_primary_forest(x)


@cache.run
@to_float
def initial_other_naturally_regen_forest():
    """
    Real Name: initial other naturally regen forest
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'H25')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial "Other naturally regenerated forests" (FAOSTAT category).
    """
    return _ext_constant_initial_other_naturally_regen_forest()


@cache.run
@to_float
def initial_primary_forest_area():
    """
    Real Name: initial primary forest area
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'H24')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial primary forests area.
    """
    return _ext_constant_initial_primary_forest_area()


@cache.step
@to_float
def hist_variation_primary_forest():
    """
    Real Name: hist variation primary forest
    Original Eqn: IF THEN ELSE(Time<2014, Historic primary forest(INTEGER(Time+1))-Historic primary forest(INTEGER(Time)), 0)
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary forest area historic variation.
    """
    return if_then_else(
        time() < 2014,
        lambda: historic_primary_forest(int(time() + 1))
        - historic_primary_forest(int(time())),
        lambda: 0,
    )


@cache.step
@to_float
def urban_land():
    """
    Real Name: Urban land
    Original Eqn: INTEG ( urban land rate, initial urban land)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land for urban uses and infraestructures. Corresponds with FAOSTAT
        category "Artificial surfaces (including urban and associated areas)".
    """
    return _integ_urban_land()


@cache.step
@to_float
def land_requirements_res_elec_compet_uses():
    """
    Real Name: Land requirements RES elec compet uses
    Original Eqn: surface hydro Mha+surface CSP Mha+surface solar PV on land Mha
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land requirements for renewable technologies to generate electricity (PV
        on land, CSP and hydro) requiring land and not easily compatible with
        double uses.
    """
    return surface_hydro_mha() + surface_csp_mha() + surface_solar_pv_on_land_mha()


@cache.step
@to_float
def historic_conv_oil_domestic_eu_extracted_ej():
    """
    Real Name: Historic conv oil domestic EU extracted EJ
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '112', 'H114')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_historic_conv_oil_domestic_eu_extracted_ej(time())


@cache.step
@to_float
def historic_unconv_nat_gas_domestic_eu_extracted_ej():
    """
    Real Name: "Historic unconv nat. gas domestic EU extracted EJ"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '112', 'H117')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej(time())


@cache.step
@to_float
def historic_unconv_oil_domestic_eu_extracted_ej():
    """
    Real Name: Historic unconv oil domestic EU extracted EJ
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '112', 'H115')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_historic_unconv_oil_domestic_eu_extracted_ej(time())


@cache.step
@to_float
def historic_uranium_domestic_eu_extracted_t():
    """
    Real Name: Historic uranium domestic EU extracted t
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '112', 'H119')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic uranium domestic EU extracted.
    """
    return _ext_data_historic_uranium_domestic_eu_extracted_t(time())


@cache.step
@to_float
def pec_uranium_eu_ej():
    """
    Real Name: PEC uranium EU EJ
    Original Eqn: extraction uranium EJ EU+extraction uranium RoW
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return extraction_uranium_ej_eu() + extraction_uranium_row()


@cache.step
@to_float
def pec_uranium_eu_kt():
    """
    Real Name: PEC uranium EU kt
    Original Eqn: PEC uranium EU EJ*kt uranium per EJ
    Units: Kt
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pec_uranium_eu_ej() * kt_uranium_per_ej()


@cache.step
@to_float
def historic_conv_nat_gas_domestic_eu_extracted_ej():
    """
    Real Name: "Historic conv nat. gas domestic EU extracted EJ"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '112', 'H116')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej(time())


@cache.step
@to_float
def imports_eu_conv_oil_from_row_ej():
    """
    Real Name: imports EU conv oil from RoW EJ
    Original Eqn: imports EU total oil from RoW EJ*share conv vs total oil extraction World
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        imports_eu_total_oil_from_row_ej() * share_conv_vs_total_oil_extraction_world()
    )


@cache.step
@to_float
def pec_conv_oil():
    """
    Real Name: PEC conv oil
    Original Eqn: real extraction conv oil EJ+imports EU conv oil from RoW EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_extraction_conv_oil_ej() + imports_eu_conv_oil_from_row_ej()


@cache.step
@to_float
def co2_emissions_conv_gas_without_gtl():
    """
    Real Name: CO2 emissions conv gas without GTL
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1,real consumption UE conv gas emissions relevant EJ*gCO2 per MJ conv gas ,(1-Adapt CO2 emissions unconv gas)*real consumption UE conv gas emissions relevant EJ*gCO2 per MJ conv gas +Adapt CO2 emissions unconv gas*real consumption UE conv gas emissions relevant EJ*gCO2 per MJ unconv gas )*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions from conventional gas (withouth GTL) when the gas extraction
        is disaggregated in conventional and unconventional resource, and CO2
        emissions from total gas when the extraction is aggregated.
    """
    return (
        if_then_else(
            separate_conv_and_unconv_gas() == 1,
            lambda: real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gco2_per_mj_conv_gas(),
            lambda: (1 - adapt_co2_emissions_unconv_gas())
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gco2_per_mj_conv_gas()
            + adapt_co2_emissions_unconv_gas()
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gco2_per_mj_unconv_gas(),
        )
        * mj_per_ej()
        / g_per_gt()
    )


@cache.step
@to_float
def co2_emissions_conv_oil():
    """
    Real Name: CO2 emissions conv oil
    Original Eqn: real consumption UE conv oil emissions relevant EJ*gCO2 per MJ conv oil*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions from conventional oil.
    """
    return (
        real_consumption_ue_conv_oil_emissions_relevant_ej()
        * gco2_per_mj_conv_oil()
        * mj_per_ej()
        / g_per_gt()
    )


@cache.step
@to_float
def imports_eu_unconv_oil_from_row_ej():
    """
    Real Name: imports EU unconv oil from RoW EJ
    Original Eqn: imports EU total oil from RoW EJ*(1-share conv vs total oil extraction World)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return imports_eu_total_oil_from_row_ej() * (
        1 - share_conv_vs_total_oil_extraction_world()
    )


@cache.step
@to_float
def co2_emissions_coal_without_ctl():
    """
    Real Name: CO2 emissions coal without CTL
    Original Eqn: consumption UE coal emissions relevant EJ*gCO2 per MJ coal*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Emissions from coal withoug accounting for CTL-related emissions.
    """
    return (
        consumption_ue_coal_emissions_relevant_ej()
        * gco2_per_mj_coal()
        * mj_per_ej()
        / g_per_gt()
    )


@cache.step
@to_float
def real_consumption_unconv_oil_emissions_relevant_ej():
    """
    Real Name: real consumption unconv oil emissions relevant EJ
    Original Eqn: MAX(0, PEC unconv oil-("Non-energy use demand by final fuel EJ"[liquids])*(1-share conv vs total oil extraction EU))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant unconventional gas, i.e. excepting the
        resource used to produce GTL and for non-energy uses. We assume
        conventional and unconventional resource are used to produce GTL and for
        non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_unconv_oil()
        - (
            nonenergy_use_demand_by_final_fuel_ej()
            .loc["liquids"]
            .reset_coords(drop=True)
        )
        * (1 - share_conv_vs_total_oil_extraction_eu()),
    )


@cache.step
@to_float
def ch4_emissions_ctl():
    """
    Real Name: CH4 emissions CTL
    Original Eqn: extraction coal for CTL EJ*gCH4 per MJ CTL*MJ per EJ/g per Mt
    Units: MtCH4
    Limits: (None, None)
    Type: component
    Subs: None

    CH4 emissions CTL.
    """
    return extraction_coal_for_ctl_ej() * gch4_per_mj_ctl() * mj_per_ej() / g_per_mt()


@cache.step
@to_float
def co2_emissions_ctl():
    """
    Real Name: CO2 emissions CTL
    Original Eqn: gCO2 per MJ CTL*extraction coal for CTL EJ*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions associated to CTL production.
    """
    return gco2_per_mj_ctl() * extraction_coal_for_ctl_ej() * mj_per_ej() / g_per_gt()


@cache.step
@to_float
def real_consumption_unconv_gas_emissions_relevant_ej():
    """
    Real Name: real consumption unconv gas emissions relevant EJ
    Original Eqn: MAX(0, PEC unconv gas-("Non-energy use demand by final fuel EJ"[gases])*(1-share conv vs total gas extraction EU))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant unconventional gas, i.e. excepting the
        resource used to produce GTL and for non-energy uses. We assume
        conventional and unconventional resource are used to produce GTL and for
        non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_unconv_gas()
        - (nonenergy_use_demand_by_final_fuel_ej().loc["gases"].reset_coords(drop=True))
        * (1 - share_conv_vs_total_gas_extraction_eu()),
    )


@cache.step
@to_float
def consumption_ue_coal_emissions_relevant_ej():
    """
    Real Name: consumption UE coal emissions relevant EJ
    Original Eqn: MAX(0, PEC coal-"Non-energy use demand by final fuel EJ"[solids])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Consumption of emission-relevant coal, i.e. excepting the resource used
        for non-energy uses.
    """
    return np.maximum(
        0,
        pec_coal()
        - nonenergy_use_demand_by_final_fuel_ej().loc["solids"].reset_coords(drop=True),
    )


@cache.step
@to_float
def pec_conv_gas():
    """
    Real Name: PEC conv gas
    Original Eqn: real extraction conv gas EJ+imports EU conv gas from RoW EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_extraction_conv_gas_ej() + imports_eu_conv_gas_from_row_ej()


@cache.step
@to_float
def share_imports_eu_uranium_from_row_vs_extraction_world():
    """
    Real Name: share imports EU uranium from RoW vs extraction World
    Original Eqn: ZIDZ(imports EU uranium from RoW EJ, extraction uranium EJ World )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of EU uranium imports vs total uranium extraction.
    """
    return zidz(imports_eu_uranium_from_row_ej(), extraction_uranium_ej_world())


@cache.step
@to_float
def co2_emissions_unconv_oil():
    """
    Real Name: CO2 emissions unconv oil
    Original Eqn: (real consumption unconv oil emissions relevant EJ*(gCO2 per MJ unconv oil+(gCO2 per MJ shale oil-gCO2 per MJ unconv oil )*Adapt emissions shale oil))*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions from unconventional oil.
    """
    return (
        (
            real_consumption_unconv_oil_emissions_relevant_ej()
            * (
                gco2_per_mj_unconv_oil()
                + (gco2_per_mj_shale_oil() - gco2_per_mj_unconv_oil())
                * adapt_emissions_shale_oil()
            )
        )
        * mj_per_ej()
        / g_per_gt()
    )


@cache.step
@to_float
def real_consumption_ue_conv_oil_emissions_relevant_ej():
    """
    Real Name: real consumption UE conv oil emissions relevant EJ
    Original Eqn: MAX(0, PEC conv oil-("Non-energy use demand by final fuel EJ"[liquids])*share conv vs total oil extraction EU )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant conventional oil. We assume conventional
        and unconventional resource are used to produce GTL and for non-energy
        uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_conv_oil()
        - (
            nonenergy_use_demand_by_final_fuel_ej()
            .loc["liquids"]
            .reset_coords(drop=True)
        )
        * share_conv_vs_total_oil_extraction_eu(),
    )


@cache.step
@to_float
def pec_unconv_gas():
    """
    Real Name: PEC unconv gas
    Original Eqn: real extraction unconv gas EJ+imports EU unconv gas from RoW EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_extraction_unconv_gas_ej() + imports_eu_unconv_gas_from_row_ej()


@cache.step
@to_float
def pec_unconv_oil():
    """
    Real Name: PEC unconv oil
    Original Eqn: real extraction unconv oil EJ+imports EU unconv oil from RoW EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_extraction_unconv_oil_ej() + imports_eu_unconv_oil_from_row_ej()


@cache.step
@to_float
def ch4_emissions_oil():
    """
    Real Name: CH4 emissions oil
    Original Eqn: PEC total oil*gCH4 per MJ oil*MJ per EJ/g per Mt
    Units: MtCH4
    Limits: (None, None)
    Type: component
    Subs: None

    CH4 emissions oil.
    """
    return pec_total_oil() * gch4_per_mj_oil() * mj_per_ej() / g_per_mt()


@cache.step
@to_float
def real_consumption_ue_conv_gas_emissions_relevant_ej():
    """
    Real Name: real consumption UE conv gas emissions relevant EJ
    Original Eqn: MAX(0, PEC conv gas-("Non-energy use demand by final fuel EJ"[gases])*share conv vs total gas extraction EU)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant conventional gas, i.e. excepting the
        resource used to produce GTL and for non-energy uses. We assume
        conventional and unconventional resource are used to produce GTL and for
        non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        pec_conv_gas()
        - (nonenergy_use_demand_by_final_fuel_ej().loc["gases"].reset_coords(drop=True))
        * share_conv_vs_total_gas_extraction_eu(),
    )


@cache.step
@to_float
def ch4_emissions_conv_gas_without_gtl():
    """
    Real Name: CH4 emissions conv gas without GTL
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1, real consumption UE conv gas emissions relevant EJ*gCH4 per MJ conv gas, (1-Adapt CO2 emissions unconv gas)*real consumption UE conv gas emissions relevant EJ*gCH4 per MJ conv gas +Adapt CO2 emissions unconv gas*real consumption UE conv gas emissions relevant EJ*gCH4 per MJ unconv gas )*MJ per EJ/g per Mt
    Units: MtCH4
    Limits: (None, None)
    Type: component
    Subs: None

    CH4 emissions conventional gas.
    """
    return (
        if_then_else(
            separate_conv_and_unconv_gas() == 1,
            lambda: real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gch4_per_mj_conv_gas(),
            lambda: (1 - adapt_co2_emissions_unconv_gas())
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gch4_per_mj_conv_gas()
            + adapt_co2_emissions_unconv_gas()
            * real_consumption_ue_conv_gas_emissions_relevant_ej()
            * gch4_per_mj_unconv_gas(),
        )
        * mj_per_ej()
        / g_per_mt()
    )


@cache.step
@to_float
def ch4_emissions_coal_without_ctl():
    """
    Real Name: CH4 emissions coal without CTL
    Original Eqn: consumption UE coal emissions relevant EJ*gCH4 per MJ coal*MJ per EJ/g per Mt
    Units: MtCH4
    Limits: (None, None)
    Type: component
    Subs: None

    CH4 emissions coal.
    """
    return (
        consumption_ue_coal_emissions_relevant_ej()
        * gch4_per_mj_coal()
        * mj_per_ej()
        / g_per_mt()
    )


@cache.step
@to_float
def share_imports_eu_tot_oil_from_row_vs_extraction_world():
    """
    Real Name: share imports EU tot oil from RoW vs extraction World
    Original Eqn: ZIDZ(imports EU total oil from RoW EJ, Extraction oil EJ World )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of EU total oil imports vs global oil extraction.
    """
    return zidz(imports_eu_total_oil_from_row_ej(), extraction_oil_ej_world())


@cache.step
@to_float
def power_density_solar_pv_in_urban_twemha():
    """
    Real Name: "power density solar PV in urban TWe/Mha"
    Original Eqn: av solar I*f1 solar PV*f2 PF solar PV*share available roof*share available roof for rooftop PV*"TWh/Mha per We/m2"
    Units: TWe/MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Power density of solar PV in urban areas.
    """
    return (
        av_solar_i()
        * f1_solar_pv()
        * f2_pf_solar_pv()
        * share_available_roof()
        * share_available_roof_for_rooftop_pv()
        * twhmha_per_wem2()
    )


@cache.step
@to_float
def power_density_solar_pv_on_land_twemha():
    """
    Real Name: "power density solar PV on land TWe/Mha"
    Original Eqn: av solar I*f1 solar PV*f2 PF solar PV*f3 solar PV on land*"TWh/Mha per We/m2"
    Units: TWe/MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Power density of solar PV power plants on land.
    """
    return (
        av_solar_i()
        * f1_solar_pv()
        * f2_pf_solar_pv()
        * f3_solar_pv_on_land()
        * twhmha_per_wem2()
    )


@cache.step
@to_float
def power_density_solar_thermal_in_urban_twemha():
    """
    Real Name: "power density solar thermal in urban TWe/Mha"
    Original Eqn: av solar I*f1 solar panels for heat*Losses solar for heat*share available roof*share available roof for solar thermal*"TWh/Mha per We/m2"
    Units: TWe/MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Power density of solar thermal in urban areas.
    """
    return (
        av_solar_i()
        * f1_solar_panels_for_heat()
        * losses_solar_for_heat()
        * share_available_roof()
        * share_available_roof_for_solar_thermal()
        * twhmha_per_wem2()
    )


@cache.step
@to_float
def share_imports_eu_nat_gas_from_row_vs_extraction_world():
    """
    Real Name: "share imports EU nat. gas from RoW vs extraction World"
    Original Eqn: ZIDZ("imports EU nat. gas from RoW EJ", "extraction nat. gas EJ World" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of EU natural gas imports vs global natural gas extraction.
    """
    return zidz(imports_eu_nat_gas_from_row_ej(), extraction_nat_gas_ej_world())


@cache.run
@to_float
def av_past_eu_domestic_uranium_extraction():
    """
    Real Name: av past EU domestic uranium extraction
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'AE119')
    Units: tonnes
    Limits: (None, None)
    Type: constant
    Subs: None

    Average 2010-2015 past uranium extraction in the UE.
    """
    return _ext_constant_av_past_eu_domestic_uranium_extraction()


@cache.run
@to_float
def choose_gwp_time_frame():
    """
    Real Name: Choose GWP time frame
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario' , 'J116' )
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_choose_gwp_time_frame()


@cache.run
@subs(["GHGs"], _subscript_dict)
def gwp_20_year():
    """
    Real Name: GWP 20 year
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Climate' , 'B5' )
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Climate' , 'B17' )
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['GHGs']


    """
    return _ext_constant_gwp_20_year()


@cache.run
@subs(["GHGs"], _subscript_dict)
def gwp_100_year():
    """
    Real Name: GWP 100 year
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Climate' , 'C5' )
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Climate' , 'C17' )
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['GHGs']


    """
    return _ext_constant_gwp_100_year()


@cache.step
@to_float
def total_co2e():
    """
    Real Name: Total CO2e
    Original Eqn: Total CO2 emissions GTCO2+ CH4 anthro emissions*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[CH4] , GWP 100 year[CH4])/Mt per Gt + N2O Anthro Emissions*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[N2O] , GWP 100 year[N2O])/Mt per Gt + PFC emissions*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[PFCs] , GWP 100 year[PFCs])/"1 to G" + SF6 emissions*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[SF6] , GWP 100 year[SF6])/"1 to G" + HFC emissions[HFC134a]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC134a] , GWP 100 year[HFC134a])/"1 to G" + HFC emissions[HFC23]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC23] , GWP 100 year[HFC23])/"1 to G" + HFC emissions[HFC32]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC32] , GWP 100 year[HFC32])/"1 to G" + HFC emissions[HFC125]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC125] , GWP 100 year[HFC125])/"1 to G" + HFC emissions[HFC143a]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC143a] , GWP 100 year[HFC143a])/"1 to G" + HFC emissions[HFC152a]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC152a] , GWP 100 year[HFC152a])/"1 to G" + HFC emissions[HFC227ea]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC227ea] , GWP 100 year[HFC227ea])/"1 to G" + HFC emissions[HFC245ca]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC245ca] , GWP 100 year[HFC245ca])/"1 to G" + HFC emissions[HFC4310mee]*IF THEN ELSE(Choose GWP time frame=1, GWP 20 year[HFC4310mee] , GWP 100 year[HFC4310mee])/"1 to G"
    Units: GTCO2e
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        total_co2_emissions_gtco2()
        + ch4_anthro_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["CH4"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["CH4"].reset_coords(drop=True),
        )
        / mt_per_gt()
        + n2o_anthro_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["N2O"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["N2O"].reset_coords(drop=True),
        )
        / mt_per_gt()
        + pfc_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["PFCs"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["PFCs"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + sf6_emissions()
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["SF6"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["SF6"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC134a"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC134a"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC134a"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC23"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC23"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC23"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC32"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC32"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC32"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC125"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC125"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC125"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC143a"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC143a"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC143a"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC152a"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC152a"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC152a"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC227ea"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC227ea"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC227ea"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC245ca"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC245ca"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC245ca"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
        + hfc_emissions().loc["HFC4310mee"].reset_coords(drop=True)
        * if_then_else(
            choose_gwp_time_frame() == 1,
            lambda: gwp_20_year().loc["HFC4310mee"].reset_coords(drop=True),
            lambda: gwp_100_year().loc["HFC4310mee"].reset_coords(drop=True),
        )
        / nvs_1_to_g()
    )


@cache.step
@to_float
def total_co2e_ce():
    """
    Real Name: Total CO2e Ce
    Original Eqn: Total CO2e*C per CO2
    Units: GTCe/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return total_co2e() * c_per_co2()


@cache.run
@to_float
def nvs_1_to_g():
    """
    Real Name: "1 to G"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G19')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_nvs_1_to_g()


@cache.step
@to_float
def annual_gdp_growth_rate_world():
    """
    Real Name: Annual GDP growth rate World
    Original Eqn: Annual GDP growth rate
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual GDP growth rate. Source: global model.
    """
    return annual_gdp_growth_rate(time())


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def real_final_energy_by_sector_and_fuel_row():
    """
    Real Name: Real final energy by sector and fuel RoW
    Original Eqn: Real final energy by sector and fuel World[final sources,sectors]-Real final energy by sector and fuel EU[final sources,sectors]
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Real final energy consumption made by Rest of the World.
    """
    return (
        real_final_energy_by_sector_and_fuel_world()
        - real_final_energy_by_sector_and_fuel_eu()
    )


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def real_final_energy_by_sector_and_fuel_world():
    """
    Real Name: Real final energy by sector and fuel World
    Original Eqn: Real final energy by sector and fuel[final sources,sectors]
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Real final energy consumed by sector and fuel. Source: global model.
    """
    return real_final_energy_by_sector_and_fuel(time())


@cache.step
@to_float
def real_demand_world():
    """
    Real Name: Real demand World
    Original Eqn: SUM(Real demand by sector World[sectors!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Total World final demand (MEDEAS-World).
    """
    return sum(real_demand_by_sector_world(), dim=("sectors",))


@cache.step
@to_float
def pec_nat_gas():
    """
    Real Name: "PEC nat. gas"
    Original Eqn: PES nat gas EU+"imports EU nat. gas from RoW EJ"
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_nat_gas_eu() + imports_eu_nat_gas_from_row_ej()


@cache.step
@to_float
def pes_liquids_ej():
    """
    Real Name: PES Liquids EJ
    Original Eqn: PEC total oil+Other liquids supply EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary supply of liquids.
    """
    return pec_total_oil() + other_liquids_supply_ej()


@cache.step
@to_float
def pes_gases():
    """
    Real Name: PES gases
    Original Eqn: "PEC nat. gas"+PES biogas for TFC
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply gas.
    """
    return pec_nat_gas() + pes_biogas_for_tfc()


@cache.step
@to_float
def ped_eu_nat_gas_from_row():
    """
    Real Name: "PED EU nat. gas from RoW"
    Original Eqn: MAX(0, "PED nat. gas EJ"-PES nat gas EU)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(0, ped_nat_gas_ej() - pes_nat_gas_eu())


@cache.step
@to_float
def pec_total_oil():
    """
    Real Name: PEC total oil
    Original Eqn: PES total oil EJ EU+imports EU total oil from RoW EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej()


@cache.step
@to_float
def historic_share_net_imports_coal_eu_until_2016():
    """
    Real Name: Historic share net imports coal EU until 2016
    Original Eqn: IF THEN ELSE(Time<2016, ZIDZ(Historic net imports coal EU, extraction coal EJ World ) , aux18)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2016,
        lambda: zidz(historic_net_imports_coal_eu(), extraction_coal_ej_world()),
        lambda: aux18(),
    )


@cache.step
@to_float
def historic_coal_domestic_eu_extracted_ej_2():
    """
    Real Name: Historic coal domestic EU extracted EJ 2
    Original Eqn: Historic coal domestic EU extracted EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return historic_coal_domestic_eu_extracted_ej()


@cache.step
@to_float
def pec_coal():
    """
    Real Name: PEC coal
    Original Eqn: extraction coal EJ EU+imports EU coal from RoW EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return extraction_coal_ej_eu() + imports_eu_coal_from_row_ej()


@cache.step
@to_float
def aux18():
    """
    Real Name: aux18
    Original Eqn: DELAY FIXED ( Historic share net imports coal EU until 2016, TIME STEP , 0.04)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux18()


@cache.step
@to_float
def share_imports_eu_coal_from_row_vs_extraction_world():
    """
    Real Name: share imports EU coal from RoW vs extraction World
    Original Eqn: ZIDZ(imports EU coal from RoW EJ, extraction coal EJ World )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of EU coal imports vs global coal extraction.
    """
    return zidz(imports_eu_coal_from_row_ej(), extraction_coal_ej_world())


@cache.step
@to_float
def extraction_coal_ej_eu():
    """
    Real Name: extraction coal EJ EU
    Original Eqn: IF THEN ELSE(RURR coal<0,0, IF THEN ELSE(Time<2016, PED domestic EU coal EJ, IF THEN ELSE("unlimited NRE?"=1, PED domestic EU coal EJ, IF THEN ELSE("unlimited coal?"=1, PED domestic EU coal EJ,MIN(PED domestic EU coal EJ, max extraction coal EJ)))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of coal.
    """
    return if_then_else(
        rurr_coal() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2016,
            lambda: ped_domestic_eu_coal_ej(),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: ped_domestic_eu_coal_ej(),
                lambda: if_then_else(
                    unlimited_coal() == 1,
                    lambda: ped_domestic_eu_coal_ej(),
                    lambda: np.minimum(
                        ped_domestic_eu_coal_ej(), max_extraction_coal_ej()
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def extraction_coal_ej_row():
    """
    Real Name: extraction coal EJ RoW
    Original Eqn: extraction coal EJ World-extraction coal EJ EU
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return extraction_coal_ej_world() - extraction_coal_ej_eu()


@cache.step
@subs(["materials"], _subscript_dict)
def current_mineral_resources_mt_world():
    """
    Real Name: current mineral resources Mt World
    Original Eqn: current mineral resources Mt[materials]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Current global mineral resources. Source: global model.
    """
    return current_mineral_resources_mt()


@cache.step
@to_float
def historic_coal_domestic_eu_extracted_ej():
    """
    Real Name: Historic coal domestic EU extracted EJ
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '112', 'H118')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_historic_coal_domestic_eu_extracted_ej(time())


@cache.step
@subs(["materials"], _subscript_dict)
def share_cum_materials_to_extract_alt_techn_eu_vs_resources_world():
    """
    Real Name: share cum materials to extract alt techn EU vs resources World
    Original Eqn: ZIDZ( cum materials to extract for alt techn from 2015 EU[materials] , current mineral resources Mt World[materials] )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual demand of materials for alternative technologies vs. current EU
        extraction of each material.
    """
    return zidz(
        cum_materials_to_extract_for_alt_techn_from_2015_eu(),
        current_mineral_resources_mt_world(),
    )


@cache.step
@subs(["materials"], _subscript_dict)
def current_mineral_reserves_mt_world():
    """
    Real Name: current mineral reserves Mt World
    Original Eqn: current mineral reserves Mt[materials]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Current global mineral reserves. Source: global model.
    """
    return current_mineral_reserves_mt()


@cache.step
@subs(["materials"], _subscript_dict)
def share_cum_materials_to_extract_alt_techn_eu_vs_reserves_world():
    """
    Real Name: share cum materials to extract alt techn EU vs reserves World
    Original Eqn: ZIDZ( cum materials to extract for alt techn from 2015 EU[materials] , current mineral reserves Mt World[materials] )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual demand of materials for alternative technologies vs. current EU
        extraction of each material.
    """
    return zidz(
        cum_materials_to_extract_for_alt_techn_from_2015_eu(),
        current_mineral_reserves_mt_world(),
    )


@cache.run
@subs(["materials"], _subscript_dict)
def current_mineral_reserves_mt():
    """
    Real Name: current mineral reserves Mt
    Original Eqn:
      GET DIRECT CONSTANTS('?../pymedeas_w/inputs_w.xlsx', 'Materials', 'AV5')
        .
        .
        .
      GET DIRECT CONSTANTS('?../pymedeas_w/inputs_w.xlsx', 'Materials', 'AV62')
    Units: Mt
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Current mineral reserves.
    """
    return _ext_constant_current_mineral_reserves_mt()


@cache.run
@subs(["materials"], _subscript_dict)
def current_mineral_resources_mt():
    """
    Real Name: current mineral resources Mt
    Original Eqn:
      GET DIRECT CONSTANTS('?../pymedeas_w/inputs_w.xlsx', 'Materials', 'AY5')
        .
        .
        .
      GET DIRECT CONSTANTS('?../pymedeas_w/inputs_w.xlsx', 'Materials', 'AY62')
    Units: Mt
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Current mineral resources.
    """
    return _ext_constant_current_mineral_resources_mt()


@cache.step
@subs(["materials"], _subscript_dict)
def share_annual_demand_alt_techn_vs_current_eu_extraction():
    """
    Real Name: share annual demand alt techn vs current EU extraction
    Original Eqn: ZIDZ( "Total materials to extract alt techn Mt/yr"[materials] , "current annual extraction materials Mt/yr"[materials] )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual demand of materials for alternative technologies vs. current EU
        extraction of each material.
    """
    return zidz(
        total_materials_to_extract_alt_techn_mtyr(),
        current_annual_extraction_materials_mtyr(),
    )


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_to_extract_alt_techn_mtyr():
    """
    Real Name: "Total materials to extract alt techn Mt/yr"
    Original Eqn: Total materials to extract for EV batteries Mt[materials]+Total materials to extract for RES elec Mt[materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total materials to extract annually in UE for RES elec and EV batteries.
    """
    return (
        total_materials_to_extract_for_ev_batteries_mt()
        + total_materials_to_extract_for_res_elec_mt()
    )


@cache.run
@subs(["materials"], _subscript_dict)
def current_annual_extraction_materials_mtyr():
    """
    Real Name: "current annual extraction materials Mt/yr"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'BY5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'BY62')
    Units: Mt/Year
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Current annual extraction per material.
    """
    return _ext_constant_current_annual_extraction_materials_mtyr()


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def energy_embedded_in_eu_exports_by_sector_and_fuel():
    """
    Real Name: Energy embedded in EU exports by sector and fuel
    Original Eqn: Final energy intensity by sector and fuel EU[final sources,sectors]*Total domestic output required for exports by sector[sectors]/M per T
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Final energy embedded in EU28 exports.Energy required to produce the
        output necessary to satisfy Rest of the World demand of EU28 products
    """
    return (
        final_energy_intensity_by_sector_and_fuel_eu()
        * total_domestic_output_required_for_exports_by_sector()
        / m_per_t()
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def total_energy_embedded_in_eu28_imports():
    """
    Real Name: Total energy embedded in EU28 imports
    Original Eqn: SUM(Energy embedded in EU imports by sector and fuel[final sources,sectors!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Whole economy (Rest of the World) energy requirements to satisfy EU28
        imports.
    """
    return sum(energy_embedded_in_eu_imports_by_sector_and_fuel(), dim=("sectors",))


@cache.step
@to_float
def coverage_energy_rate():
    """
    Real Name: Coverage energy rate
    Original Eqn: Total final energy footprint/Real TFEC-1
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    EU28 energy consumption covering total energy carriers of EU28 economy.
    """
    return total_final_energy_footprint() / real_tfec() - 1


@cache.step
@subs(["final sources"], _subscript_dict)
def total_energy_embedded_in_eu28_exports():
    """
    Real Name: Total energy embedded in EU28 exports
    Original Eqn: SUM(Energy embedded in EU exports by sector and fuel[final sources,sectors!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Whole economy energy requirements to export.
    """
    return sum(energy_embedded_in_eu_exports_by_sector_and_fuel(), dim=("sectors",))


@cache.step
@to_float
def total_final_energy_footprint():
    """
    Real Name: Total final energy footprint
    Original Eqn: SUM(Final energy footprint by fuel[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Whole economy final energy consumption to satisfy EU28 domestic final
        demand
    """
    return sum(final_energy_footprint_by_fuel(), dim=("final sources",))


@cache.step
@to_float
def max_fe_solar_thermal_urban_twth():
    """
    Real Name: max FE solar thermal urban TWth
    Original Eqn: "power density solar thermal in urban TWe/Mha"*Urban land
    Units: TWth
    Limits: (None, None)
    Type: component
    Subs: None

    Potential of solar thermal in urban areas (final energy).
    """
    return power_density_solar_thermal_in_urban_twemha() * urban_land()


@cache.run
@to_float
def share_available_roof_for_solar_thermal():
    """
    Real Name: share available roof for solar thermal
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G30')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of available roof in urban land for rooftop PV.
    """
    return _ext_constant_share_available_roof_for_solar_thermal()


@cache.step
@subs(["RES heat"], _subscript_dict)
def efficiency_res_heat():
    """
    Real Name: Efficiency RES heat
    Original Eqn:
      f1 solar panels for heat*Losses solar for heat
      Efficiency geothermal for heat
      Efficiency conversion BioE plants to heat
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Efficiency of RES technologies for heat.
    """
    return xrmerge(
        [
            rearrange(
                f1_solar_panels_for_heat() * losses_solar_for_heat(),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                efficiency_geothermal_for_heat(),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                efficiency_conversion_bioe_plants_to_heat(),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def max_pe_res_for_heat():
    """
    Real Name: Max PE RES for heat
    Original Eqn:
      max FE solar thermal urban TWth/Efficiency RES heat[solar heat]
      Geot PE potential for heat EJ
      available max PE solid bioE for heat EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Maximum level of primary energy for producing heat from renewables by
        technology.
    """
    return xrmerge(
        [
            rearrange(
                max_fe_solar_thermal_urban_twth()
                / efficiency_res_heat().loc["solar heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                geot_pe_potential_for_heat_ej(),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                available_max_pe_solid_bioe_for_heat_ej(),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def max_fe_res_for_heat():
    """
    Real Name: Max FE RES for heat
    Original Eqn:
      max FE solar thermal urban TWth*EJ per TWh/TWe per TWh
      Max PE RES for heat[geot heat]*Efficiency RES heat[geot heat]
      Max PE RES for heat[solid bioE heat]*Efficiency RES heat[solid bioE heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Maximum level of final energy for producing heat from renewables by
        technology. For technologies solar heat and geot heat this variable
        corresponds with the maximum potential, but not for solids bioenergy due
        to the competing use for heat and electricity.
    """
    return xrmerge(
        [
            rearrange(
                max_fe_solar_thermal_urban_twth() * ej_per_twh() / twe_per_twh(),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                max_pe_res_for_heat().loc["geot heat"].reset_coords(drop=True)
                * efficiency_res_heat().loc["geot heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                max_pe_res_for_heat().loc["solid bioE heat"].reset_coords(drop=True)
                * efficiency_res_heat().loc["solid bioE heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def final_energy_intensity_by_sector_and_fuel_row():
    """
    Real Name: Final energy intensity by sector and fuel RoW
    Original Eqn: Real final energy by sector and fuel RoW[final sources,sectors]/Real total output by sector RoW[sectors]*1e+06
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Final energy intensity of Rest of the World sectors. (Energy consumed by
        RoW/Value of output in RoW).
    """
    return (
        real_final_energy_by_sector_and_fuel_row()
        / real_total_output_by_sector_row()
        * 1e06
    )


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def energy_embedded_in_eu_imports_by_sector_and_fuel():
    """
    Real Name: Energy embedded in EU imports by sector and fuel
    Original Eqn: Final energy intensity by sector and fuel RoW[final sources,sectors]*RoW output required for EU28 imports by sector[sectors]/M per T
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Energy embedded in EU28 final products imports. Energy required to
        produced to output necessary to satisfy EU28 imports.
    """
    return (
        final_energy_intensity_by_sector_and_fuel_row()
        * row_output_required_for_eu28_imports_by_sector()
        / m_per_t()
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2009():
    """
    Real Name: Leontief Matrix EU Imports 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'RW203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2009()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2001():
    """
    Real Name: Leontief Matrix EU Imports 2001
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'HC203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2001()


@cache.step
@subs(["sectors"], _subscript_dict)
def total_domestic_output_required_for_exports_by_sector():
    """
    Real Name: Total domestic output required for exports by sector
    Original Eqn: Domestic output required for exports by sector[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Value of output (production) required to satisfy Rest of the World demand
        of EU28 producs (exports) by sector.
    """
    return domestic_output_required_for_exports_by_sector()


@cache.step
@subs(["sectors"], _subscript_dict)
def row_output_required_for_eu28_imports_by_sector():
    """
    Real Name: RoW output required for EU28 imports by sector
    Original Eqn: Leontief Matrix EU Imports [sectors,Agriculture Hunting Forestry and Fishing]*Real final demand by sector EU[Agriculture Hunting Forestry and Fishing ]+ Leontief Matrix EU Imports [sectors, Mining and Quarrying]*Real final demand by sector EU[Mining and Quarrying]+ Leontief Matrix EU Imports [ sectors , Food Beverages and Tobacco]*Real final demand by sector EU[Food Beverages and Tobacco]+Leontief Matrix EU Imports [sectors, Textiles and Textile Products ]*Real final demand by sector EU[Textiles and Textile Products]+ Leontief Matrix EU Imports[sectors, Leather Leather and Footwear]*Real final demand by sector EU [Leather Leather and Footwear]+ Leontief Matrix EU Imports [sectors, Wood and Products of Woood and Cork]*Real final demand by sector EU [Wood and Products of Woood and Cork]+ Leontief Matrix EU Imports [sectors, Pulp Paper Printing and Publishing]*Real final demand by sector EU [Pulp Paper Printing and Publishing]+ Leontief Matrix EU Imports [sectors, Coke Refined Petroleum and Nuclear Fuel]*Real final demand by sector EU [Coke Refined Petroleum and Nuclear Fuel]+ Leontief Matrix EU Imports [sectors, Chemicals and Chemical products]*Real final demand by sector EU [Chemicals and Chemical products]+ Leontief Matrix EU Imports [sectors, Rubber and Plastics]*Real final demand by sector EU[ Rubber and Plastics ] + Leontief Matrix EU Imports [sectors, Other Non Metalic Mineral]*Real final demand by sector EU[Other Non Metalic Mineral]+ Leontief Matrix EU Imports [sectors, Basic Metals and Fabricated Metal]*Real final demand by sector EU[Basic Metals and Fabricated Metal]+ Leontief Matrix EU Imports [sectors, Machinery Nec]*Real final demand by sector EU[Machinery Nec]+ Leontief Matrix EU Imports[sectors, Electrical and Optical Equipment ]*Real final demand by sector EU[Electrical and Optical Equipment]+ Leontief Matrix EU Imports[sectors, Transport Equipment]*Real final demand by sector EU [Transport Equipment]+ Leontief Matrix EU Imports [sectors, Manufacturing Nec Recycling]*Real final demand by sector EU[Manufacturing Nec Recycling ] + Leontief Matrix EU Imports [sectors, Electricity Gas and Water Supply]*Real final demand by sector EU[Electricity Gas and Water Supply ] + Leontief Matrix EU Imports [sectors, Construction]*Real final demand by sector EU[Construction]+ Leontief Matrix EU Imports [sectors, Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel ]*Real final demand by sector EU[Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel]+ Leontief Matrix EU Imports [sectors, Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles]*Real final demand by sector EU[Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles ]+ Leontief Matrix EU Imports [sectors, Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]*Real final demand by sector EU [Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]+ Leontief Matrix EU Imports[sectors, Hotels and Restaurants ]*Real final demand by sector EU[Hotels and Restaurants]+ Leontief Matrix EU Imports[sectors, Inland Transport]*Real final demand by sector EU[ Inland Transport]+ Leontief Matrix EU Imports [sectors, Water Transport]*Real final demand by sector EU[Water Transport]+ Leontief Matrix EU Imports [sectors, Air Transport]*Real final demand by sector EU[Air Transport]+ Leontief Matrix EU Imports[sectors, Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies ]*Real final demand by sector EU[Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies]+ Leontief Matrix EU Imports [sectors,Post and Telecommunications]*Real final demand by sector EU[Post and Telecommunications]+ Leontief Matrix EU Imports [sectors , Financial Intermedation]*Real final demand by sector EU[Financial Intermedation]+ Leontief Matrix EU Imports [sectors, Real Estate Activities ]*Real final demand by sector EU[Real Estate Activities]+Leontief Matrix EU Imports [sectors, Renting od MEq and Other Business Activities ]*Real final demand by sector EU[Renting od MEq and Other Business Activities]+ Leontief Matrix EU Imports[sectors, Public Admin and Defence Compulsory Social Security ]*Real final demand by sector EU[Public Admin and Defence Compulsory Social Security]+ Leontief Matrix EU Imports [sectors, Education ] *Real final demand by sector EU[Education]+ Leontief Matrix EU Imports [sectors, Health and Social Work]*Real final demand by sector EU[Health and Social Work ] + Leontief Matrix EU Imports [sectors, Other Community Social and Persona Services]*Real final demand by sector EU[Other Community Social and Persona Services ]+ Leontief Matrix EU Imports [sectors, Private Households with Employed Persons]*Real final demand by sector EU[Private Households with Employed Persons ]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Value of Rest of the World output (production) required to satisfy EU28
        demand of RoW producs (imports).
    """
    return (
        rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Agriculture Hunting Forestry and Fishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Mining and Quarrying"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Mining and Quarrying"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Food Beverages and Tobacco"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Textiles and Textile Products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Textiles and Textile Products"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Leather Leather and Footwear"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Wood and Products of Woood and Cork"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Pulp Paper Printing and Publishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Chemicals and Chemical products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Rubber and Plastics"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Rubber and Plastics"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Other Non Metalic Mineral"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Basic Metals and Fabricated Metal"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Machinery Nec"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu().loc["Machinery Nec"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Electrical and Optical Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Transport Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Transport Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Manufacturing Nec Recycling"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Electricity Gas and Water Supply"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports().loc[:, "Construction"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu().loc["Construction"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[
                :,
                "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc[
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[
                :,
                "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc[
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[
                :,
                "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc[
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Hotels and Restaurants"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Hotels and Restaurants"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Inland Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Inland Transport"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Water Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Water Transport"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Air Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu().loc["Air Transport"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[
                :,
                "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc[
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Post and Telecommunications"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Post and Telecommunications"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Financial Intermedation"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Financial Intermedation"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Real Estate Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Real Estate Activities"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Renting od MEq and Other Business Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Public Admin and Defence Compulsory Social Security"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports().loc[:, "Education"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu().loc["Education"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Health and Social Work"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Health and Social Work"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Other Community Social and Persona Services"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_imports()
            .loc[:, "Private Households with Employed Persons"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_final_demand_by_sector_eu()
        .loc["Private Households with Employed Persons"]
        .reset_coords(drop=True)
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_1996():
    """
    Real Name: Leontief Matrix EU Imports 1996
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'AJ203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_1996()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_1997():
    """
    Real Name: Leontief Matrix EU Imports 1997
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'BS203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_1997()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_1998():
    """
    Real Name: Leontief Matrix EU Imports 1998
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'DB203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_1998()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_1999():
    """
    Real Name: Leontief Matrix EU Imports 1999
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'EK203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_1999()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2000():
    """
    Real Name: Leontief Matrix EU Imports 2000
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'FT203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2000()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2005():
    """
    Real Name: Leontief Matrix EU Imports 2005
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'MM203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2005()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2002():
    """
    Real Name: Leontief Matrix EU Imports 2002
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'IL203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2002()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2003():
    """
    Real Name: Leontief Matrix EU Imports 2003
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'JU203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2003()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2004():
    """
    Real Name: Leontief Matrix EU Imports 2004
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'LD203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2004()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_1995():
    """
    Real Name: Leontief Matrix EU Imports 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'A203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_1995()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2006():
    """
    Real Name: Leontief Matrix EU Imports 2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'NV203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2006()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2007():
    """
    Real Name: Leontief Matrix EU Imports 2007
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'PE203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2007()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports_2008():
    """
    Real Name: Leontief Matrix EU Imports 2008
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'QN203')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_imports_2008()


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_imports():
    """
    Real Name: Leontief Matrix EU Imports
    Original Eqn: IF THEN ELSE(Time<1996, Leontief Matrix EU Imports 1995[sectors,sectors1], IF THEN ELSE(Time<1997, Leontief Matrix EU Imports 1996[sectors ,sectors1], IF THEN ELSE(Time<1998, Leontief Matrix EU Imports 1997[sectors,sectors1], IF THEN ELSE(Time<1999, Leontief Matrix EU Imports 1998[sectors,sectors1], IF THEN ELSE(Time<2000, Leontief Matrix EU Imports 1999[sectors,sectors1], IF THEN ELSE(Time<2001, Leontief Matrix EU Imports 2000[sectors,sectors1], IF THEN ELSE( Time<2002, Leontief Matrix EU Imports 2001[sectors,sectors1], IF THEN ELSE(Time<2003, Leontief Matrix EU Imports 2002[sectors,sectors1], IF THEN ELSE(Time<2004, Leontief Matrix EU Imports 2003[sectors,sectors1], IF THEN ELSE(Time<2005, Leontief Matrix EU Imports 2004[sectors,sectors1], IF THEN ELSE(Time<2006, Leontief Matrix EU Imports 2005[sectors,sectors1], IF THEN ELSE(Time<2007, Leontief Matrix EU Imports 2006[sectors,sectors1], IF THEN ELSE(Time<2008, Leontief Matrix EU Imports 2007[sectors,sectors1], IF THEN ELSE(Time<2009, Leontief Matrix EU Imports 2008[sectors,sectors1], Leontief Matrix EU Imports 2009[sectors,sectors1]))))))))))))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    Leontieff matrix in interregional Input-Output Analysis can be divided in
        submatrixes. Imports submatrix (lower-left quadrant) gives the
        sensitiveness of foreign production to domestic final demand of Rest of
        the World products (imports).
    """
    return if_then_else(
        time() < 1996,
        lambda: leontief_matrix_eu_imports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: leontief_matrix_eu_imports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: leontief_matrix_eu_imports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: leontief_matrix_eu_imports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: leontief_matrix_eu_imports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: leontief_matrix_eu_imports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: leontief_matrix_eu_imports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: leontief_matrix_eu_imports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: leontief_matrix_eu_imports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: leontief_matrix_eu_imports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: leontief_matrix_eu_imports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: leontief_matrix_eu_imports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: leontief_matrix_eu_imports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: leontief_matrix_eu_imports_2008(),
                                                            lambda: leontief_matrix_eu_imports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def energy_scarcity_feedback_shortage_coeff_eu():
    """
    Real Name: Energy scarcity feedback shortage coeff EU
    Original Eqn: IF THEN ELSE("Activate energy scarcity feedback?"=1, MIN(1, ZIDZ( real FE consumption by fuel before heat correction[ final sources] , Required FED by fuel before heat correction[final sources] )), 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    MIN(1, real FE consumption by fuel before heat correction[final sources]/Required
        FED by fuel before heat correction        [final sources])        This coefficient adapts the real final energy by fuel to be used by
        economic sectors taking into account energy availability.
    """
    return if_then_else(
        activate_energy_scarcity_feedback() == 1,
        lambda: np.minimum(
            1,
            zidz(
                rearrange(
                    real_fe_consumption_by_fuel_before_heat_correction(),
                    ["final sources"],
                    _subscript_dict,
                ),
                required_fed_by_fuel_before_heat_correction(),
            ),
        ),
        lambda: 1,
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2000():
    """
    Real Name: A Matrix EU Exports 2000
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'FT121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2000()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2002():
    """
    Real Name: A Matrix EU Exports 2002
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'IL121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2002()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2003():
    """
    Real Name: A Matrix EU Exports 2003
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'JU121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2003()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2004():
    """
    Real Name: A Matrix EU Exports 2004
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'LD121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2004()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2005():
    """
    Real Name: A Matrix EU Exports 2005
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'MM121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2005()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2006():
    """
    Real Name: A Matrix EU Exports 2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'NV121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2006()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2007():
    """
    Real Name: A Matrix EU Exports 2007
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'PE121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2007()


@cache.step
@to_float
def gdp_eu():
    """
    Real Name: GDP EU
    Original Eqn: SUM(GDP by sector[sectors!])/1e+06
    Units: T$
    Limits: (None, None)
    Type: component
    Subs: None

    Global GDP in T1995T$.
    """
    return sum(gdp_by_sector(), dim=("sectors",)) / 1e06


@cache.step
@subs(["sectors"], _subscript_dict)
def gdp_by_sector():
    """
    Real Name: GDP by sector
    Original Eqn: Real final demand by sector EU[sectors]+IC exports EU[sectors]-IC imports EU[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    EU 28 Gross Domestic Product by sector
    """
    return real_final_demand_by_sector_eu() + ic_exports_eu() - ic_imports_eu()


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports():
    """
    Real Name: A Matrix EU Imports
    Original Eqn: IF THEN ELSE(Time<1996, A Matrix EU Imports 1995[sectors,sectors1], IF THEN ELSE(Time<1997, A Matrix EU Imports 1996[sectors ,sectors1], IF THEN ELSE(Time<1998, A Matrix EU Imports 1997[sectors,sectors1], IF THEN ELSE(Time<1999, A Matrix EU Imports 1998[sectors,sectors1], IF THEN ELSE(Time<2000, A Matrix EU Imports 1999[sectors,sectors1], IF THEN ELSE(Time<2001, A Matrix EU Imports 2000[sectors,sectors1], IF THEN ELSE( Time<2002, A Matrix EU Imports 2001[sectors,sectors1], IF THEN ELSE(Time<2003, A Matrix EU Imports 2002[sectors,sectors1], IF THEN ELSE(Time<2004, A Matrix EU Imports 2003[sectors,sectors1], IF THEN ELSE(Time<2005, A Matrix EU Imports 2004[sectors,sectors1], IF THEN ELSE(Time<2006, A Matrix EU Imports 2005[sectors,sectors1], IF THEN ELSE(Time<2007, A Matrix EU Imports 2006[sectors,sectors1], IF THEN ELSE(Time<2008, A Matrix EU Imports 2007[sectors,sectors1], IF THEN ELSE(Time<2009, A Matrix EU Imports 2008[sectors,sectors1], A Matrix EU Imports 2009[sectors,sectors1]))))))))))))))
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    In interregional Input-Output Analysis, A Matrix can be divided in
        submatrixes. Exports submatrix (lower-left quadrant) is the matrix of
        technnical coefficients of imports.
    """
    return if_then_else(
        time() < 1996,
        lambda: a_matrix_eu_imports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: a_matrix_eu_imports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: a_matrix_eu_imports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: a_matrix_eu_imports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: a_matrix_eu_imports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: a_matrix_eu_imports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: a_matrix_eu_imports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: a_matrix_eu_imports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: a_matrix_eu_imports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: a_matrix_eu_imports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: a_matrix_eu_imports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: a_matrix_eu_imports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: a_matrix_eu_imports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: a_matrix_eu_imports_2008(),
                                                            lambda: a_matrix_eu_imports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_1995():
    """
    Real Name: A Matrix EU Imports 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'A161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_1995()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_1996():
    """
    Real Name: A Matrix EU Imports 1996
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'AJ161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_1996()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_1997():
    """
    Real Name: A Matrix EU Imports 1997
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'BS161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_1997()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_1998():
    """
    Real Name: A Matrix EU Imports 1998
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'DB161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_1998()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_1999():
    """
    Real Name: A Matrix EU Imports 1999
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'EK161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_1999()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2000():
    """
    Real Name: A Matrix EU Imports 2000
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'FT161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2000()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2001():
    """
    Real Name: A Matrix EU Imports 2001
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'HC161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2001()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2002():
    """
    Real Name: A Matrix EU Imports 2002
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'IL161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2002()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2003():
    """
    Real Name: A Matrix EU Imports 2003
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'JU161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2003()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2004():
    """
    Real Name: A Matrix EU Imports 2004
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'LD161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2004()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2005():
    """
    Real Name: A Matrix EU Imports 2005
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'MM161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2005()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2006():
    """
    Real Name: A Matrix EU Imports 2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'NV161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2006()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2007():
    """
    Real Name: A Matrix EU Imports 2007
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'PE161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2007()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2008():
    """
    Real Name: A Matrix EU Imports 2008
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'QN161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2008()


@cache.step
@subs(["sectors"], _subscript_dict)
def ic_exports_eu():
    """
    Real Name: IC exports EU
    Original Eqn: SUM(IC exports EU matrix[sectors,sectors1!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Total intermediate products exports
    """
    return sum(ic_exports_eu_matrix(), dim=("sectors1",))


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def ic_exports_eu_matrix():
    """
    Real Name: IC exports EU matrix
    Original Eqn: A Matrix EU Exports[sectors,sectors1]*Real total output by sector RoW[sectors1]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    Intermediate products exports by sector
    """
    return a_matrix_eu_exports() * rearrange(
        real_total_output_by_sector_row(), ["sectors1"], _subscript_dict
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def ic_imports_eu():
    """
    Real Name: IC imports EU
    Original Eqn: SUM(IC imports EU matrix[sectors1!,sectors])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Total intermediate products imports
    """
    return sum(
        rearrange(ic_imports_eu_matrix(), ["sectors1", "sectors"], _subscript_dict),
        dim=("sectors1",),
    )


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def ic_imports_eu_matrix():
    """
    Real Name: IC imports EU matrix
    Original Eqn: A Matrix EU Imports[sectors,sectors1]*Real total output by sector EU[sectors1]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    Intermediate products imports by sector
    """
    return a_matrix_eu_imports() * rearrange(
        real_total_output_by_sector_eu(), ["sectors1"], _subscript_dict
    )


@cache.step
@to_float
def real_demand_tdollars():
    """
    Real Name: Real demand Tdollars
    Original Eqn: Real demand/1e+06
    Units: Tdollars
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_demand() / 1e06


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports():
    """
    Real Name: A Matrix EU Exports
    Original Eqn: IF THEN ELSE(Time<1996, A Matrix EU Exports 1995[sectors,sectors1], IF THEN ELSE(Time<1997, A Matrix EU Exports 1996[sectors ,sectors1], IF THEN ELSE(Time<1998, A Matrix EU Exports 1997[sectors,sectors1], IF THEN ELSE(Time<1999, A Matrix EU Exports 1998[sectors,sectors1], IF THEN ELSE(Time<2000, A Matrix EU Exports 1999[sectors,sectors1], IF THEN ELSE(Time<2001, A Matrix EU Exports 2000[sectors,sectors1], IF THEN ELSE( Time<2002, A Matrix EU Exports 2001[sectors,sectors1], IF THEN ELSE(Time<2003, A Matrix EU Exports 2002[sectors,sectors1], IF THEN ELSE(Time<2004, A Matrix EU Exports 2003[sectors,sectors1], IF THEN ELSE(Time<2005, A Matrix EU Exports 2004[sectors,sectors1], IF THEN ELSE(Time<2006, A Matrix EU Exports 2005[sectors,sectors1], IF THEN ELSE(Time<2007, A Matrix EU Exports 2006[sectors,sectors1], IF THEN ELSE(Time<2008, A Matrix EU Exports 2007[sectors,sectors1], IF THEN ELSE(Time<2009, A Matrix EU Exports 2008[sectors,sectors1], A Matrix EU Exports 2009[sectors,sectors1]))))))))))))))
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    In interregional Input-Output Analysis, A Matrix can be divided in
        submatrixes. Exports submatrix (upper-right quadrant) is the matrix of
        technnical coefficients of exports.
    """
    return if_then_else(
        time() < 1996,
        lambda: a_matrix_eu_exports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: a_matrix_eu_exports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: a_matrix_eu_exports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: a_matrix_eu_exports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: a_matrix_eu_exports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: a_matrix_eu_exports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: a_matrix_eu_exports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: a_matrix_eu_exports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: a_matrix_eu_exports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: a_matrix_eu_exports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: a_matrix_eu_exports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: a_matrix_eu_exports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: a_matrix_eu_exports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: a_matrix_eu_exports_2008(),
                                                            lambda: a_matrix_eu_exports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_1995():
    """
    Real Name: A Matrix EU Exports 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'A121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_1995()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_1996():
    """
    Real Name: A Matrix EU Exports 1996
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'AJ121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_1996()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_1997():
    """
    Real Name: A Matrix EU Exports 1997
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'BS121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_1997()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_1998():
    """
    Real Name: A Matrix EU Exports 1998
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'DB121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_1998()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_1999():
    """
    Real Name: A Matrix EU Exports 1999
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'EK121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_1999()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2001():
    """
    Real Name: A Matrix EU Exports 2001
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'HC121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2001()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2009():
    """
    Real Name: A Matrix EU Exports 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'RW121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2009()


@cache.step
@to_float
def real_demand_delayed_1yr():
    """
    Real Name: Real demand delayed 1yr
    Original Eqn: SMOOTH N(Real demand Tdollars, 1, 8.6, 12)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _smooth_real_demand_delayed_1yr()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_imports_2009():
    """
    Real Name: A Matrix EU Imports 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'RW161')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_imports_2009()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def a_matrix_eu_exports_2008():
    """
    Real Name: A Matrix EU Exports 2008
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'QN121')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_a_matrix_eu_exports_2008()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2005():
    """
    Real Name: IA Matrix EU Exports 2005
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'MM81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2005()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2006():
    """
    Real Name: IA Matrix EU Exports 2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'NV81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2006()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2007():
    """
    Real Name: IA Matrix EU Exports 2007
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'PE81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2007()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2008():
    """
    Real Name: IA Matrix EU Exports 2008
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'QN81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2008()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2009():
    """
    Real Name: IA Matrix EU Exports 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'RW81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2009()


@cache.step
@subs(["sectors"], _subscript_dict)
def real_total_output_by_sector_row():
    """
    Real Name: Real total output by sector RoW
    Original Eqn: Real total output by sector World[sectors]-Real total output by sector EU[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Sectoral real total production by Rest of the World.
    """
    return real_total_output_by_sector_world() - real_total_output_by_sector_eu()


@cache.step
@subs(["sectors"], _subscript_dict)
def real_final_demand_by_sector_eu():
    """
    Real Name: Real final demand by sector EU
    Original Eqn: MAX(0,Real domestic demand by sector EU[sectors]+Real Final Demand of exports[sectors])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Sectoral final demand of EU28 products (domestic and foreign).
    """
    return np.maximum(
        0, real_domestic_demand_by_sector_eu() + real_final_demand_of_exports()
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_1999():
    """
    Real Name: IA Matrix EU Exports 1999
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'EK81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_1999()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2000():
    """
    Real Name: IA Matrix EU Exports 2000
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'FT81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2000()


@cache.step
@subs(["sectors"], _subscript_dict)
def real_final_demand_of_exports():
    """
    Real Name: Real Final Demand of exports
    Original Eqn: IA Matrix EU Exports [sectors,Agriculture Hunting Forestry and Fishing]*Real total output by sector RoW[Agriculture Hunting Forestry and Fishing ] + IA Matrix EU Exports [sectors, Mining and Quarrying]*Real total output by sector RoW[Mining and Quarrying]+ IA Matrix EU Exports [ sectors , Food Beverages and Tobacco]*Real total output by sector RoW[Food Beverages and Tobacco]+IA Matrix EU Exports [sectors, Textiles and Textile Products ]*Real total output by sector RoW[Textiles and Textile Products]+ IA Matrix EU Exports[sectors, Leather Leather and Footwear ]*Real total output by sector RoW[Leather Leather and Footwear] + IA Matrix EU Exports [sectors, Wood and Products of Woood and Cork]*Real total output by sector RoW[Wood and Products of Woood and Cork ] + IA Matrix EU Exports [sectors, Pulp Paper Printing and Publishing]*Real total output by sector RoW[Pulp Paper Printing and Publishing ]+ IA Matrix EU Exports [sectors, Coke Refined Petroleum and Nuclear Fuel]*Real total output by sector RoW[Coke Refined Petroleum and Nuclear Fuel ]+ IA Matrix EU Exports [sectors, Chemicals and Chemical products]*Real total output by sector RoW[Chemicals and Chemical products ]+ IA Matrix EU Exports [sectors, Rubber and Plastics]*Real total output by sector RoW[Rubber and Plastics]+ IA Matrix EU Exports [sectors , Other Non Metalic Mineral]*Real total output by sector RoW[Other Non Metalic Mineral]+ IA Matrix EU Exports [sectors, Basic Metals and Fabricated Metal]*Real total output by sector RoW[Basic Metals and Fabricated Metal]+ IA Matrix EU Exports [sectors, Machinery Nec]*Real total output by sector RoW[Machinery Nec]+ IA Matrix EU Exports[sectors, Electrical and Optical Equipment ]*Real total output by sector RoW[Electrical and Optical Equipment]+ IA Matrix EU Exports[sectors, Transport Equipment]*Real total output by sector RoW [Transport Equipment]+ IA Matrix EU Exports [sectors, Manufacturing Nec Recycling]*Real total output by sector RoW[ Manufacturing Nec Recycling] + IA Matrix EU Exports [sectors, Electricity Gas and Water Supply]*Real total output by sector RoW[ Electricity Gas and Water Supply] + IA Matrix EU Exports [sectors, Construction]*Real total output by sector RoW[Construction ]+ IA Matrix EU Exports [sectors, Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel ]*Real total output by sector RoW[Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel ]+ IA Matrix EU Exports [sectors, Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles]*Real total output by sector RoW[ Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles] + IA Matrix EU Exports [sectors, Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]*Real total output by sector RoW [Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]+ IA Matrix EU Exports[sectors, Hotels and Restaurants ]*Real total output by sector RoW[Hotels and Restaurants]+ IA Matrix EU Exports [sectors, Inland Transport]*Real total output by sector RoW [Inland Transport]+ IA Matrix EU Exports [sectors, Water Transport]*Real total output by sector RoW[Water Transport ]+ IA Matrix EU Exports [sectors, Air Transport]*Real total output by sector RoW[Air Transport]+ IA Matrix EU Exports[sectors, Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies ]*Real total output by sector RoW[Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies ]+ IA Matrix EU Exports [sectors,Post and Telecommunications]*Real total output by sector RoW[Post and Telecommunications]+ IA Matrix EU Exports [sectors , Financial Intermedation]*Real total output by sector RoW[Financial Intermedation]+IA Matrix EU Exports [sectors, Real Estate Activities ]*Real total output by sector RoW[Real Estate Activities]+IA Matrix EU Exports [sectors, Renting od MEq and Other Business Activities ]*Real total output by sector RoW[Renting od MEq and Other Business Activities]+ IA Matrix EU Exports[sectors, Public Admin and Defence Compulsory Social Security ]*Real total output by sector RoW[Public Admin and Defence Compulsory Social Security]+ IA Matrix EU Exports [sectors, Education ] *Real total output by sector RoW[Education]+ IA Matrix EU Exports [sectors, Health and Social Work]*Real total output by sector RoW [Health and Social Work] + IA Matrix EU Exports [sectors, Other Community Social and Persona Services]*Real total output by sector RoW [Other Community Social and Persona Services] + IA Matrix EU Exports [sectors, Private Households with Employed Persons] * Real total output by sector RoW[Private Households with Employed Persons]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Real final demand of EU28 products made by the Rest of the World (Exports).
    """
    return (
        rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Agriculture Hunting Forestry and Fishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Mining and Quarrying"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Mining and Quarrying"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Food Beverages and Tobacco"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Textiles and Textile Products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Textiles and Textile Products"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Leather Leather and Footwear"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Wood and Products of Woood and Cork"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Pulp Paper Printing and Publishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Chemicals and Chemical products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Rubber and Plastics"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Rubber and Plastics"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Other Non Metalic Mineral"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Basic Metals and Fabricated Metal"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports().loc[:, "Machinery Nec"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row().loc["Machinery Nec"].reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Electrical and Optical Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Transport Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Transport Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Manufacturing Nec Recycling"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Electricity Gas and Water Supply"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports().loc[:, "Construction"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row().loc["Construction"].reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[
                :,
                "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc[
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[
                :,
                "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc[
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[
                :,
                "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc[
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Hotels and Restaurants"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Hotels and Restaurants"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports().loc[:, "Inland Transport"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Inland Transport"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports().loc[:, "Water Transport"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Water Transport"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports().loc[:, "Air Transport"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row().loc["Air Transport"].reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[
                :,
                "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc[
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Post and Telecommunications"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Post and Telecommunications"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Financial Intermedation"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Financial Intermedation"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Real Estate Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Real Estate Activities"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Renting od MEq and Other Business Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Public Admin and Defence Compulsory Social Security"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports().loc[:, "Education"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row().loc["Education"].reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Health and Social Work"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Health and Social Work"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Other Community Social and Persona Services"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix_eu_exports()
            .loc[:, "Private Households with Employed Persons"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_row()
        .loc["Private Households with Employed Persons"]
        .reset_coords(drop=True)
    )


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports():
    """
    Real Name: IA Matrix EU Exports
    Original Eqn: IF THEN ELSE(Time<1996, IA Matrix EU Exports 1995[sectors,sectors1], IF THEN ELSE(Time<1997, IA Matrix EU Exports 1996[sectors ,sectors1], IF THEN ELSE(Time<1998, IA Matrix EU Exports 1997[sectors,sectors1], IF THEN ELSE(Time<1999, IA Matrix EU Exports 1998[sectors,sectors1], IF THEN ELSE(Time<2000, IA Matrix EU Exports 1999[sectors,sectors1], IF THEN ELSE(Time<2001, IA Matrix EU Exports 2000[sectors,sectors1], IF THEN ELSE( Time<2002, IA Matrix EU Exports 2001[sectors,sectors1], IF THEN ELSE(Time<2003, IA Matrix EU Exports 2002[sectors,sectors1], IF THEN ELSE(Time<2004, IA Matrix EU Exports 2003[sectors,sectors1], IF THEN ELSE(Time<2005, IA Matrix EU Exports 2004[sectors,sectors1], IF THEN ELSE(Time<2006, IA Matrix EU Exports 2005[sectors,sectors1], IF THEN ELSE(Time<2007, IA Matrix EU Exports 2006[sectors,sectors1], IF THEN ELSE(Time<2008, IA Matrix EU Exports 2007[sectors,sectors1], IF THEN ELSE(Time<2009, IA Matrix EU Exports 2008[sectors,sectors1], IA Matrix EU Exports 2009[sectors,sectors1]))))))))))))))
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    (I-A) Matrix (submatrix upper-right quadrant).
    """
    return if_then_else(
        time() < 1996,
        lambda: ia_matrix_eu_exports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: ia_matrix_eu_exports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: ia_matrix_eu_exports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: ia_matrix_eu_exports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: ia_matrix_eu_exports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: ia_matrix_eu_exports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: ia_matrix_eu_exports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: ia_matrix_eu_exports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: ia_matrix_eu_exports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: ia_matrix_eu_exports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: ia_matrix_eu_exports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: ia_matrix_eu_exports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: ia_matrix_eu_exports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: ia_matrix_eu_exports_2008(),
                                                            lambda: ia_matrix_eu_exports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_1995():
    """
    Real Name: IA Matrix EU Exports 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'A81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_1995()


@cache.step
@to_float
def real_demand():
    """
    Real Name: Real demand
    Original Eqn: SUM(Real final demand by sector EU[sectors!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Total demand
    """
    return sum(real_final_demand_by_sector_eu(), dim=("sectors",))


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_1996():
    """
    Real Name: IA Matrix EU Exports 1996
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'AJ81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_1996()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_1997():
    """
    Real Name: IA Matrix EU Exports 1997
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'BS81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_1997()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_1998():
    """
    Real Name: IA Matrix EU Exports 1998
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'DB81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_1998()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2004():
    """
    Real Name: IA Matrix EU Exports 2004
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'LD81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2004()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2003():
    """
    Real Name: IA Matrix EU Exports 2003
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'JU81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2003()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2002():
    """
    Real Name: IA Matrix EU Exports 2002
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'IL81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2002()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_eu_exports_2001():
    """
    Real Name: IA Matrix EU Exports 2001
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'HC81')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_eu_exports_2001()


@cache.step
@subs(["sectors"], _subscript_dict)
def total_output_required_by_sector():
    """
    Real Name: Total output required by sector
    Original Eqn: Domestic output required for exports by sector[sectors]+Total domestic output required by sector[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Total output required to satisfy domestic and foreign final demand.
    """
    return (
        domestic_output_required_for_exports_by_sector()
        + total_domestic_output_required_by_sector()
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def real_total_output_by_sector_world():
    """
    Real Name: Real total output by sector World
    Original Eqn: Real total output by sector[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Real total output by sector. Source: global model.
    """
    return real_total_output_by_sector(time())


@cache.step
@subs(["sectors"], _subscript_dict)
def real_demand_by_sector_row():
    """
    Real Name: Real demand by sector RoW
    Original Eqn: Real demand by sector World[sectors]-Real demand by sector delayed EU[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']


    """
    return real_demand_by_sector_world() - real_demand_by_sector_delayed_eu()


@cache.step
@subs(["sectors"], _subscript_dict)
def real_demand_by_sector_world():
    """
    Real Name: Real demand by sector World
    Original Eqn: Real demand by sector[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Real demand by sector. Source: global model.
    """
    return real_demand_by_sector(time())


@cache.step
@subs(["sectors"], _subscript_dict)
def demand_by_sector_row():
    """
    Real Name: Demand by sector RoW
    Original Eqn: IF THEN ELSE(Time<2009,Historic demand by sector RoW[sectors](Time),Real demand by sector RoW[sectors])
    Units: Tdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']


    """
    return if_then_else(
        time() < 2009,
        lambda: historic_demand_by_sector_row(time()),
        lambda: real_demand_by_sector_row(),
    )


@cache.step
@to_float
def extraction_nat_gas_ej_world():
    """
    Real Name: "extraction nat. gas EJ World"
    Original Eqn: PES nat gas
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Global primary energy supply of natural gas. Source: global model.
    """
    return pes_nat_gas(time())


@cache.step
@to_float
def extraction_coal_ej_world():
    """
    Real Name: extraction coal EJ World
    Original Eqn: extraction coal EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Global primary energy supply. Source: global model.
    """
    return extraction_coal_ej(time())


@cache.step
@to_float
def extraction_uranium_row():
    """
    Real Name: extraction uranium RoW
    Original Eqn: IF THEN ELSE(extraction uranium EJ World>imports EU uranium from RoW EJ ,imports EU uranium from RoW EJ ,extraction uranium EJ World)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        extraction_uranium_ej_world() > imports_eu_uranium_from_row_ej(),
        lambda: imports_eu_uranium_from_row_ej(),
        lambda: extraction_uranium_ej_world(),
    )


@cache.step
@to_float
def imports_eu_unconv_gas_from_row_ej():
    """
    Real Name: imports EU unconv gas from RoW EJ
    Original Eqn: "imports EU nat. gas from RoW EJ"*(1-share conv vs total gas extraction World)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return imports_eu_nat_gas_from_row_ej() * (
        1 - share_conv_vs_total_gas_extraction_world()
    )


@cache.step
@to_float
def extraction_uranium_ej_world():
    """
    Real Name: extraction uranium EJ World
    Original Eqn: extraction uranium EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Global uranium extracted. Source: global model.
    """
    return extraction_uranium_ej(time())


@cache.step
@to_float
def extraction_oil_ej_world():
    """
    Real Name: Extraction oil EJ World
    Original Eqn: PES oil EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Global primary energy supply of oil. Source: global model.
    """
    return pes_oil_ej(time())


@cache.step
@to_float
def share_conv_vs_total_gas_extraction_world():
    """
    Real Name: share conv vs total gas extraction World
    Original Eqn: share conv vs total gas extraction
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of global conventional vs global total (unconventional +
        conventional) gas extraction. Source: global model.
    """
    return share_conv_vs_total_gas_extraction(time())


@cache.step
@to_float
def imports_eu_conv_gas_from_row_ej():
    """
    Real Name: imports EU conv gas from RoW EJ
    Original Eqn: "imports EU nat. gas from RoW EJ"*share conv vs total gas extraction World
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return imports_eu_nat_gas_from_row_ej() * share_conv_vs_total_gas_extraction_world()


@cache.step
@to_float
def share_conv_vs_total_oil_extraction_world():
    """
    Real Name: share conv vs total oil extraction World
    Original Eqn: share conv vs total oil extraction
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of global conventional vs global total (unconventional +
        conventional) oil extraction. Source: global model.
    """
    return share_conv_vs_total_oil_extraction(time())


@cache.step
@to_float
def fed_heatnc_ej():
    """
    Real Name: "FED Heat-nc EJ"
    Original Eqn: Required FED by fuel[heat]-Required FED by fuel before heat correction[heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy (non-commercial) heat demand.
    """
    return required_fed_by_fuel().loc["heat"].reset_coords(
        drop=True
    ) - required_fed_by_fuel_before_heat_correction().loc["heat"].reset_coords(
        drop=True
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_1995():
    """
    Real Name: Leontief Matrix EU Exports 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'A42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_1995()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_1996():
    """
    Real Name: Leontief Matrix EU Exports 1996
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'AJ42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_1996()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_1997():
    """
    Real Name: Leontief Matrix EU Exports 1997
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'BS42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_1997()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_1998():
    """
    Real Name: Leontief Matrix EU Exports 1998
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'DB42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_1998()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_1999():
    """
    Real Name: Leontief Matrix EU Exports 1999
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'EK42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_1999()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2000():
    """
    Real Name: Leontief Matrix EU Exports 2000
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'FT42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2000()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2002():
    """
    Real Name: Leontief Matrix EU Exports 2002
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'IL42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2002()


@cache.step
@subs(["sectors"], _subscript_dict)
def domestic_output_required_for_exports_by_sector():
    """
    Real Name: Domestic output required for exports by sector
    Original Eqn: Leontief matrix EU Exports [sectors,Agriculture Hunting Forestry and Fishing]*Demand by sector RoW[Agriculture Hunting Forestry and Fishing ]+ Leontief matrix EU Exports [sectors, Mining and Quarrying]*Demand by sector RoW[ Mining and Quarrying]+ Leontief matrix EU Exports [ sectors , Food Beverages and Tobacco]*Demand by sector RoW[Food Beverages and Tobacco]+Leontief matrix EU Exports[sectors, Textiles and Textile Products ]*Demand by sector RoW[Textiles and Textile Products]+ Leontief matrix EU Exports [sectors, Leather Leather and Footwear]*Demand by sector RoW [Leather Leather and Footwear]+ Leontief matrix EU Exports [sectors, Wood and Products of Woood and Cork]*Demand by sector RoW [Wood and Products of Woood and Cork]+ Leontief matrix EU Exports [sectors, Pulp Paper Printing and Publishing]*Demand by sector RoW [Pulp Paper Printing and Publishing]+ Leontief matrix EU Exports [sectors, Coke Refined Petroleum and Nuclear Fuel]*Demand by sector RoW [Coke Refined Petroleum and Nuclear Fuel]+ Leontief matrix EU Exports [sectors, Chemicals and Chemical products]*Demand by sector RoW [Chemicals and Chemical products]+ Leontief matrix EU Exports [sectors, Rubber and Plastics]*Demand by sector RoW[ Rubber and Plastics ] + Leontief matrix EU Exports [sectors, Other Non Metalic Mineral]*Demand by sector RoW[Other Non Metalic Mineral]+ Leontief matrix EU Exports [sectors, Basic Metals and Fabricated Metal]*Demand by sector RoW[Basic Metals and Fabricated Metal]+ Leontief matrix EU Exports [sectors, Machinery Nec]*Demand by sector RoW[Machinery Nec]+ Leontief matrix EU Exports[sectors, Electrical and Optical Equipment ]*Demand by sector RoW[Electrical and Optical Equipment]+ Leontief matrix EU Exports[sectors, Transport Equipment]*Demand by sector RoW [Transport Equipment]+ Leontief matrix EU Exports [sectors, Manufacturing Nec Recycling]*Demand by sector RoW[Manufacturing Nec Recycling ] + Leontief matrix EU Exports [sectors, Electricity Gas and Water Supply]*Demand by sector RoW[Electricity Gas and Water Supply ] + Leontief matrix EU Exports [sectors, Construction]*Demand by sector RoW[ Construction]+ Leontief matrix EU Exports [sectors, Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel ]*Demand by sector RoW[Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel]+ Leontief matrix EU Exports [sectors, Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles]*Demand by sector RoW[Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles ]+ Leontief matrix EU Exports [sectors, Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]*Demand by sector RoW [Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]+ Leontief matrix EU Exports[sectors, Hotels and Restaurants ]*Demand by sector RoW[Hotels and Restaurants]+ Leontief matrix EU Exports [sectors,Inland Transport]*Demand by sector RoW[ Inland Transport]+ Leontief matrix EU Exports [sectors, Water Transport]*Demand by sector RoW[Water Transport]+ Leontief matrix EU Exports [sectors, Air Transport]*Demand by sector RoW[Air Transport]+ Leontief matrix EU Exports[sectors, Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies ]*Demand by sector RoW[Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies]+ Leontief matrix EU Exports [sectors,Post and Telecommunications]*Demand by sector RoW[Post and Telecommunications]+ Leontief matrix EU Exports [sectors , Financial Intermedation]*Demand by sector RoW[Financial Intermedation]+ Leontief matrix EU Exports[sectors, Real Estate Activities ]*Demand by sector RoW[Real Estate Activities]+Leontief matrix EU Exports [sectors, Renting od MEq and Other Business Activities ]*Demand by sector RoW[Renting od MEq and Other Business Activities]+ Leontief matrix EU Exports[sectors, Public Admin and Defence Compulsory Social Security ]*Demand by sector RoW[Public Admin and Defence Compulsory Social Security]+ Leontief matrix EU Exports[sectors, Education ] *Demand by sector RoW[Education]+ Leontief matrix EU Exports [sectors, Health and Social Work]*Demand by sector RoW[Health and Social Work ] + Leontief matrix EU Exports [sectors, Other Community Social and Persona Services]*Demand by sector RoW[Other Community Social and Persona Services ]+ Leontief matrix EU Exports [sectors, Private Households with Employed Persons]*Demand by sector RoW[Private Households with Employed Persons ]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Value of output (production) required to satisfy Rest of the World demand
        of EU28 producs (exports) by sector.
    """
    return (
        rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Agriculture Hunting Forestry and Fishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Mining and Quarrying"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Mining and Quarrying"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Food Beverages and Tobacco"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Textiles and Textile Products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Textiles and Textile Products"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Leather Leather and Footwear"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Wood and Products of Woood and Cork"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Pulp Paper Printing and Publishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Chemicals and Chemical products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Rubber and Plastics"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Rubber and Plastics"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Other Non Metalic Mineral"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Basic Metals and Fabricated Metal"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Machinery Nec"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Machinery Nec"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Electrical and Optical Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Transport Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Transport Equipment"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Manufacturing Nec Recycling"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Electricity Gas and Water Supply"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports().loc[:, "Construction"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Construction"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[
                :,
                "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc[
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[
                :,
                "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc[
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[
                :,
                "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc[
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Hotels and Restaurants"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Hotels and Restaurants"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Inland Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Inland Transport"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Water Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Water Transport"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Air Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Air Transport"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[
                :,
                "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc[
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Post and Telecommunications"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Post and Telecommunications"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Financial Intermedation"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Financial Intermedation"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Real Estate Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Real Estate Activities"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Renting od MEq and Other Business Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Public Admin and Defence Compulsory Social Security"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports().loc[:, "Education"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Education"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Health and Social Work"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row().loc["Health and Social Work"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Other Community Social and Persona Services"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_eu_exports()
            .loc[:, "Private Households with Employed Persons"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * demand_by_sector_row()
        .loc["Private Households with Employed Persons"]
        .reset_coords(drop=True)
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def required_total_output():
    """
    Real Name: Required total output
    Original Eqn: Domestic output required for exports by sector[sectors]+Total domestic output required by sector[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Required total output (domestic+foreign)
    """
    return (
        domestic_output_required_for_exports_by_sector()
        + total_domestic_output_required_by_sector()
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2005():
    """
    Real Name: Leontief Matrix EU Exports 2005
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'MM42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2005()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2006():
    """
    Real Name: Leontief Matrix EU Exports 2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'NV42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2006()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2007():
    """
    Real Name: Leontief Matrix EU Exports 2007
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'PE42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2007()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2008():
    """
    Real Name: Leontief Matrix EU Exports 2008
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'QN42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2008()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2009():
    """
    Real Name: Leontief Matrix EU Exports 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'RW42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2009()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2004():
    """
    Real Name: Leontief Matrix EU Exports 2004
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'LD42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2004()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2001():
    """
    Real Name: Leontief Matrix EU Exports 2001
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'HC42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2001()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports_2003():
    """
    Real Name: Leontief Matrix EU Exports 2003
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'RoW', 'JU42')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_eu_exports_2003()


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_eu_exports():
    """
    Real Name: Leontief matrix EU Exports
    Original Eqn: IF THEN ELSE(Time<1996, Leontief Matrix EU Exports 1995[sectors,sectors1], IF THEN ELSE(Time<1997, Leontief Matrix EU Exports 1996[sectors ,sectors1], IF THEN ELSE(Time<1998, Leontief Matrix EU Exports 1997[sectors,sectors1], IF THEN ELSE(Time<1999, Leontief Matrix EU Exports 1998[sectors,sectors1], IF THEN ELSE(Time<2000, Leontief Matrix EU Exports 1999[sectors,sectors1], IF THEN ELSE(Time<2001, Leontief Matrix EU Exports 2000[sectors,sectors1], IF THEN ELSE( Time<2002, Leontief Matrix EU Exports 2001[sectors,sectors1], IF THEN ELSE(Time<2003, Leontief Matrix EU Exports 2002[sectors,sectors1], IF THEN ELSE(Time<2004, Leontief Matrix EU Exports 2003[sectors,sectors1], IF THEN ELSE(Time<2005, Leontief Matrix EU Exports 2004[sectors,sectors1], IF THEN ELSE(Time<2006, Leontief Matrix EU Exports 2005[sectors,sectors1], IF THEN ELSE(Time<2007, Leontief Matrix EU Exports 2006[sectors,sectors1], IF THEN ELSE(Time<2008, Leontief Matrix EU Exports 2007[sectors,sectors1], IF THEN ELSE(Time<2009, Leontief Matrix EU Exports 2008[sectors,sectors1], Leontief Matrix EU Exports 2009[sectors,sectors1]))))))))))))))
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    Leontieff matrix in interregional Input-Output Analysis can be divided in
        submatrixes. Exports submatrix (upper-right quadrant) gives the
        sensitiveness of domestic production to foreign final demand (exports) of
        EU28 products.
    """
    return if_then_else(
        time() < 1996,
        lambda: leontief_matrix_eu_exports_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: leontief_matrix_eu_exports_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: leontief_matrix_eu_exports_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: leontief_matrix_eu_exports_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: leontief_matrix_eu_exports_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: leontief_matrix_eu_exports_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: leontief_matrix_eu_exports_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: leontief_matrix_eu_exports_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: leontief_matrix_eu_exports_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: leontief_matrix_eu_exports_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: leontief_matrix_eu_exports_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: leontief_matrix_eu_exports_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: leontief_matrix_eu_exports_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: leontief_matrix_eu_exports_2008(),
                                                            lambda: leontief_matrix_eu_exports_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


def historic_demand_by_sector_row(x):
    """
    Real Name: Historic demand by sector RoW
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'RoW', '2', 'B3')
    Units:
    Limits: (None, None)
    Type: lookup
    Subs: ['sectors']

    Sectoral final demand by sector (Rest of the World).
    """
    return _ext_lookup_historic_demand_by_sector_row(x)


@cache.step
@to_float
def land_saved_by_urban_pv():
    """
    Real Name: Land saved by urban PV
    Original Eqn: ZIDZ( potential generation RES elec TWh[solar PV]*real share PV urban vs total PV , ("power density RES elec TWe/Mha"[solar PV]/TWe per TWh) )
    Units: MHa*Year
    Limits: (None, None)
    Type: component
    Subs: None

    Land saved by urban PV.
    """
    return zidz(
        potential_generation_res_elec_twh().loc["solar PV"].reset_coords(drop=True)
        * real_share_pv_urban_vs_total_pv(),
        (
            power_density_res_elec_twemha().loc["solar PV"].reset_coords(drop=True)
            / twe_per_twh()
        ),
    )


@cache.step
@to_float
def remaining_potential_solar_pv_urban():
    """
    Real Name: remaining potential solar PV urban
    Original Eqn: MAX(0 ,ZIDZ( max solar PV urban/TWe per TWh - desired share installed PV urban vs tot PV*potential generation RES elec TWh [solar PV] , max solar PV urban/TWe per TWh ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential of solar PV in urban areas.
    """
    return np.maximum(
        0,
        zidz(
            max_solar_pv_urban() / twe_per_twh()
            - desired_share_installed_pv_urban_vs_tot_pv()
            * potential_generation_res_elec_twh()
            .loc["solar PV"]
            .reset_coords(drop=True),
            max_solar_pv_urban() / twe_per_twh(),
        ),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def surface_res_elec():
    """
    Real Name: surface RES elec
    Original Eqn:
      ZIDZ( potential generation RES elec TWh[hydro] , ("power density RES elec TWe/Mha"[hydro]/TWe per TWh) )
        .
        .
        .
      ZIDZ( potential generation RES elec TWh[CSP] , ("power density RES elec TWe/Mha"[CSP]/TWe per TWh) )
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Land requirements by renewable technologies for electricity generation.
    """
    return xrmerge(
        [
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["hydro"]
                    .reset_coords(drop=True),
                    (
                        power_density_res_elec_twemha()
                        .loc["hydro"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["geot elec"]
                    .reset_coords(drop=True),
                    (
                        power_density_res_elec_twemha()
                        .loc["geot elec"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["solid bioE elec"]
                    .reset_coords(drop=True),
                    (
                        power_density_res_elec_twemha()
                        .loc["solid bioE elec"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["oceanic"]
                    .reset_coords(drop=True),
                    (
                        power_density_res_elec_twemha()
                        .loc["oceanic"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["wind onshore"]
                    .reset_coords(drop=True),
                    (
                        power_density_res_elec_twemha()
                        .loc["wind onshore"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["wind offshore"]
                    .reset_coords(drop=True),
                    (
                        power_density_res_elec_twemha()
                        .loc["wind offshore"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["solar PV"]
                    .reset_coords(drop=True)
                    * (1 - real_share_pv_urban_vs_total_pv()),
                    (
                        power_density_res_elec_twemha()
                        .loc["solar PV"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                zidz(
                    potential_generation_res_elec_twh()
                    .loc["CSP"]
                    .reset_coords(drop=True),
                    (
                        power_density_res_elec_twemha()
                        .loc["CSP"]
                        .reset_coords(drop=True)
                        / twe_per_twh()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.step
@to_float
def share_land_res_land_compet_vs_arable():
    """
    Real Name: share land RES land compet vs arable
    Original Eqn: (Land compet required dedicated crops for biofuels+surface solar PV on land Mha+surface CSP Mha+surface hydro Mha)/Agricultural land 2015
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Land requirements for RES that compete with other land-uses (solar on land
        and biofuels on land competition) as a share of the global arable land.
    """
    return (
        land_compet_required_dedicated_crops_for_biofuels()
        + surface_solar_pv_on_land_mha()
        + surface_csp_mha()
        + surface_hydro_mha()
    ) / agricultural_land_2015()


@cache.step
@to_float
def surface_hydro_mha():
    """
    Real Name: surface hydro Mha
    Original Eqn: surface RES elec[hydro]
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Surface required by hydropower plants.
    """
    return surface_res_elec().loc["hydro"].reset_coords(drop=True)


@cache.step
@to_float
def surface_onshore_wind_mha():
    """
    Real Name: surface onshore wind Mha
    Original Eqn: surface RES elec[wind onshore]
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Surface required to produce "onshore wind TWe".
    """
    return surface_res_elec().loc["wind onshore"].reset_coords(drop=True)


@cache.step
@to_float
def surface_solar_pv_on_land_mha():
    """
    Real Name: surface solar PV on land Mha
    Original Eqn: surface RES elec[solar PV]
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Area required for solar PV plants on land.
    """
    return surface_res_elec().loc["solar PV"].reset_coords(drop=True)


@cache.step
@to_float
def surface_csp_mha():
    """
    Real Name: surface CSP Mha
    Original Eqn: surface RES elec[CSP]
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Area required for CSP.
    """
    return surface_res_elec().loc["CSP"].reset_coords(drop=True)


@cache.step
@to_float
def land_compet_biofuels_3gen_abandonned():
    """
    Real Name: Land compet biofuels 3gen abandonned
    Original Eqn: Land compet biofuels 3gen Mha*share biofuels overcapacity
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land previously dedicated to produce biofuels 3rd generation and abandoned
        due to reduced liquids demand.
    """
    return land_compet_biofuels_3gen_mha() * share_biofuels_overcapacity()


@cache.step
@to_float
def land_compet_biofuels_3gen_mha():
    """
    Real Name: Land compet biofuels 3gen Mha
    Original Eqn: INTEG ( Land shifted to biofuels 3gen-Land compet biofuels 3gen abandonned, 0)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land subject to competition dedicated to biofuels 3rd generation as a
        shift of surface previously dedicated to biofuels from the 2nd generation.
    """
    return _integ_land_compet_biofuels_3gen_mha()


@cache.step
@to_float
def potential_peavail_biofuels_land_marg_abandonned():
    """
    Real Name: Potential PEavail biofuels land marg abandonned
    Original Eqn: Potential PEavail biofuels land marg EJ*share biofuels overcapacity
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return potential_peavail_biofuels_land_marg_ej() * share_biofuels_overcapacity()


@cache.step
@to_float
def potential_pe_cellulosic_biofuel_abanndoned():
    """
    Real Name: Potential PE cellulosic biofuel abanndoned
    Original Eqn: Potential PE cellulosic biofuel EJ*share biofuels overcapacity
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return potential_pe_cellulosic_biofuel_ej() * share_biofuels_overcapacity()


@cache.step
@to_float
def potential_pe_cellulosic_biofuel_ej():
    """
    Real Name: Potential PE cellulosic biofuel EJ
    Original Eqn: INTEG ( new cellulosic biofuels-Potential PE cellulosic biofuel abanndoned, 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Potential annual primary energy biomass used for cellulosic biofuels.
    """
    return _integ_potential_pe_cellulosic_biofuel_ej()


@cache.step
@to_float
def land_compet_biofuels_2gen_abandonned():
    """
    Real Name: Land compet biofuels 2gen abandonned
    Original Eqn: Land compet biofuels 2gen Mha*share biofuels overcapacity
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land previously dedicated to produce biofuels 2nd generation and abandoned
        due to reduced liquids demand.
    """
    return land_compet_biofuels_2gen_mha() * share_biofuels_overcapacity()


@cache.step
@to_float
def land_compet_biofuels_2gen_mha():
    """
    Real Name: Land compet biofuels 2gen Mha
    Original Eqn: INTEG ( new biofuels 2gen land compet-Land compet biofuels 2gen abandonned-Land shifted to biofuels 3gen, initial value land compet biofuels 2gen Mha*Land productivity biofuels 2gen EJ MHa)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Total annual land dedicated to biofuel production in land competing with
        other uses.
    """
    return _integ_land_compet_biofuels_2gen_mha()


@cache.step
@to_float
def potential_peavail_biofuels_land_marg_ej():
    """
    Real Name: Potential PEavail biofuels land marg EJ
    Original Eqn: INTEG ( new biofuels land marg-Potential PEavail biofuels land marg abandonned, 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Potential total annual biofuel production in marginal lands.
    """
    return _integ_potential_peavail_biofuels_land_marg_ej()


@cache.step
@subs(["RES heat"], _subscript_dict)
def pes_res_for_heat_by_techn():
    """
    Real Name: PES RES for heat by techn
    Original Eqn: "PES DEM RES for heat-com by techn"[RES heat]+"PES DEM RES for heat-nc by techn"[RES heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Primary energy supply of heat from renewable energy sources.
    """
    return pes_dem_res_for_heatcom_by_techn() + pes_dem_res_for_heatnc_by_techn()


@cache.step
@subs(["RES heat"], _subscript_dict)
def pes_dem_res_for_heatnc_by_techn():
    """
    Real Name: "PES DEM RES for heat-nc by techn"
    Original Eqn:
      "FE real generation RES heat-nc EJ"[geot heat]
      "FE real generation RES heat-nc EJ"[solar heat]
      "FE real generation RES heat-nc EJ"[solid bioE heat]/Efficiency RES heat[solid bioE heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Primary energy supply of RES technologies for non-commercial heat (Direct
        Energy Method convention of accounting for primary energy).
    """
    return xrmerge(
        [
            rearrange(
                fe_real_generation_res_heatnc_ej()
                .loc["geot heat"]
                .reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                fe_real_generation_res_heatnc_ej()
                .loc["solar heat"]
                .reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                fe_real_generation_res_heatnc_ej()
                .loc["solid bioE heat"]
                .reset_coords(drop=True)
                / efficiency_res_heat().loc["solid bioE heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def pes_dem_res_for_heatcom_by_techn():
    """
    Real Name: "PES DEM RES for heat-com by techn"
    Original Eqn:
      "FE real generation RES heat-com EJ"[geot heat]
      "FE real generation RES heat-com EJ"[solar heat]
      "FE real generation RES heat-com EJ"[solid bioE heat]/Efficiency RES heat[solid bioE heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Primary energy supply of RES technologies for commercial heat (Direct
        Energy Method convention of accounting for primary energy).
    """
    return xrmerge(
        [
            rearrange(
                fe_real_generation_res_heatcom_ej()
                .loc["geot heat"]
                .reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                fe_real_generation_res_heatcom_ej()
                .loc["solar heat"]
                .reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                fe_real_generation_res_heatcom_ej()
                .loc["solid bioE heat"]
                .reset_coords(drop=True)
                / efficiency_res_heat().loc["solid bioE heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.run
@to_float
def p_share_installed_pv_urban_vs_tot_pv():
    """
    Real Name: P share installed PV urban vs tot PV
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F35')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    User defined share of installed PV in urban areas vs total PV.
    """
    return _ext_constant_p_share_installed_pv_urban_vs_tot_pv()


@cache.step
@to_float
def potential_elec_gen_from_solar_pv_on_land_twh():
    """
    Real Name: Potential elec gen from solar PV on land TWh
    Original Eqn: potential generation RES elec TWh[solar PV]-Potential elec gen from solar PV urban TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Potential electricity generation from solar PV on land.
    """
    return (
        potential_generation_res_elec_twh().loc["solar PV"].reset_coords(drop=True)
        - potential_elec_gen_from_solar_pv_urban_twh()
    )


@cache.step
@to_float
def potential_elec_gen_from_solar_pv_urban_twh():
    """
    Real Name: Potential elec gen from solar PV urban TWh
    Original Eqn: IF THEN ELSE(remaining potential solar PV urban>0, Potential elec gen from solar PV urban unconstrained TWh, aux1 0)
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Potential electricity generation from solar PV in urban areas.
    """
    return if_then_else(
        remaining_potential_solar_pv_urban() > 0,
        lambda: potential_elec_gen_from_solar_pv_urban_unconstrained_twh(),
        lambda: aux1_0(),
    )


@cache.step
@to_float
def potential_elec_gen_from_solar_pv_urban_unconstrained_twh():
    """
    Real Name: Potential elec gen from solar PV urban unconstrained TWh
    Original Eqn: potential generation RES elec TWh[solar PV]*desired share installed PV urban vs tot PV
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Unconstrained potential electricity generation from solar PV in urban
        areas.
    """
    return (
        potential_generation_res_elec_twh().loc["solar PV"].reset_coords(drop=True)
        * desired_share_installed_pv_urban_vs_tot_pv()
    )


@cache.step
@to_float
def share_solar_pv_vs_tot_solar_gen():
    """
    Real Name: share solar PV vs tot solar gen
    Original Eqn: ZIDZ( FE Elec gen from solar PV on land TWh , FE Elec generation from CSP TWh+FE Elec gen from solar PV on land TWh)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of solar PV vs CSP generation.
    """
    return zidz(
        fe_elec_gen_from_solar_pv_on_land_twh(),
        fe_elec_generation_from_csp_twh() + fe_elec_gen_from_solar_pv_on_land_twh(),
    )


@cache.step
@to_float
def real_share_pv_urban_vs_total_pv():
    """
    Real Name: real share PV urban vs total PV
    Original Eqn: MIN(1 , ZIDZ( Potential elec gen from solar PV urban TWh , FE Elec generation from solar PV TWh))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of PV in urban areas vs total (urban + on land power plants).
    """
    return np.minimum(
        1,
        zidz(
            potential_elec_gen_from_solar_pv_urban_twh(),
            fe_elec_generation_from_solar_pv_twh(),
        ),
    )


@cache.step
@to_float
def fe_elec_gen_from_solar_pv_on_land_twh():
    """
    Real Name: FE Elec gen from solar PV on land TWh
    Original Eqn: FE Elec generation from solar PV TWh*(1-real share PV urban vs total PV)
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation from solar PV on land.
    """
    return fe_elec_generation_from_solar_pv_twh() * (
        1 - real_share_pv_urban_vs_total_pv()
    )


@cache.step
@to_float
def historic_share_installed_pv_urban_vs_tot_pv():
    """
    Real Name: historic share installed PV urban vs tot PV
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H77')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'K40')        Historic share of installed PV in urban areas (mainly rooftop) vs total PV.
    """
    return _ext_data_historic_share_installed_pv_urban_vs_tot_pv(time())


@cache.step
@to_float
def desired_share_installed_pv_urban_vs_tot_pv():
    """
    Real Name: desired share installed PV urban vs tot PV
    Original Eqn: IF THEN ELSE(Time<2015, historic share installed PV urban vs tot PV, IF THEN ELSE(Time<Start year P growth RES elec, historic share installed PV urban vs tot PV, IF THEN ELSE(Time<Target year P growth RES elec, historic share installed PV urban vs tot PV+(P share installed PV urban vs tot PV-historic share installed PV urban vs tot PV)*(Time dmnl(Time)-Start year P growth RES elec)/(Target year P growth RES elec-Start year P growth RES elec), P share installed PV urban vs tot PV)))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Desired share of installed PV in urban areas vs total PV installed.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_share_installed_pv_urban_vs_tot_pv(),
        lambda: if_then_else(
            time() < start_year_p_growth_res_elec(),
            lambda: historic_share_installed_pv_urban_vs_tot_pv(),
            lambda: if_then_else(
                time() < target_year_p_growth_res_elec(),
                lambda: historic_share_installed_pv_urban_vs_tot_pv()
                + (
                    p_share_installed_pv_urban_vs_tot_pv()
                    - historic_share_installed_pv_urban_vs_tot_pv()
                )
                * (time_dmnl(time()) - start_year_p_growth_res_elec())
                / (target_year_p_growth_res_elec() - start_year_p_growth_res_elec()),
                lambda: p_share_installed_pv_urban_vs_tot_pv(),
            ),
        ),
    )


@cache.step
@to_float
def aux1_0():
    """
    Real Name: aux1 0
    Original Eqn: DELAY FIXED ( Potential elec gen from solar PV urban TWh, TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the energy losses due to climate change
        impacts in the year 2015.
    """
    return _delayfixed_aux1_0()


@cache.step
@subs(["RES elec"], _subscript_dict)
def max_res_elec_twe():
    """
    Real Name: max RES elec TWe
    Original Eqn:
      max hydro TWe
        .
        .
        .
      max CSP TWe
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Maximum level of RES for electricity per technology considering an optimal
        Cp. For most technologies this variable corresponds with the maximum
        potential, excepting for solids bioenergy and solar, where given to the
        competing uses (solids bioenergy for heat and electricity) and competing
        technologies (solar PV and CSP) this variable corresponds to the maximum
        level from each use and technology.
    """
    return xrmerge(
        [
            rearrange(max_hydro_twe(), ["RES elec"], {"RES elec": ["hydro"]}),
            rearrange(max_geotelec_twe(), ["RES elec"], {"RES elec": ["geot elec"]}),
            rearrange(max_bioe_twe(), ["RES elec"], {"RES elec": ["solid bioE elec"]}),
            rearrange(max_oceanic_twe(), ["RES elec"], {"RES elec": ["oceanic"]}),
            rearrange(
                max_onshore_wind_twe(), ["RES elec"], {"RES elec": ["wind onshore"]}
            ),
            rearrange(
                max_offshore_wind_twe(), ["RES elec"], {"RES elec": ["wind offshore"]}
            ),
            rearrange(max_tot_solar_pv_twe(), ["RES elec"], {"RES elec": ["solar PV"]}),
            rearrange(max_csp_twe(), ["RES elec"], {"RES elec": ["CSP"]}),
        ]
    )


@cache.step
@to_float
def max_tot_solar_pv_twe():
    """
    Real Name: max tot solar PV TWe
    Original Eqn: max solar PV on land TWe+max solar PV urban
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Techno-ecological potential of total solar PV (on land + urban)..
    """
    return max_solar_pv_on_land_twe() + max_solar_pv_urban()


@cache.step
@to_float
def power_density_csp():
    """
    Real Name: power density CSP
    Original Eqn: "power density initial RES elec TWe/Mha"[CSP]
    Units: TWe/MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Power density of CSP power plants.
    """
    return power_density_initial_res_elec_twemha().loc["CSP"].reset_coords(drop=True)


@cache.step
@to_float
def max_solar_pv_on_land_twe():
    """
    Real Name: max solar PV on land TWe
    Original Eqn: max solar PV on land MHa*"power density solar PV on land TWe/Mha"
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Techno-ecological potential of solar PV on land. This potential depends on
        the assumed land availability for solar PV power plants ("max solar PV on
        land MHa") and its power density (1 TWe = 8760 TWh in one year).
    """
    return max_solar_pv_on_land_mha() * power_density_solar_pv_on_land_twemha()


@cache.run
@to_float
def f1_pv_solar_in_target_year():
    """
    Real Name: f1 PV solar in target year
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G24')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Cell efficiency solar PV in target year.
    """
    return _ext_constant_f1_pv_solar_in_target_year()


@cache.step
@subs(["RES elec"], _subscript_dict)
def power_density_initial_res_elec_twemha():
    """
    Real Name: "power density initial RES elec TWe/Mha"
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Parameters', '6', 'G20')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'B16')
    Units: TWe/MHa
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RES elec']

    Input parameter: power density per RES technology for delivering
        electricity.
    """
    return xrmerge(
        [
            _ext_data_power_density_initial_res_elec_twemha(time()),
            _ext_constant_power_density_initial_res_elec_twemha(),
            xr.DataArray(0, {"RES elec": ["solid bioE elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["oceanic"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["solar PV"]}, ["RES elec"]),
        ]
    )


@cache.run
@to_float
def f2_pf_solar_pv():
    """
    Real Name: f2 PF solar PV
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'K37')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Average performance ratio over the plant's life cycle (f2).
    """
    return _ext_constant_f2_pf_solar_pv()


@cache.step
@subs(["RES elec"], _subscript_dict)
def power_density_res_elec_twemha():
    """
    Real Name: "power density RES elec TWe/Mha"
    Original Eqn:
      "power density initial RES elec TWe/Mha"[hydro]*(Cp RES elec[hydro]/"Cp-ini RES elec"[hydro])
        .
        .
        .
      "power density initial RES elec TWe/Mha"[CSP]*(Cp RES elec[CSP]/"Cp-ini RES elec"[CSP])
    Units: TWe/MHa
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Power density of renewable energy technologies for electricity generation.
    """
    return xrmerge(
        [
            rearrange(
                power_density_initial_res_elec_twemha()
                .loc["hydro"]
                .reset_coords(drop=True)
                * (
                    cp_res_elec().loc["hydro"].reset_coords(drop=True)
                    / cpini_res_elec().loc["hydro"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                power_density_initial_res_elec_twemha()
                .loc["geot elec"]
                .reset_coords(drop=True)
                * (
                    cp_res_elec().loc["geot elec"].reset_coords(drop=True)
                    / cpini_res_elec().loc["geot elec"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                power_density_initial_res_elec_twemha()
                .loc["solid bioE elec"]
                .reset_coords(drop=True)
                * (
                    cp_res_elec().loc["solid bioE elec"].reset_coords(drop=True)
                    / cpini_res_elec().loc["solid bioE elec"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                power_density_initial_res_elec_twemha()
                .loc["oceanic"]
                .reset_coords(drop=True)
                * (
                    cp_res_elec().loc["oceanic"].reset_coords(drop=True)
                    / cpini_res_elec().loc["oceanic"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                power_density_initial_res_elec_twemha()
                .loc["wind onshore"]
                .reset_coords(drop=True)
                * (
                    cp_res_elec().loc["wind onshore"].reset_coords(drop=True)
                    / cpini_res_elec().loc["wind onshore"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                power_density_initial_res_elec_twemha()
                .loc["wind offshore"]
                .reset_coords(drop=True)
                * (
                    cp_res_elec().loc["wind offshore"].reset_coords(drop=True)
                    / cpini_res_elec().loc["wind offshore"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                power_density_solar_pv_on_land_twemha()
                * (
                    cp_res_elec().loc["solar PV"].reset_coords(drop=True)
                    / cpini_res_elec().loc["solar PV"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                power_density_initial_res_elec_twemha()
                .loc["CSP"]
                .reset_coords(drop=True)
                * (
                    cp_res_elec().loc["CSP"].reset_coords(drop=True)
                    / cpini_res_elec().loc["CSP"].reset_coords(drop=True)
                ),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.run
@to_float
def f3_solar_pv_on_land():
    """
    Real Name: f3 solar PV on land
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'K38')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Land occupation ratio (f3).
    """
    return _ext_constant_f3_solar_pv_on_land()


@cache.run
@to_float
def av_solar_i():
    """
    Real Name: av solar I
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'K24')
    Units: We/m2
    Limits: (None, None)
    Type: constant
    Subs: None

    Average solar irradiance.
    """
    return _ext_constant_av_solar_i()


@cache.run
@to_float
def twhmha_per_wem2():
    """
    Real Name: "TWh/Mha per We/m2"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C19')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion factor.
    """
    return _ext_constant_twhmha_per_wem2()


@cache.step
@to_float
def f1_solar_pv():
    """
    Real Name: f1 solar PV
    Original Eqn: IF THEN ELSE(Time<2015, "f1-ini solar PV", IF THEN ELSE(Time<Start year P f1 solar PV, "f1-ini solar PV", IF THEN ELSE(Time<Target year f1 solar PV, "f1-ini solar PV"+(f1 PV solar in target year-"f1-ini solar PV")*(Time dmnl(Time)-Start year P f1 solar PV)/(Target year f1 solar PV-Start year P f1 solar PV), f1 PV solar in target year)))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Cell efficiency conversion of solar PV.
    """
    return if_then_else(
        time() < 2015,
        lambda: f1ini_solar_pv(),
        lambda: if_then_else(
            time() < start_year_p_f1_solar_pv(),
            lambda: f1ini_solar_pv(),
            lambda: if_then_else(
                time() < target_year_f1_solar_pv(),
                lambda: f1ini_solar_pv()
                + (f1_pv_solar_in_target_year() - f1ini_solar_pv())
                * (time_dmnl(time()) - start_year_p_f1_solar_pv())
                / (target_year_f1_solar_pv() - start_year_p_f1_solar_pv()),
                lambda: f1_pv_solar_in_target_year(),
            ),
        ),
    )


@cache.run
@to_float
def share_available_roof():
    """
    Real Name: share available roof
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G28')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share available roof over total urban land.
    """
    return _ext_constant_share_available_roof()


@cache.run
@to_float
def share_available_roof_for_rooftop_pv():
    """
    Real Name: share available roof for rooftop PV
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G29')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of available roof in urban land for rooftop PV.
    """
    return _ext_constant_share_available_roof_for_rooftop_pv()


@cache.run
@to_float
def start_year_p_f1_solar_pv():
    """
    Real Name: Start year P f1 solar PV
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G25')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of the variation of cell efficiency of solar PV.
    """
    return _ext_constant_start_year_p_f1_solar_pv()


@cache.step
@to_float
def max_solar_pv_urban():
    """
    Real Name: max solar PV urban
    Original Eqn: "power density solar PV in urban TWe/Mha"*Urban land
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Potential of solar PV in urban areas.
    """
    return power_density_solar_pv_in_urban_twemha() * urban_land()


@cache.run
@to_float
def target_year_f1_solar_pv():
    """
    Real Name: Target year f1 solar PV
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G26')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year of the variation of cell efficiency of solar PV.
    """
    return _ext_constant_target_year_f1_solar_pv()


@cache.run
@to_float
def f1ini_solar_pv():
    """
    Real Name: "f1-ini solar PV"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'K39')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Current cell efficiency conversion of solar PV.
    """
    return _ext_constant_f1ini_solar_pv()


@cache.step
@to_float
def pes_coal_for_heatnc_plants():
    """
    Real Name: "PES coal for Heat-nc plants"
    Original Eqn: (extraction coal EJ EU+imports EU coal from RoW EJ)*"share coal dem for Heat-nc"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of coal for non-commercial Heat plants.
    """
    return (
        extraction_coal_ej_eu() + imports_eu_coal_from_row_ej()
    ) * share_coal_dem_for_heatnc()


@cache.step
@to_float
def pe_losses_coal_for_elec_ej():
    """
    Real Name: PE losses coal for Elec EJ
    Original Eqn: (extraction coal EJ EU+imports EU coal from RoW EJ)*share coal dem for Elec*(1-efficiency coal for electricity)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    (Primary) Energy losses in the generation of electricity in coal power
        centrals.
    """
    return (
        (extraction_coal_ej_eu() + imports_eu_coal_from_row_ej())
        * share_coal_dem_for_elec()
        * (1 - efficiency_coal_for_electricity())
    )


@cache.step
@to_float
def abundance_coal_eu():
    """
    Real Name: abundance coal EU
    Original Eqn: IF THEN ELSE((extraction coal EJ EU+imports EU coal from RoW EJ)>PED coal EJ, 1, 1-ZIDZ( (PED coal EJ-extraction coal EJ EU -imports EU coal from RoW EJ), PED coal EJ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        (extraction_coal_ej_eu() + imports_eu_coal_from_row_ej()) > ped_coal_ej(),
        lambda: 1,
        lambda: 1
        - zidz(
            (ped_coal_ej() - extraction_coal_ej_eu() - imports_eu_coal_from_row_ej()),
            ped_coal_ej(),
        ),
    )


@cache.step
@to_float
def fe_elec_generation_from_coal_twh():
    """
    Real Name: FE Elec generation from coal TWh
    Original Eqn: (extraction coal EJ EU+imports EU coal from RoW EJ)*efficiency coal for electricity*share coal dem for Elec/EJ per TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy electricity generation from coal (TWh).
    """
    return (
        (extraction_coal_ej_eu() + imports_eu_coal_from_row_ej())
        * efficiency_coal_for_electricity()
        * share_coal_dem_for_elec()
        / ej_per_twh()
    )


@cache.step
@to_float
def total_fe_elec_consumption_twh():
    """
    Real Name: Total FE Elec consumption TWh
    Original Eqn: Total FE Elec generation TWh EU/(1+"share transm&distr elec losses")
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy electricity consumption (fossil fuels, nuclear, waste &
        renewables) (TWh) excluding distribution losses.
    """
    return total_fe_elec_generation_twh_eu() / (1 + share_transmdistr_elec_losses())


@cache.step
@to_float
def pes_coal_for_heatcom_plants():
    """
    Real Name: "PES coal for Heat-com plants"
    Original Eqn: (extraction coal EJ EU+imports EU coal from RoW EJ)*"share coal dem for Heat-com"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of coal for commercial Heat plants.
    """
    return (
        extraction_coal_ej_eu() + imports_eu_coal_from_row_ej()
    ) * share_coal_dem_for_heatcom()


@cache.step
@to_float
def ped_eu_coal_from_row():
    """
    Real Name: PED EU coal from RoW
    Original Eqn: MAX(0, PED coal EJ-extraction coal EJ EU)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(0, ped_coal_ej() - extraction_coal_ej_eu())


@cache.step
@to_float
def fe_nuclear_elec_generation_twh():
    """
    Real Name: FE nuclear Elec generation TWh
    Original Eqn: (extraction uranium EJ EU+extraction uranium RoW)*efficiency uranium for electricity/EJ per TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy electricity generation from uranium (TWh).
    """
    return (
        (extraction_uranium_ej_eu() + extraction_uranium_row())
        * efficiency_uranium_for_electricity()
        / ej_per_twh()
    )


@cache.step
@to_float
def effects_shortage_uranium():
    """
    Real Name: effects shortage uranium
    Original Eqn: IF THEN ELSE((extraction uranium EJ EU+extraction uranium RoW)=0, 0, IF THEN ELSE(abundance uranium>0.8, ((abundance uranium-0.8)*5)^2, 0))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The eventual scarcity of coal would likely constrain the development of
        CTL. The proposed relationship avoids an abrupt limitation by introducing
        a range (1;0.8) in the gas abundance that constrains the development of
        CTL.
    """
    return if_then_else(
        (extraction_uranium_ej_eu() + extraction_uranium_row()) == 0,
        lambda: 0,
        lambda: if_then_else(
            abundance_uranium() > 0.8,
            lambda: ((abundance_uranium() - 0.8) * 5) ** 2,
            lambda: 0,
        ),
    )


@cache.step
@to_float
def total_consumption_nre_ej():
    """
    Real Name: Total consumption NRE EJ
    Original Eqn: extraction coal EJ EU+imports EU coal from RoW EJ+real extraction conv gas EJ+real extraction conv oil EJ +real extraction unconv gas EJ+real extraction unconv oil EJ+extraction uranium EJ EU+"imports EU nat. gas from RoW EJ" +imports EU total oil from RoW EJ+extraction uranium RoW
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual total consumption of non-renewable energy resources.
    """
    return (
        extraction_coal_ej_eu()
        + imports_eu_coal_from_row_ej()
        + real_extraction_conv_gas_ej()
        + real_extraction_conv_oil_ej()
        + real_extraction_unconv_gas_ej()
        + real_extraction_unconv_oil_ej()
        + extraction_uranium_ej_eu()
        + imports_eu_nat_gas_from_row_ej()
        + imports_eu_total_oil_from_row_ej()
        + extraction_uranium_row()
    )


@cache.step
@to_float
def cc_impacts_feedback_shortage_coeff():
    """
    Real Name: CC impacts feedback shortage coeff
    Original Eqn: (1-"Share E-losses CC World")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    This coefficient adapts the real final energy by fuel to be used by
        economic sectors taking into account climate change impacts.
    """
    return 1 - share_elosses_cc_world()


@cache.step
@to_float
def pe_losses_uranium_for_elec_ej():
    """
    Real Name: PE losses uranium for Elec EJ
    Original Eqn: (extraction uranium EJ EU+extraction uranium RoW)*(1-efficiency uranium for electricity)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    (Primary) Energy losses in the generation of electricity in nuclear power
        centrals.
    """
    return (extraction_uranium_ej_eu() + extraction_uranium_row()) * (
        1 - efficiency_uranium_for_electricity()
    )


@cache.step
@to_float
def share_elosses_cc_world():
    """
    Real Name: "Share E-losses CC World"
    Original Eqn: IF THEN ELSE("activate ELF by scen?"=1,share E losses CC,0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        activate_elf_by_scen() == 1, lambda: share_e_losses_cc(time()), lambda: 0
    )


@cache.step
@to_float
def total_fe_heat_consumption_ej():
    """
    Real Name: Total FE Heat consumption EJ
    Original Eqn: Total FE Heat generation EJ/(1+Share heat distribution losses)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final heat consumption (fossil fuels, nuclear, waste & renewables)
        (EJ).
    """
    return total_fe_heat_generation_ej() / (1 + share_heat_distribution_losses())


@cache.step
@to_float
def imports_eu_uranium_from_row_ej():
    """
    Real Name: imports EU uranium from RoW EJ
    Original Eqn: PE demand uranium EU EJ-extraction uranium EJ EU
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pe_demand_uranium_eu_ej() - extraction_uranium_ej_eu()


@cache.step
@to_float
def abundance_uranium():
    """
    Real Name: abundance uranium
    Original Eqn: IF THEN ELSE(PE demand uranium EU EJ=0, 1, IF THEN ELSE((extraction uranium EJ EU+extraction uranium RoW)>PE demand uranium EU EJ , 1, 1-((PE demand uranium EU EJ-extraction uranium EJ EU -extraction uranium RoW)/PE demand uranium EU EJ)) )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        pe_demand_uranium_eu_ej() == 0,
        lambda: 1,
        lambda: if_then_else(
            (extraction_uranium_ej_eu() + extraction_uranium_row())
            > pe_demand_uranium_eu_ej(),
            lambda: 1,
            lambda: 1
            - (
                (
                    pe_demand_uranium_eu_ej()
                    - extraction_uranium_ej_eu()
                    - extraction_uranium_row()
                )
                / pe_demand_uranium_eu_ej()
            ),
        ),
    )


@cache.step
@to_float
def abundance_liquids():
    """
    Real Name: abundance liquids
    Original Eqn: IF THEN ELSE(PED liquids EJ<PES Liquids EJ, 1, 1- ZIDZ( PED liquids EJ -PES Liquids EJ, PED liquids EJ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        ped_liquids_ej() < pes_liquids_ej(),
        lambda: 1,
        lambda: 1 - zidz(ped_liquids_ej() - pes_liquids_ej(), ped_liquids_ej()),
    )


@cache.step
@to_float
def pe_losses_oil_for_elec_ej():
    """
    Real Name: PE losses oil for Elec EJ
    Original Eqn: (PES total oil EJ EU+imports EU total oil from RoW EJ)*share oil dem for Elec*(1-efficiency liquids for electricity)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy losses related with oil for electricity generation.
    """
    return (
        (pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej())
        * share_oil_dem_for_elec()
        * (1 - efficiency_liquids_for_electricity())
    )


@cache.step
@to_float
def pe_losses_uncon_gas_for_elec_ej():
    """
    Real Name: PE losses uncon gas for Elec EJ
    Original Eqn: (real extraction unconv gas EJ+imports EU unconv gas from RoW EJ)*"share nat. gas dem for Elec"*(1-efficiency gas for electricity)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    (Primary) Energy losses in the generation of electricity in gas power
        centrals.
    """
    return (
        (real_extraction_unconv_gas_ej() + imports_eu_unconv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * (1 - efficiency_gas_for_electricity())
    )


@cache.step
@to_float
def pe_losses_conv_gas_for_elec_ej():
    """
    Real Name: PE losses conv gas for Elec EJ
    Original Eqn: (real extraction conv gas EJ+imports EU conv gas from RoW EJ)*"share nat. gas dem for Elec"*(1-efficiency gas for electricity)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    (Primary) Energy losses in the generation of electricity in gas power
        centrals.
    """
    return (
        (real_extraction_conv_gas_ej() + imports_eu_conv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * (1 - efficiency_gas_for_electricity())
    )


@cache.step
@to_float
def abundance_gases():
    """
    Real Name: abundance gases
    Original Eqn: IF THEN ELSE(PED gases<(PES gases), 1, 1-ZIDZ( PED gases-PES gases , PED gases ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        ped_gases() < (pes_gases()),
        lambda: 1,
        lambda: 1 - zidz(ped_gases() - pes_gases(), ped_gases()),
    )


@cache.step
@to_float
def pes_oil_for_heatnc_plants():
    """
    Real Name: "PES oil for Heat-nc plants"
    Original Eqn: (PES Liquids EJ)*"share liquids dem for Heat-nc"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of natural oil for non-commercial Heat plants.
    """
    return (pes_liquids_ej()) * share_liquids_dem_for_heatnc()


@cache.step
@to_float
def share_liquids_dem_for_heatnc():
    """
    Real Name: "share liquids dem for Heat-nc"
    Original Eqn: ZIDZ("PED liquids Heat-nc", PES Liquids EJ)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of liquids demand for non-commercial Heat plants in relation to the
        total demand of liquids.
    """
    return zidz(ped_liquids_heatnc(), pes_liquids_ej())


@cache.step
@to_float
def check_liquids():
    """
    Real Name: check liquids
    Original Eqn: ZIDZ( (PED liquids EJ-PES Liquids EJ) , PES Liquids EJ )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    If=0, demand=supply. If>0, demand>supply (liquids scarcity). If<0,
        demand<supply (oversupply). Variable to avoid energy oversupply caused by
        exogenously driven policies.
    """
    return zidz((ped_liquids_ej() - pes_liquids_ej()), pes_liquids_ej())


@cache.step
@to_float
def share_gases_dem_for_heatnc():
    """
    Real Name: "share gases dem for Heat-nc"
    Original Eqn: ZIDZ("PED gas Heat-nc", (PES gases-"PED nat. gas for GTL EJ"))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of natural gas demand for non-commercial Heat plants in relation to
        the demand of natural fossil gas.
    """
    return zidz(ped_gas_heatnc(), (pes_gases() - ped_nat_gas_for_gtl_ej()))


@cache.step
@to_float
def check_gases():
    """
    Real Name: check gases
    Original Eqn: ZIDZ( PED gases-PES gases , PES gases)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variable to avoid energy oversupply caused by exogenously driven policies.
    """
    return zidz(ped_gases() - pes_gases(), pes_gases())


@cache.step
@to_float
def pes_nat_gas_for_heatnc_plants():
    """
    Real Name: "PES nat. gas for Heat-nc plants"
    Original Eqn: (PES gases-"PED nat. gas for GTL EJ")*"share gases dem for Heat-nc"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of natural gas for non-commercial Heat plants.
    """
    return (pes_gases() - ped_nat_gas_for_gtl_ej()) * share_gases_dem_for_heatnc()


@cache.step
@to_float
def fe_elec_generation_from_unconv_gas_twh():
    """
    Real Name: FE Elec generation from unconv gas TWh
    Original Eqn: (real extraction unconv gas EJ+imports EU unconv gas from RoW EJ)*"share nat. gas dem for Elec"*efficiency gas for electricity/EJ per TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy electricity generation from unconventional gas (TWh).
    """
    return (
        (real_extraction_unconv_gas_ej() + imports_eu_unconv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * efficiency_gas_for_electricity()
        / ej_per_twh()
    )


@cache.step
@to_float
def fe_elec_generation_from_conv_gas_twh():
    """
    Real Name: FE Elec generation from conv gas TWh
    Original Eqn: (real extraction conv gas EJ+imports EU conv gas from RoW EJ)*"share nat. gas dem for Elec"*efficiency gas for electricity /EJ per TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy electricity generation from conventional gas (TWh).
    """
    return (
        (real_extraction_conv_gas_ej() + imports_eu_conv_gas_from_row_ej())
        * share_nat_gas_dem_for_elec()
        * efficiency_gas_for_electricity()
        / ej_per_twh()
    )


@cache.step
@to_float
def real_fe_consumption_gases_ej():
    """
    Real Name: real FE consumption gases EJ
    Original Eqn: (PES gases-"PED nat. gas for GTL EJ"-Other gases required)*share gases for final energy
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Real final energy consumption by gases after accounting for energy
        availability.
    """
    return (
        pes_gases() - ped_nat_gas_for_gtl_ej() - other_gases_required()
    ) * share_gases_for_final_energy()


@cache.step
@to_float
def pes_nat_gas_for_heatcom_plants():
    """
    Real Name: "PES nat. gas for Heat-com plants"
    Original Eqn: (PES nat gas EU+"imports EU nat. gas from RoW EJ")*"share nat. gas dem for Heat-com"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of fossil natural gas for commercial Heat plants.
    """
    return (
        pes_nat_gas_eu() + imports_eu_nat_gas_from_row_ej()
    ) * share_nat_gas_dem_for_heatcom()


@cache.step
@to_float
def fe_elec_generation_from_total_oil_twh():
    """
    Real Name: FE Elec generation from total oil TWh
    Original Eqn: (PES total oil EJ EU+imports EU total oil from RoW EJ)*share oil dem for Elec*efficiency liquids for electricity/EJ per TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation (final energy) from total oil.
    """
    return (
        (pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej())
        * share_oil_dem_for_elec()
        * efficiency_liquids_for_electricity()
        / ej_per_twh()
    )


@cache.step
@to_float
def real_fe_consumption_liquids_ej():
    """
    Real Name: real FE consumption liquids EJ
    Original Eqn: (PES Liquids EJ-Other liquids required EJ)*share liquids for final energy
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Real final energy consumption by liquids after accounting for energy
        availability.
    """
    return (
        pes_liquids_ej() - other_liquids_required_ej()
    ) * share_liquids_for_final_energy()


@cache.step
@to_float
def pes_oil_for_heatcom_plants():
    """
    Real Name: "PES oil for Heat-com plants"
    Original Eqn: (PES total oil EJ EU+imports EU total oil from RoW EJ)*"share oil dem for Heat-com"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of oil for commercial Heat plants.
    """
    return (
        pes_total_oil_ej_eu() + imports_eu_total_oil_from_row_ej()
    ) * share_oil_dem_for_heatcom()


@cache.step
@to_float
def ped_eu_total_oil_from_row():
    """
    Real Name: PED EU total oil from RoW
    Original Eqn: MAX(0, PED total oil EJ-PES total oil EJ EU)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(0, ped_total_oil_ej() - pes_total_oil_ej_eu())


@cache.step
@to_float
def rurr_tot_agg_oil():
    """
    Real Name: RURR tot agg oil
    Original Eqn: INTEG ( -extraction tot agg oil EJ-Flow tot agg oil left in ground, IF THEN ELSE("separate conv and unconv oil?"=0,URR tot agg oil-cumulated tot agg extraction to 1995,0))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR total aggregated oil.
    """
    return _integ_rurr_tot_agg_oil()


@cache.step
@to_float
def rurr_tot_agg_gas():
    """
    Real Name: RURR tot agg gas
    Original Eqn: INTEG ( -extraction tot agg gas EJ-Flow tot agg gas left in ground, IF THEN ELSE("separate conv and unconv gas?"=0,URR tot agg gas-cumulated tot agg gas extraction to 1995,0))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR total aggregated natural gas.
    """
    return _integ_rurr_tot_agg_gas()


@cache.step
@to_float
def percent_share_blue_water_use_vs_ar():
    """
    Real Name: Percent share blue water use vs AR
    Original Eqn: share blue water use vs AR*100
    Units: percent
    Limits: (None, None)
    Type: component
    Subs: None

    Percent of the share of blue water used vs accessible runoff water.
    """
    return share_blue_water_use_vs_ar() * 100


@cache.run
@to_float
def minimum_eroi_brandt_2017():
    """
    Real Name: "minimum EROI (Brandt, 2017)"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Result comparison', 'C52')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    "At levels of net energy return ≤ 5 J/J, the fraction of productive outputs free
        to use in discretionary purposes declines rapidly,        resulting in the emergence of an effective "minimum EROI" below which
        prosperity is burdened by excessive direct and indirect requirements of
        the energy sector." Source: Brandt (2017).
    """
    return _ext_constant_minimum_eroi_brandt_2017()


@cache.run
@to_float
def minimum_eroi_hall_et_al_2009():
    """
    Real Name: "minimum EROI (Hall et al, 2009)"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Result comparison', 'C53')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Minimum EROI.
    """
    return _ext_constant_minimum_eroi_hall_et_al_2009()


@cache.step
@to_float
def physical_energy_intensity_tpes_vs_final():
    """
    Real Name: Physical energy intensity TPES vs final
    Original Eqn: 1/share total final energy vs TPES
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Physical energy intensity
    """
    return 1 / share_total_final_energy_vs_tpes()


@cache.step
@to_float
def physical_energy_intensity_tpes_vs_net():
    """
    Real Name: Physical energy intensity TPES vs net
    Original Eqn: 1/share total net energy vs TPES
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Physical energy intensity
    """
    return 1 / share_total_net_energy_vs_tpes()


@cache.step
@subs(["final sources"], _subscript_dict)
def required_final_energy_transport_iot_sectors():
    """
    Real Name: Required final energy transport IOT sectors
    Original Eqn: Required final energy air transport[final sources]+Required final energy inland transport[final sources]+Required final energy other transport[final sources]+Required final energy water transport[final sources]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']


    """
    return (
        required_final_energy_air_transport()
        + required_final_energy_inland_transport()
        + required_final_energy_other_transport()
        + required_final_energy_water_transport()
    )


@cache.step
@to_float
def available_max_pe_solid_bioe_for_elec_ej():
    """
    Real Name: available max PE solid bioE for elec EJ
    Original Eqn: MAX(0, "Total PE solid bioE potential heat+elec EJ"-PES RES for heat by techn[solid bioE heat])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum available (primary energy) solid bioenergy for electricity.
    """
    return np.maximum(
        0,
        total_pe_solid_bioe_potential_heatelec_ej()
        - pes_res_for_heat_by_techn().loc["solid bioE heat"].reset_coords(drop=True),
    )


@cache.step
@to_float
def remaining_potential_tot_res_heat():
    """
    Real Name: remaining potential tot RES heat
    Original Eqn: IF THEN ELSE(max PE potential tot RES heat EJ > PES tot RES for heat, ZIDZ( max PE potential tot RES heat EJ -PES tot RES for heat , max PE potential tot RES heat EJ ), 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_pe_potential_tot_res_heat_ej() > pes_tot_res_for_heat(),
        lambda: zidz(
            max_pe_potential_tot_res_heat_ej() - pes_tot_res_for_heat(),
            max_pe_potential_tot_res_heat_ej(),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def pes_tot_res_for_heat():
    """
    Real Name: PES tot RES for heat
    Original Eqn: "PES tot biogas for heat-com"+SUM(PES RES for heat by techn[RES heat!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy of RES for heat (all technologies: biogas, solids
        bioenergy, solar and geothermal).
    """
    return pes_tot_biogas_for_heatcom() + sum(
        pes_res_for_heat_by_techn(), dim=("RES heat",)
    )


@cache.step
@to_float
def pes_solids_bioe_ej():
    """
    Real Name: PES solids bioE EJ
    Original Eqn: Losses in charcoal plants EJ+PE bioE for Elec generation EJ+PE traditional biomass EJ delayed 1yr +modern solids BioE demand households+PES RES for heat by techn[solid bioE heat]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total biomass supply.It aggregates supply for electricity, heat and solids
        (both modern and traditional biomass).
    """
    return (
        losses_in_charcoal_plants_ej()
        + pe_bioe_for_elec_generation_ej()
        + pe_traditional_biomass_ej_delayed_1yr()
        + modern_solids_bioe_demand_households()
        + pes_res_for_heat_by_techn().loc["solid bioE heat"].reset_coords(drop=True)
    )


@cache.step
@to_float
def max_tot_fe_potential_res_for_heat():
    """
    Real Name: Max tot FE potential RES for heat
    Original Eqn: SUM(Max FE potential RES for heat[RES heat!])+max FE potential biogas for heat
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential (final energy) for producing heat from renewables.
    """
    return (
        sum(max_fe_potential_res_for_heat(), dim=("RES heat",))
        + max_fe_potential_biogas_for_heat()
    )


@cache.step
@to_float
def max_pe_potential_solid_bioe_for_heat_ej():
    """
    Real Name: max PE potential solid bioE for heat EJ
    Original Eqn: "Total PE solid bioE potential heat+elec EJ"*(1-share solids bioE for elec vs heat)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum potential (primary energy) of solid bioenergy for generating heat.
    """
    return total_pe_solid_bioe_potential_heatelec_ej() * (
        1 - share_solids_bioe_for_elec_vs_heat()
    )


@cache.step
@to_float
def max_fe_potential_solid_bioe_for_elec_twe():
    """
    Real Name: max FE potential solid bioE for elec TWe
    Original Eqn: max PE potential solid bioE for elec EJ*efficiency conversion bioE to Elec*TWe per TWh/EJ per TWh
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Available potential (final energy) solid bioenergy for electricity.
    """
    return (
        max_pe_potential_solid_bioe_for_elec_ej()
        * efficiency_conversion_bioe_to_elec()
        * twe_per_twh()
        / ej_per_twh()
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def max_pe_potential_res_for_heat():
    """
    Real Name: Max PE potential RES for heat
    Original Eqn:
      Max PE RES for heat[solar heat]
      Max PE RES for heat[geot heat]
      max PE potential solid bioE for heat EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']


    """
    return xrmerge(
        [
            rearrange(
                max_pe_res_for_heat().loc["solar heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                max_pe_res_for_heat().loc["geot heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                max_pe_potential_solid_bioe_for_heat_ej(),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.step
@to_float
def max_pe_potential_solid_bioe_for_elec_ej():
    """
    Real Name: max PE potential solid bioE for elec EJ
    Original Eqn: "Total PE solid bioE potential heat+elec EJ"*share solids bioE for elec vs heat
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum potential (primary energy) of solid bioenergy for generating
        electricity.
    """
    return (
        total_pe_solid_bioe_potential_heatelec_ej()
        * share_solids_bioe_for_elec_vs_heat()
    )


@cache.step
@to_float
def max_pe_potential_tot_res_heat_ej():
    """
    Real Name: max PE potential tot RES heat EJ
    Original Eqn: max PE potential biogas for heat+SUM(Max PE potential RES for heat[RES heat!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum total primary energy potential of RES for heat.
    """
    return max_pe_potential_biogas_for_heat() + sum(
        max_pe_potential_res_for_heat(), dim=("RES heat",)
    )


@cache.step
@to_float
def share_solids_bioe_for_elec_vs_heat():
    """
    Real Name: share solids bioE for elec vs heat
    Original Eqn: ZIDZ( PE bioE for Elec generation EJ , (PE bioE for Elec generation EJ+PES RES for heat by techn[solid bioE heat]) )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of solids bioenergy for electricity vs electricity+heat.
    """
    return zidz(
        pe_bioe_for_elec_generation_ej(),
        (
            pe_bioe_for_elec_generation_ej()
            + pes_res_for_heat_by_techn().loc["solid bioE heat"].reset_coords(drop=True)
        ),
    )


@cache.step
@to_float
def solid_bioe_emissions_relevant_ej():
    """
    Real Name: solid bioE emissions relevant EJ
    Original Eqn: PE bioE for Elec generation EJ+PES RES for heat by techn[solid bioE heat]+modern solids BioE demand households
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Solids bioenergy primary energy supply for estimating the CO2 emissions
        (we assume the CO2 emissions from traditional biomass are already included
        in land-use change emissions).
    """
    return (
        pe_bioe_for_elec_generation_ej()
        + pes_res_for_heat_by_techn().loc["solid bioE heat"].reset_coords(drop=True)
        + modern_solids_bioe_demand_households()
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def max_fe_potential_res_for_heat():
    """
    Real Name: Max FE potential RES for heat
    Original Eqn:
      Max FE RES for heat[solar heat]
      Max FE RES for heat[geot heat]
      max PE potential solid bioE for heat EJ*Efficiency RES heat[solid bioE heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']


    """
    return xrmerge(
        [
            rearrange(
                max_fe_res_for_heat().loc["solar heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                max_fe_res_for_heat().loc["geot heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                max_pe_potential_solid_bioe_for_heat_ej()
                * efficiency_res_heat().loc["solid bioE heat"].reset_coords(drop=True),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.step
@to_float
def pe_supply_from_res_nonelec_without_trad_bioe_ej():
    """
    Real Name: "PE supply from RES non-elec without trad bioE EJ"
    Original Eqn: PES tot RES for heat+FES total biofuels production EJ+PES biogas for TFC
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy (non electric) supply from RES without traditional biomass.
    """
    return (
        pes_tot_res_for_heat()
        + fes_total_biofuels_production_ej()
        + pes_biogas_for_tfc()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def max_potential_res_elec_twh():
    """
    Real Name: max potential RES elec TWh
    Original Eqn:
      max RES elec TWe[hydro]/TWe per TWh
        .
        .
        .
      max potential CSP TWe/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Maximum potential of RES for electricity per technology considering an
        optimal Cp.
    """
    return xrmerge(
        [
            rearrange(
                max_res_elec_twe().loc["hydro"].reset_coords(drop=True) / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                max_res_elec_twe().loc["geot elec"].reset_coords(drop=True)
                / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                max_fe_potential_solid_bioe_for_elec_twe() / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                max_res_elec_twe().loc["oceanic"].reset_coords(drop=True)
                / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                max_res_elec_twe().loc["wind onshore"].reset_coords(drop=True)
                / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                max_res_elec_twe().loc["wind offshore"].reset_coords(drop=True)
                / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                max_potential_solar_pv_twe() / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                max_potential_csp_twe() / twe_per_twh(),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.step
@to_float
def max_potential_tot_res_elec_twh():
    """
    Real Name: max potential tot RES elec TWh
    Original Eqn: SUM(max potential RES elec TWh[RES elec!])+max potential PHS TWe/TWe per TWh+max PE potential biogas for elec/EJ per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum total potential of RES for electricity considering an optimal Cp.
    """
    return (
        sum(max_potential_res_elec_twh(), dim=("RES elec",))
        + max_potential_phs_twe() / twe_per_twh()
        + max_pe_potential_biogas_for_elec() / ej_per_twh()
    )


@cache.step
@to_float
def efficiency_biogas_for_heat():
    """
    Real Name: efficiency biogas for heat
    Original Eqn: "FES heat-com from biogas EJ"/"PES tot biogas for heat-com"
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Efficiency of biogas for heat (from heat plants and CHP).
    """
    return fes_heatcom_from_biogas_ej() / pes_tot_biogas_for_heatcom()


@cache.step
@to_float
def max_biogas_for_tfc():
    """
    Real Name: max biogas for TFC
    Original Eqn: max PE biogas EJ*share PES biogas TFC
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum potential of biogas used directly as total final consumption.
    """
    return max_pe_biogas_ej() * share_pes_biogas_tfc()


@cache.step
@to_float
def max_pe_potential_biogas_for_elec():
    """
    Real Name: max PE potential biogas for elec
    Original Eqn: max PE biogas EJ*share PES biogas for elec
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum potential (primary energy) of biogas for electricity.
    """
    return max_pe_biogas_ej() * share_pes_biogas_for_elec()


@cache.step
@subs(["RES elec"], _subscript_dict)
def remaining_potential_res_elec():
    """
    Real Name: remaining potential RES elec
    Original Eqn: IF THEN ELSE(max potential RES elec TWh[RES elec] > real generation RES elec TWh[RES elec], (max potential RES elec TWh[RES elec]-real generation RES elec TWh[RES elec])/max potential RES elec TWh[RES elec], 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Remaining potential of renewables for electricity by technology.
    """
    return if_then_else(
        max_potential_res_elec_twh() > real_generation_res_elec_twh(),
        lambda: (max_potential_res_elec_twh() - real_generation_res_elec_twh())
        / max_potential_res_elec_twh(),
        lambda: 0,
    )


@cache.step
@to_float
def max_fe_potential_biogas_for_heat():
    """
    Real Name: max FE potential biogas for heat
    Original Eqn: max PE biogas EJ*share PES biogas for heat*efficiency biogas for heat
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential (final energy) of biogas for heat.
    """
    return (
        max_pe_biogas_ej() * share_pes_biogas_for_heat() * efficiency_biogas_for_heat()
    )


@cache.step
@to_float
def tfec_per_capita_before_heat_dem_corr():
    """
    Real Name: TFEC per capita before heat dem corr
    Original Eqn: ZIDZ( Real TFEC before heat dem corr*GJ per EJ , Population )
    Units: GJ/person
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(real_tfec_before_heat_dem_corr() * gj_per_ej(), population())


@cache.step
@to_float
def share_total_net_energy_vs_tpes():
    """
    Real Name: share total net energy vs TPES
    Original Eqn: ZIDZ( Net TFEC , (TPES EJ-"Total real non-energy use consumption EJ") )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of total net energy vs total primary energy supply (without
        accounting for non-energy uses).
    """
    return zidz(net_tfec(), (tpes_ej() - total_real_nonenergy_use_consumption_ej()))


@cache.step
@to_float
def net_tfec():
    """
    Real Name: Net TFEC
    Original Eqn: Real TFEC-FEIst system
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Net total final energy consumption (final energy minus energy invested to
        produce energy).
    """
    return real_tfec() - feist_system()


@cache.step
@to_float
def real_tfec_before_heat_dem_corr():
    """
    Real Name: Real TFEC before heat dem corr
    Original Eqn: SUM(Real FEC before heat dem corr[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Real total final energy consumption (not including non-energy uses) before
        heat demand correction
    """
    return sum(
        rearrange(real_fec_before_heat_dem_corr(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.step
@to_float
def dynamic_threshold_high_development():
    """
    Real Name: Dynamic threshold 'high development'
    Original Eqn: Threshold FEC 'high development'*(1+Cumulative TFEC intensity change from 2009)*share TFEC before heat dem corr vs real TFEC
    Units: GJ/(Year*person)
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        threshold_fec_high_development()
        * (1 + cumulative_tfec_intensity_change_from_2009())
        * share_tfec_before_heat_dem_corr_vs_real_tfec()
    )


@cache.step
@to_float
def dynamic_low_range_fec_good_standard_of_living():
    """
    Real Name: Dynamic low range FEC good standard of living
    Original Eqn: Low range FEC good standard of living*(1+Cumulative TFEC intensity change from 2009)*share TFEC before heat dem corr vs real TFEC
    Units: GJ/(Year*person)
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        low_range_fec_good_standard_of_living()
        * (1 + cumulative_tfec_intensity_change_from_2009())
        * share_tfec_before_heat_dem_corr_vs_real_tfec()
    )


@cache.step
@to_float
def dynamic_high_range_fec_good_standard_of_living():
    """
    Real Name: Dynamic high range FEC good standard of living
    Original Eqn: High range FEC good standard of living*(1+Cumulative TFEC intensity change from 2009)*share TFEC before heat dem corr vs real TFEC
    Units: GJ/(Year*person)
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        high_range_fec_good_standard_of_living()
        * (1 + cumulative_tfec_intensity_change_from_2009())
        * share_tfec_before_heat_dem_corr_vs_real_tfec()
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def real_fec_before_heat_dem_corr():
    """
    Real Name: Real FEC before heat dem corr
    Original Eqn:
      real FE consumption by fuel[electricity]
      real FE consumption by fuel[heat]/(1+"ratio FED for heat-nc vs FED for heat-com")
      real FE consumption by fuel[liquids]/(1-share FEH over FED by final fuel[liquids])
      real FE consumption by fuel[gases]/(1-share FEH over FED by final fuel[gases])
      real FE consumption by fuel[solids]/(1-share FEH over FED by final fuel[solids])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Real energy consumption by final fuel before heat demand correction.
    """
    return xrmerge(
        [
            rearrange(
                real_fe_consumption_by_fuel()
                .loc["electricity"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["heat"].reset_coords(drop=True)
                / (1 + ratio_fed_for_heatnc_vs_fed_for_heatcom()),
                ["final sources1"],
                {"final sources1": ["heat"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["liquids"].reset_coords(drop=True)
                / (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["liquids"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["gases"].reset_coords(drop=True)
                / (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["gases"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["solids"].reset_coords(drop=True)
                / (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["solids"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
        ]
    )


@cache.step
@to_float
def net_tfec_per_capita():
    """
    Real Name: Net TFEC per capita
    Original Eqn: ZIDZ( Net TFEC*GJ per EJ , Population )
    Units: GJ/person
    Limits: (None, None)
    Type: component
    Subs: None

    Net total final energy consumption per capita.
    """
    return zidz(net_tfec() * gj_per_ej(), population())


@cache.step
@to_float
def share_tfec_before_heat_dem_corr_vs_real_tfec():
    """
    Real Name: share TFEC before heat dem corr vs real TFEC
    Original Eqn: Real TFEC/Real TFEC before heat dem corr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of total final energy consumption before heat demand correction vs.
        real TFEC as estimated in MEDEAS correcting for heat demand for
        non-commercial sectors.
    """
    return real_tfec() / real_tfec_before_heat_dem_corr()


@cache.step
@to_float
def share_tfed_before_heat_dem_corr_vs_real_tfec():
    """
    Real Name: share TFED before heat dem corr vs real TFEC
    Original Eqn: Required TFED/Required TFED before heat dem corr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of total final energy demand before heat demand correction vs. real
        TFEC as estimated in MEDEAS correcting for heat demand for non-commercial
        sectors.
    """
    return required_tfed() / required_tfed_before_heat_dem_corr()


@cache.step
@to_float
def bioe_potential_npp_marginal_lands():
    """
    Real Name: BioE potential NPP marginal lands
    Original Eqn: Potential marginal lands MHa*Land productivity biofuels marg EJ MHa/Conv efficiency from NPP to biofuels
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential in marginal lands, i.e. witout competition with current uses.
        (Field et al., 2008) find that 27 EJ of NPP can be extracted from 386 Mha
        of marginal lands. We assume that all the production from marginal lands
        is used for producing liquids.
    """
    return (
        potential_marginal_lands_mha()
        * land_productivity_biofuels_marg_ej_mha()
        / conv_efficiency_from_npp_to_biofuels()
    )


@cache.step
@to_float
def co2_soillucf_emissions():
    """
    Real Name: "CO2 soil&LUCF emissions"
    Original Eqn: CO2 LULCF
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions associated to soil managemente and land-use change uses and
        forestry.
    """
    return co2_lulcf()


@cache.step
@to_float
def co2_lulcf():
    """
    Real Name: CO2 LULCF
    Original Eqn: Past trends CO2 LUCF
    Units: GtCO2
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions from Land-Use Change and Forestry.
    """
    return past_trends_co2_lucf()


@cache.step
@to_float
def max_peavail_potential_biofuels_marginal_lands():
    """
    Real Name: Max PEavail potential biofuels marginal lands
    Original Eqn: BioE potential NPP marginal lands*Conv efficiency from NPP to biofuels
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Annual biofuels potential (primary energy) available from marginal lands
    """
    return bioe_potential_npp_marginal_lands() * conv_efficiency_from_npp_to_biofuels()


@cache.run
@to_float
def potential_marginal_lands_mha():
    """
    Real Name: Potential marginal lands MHa
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C43')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Global marginal lands as estimated by Field et al (2008).
    """
    return _ext_constant_potential_marginal_lands_mha()


@cache.step
@to_float
def land_shifted_to_biofuels_3gen():
    """
    Real Name: Land shifted to biofuels 3gen
    Original Eqn: IF THEN ELSE(Time<start year 3gen cellulosic biofuels,0, IF THEN ELSE(Time<(start year 3gen cellulosic biofuels+5), Annual shift from 2gen to 3gen*Land compet biofuels 2gen Mha*Biofuels 3gen land compet available*land compet 2gen vs total land compet, P biofuels 3gen land compet*Land compet biofuels 3gen Mha*Biofuels 3gen land compet available*land compet 2gen vs total land compet))
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New land dedicated to biofuels 3rd generation in land competing with other uses as a
        shift of surface previously dedicated to biofuels from the 2nd generation.
        We assume that no new land starts directly to produce biofuels 3rd
        generation biofuels.        IF THEN ELSE(Time<start year 3gen,0,        IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?"*Land compet
        biofuels 3gen Mha,        IF THEN ELSE(Time<(start year 3gen+5), Annual shift from 2gen to 3gen*Land
        compet biofuels 2gen Mha*Biofuels 3gen land compet available*land compet
        2gen vs total land compet, P biofuels 3gen*Land compet biofuels 3gen
        Mha*Biofuels 3gen land compet available*land compet 2gen vs total land
        compet)))
    """
    return if_then_else(
        time() < start_year_3gen_cellulosic_biofuels(),
        lambda: 0,
        lambda: if_then_else(
            time() < (start_year_3gen_cellulosic_biofuels() + 5),
            lambda: annual_shift_from_2gen_to_3gen()
            * land_compet_biofuels_2gen_mha()
            * biofuels_3gen_land_compet_available()
            * land_compet_2gen_vs_total_land_compet(),
            lambda: p_biofuels_3gen_land_compet()
            * land_compet_biofuels_3gen_mha()
            * biofuels_3gen_land_compet_available()
            * land_compet_2gen_vs_total_land_compet(),
        ),
    )


@cache.step
@to_float
def adapt_growth_biogas():
    """
    Real Name: adapt growth biogas
    Original Eqn: IF THEN ELSE(Time<2015, past biogas growth, IF THEN ELSE(Time<2020, past biogas growth+(P biogas-past biogas growth )*(Time dmnl(Time)-2015)/5, P biogas))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual growth per for biogas. Modeling of a soft transition from current
        historic annual growth to reach the policy-objective 5 years later.
    """
    return if_then_else(
        time() < 2015,
        lambda: past_biogas_growth(),
        lambda: if_then_else(
            time() < 2020,
            lambda: past_biogas_growth()
            + (p_biogas() - past_biogas_growth()) * (time_dmnl(time()) - 2015) / 5,
            lambda: p_biogas(),
        ),
    )


@cache.step
@to_float
def available_max_pe_solid_bioe_for_heat_ej():
    """
    Real Name: available max PE solid bioE for heat EJ
    Original Eqn: MAX(0, "Total PE solid bioE potential heat+elec EJ"-PE bioE for Elec generation EJ)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum available (primary energy) solid bioenergy for heat.
    """
    return np.maximum(
        0,
        total_pe_solid_bioe_potential_heatelec_ej() - pe_bioe_for_elec_generation_ej(),
    )


@cache.step
@to_float
def total_pe_solid_bioe_potential_heatelec_ej():
    """
    Real Name: "Total PE solid bioE potential heat+elec EJ"
    Original Eqn: MAX(Total PE solid bioE potential EJ-modern solids BioE demand households, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(
        total_pe_solid_bioe_potential_ej() - modern_solids_bioe_demand_households(), 0
    )


@cache.step
@to_float
def fes_total_biofuels_production_ej():
    """
    Real Name: FES total biofuels production EJ
    Original Eqn: PEavail tot biofuels land compet EJ+PEavail biofuels land marg EJ+PEavail cellulosic biofuel EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply total biofuels liquids production. Equivalent to "FES
        total biofuels production EJ 2" but obtained disaggregately.
    """
    return (
        peavail_tot_biofuels_land_compet_ej()
        + peavail_biofuels_land_marg_ej()
        + peavail_cellulosic_biofuel_ej()
    )


@cache.step
@to_float
def remaining_potential_biofuels_land_compet():
    """
    Real Name: remaining potential biofuels land compet
    Original Eqn: IF THEN ELSE(Max PEavail potential biofuels land compet > PEavail tot biofuels land compet EJ, (Max PEavail potential biofuels land compet-PEavail tot biofuels land compet EJ)/Max PEavail potential biofuels land compet, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_peavail_potential_biofuels_land_compet()
        > peavail_tot_biofuels_land_compet_ej(),
        lambda: (
            max_peavail_potential_biofuels_land_compet()
            - peavail_tot_biofuels_land_compet_ej()
        )
        / max_peavail_potential_biofuels_land_compet(),
        lambda: 0,
    )


@cache.step
@to_float
def remaining_potential_biofuels_land_marg():
    """
    Real Name: remaining potential biofuels land marg
    Original Eqn: IF THEN ELSE(Max PEavail potential biofuels marginal lands > PEavail biofuels land marg EJ, (Max PEavail potential biofuels marginal lands-PEavail biofuels land marg EJ)/Max PEavail potential biofuels marginal lands, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_peavail_potential_biofuels_marginal_lands()
        > peavail_biofuels_land_marg_ej(),
        lambda: (
            max_peavail_potential_biofuels_marginal_lands()
            - peavail_biofuels_land_marg_ej()
        )
        / max_peavail_potential_biofuels_marginal_lands(),
        lambda: 0,
    )


@cache.step
@to_float
def peavail_tot_biofuels_land_compet_ej():
    """
    Real Name: PEavail tot biofuels land compet EJ
    Original Eqn: PEavail biofuels 2gen land compet EJ+PEavail biofuels 3gen land compet EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy available of biofuels from dedicated crops -in land
        competition- (2nd and 3rd generation).
    """
    return (
        peavail_biofuels_2gen_land_compet_ej() + peavail_biofuels_3gen_land_compet_ej()
    )


@cache.run
@to_float
def p_biofuels_marg_lands():
    """
    Real Name: P biofuels marg lands
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F46')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in energy output demand depending on the policy of the
        scenario.
    """
    return _ext_constant_p_biofuels_marg_lands()


@cache.step
@to_float
def remaining_potential_biofuels():
    """
    Real Name: remaining potential biofuels
    Original Eqn: IF THEN ELSE(Max PEavail biofuels potential > FES total biofuels production EJ, (Max PEavail biofuels potential-FES total biofuels production EJ)/Max PEavail biofuels potential, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_peavail_biofuels_potential() > fes_total_biofuels_production_ej(),
        lambda: (max_peavail_biofuels_potential() - fes_total_biofuels_production_ej())
        / max_peavail_biofuels_potential(),
        lambda: 0,
    )


@cache.step
@to_float
def fe_demand_oil_elec_plants_twh():
    """
    Real Name: FE demand oil Elec plants TWh
    Original Eqn: share oil for Elec*demand Elec plants fossil fuels TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of oil to produce electricity.
    """
    return share_oil_for_elec() * demand_elec_plants_fossil_fuels_twh()


@cache.step
@to_float
def pe_demand_oil_elec_plants_ej():
    """
    Real Name: PE demand oil Elec plants EJ
    Original Eqn: (FE demand oil Elec plants TWh/efficiency liquids for electricity )*EJ per TWh
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of oil (EJ) for electric generation (including
        generation losses).
    """
    return (
        fe_demand_oil_elec_plants_twh() / efficiency_liquids_for_electricity()
    ) * ej_per_twh()


@cache.step
@subs(["RES heat"], _subscript_dict)
def adapt_growth_res_for_heatcom():
    """
    Real Name: "adapt growth RES for heat-com"
    Original Eqn: IF THEN ELSE(Time<2014, "past RES growth for heat-com"[RES heat], IF THEN ELSE(Time<Start year P growth RES heat, "past RES growth for heat-com"[RES heat], IF THEN ELSE(Time<Target year P growth RES heat, "past RES growth for heat-com"[RES heat]+(P RES for heat[RES heat]-"past RES growth for heat-com"[RES heat])*(Time dmnl(Time)-Start year P growth RES heat)/(Target year P growth RES heat-Start year P growth RES heat), P RES for heat[RES heat])))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Modeling of a soft transition from current historic annual growth to reach
        the policy-objective in the target year.
    """
    return if_then_else(
        time() < 2014,
        lambda: past_res_growth_for_heatcom(),
        lambda: if_then_else(
            time() < start_year_p_growth_res_heat(),
            lambda: past_res_growth_for_heatcom(),
            lambda: if_then_else(
                time() < target_year_p_growth_res_heat(),
                lambda: past_res_growth_for_heatcom()
                + (p_res_for_heat() - past_res_growth_for_heatcom())
                * (time_dmnl(time()) - start_year_p_growth_res_heat())
                / (target_year_p_growth_res_heat() - start_year_p_growth_res_heat()),
                lambda: p_res_for_heat(),
            ),
        ),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def adapt_growth_res_for_heatnc():
    """
    Real Name: "adapt growth RES for heat-nc"
    Original Eqn: IF THEN ELSE(Time<2014, "past RES growth for heat-nc"[RES heat], IF THEN ELSE(Time<Start year P growth RES heat, "past RES growth for heat-nc"[RES heat], IF THEN ELSE(Time<Target year P growth RES heat, "past RES growth for heat-nc"[RES heat]+(P RES for heat[RES heat]-"past RES growth for heat-nc"[RES heat])*(Time dmnl(Time)-Start year P growth RES heat)/(Target year P growth RES heat-Start year P growth RES heat), P RES for heat[RES heat])))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Modeling of a soft transition from current historic annual growth to reach
        the policy-objective in the target yeat.
    """
    return if_then_else(
        time() < 2014,
        lambda: past_res_growth_for_heatnc(),
        lambda: if_then_else(
            time() < start_year_p_growth_res_heat(),
            lambda: past_res_growth_for_heatnc(),
            lambda: if_then_else(
                time() < target_year_p_growth_res_heat(),
                lambda: past_res_growth_for_heatnc()
                + (p_res_for_heat() - past_res_growth_for_heatnc())
                * (time_dmnl(time()) - start_year_p_growth_res_heat())
                / (target_year_p_growth_res_heat() - start_year_p_growth_res_heat()),
                lambda: p_res_for_heat(),
            ),
        ),
    )


@cache.run
@to_float
def start_year_p_growth_res_heat():
    """
    Real Name: Start year P growth RES heat
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C58')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of the policy growth of RES technologies for generating heat.
    """
    return _ext_constant_start_year_p_growth_res_heat()


@cache.step
@to_float
def eroi_fc_system_from_2015():
    """
    Real Name: EROI FC system from 2015
    Original Eqn: IF THEN ELSE("Activate EROI FC system feedback?"=0,1, IF THEN ELSE("Activate EROI FC system feedback?"=1,EROI FC system from 2015 1,1))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROI of the system feedback from the year 2015: variation in final energy
        demand to compensate the variation in the EROI in relation to the base
        year 2015.
    """
    return if_then_else(
        activate_eroi_fc_system_feedback() == 0,
        lambda: 1,
        lambda: if_then_else(
            activate_eroi_fc_system_feedback() == 1,
            lambda: eroi_fc_system_from_2015_1(),
            lambda: 1,
        ),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def adapt_growth_res_elec():
    """
    Real Name: adapt growth RES elec
    Original Eqn:
      IF THEN ELSE(Time<2015, past RES elec capacity growth[hydro], IF THEN ELSE(Time<Start year P growth RES elec, past RES elec capacity growth[hydro], IF THEN ELSE(Time<Target year P growth RES elec, past RES elec capacity growth[hydro]+(P RES elec growth[hydro]-past RES elec capacity growth[hydro])*(Time dmnl(Time)-Start year P growth RES elec)/(Target year P growth RES elec-Start year P growth RES elec), P RES elec growth[hydro])))
        .
        .
        .
      IF THEN ELSE(Time<2014, past RES elec capacity growth[CSP], IF THEN ELSE(Time<Start year P growth RES elec, past RES elec capacity growth[CSP], IF THEN ELSE(Time<Target year P growth RES elec, past RES elec capacity growth[CSP]+(P RES elec growth[CSP]-past RES elec capacity growth[CSP])*(Time dmnl(Time)-Start year P growth RES elec)/(Target year P growth RES elec-Start year P growth RES elec), P RES elec growth[CSP])))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual growth per RES elec technology. Modeling of a soft transition from
        current historic annual growth to reach the policy-objective in the target
        year.
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    time() < 2015,
                    lambda: past_res_elec_capacity_growth()
                    .loc["hydro"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["hydro"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["hydro"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth().loc["hydro"].reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["hydro"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["hydro"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2013,
                    lambda: past_res_elec_capacity_growth()
                    .loc["geot elec"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["geot elec"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["geot elec"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth()
                                .loc["geot elec"]
                                .reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["geot elec"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["geot elec"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2013,
                    lambda: past_res_elec_capacity_growth()
                    .loc["solid bioE elec"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["solid bioE elec"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["solid bioE elec"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth()
                                .loc["solid bioE elec"]
                                .reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["solid bioE elec"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["solid bioE elec"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2014,
                    lambda: past_res_elec_capacity_growth()
                    .loc["oceanic"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["oceanic"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["oceanic"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth()
                                .loc["oceanic"]
                                .reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["oceanic"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["oceanic"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2015,
                    lambda: past_res_elec_capacity_growth()
                    .loc["wind onshore"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["wind onshore"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["wind onshore"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth()
                                .loc["wind onshore"]
                                .reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["wind onshore"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["wind onshore"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2014,
                    lambda: past_res_elec_capacity_growth()
                    .loc["wind offshore"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["wind offshore"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["wind offshore"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth()
                                .loc["wind offshore"]
                                .reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["wind offshore"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["wind offshore"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2014,
                    lambda: past_res_elec_capacity_growth()
                    .loc["solar PV"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["solar PV"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["solar PV"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth()
                                .loc["solar PV"]
                                .reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["solar PV"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["solar PV"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                if_then_else(
                    time() < 2014,
                    lambda: past_res_elec_capacity_growth()
                    .loc["CSP"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        time() < start_year_p_growth_res_elec(),
                        lambda: past_res_elec_capacity_growth()
                        .loc["CSP"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            time() < target_year_p_growth_res_elec(),
                            lambda: past_res_elec_capacity_growth()
                            .loc["CSP"]
                            .reset_coords(drop=True)
                            + (
                                p_res_elec_growth().loc["CSP"].reset_coords(drop=True)
                                - past_res_elec_capacity_growth()
                                .loc["CSP"]
                                .reset_coords(drop=True)
                            )
                            * (time_dmnl(time()) - start_year_p_growth_res_elec())
                            / (
                                target_year_p_growth_res_elec()
                                - start_year_p_growth_res_elec()
                            ),
                            lambda: p_res_elec_growth()
                            .loc["CSP"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.step
@to_float
def adapt_growth_phs():
    """
    Real Name: adapt growth PHS
    Original Eqn: IF THEN ELSE(Time<2015, past PHS capacity growth, IF THEN ELSE(Time<Start year P growth RES elec, past PHS capacity growth, IF THEN ELSE(Time<Target year P growth RES elec, past PHS capacity growth+(P PHS growth-past PHS capacity growth)*(Time dmnl(Time)-Start year P growth RES elec)/(Target year P growth RES elec-Start year P growth RES elec), P PHS growth)*(1+abundance storage)))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual growth per RES elec technology. Modeling of a soft transition from
        current historic annual growth to reach the policy-objective in the target
        year.
    """
    return if_then_else(
        time() < 2015,
        lambda: past_phs_capacity_growth(),
        lambda: if_then_else(
            time() < start_year_p_growth_res_elec(),
            lambda: past_phs_capacity_growth(),
            lambda: if_then_else(
                time() < target_year_p_growth_res_elec(),
                lambda: past_phs_capacity_growth()
                + (p_phs_growth() - past_phs_capacity_growth())
                * (time_dmnl(time()) - start_year_p_growth_res_elec())
                / (target_year_p_growth_res_elec() - start_year_p_growth_res_elec()),
                lambda: p_phs_growth(),
            )
            * (1 + abundance_storage()),
        ),
    )


@cache.step
@to_float
def variation_energy_demand_due_to_eroi_fc_system():
    """
    Real Name: Variation energy demand due to EROI FC system
    Original Eqn: (EROI FC system from 2015-1)*100
    Units: percent
    Limits: (None, None)
    Type: component
    Subs: None

    Variation (percent) in final energy demand to compensate for the variation
        in the EROI of the system in relation to the base year 2015.
    """
    return (eroi_fc_system_from_2015() - 1) * 100


@cache.run
@to_float
def start_year_p_growth_res_elec():
    """
    Real Name: Start year P growth RES elec
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F32')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of the policy growth of RES technologies for generating
        electricity.
    """
    return _ext_constant_start_year_p_growth_res_elec()


@cache.run
@to_float
def land_productivity_biofuels_marg_ej_mha():
    """
    Real Name: Land productivity biofuels marg EJ MHa
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C63')
    Units: EJ/MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Energy output per area of biofuels in marginal lands (final energy).
        Source: Field et al (2008): 27 EJ (NPP) at 15% efficiency in 386 MHa.
    """
    return _ext_constant_land_productivity_biofuels_marg_ej_mha()


@cache.step
@to_float
def ratio_land_productivity_2gen_vs_marg():
    """
    Real Name: ratio land productivity 2gen vs marg
    Original Eqn: Land productivity biofuels 2gen EJ MHa/Land productivity biofuels marg EJ MHa
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Ratio between the land productivity of biofuels 2gen in competition land
        vs marginal lands.
    """
    return (
        land_productivity_biofuels_2gen_ej_mha()
        / land_productivity_biofuels_marg_ej_mha()
    )


@cache.step
@to_float
def b_lineal_regr_phaseout_oil_for_elec():
    """
    Real Name: "b lineal regr phase-out oil for elec"
    Original Eqn: share in target year oil for elec-"a lineal regr phase-out oil for elec"*"target year policy phase-out oil for elec"
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the share of oil for electricity over time.
    """
    return (
        share_in_target_year_oil_for_elec()
        - a_lineal_regr_phaseout_oil_for_elec()
        * target_year_policy_phaseout_oil_for_elec()
    )


@cache.run
@to_float
def share_in_target_year_oil_for_elec():
    """
    Real Name: share in target year oil for elec
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'I167')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year for the policy phase-out oil for electricity.
    """
    return _ext_constant_share_in_target_year_oil_for_elec()


@cache.run
@to_float
def share_in_target_year_oil_for_heat():
    """
    Real Name: share in target year oil for heat
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'I168')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year for the policy phase-out oil for heat.
    """
    return _ext_constant_share_in_target_year_oil_for_heat()


@cache.step
@to_float
def a_lineal_regr_phaseout_oil_for_elec():
    """
    Real Name: "a lineal regr phase-out oil for elec"
    Original Eqn: (share in target year oil for elec-"Hist share oil/FF Elec")/("target year policy phase-out oil for elec"-"start year policy phase-out oil for elec")
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the share of oil for electricity over time.
    """
    return (share_in_target_year_oil_for_elec() - hist_share_oilff_elec()) / (
        target_year_policy_phaseout_oil_for_elec()
        - start_year_policy_phaseout_oil_for_elec()
    )


@cache.step
@to_float
def a_lineal_regr_phaseout_oil_for_heat():
    """
    Real Name: "a lineal regr phase-out oil for heat"
    Original Eqn: (share in target year oil for heat-Historic share liquids for heat plants)/("target year policy phase-out oil for heat" -"start year policy phase-out oil for heat")
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the share of oil for heat over time.
    """
    return (
        share_in_target_year_oil_for_heat() - historic_share_liquids_for_heat_plants()
    ) / (
        target_year_policy_phaseout_oil_for_heat()
        - start_year_policy_phaseout_oil_for_heat()
    )


@cache.run
@to_float
def start_year_policy_phaseout_oil_for_elec():
    """
    Real Name: "start year policy phase-out oil for elec"
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'E167')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    From customized year, start policy phase-out oil for electricity.
    """
    return _ext_constant_start_year_policy_phaseout_oil_for_elec()


@cache.run
@to_float
def target_year_policy_phaseout_oil_for_elec():
    """
    Real Name: "target year policy phase-out oil for elec"
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'G167')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year for the policy phase-out oil for electricity.
    """
    return _ext_constant_target_year_policy_phaseout_oil_for_elec()


@cache.run
@to_float
def target_year_policy_phaseout_oil_for_heat():
    """
    Real Name: "target year policy phase-out oil for heat"
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'G168')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year for the policy phase-out oil for heat.
    """
    return _ext_constant_target_year_policy_phaseout_oil_for_heat()


@cache.step
@to_float
def p_share_oil_for_elec():
    """
    Real Name: P share oil for Elec
    Original Eqn: MAX(0, "a lineal regr phase-out oil for elec"*Time+"b lineal regr phase-out oil for elec")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share oil for electricity generation derived from the phase-out policy.
    """
    return np.maximum(
        0,
        a_lineal_regr_phaseout_oil_for_elec() * time()
        + b_lineal_regr_phaseout_oil_for_elec(),
    )


@cache.step
@to_float
def p_share_oil_for_heat():
    """
    Real Name: P share oil for Heat
    Original Eqn: MAX(0, "a lineal regr phase-out oil for heat"*Time+"b lineal regr phase-out oil for heat")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share oil for heat generation derived from the phase-out policy.
    """
    return np.maximum(
        0,
        a_lineal_regr_phaseout_oil_for_heat() * time()
        + b_lineal_regr_phaseout_oil_for_heat(),
    )


@cache.step
@to_float
def b_lineal_regr_phaseout_oil_for_heat():
    """
    Real Name: "b lineal regr phase-out oil for heat"
    Original Eqn: share in target year oil for heat-"a lineal regr phase-out oil for heat"*"target year policy phase-out oil for heat"
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the share of oil for heat over time.
    """
    return (
        share_in_target_year_oil_for_heat()
        - a_lineal_regr_phaseout_oil_for_heat()
        * target_year_policy_phaseout_oil_for_heat()
    )


@cache.run
@to_float
def start_year_policy_phaseout_oil_for_heat():
    """
    Real Name: "start year policy phase-out oil for heat"
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'E168')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    From customized year, start policy phase-out oil for heat.
    """
    return _ext_constant_start_year_policy_phaseout_oil_for_heat()


@cache.step
@to_float
def share_liquids_for_heat_plants():
    """
    Real Name: share liquids for heat plants
    Original Eqn: IF THEN ELSE(Time<2014, Historic share liquids for heat plants, IF THEN ELSE("phase-out oil for heat?"=0, Historic share liquids for heat plants, IF THEN ELSE(Time<"start year policy phase-out oil for heat", Historic share liquids for heat plants, P share oil for Heat)))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Oil share of heat demand.
    """
    return if_then_else(
        time() < 2014,
        lambda: historic_share_liquids_for_heat_plants(),
        lambda: if_then_else(
            phaseout_oil_for_heat() == 0,
            lambda: historic_share_liquids_for_heat_plants(),
            lambda: if_then_else(
                time() < start_year_policy_phaseout_oil_for_heat(),
                lambda: historic_share_liquids_for_heat_plants(),
                lambda: p_share_oil_for_heat(),
            ),
        ),
    )


@cache.step
@to_float
def share_oil_for_elec():
    """
    Real Name: share oil for Elec
    Original Eqn: IF THEN ELSE("switch scarcity-PS elec substit"=0, "Hist share oil/FF Elec", IF THEN ELSE(Time<2016, "Hist share oil/FF Elec", IF THEN ELSE("phase-out oil for electricity?"=0, "Future share oil/FF for Elec", IF THEN ELSE(Time<"start year policy phase-out oil for elec", "Hist share oil/FF Elec", P share oil for Elec ))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Oil share of electricity demand.
    """
    return if_then_else(
        switch_scarcityps_elec_substit() == 0,
        lambda: hist_share_oilff_elec(),
        lambda: if_then_else(
            time() < 2016,
            lambda: hist_share_oilff_elec(),
            lambda: if_then_else(
                phaseout_oil_for_electricity() == 0,
                lambda: future_share_oilff_for_elec(),
                lambda: if_then_else(
                    time() < start_year_policy_phaseout_oil_for_elec(),
                    lambda: hist_share_oilff_elec(),
                    lambda: p_share_oil_for_elec(),
                ),
            ),
        ),
    )


@cache.step
@to_float
def pe_traditional_biomass_consum_ej():
    """
    Real Name: PE traditional biomass consum EJ
    Original Eqn: consum forest energy traditional EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy consumption of traditional biomass. It also includes charcoal
        and biosolids for solids.        It's limited by the maximum given by the stock of forests  MAX(max E
        forest traditional EJ,Households final energy demand[solids]*share trad
        biomass vs solids in households)
    """
    return consum_forest_energy_traditional_ej()


@cache.step
@subs(["materials"], _subscript_dict)
def scarcity_resources_counter():
    """
    Real Name: scarcity resources counter
    Original Eqn: INTEG ( IF THEN ELSE("materials availability (resources)"[materials]=0, 1 , 0 ), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']


    """
    return _integ_scarcity_resources_counter()


@cache.step
@subs(["materials"], _subscript_dict)
def scarcity_resources_flag():
    """
    Real Name: Scarcity resources flag
    Original Eqn: IF THEN ELSE(scarcity resources counter[materials]>1, 1 , 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Scarcity indicator for materials resources.
    """
    return if_then_else(scarcity_resources_counter() > 1, lambda: 1, lambda: 0)


@cache.step
@to_float
def percent_res_vs_tpes():
    """
    Real Name: Percent RES vs TPES
    Original Eqn: share RES vs TPES*100
    Units: percent
    Limits: (None, None)
    Type: component
    Subs: None

    Percent of primary energy from RES in the TPES.
    """
    return share_res_vs_tpes() * 100


@cache.step
@subs(["final sources"], _subscript_dict)
def year_init_scarcity_final_fuels():
    """
    Real Name: Year init scarcity final fuels
    Original Eqn: INTEG ( IF THEN ELSE(scarcity final fuels flags[final sources]=1,(IF THEN ELSE(scarcity final fuels counter[final sources]=1 , (Time*1/TIME STEP)-20, 0)), 0), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Initial year of scarcity of final fuels.
    """
    return _integ_year_init_scarcity_final_fuels()


@cache.step
@subs(["materials"], _subscript_dict)
def year_init_scarcity_reserves():
    """
    Real Name: Year init scarcity reserves
    Original Eqn: INTEG ( IF THEN ELSE("materials availability (reserves)"[materials]=0, (IF THEN ELSE( scarcity reserves counter[materials]=1 , (Time*1/TIME STEP) , 0 )) , 0 ), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Initial year of scarcity of material reserves.
    """
    return _integ_year_init_scarcity_reserves()


@cache.step
@to_float
def percent_tot_monet_invest_reselec_vs_gdp():
    """
    Real Name: Percent tot monet invest RESelec vs GDP
    Original Eqn: share tot monet invest Elec RES vs GDP*100
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Annual total monetary investment for RES for electricity as a share of the
        annual GDP ( in percentage ).
    """
    return share_tot_monet_invest_elec_res_vs_gdp() * 100


@cache.step
@subs(["final sources"], _subscript_dict)
def scarcity_final_fuels_counter():
    """
    Real Name: scarcity final fuels counter
    Original Eqn: INTEG ( IF THEN ELSE(scarcity final fuels flags[final sources]=1, 1 , 0 ), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources']


    """
    return _integ_scarcity_final_fuels_counter()


@cache.step
@subs(["materials"], _subscript_dict)
def scarcity_reserves_counter():
    """
    Real Name: scarcity reserves counter
    Original Eqn: INTEG ( IF THEN ELSE("materials availability (reserves)"[materials]=0, 1 , 0 ), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']


    """
    return _integ_scarcity_reserves_counter()


@cache.step
@subs(["materials"], _subscript_dict)
def year_final_scarcity_reserves():
    """
    Real Name: Year final scarcity reserves
    Original Eqn: IF THEN ELSE(scarcity reserves counter[materials]>0,Year init scarcity reserves[materials]+scarcity reserves counter[materials]-1,0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Final year of scarcity of material reserves.
    """
    return if_then_else(
        scarcity_reserves_counter() > 0,
        lambda: year_init_scarcity_reserves() + scarcity_reserves_counter() - 1,
        lambda: 0,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def year_final_scarcity_resources():
    """
    Real Name: Year final scarcity resources
    Original Eqn: IF THEN ELSE(scarcity resources counter[materials]>0,Year init scarcity resources[materials]+scarcity resources counter[materials]-1,0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Final year of scarcity of materials resources.
    """
    return if_then_else(
        scarcity_resources_counter() > 0,
        lambda: year_init_scarcity_resources() + scarcity_resources_counter() - 1,
        lambda: 0,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def scarcity_fuels_flag():
    """
    Real Name: Scarcity fuels flag
    Original Eqn: IF THEN ELSE(scarcity final fuels counter[final sources]>1, 1, 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Scarcity indicator for final fuels.
    """
    return if_then_else(scarcity_final_fuels_counter() > 1, lambda: 1, lambda: 0)


@cache.step
@subs(["materials"], _subscript_dict)
def scarcity_reserves_flag():
    """
    Real Name: Scarcity reserves flag
    Original Eqn: IF THEN ELSE( scarcity reserves counter[materials]>1 ,1 , 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Scarcity indicator for materials reserves.
    """
    return if_then_else(scarcity_reserves_counter() > 1, lambda: 1, lambda: 0)


@cache.step
@subs(["materials"], _subscript_dict)
def year_init_scarcity_resources():
    """
    Real Name: Year init scarcity resources
    Original Eqn: INTEG ( IF THEN ELSE("materials availability (resources)"[materials]=0,(IF THEN ELSE(scarcity resources counter[materials]=1,(Time*1/TIME STEP),0)),0), 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Initial year of scarcity of material resources.
    """
    return _integ_year_init_scarcity_resources()


@cache.step
@to_float
def percent_remaining_potential_tot_res_heat():
    """
    Real Name: Percent remaining potential tot RES heat
    Original Eqn: remaining potential tot RES heat*100
    Units: percent
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as a percentage.
    """
    return remaining_potential_tot_res_heat() * 100


@cache.step
@subs(["final sources1"], _subscript_dict)
def abundance_final_fuels():
    """
    Real Name: Abundance final fuels
    Original Eqn:
      abundance liquids
      abundance gases
      abundance solids
      Abundance electricity
      Abundance heat
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']


    """
    return xrmerge(
        [
            rearrange(
                abundance_liquids(), ["final sources1"], {"final sources1": ["liquids"]}
            ),
            rearrange(
                abundance_gases(), ["final sources1"], {"final sources1": ["gases"]}
            ),
            rearrange(
                abundance_solids(), ["final sources1"], {"final sources1": ["solids"]}
            ),
            rearrange(
                abundance_electricity(),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            rearrange(
                abundance_heat(), ["final sources1"], {"final sources1": ["heat"]}
            ),
        ]
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def scarcity_final_fuels_flags():
    """
    Real Name: scarcity final fuels flags
    Original Eqn: IF THEN ELSE(Abundance final fuels[ final sources]<0.999, 1 , 0 )
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources']


    """
    return if_then_else(
        rearrange(abundance_final_fuels(), ["final sources"], _subscript_dict) < 0.999,
        lambda: 1,
        lambda: 0,
    )


@cache.step
@to_float
def percent_remaining_potential_tot_res_elec():
    """
    Real Name: Percent remaining potential tot RES elec
    Original Eqn: remaining potential tot RES elec*100
    Units: percent
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as a percentage.
    """
    return remaining_potential_tot_res_elec() * 100


@cache.step
@subs(["final sources"], _subscript_dict)
def year_final_scarcity_final_fuels():
    """
    Real Name: Year final scarcity final fuels
    Original Eqn: IF THEN ELSE(scarcity final fuels counter[final sources]>0,Year init scarcity final fuels[final sources]+scarcity final fuels counter[final sources]-1,0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Final year of scarcity of final fuels.
    """
    return if_then_else(
        scarcity_final_fuels_counter() > 0,
        lambda: year_init_scarcity_final_fuels() + scarcity_final_fuels_counter() - 1,
        lambda: 0,
    )


@cache.step
@to_float
def share_blue_water_use_vs_ar():
    """
    Real Name: share blue water use vs AR
    Original Eqn: Total water use by type[blue water]/(AR water*dam3 per km3)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of blue water used vs accessible runoff water.
    """
    return total_water_use_by_type().loc["blue water"].reset_coords(drop=True) / (
        ar_water() * dam3_per_km3()
    )


@cache.run
@to_float
def ar_water():
    """
    Real Name: AR water
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G76')
    Units: km3
    Limits: (None, None)
    Type: constant
    Subs: None

    Accessible runnoff water. Source: UN (2003).
    """
    return _ext_constant_ar_water()


@cache.step
@to_float
def share_total_water_use_vs_ar():
    """
    Real Name: share total water use vs AR
    Original Eqn: Total water use/(AR water*dam3 per km3)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of total water used vs accessible runnoff water.
    """
    return total_water_use() / (ar_water() * dam3_per_km3())


@cache.step
@to_float
def shortage_bioe_non_trad():
    """
    Real Name: shortage BioE non trad
    Original Eqn: ZIDZ( consum forest energy non traditional EJ , demand forest energy non tradition EJ)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Shortage of bioenergy for modern energy uses (no traditional).
    """
    return zidz(
        consum_forest_energy_non_traditional_ej(),
        demand_forest_energy_non_tradition_ej(),
    )


@cache.run
@to_float
def renewable_water_resources():
    """
    Real Name: Renewable water resources
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G75')
    Units: km3
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_renewable_water_resources()


@cache.step
@to_float
def share_blue_water_use_vs_renewable_water_resources():
    """
    Real Name: share blue water use vs renewable water resources
    Original Eqn: Total water use by type[blue water]/(Renewable water resources*dam3 per km3)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of blue water used vs renewable water resources.
    """
    return total_water_use_by_type().loc["blue water"].reset_coords(drop=True) / (
        renewable_water_resources() * dam3_per_km3()
    )


@cache.run
@to_float
def dam3_per_km3():
    """
    Real Name: dam3 per km3
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G16')
    Units: km3
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_dam3_per_km3()


@cache.step
@to_float
def share_total_water_use_vs_renewable_water_resources():
    """
    Real Name: share total water use vs renewable water resources
    Original Eqn: Total water use/(Renewable water resources*dam3 per km3)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of total water used vs renewable water resources.
    """
    return total_water_use() / (renewable_water_resources() * dam3_per_km3())


@cache.step
@to_float
def total_pe_solid_bioe_potential_ej():
    """
    Real Name: Total PE solid bioE potential EJ
    Original Eqn: max E forest energy non trad
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    If switch land 1 =1 the land restrictions are used, otherwise a fixed
        potential is used
    """
    return max_e_forest_energy_non_trad()


@cache.run
@subs(["RES heat"], _subscript_dict)
def shortage_bioe_for_heat():
    """
    Real Name: shortage BioE for heat
    Original Eqn:
      1
      1
      shortage BioE non trad delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Shortage of bioenergy for supplying RES power plants for heat generation.
    """
    return xrmerge(
        [
            xr.DataArray(1, {"RES heat": ["solar heat"]}, ["RES heat"]),
            xr.DataArray(1, {"RES heat": ["geot heat"]}, ["RES heat"]),
            rearrange(
                shortage_bioe_non_trad_delayed_1yr(),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def cp_res_for_heat():
    """
    Real Name: Cp RES for heat
    Original Eqn: "Cp-ini RES for heat"[RES heat]*shortage BioE for heat[RES heat]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']


    """
    return cpini_res_for_heat() * shortage_bioe_for_heat()


@cache.step
@to_float
def shortage_bioe_non_trad_delayed_1yr():
    """
    Real Name: shortage BioE non trad delayed 1yr
    Original Eqn: DELAY FIXED ( shortage BioE non trad, 1, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Shortage of bioenergy for modern energy uses (no traditional) delayed 1
        year.
    """
    return _delayfixed_shortage_bioe_non_trad_delayed_1yr()


@cache.step
@subs(["RES heat"], _subscript_dict)
def potential_fes_res_for_heatcom_ej():
    """
    Real Name: "potential FES RES for heat-com EJ"
    Original Eqn: "potential FES RES for heat-com TWh"[RES heat]*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Potential final energy supply renewables for commercial heat given the
        installed capacity.
    """
    return potential_fes_res_for_heatcom_twh() * ej_per_twh()


@cache.step
@subs(["RES heat"], _subscript_dict)
def potential_fes_res_for_heatcom_twh():
    """
    Real Name: "potential FES RES for heat-com TWh"
    Original Eqn: "installed capacity RES heat-com TW"[RES heat]*Efficiency RES heat[RES heat]*Cp RES for heat[RES heat]/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Potential final energy supply renewables for commercial heat given the
        installed capacity.
    """
    return (
        installed_capacity_res_heatcom_tw()
        * efficiency_res_heat()
        * cp_res_for_heat()
        / twe_per_twh()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def real_generation_res_elec_twh():
    """
    Real Name: real generation RES elec TWh
    Original Eqn: potential generation RES elec TWh[RES elec]*(1-RES elec tot overcapacity)*shortage BioE for elec[RES elec]
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Electricity generation by RES technology.
    """
    return (
        potential_generation_res_elec_twh()
        * (1 - res_elec_tot_overcapacity())
        * shortage_bioe_for_elec()
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def potential_fes_res_for_heatnc_twh():
    """
    Real Name: "potential FES RES for heat-nc TWh"
    Original Eqn: "installed capacity RES heat-nc TW"[RES heat]*Efficiency RES heat[RES heat]*Cp RES for heat[RES heat]/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Potential final energy supply renewables for non-commercial heat given the
        installed capacity.
    """
    return (
        installed_capacity_res_heatnc_tw()
        * efficiency_res_heat()
        * cp_res_for_heat()
        / twe_per_twh()
    )


@cache.run
@subs(["RES elec"], _subscript_dict)
def shortage_bioe_for_elec():
    """
    Real Name: shortage BioE for elec
    Original Eqn:
      1
        .
        .
        .
      1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Shortage of bioenergy for supplying RES power plants for electricity
        generation.
    """
    return xrmerge(
        [
            xr.DataArray(1, {"RES elec": ["hydro"]}, ["RES elec"]),
            xr.DataArray(1, {"RES elec": ["geot elec"]}, ["RES elec"]),
            rearrange(
                shortage_bioe_non_trad_delayed_1yr(),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            xr.DataArray(1, {"RES elec": ["oceanic"]}, ["RES elec"]),
            xr.DataArray(1, {"RES elec": ["wind onshore"]}, ["RES elec"]),
            xr.DataArray(1, {"RES elec": ["wind offshore"]}, ["RES elec"]),
            xr.DataArray(1, {"RES elec": ["solar PV"]}, ["RES elec"]),
            xr.DataArray(1, {"RES elec": ["CSP"]}, ["RES elec"]),
        ]
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def replacement_capacity_res_elec():
    """
    Real Name: replacement capacity RES elec
    Original Eqn: IF THEN ELSE(Time<2015,0,replacement rate RES elec[RES elec]*wear RES elec[RES elec]*(1-RES elec tot overcapacity ))*constraint elec storage availability[RES elec]*shortage BioE for elec[RES elec]^2
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual replacement of RES infrastructure for electricity generation by
        technology. It is assumed that the step of planning the replaced
        infrastructure can be done while the infraestructure to be replaced is
        still under operation. For replaced infraestructures, the construction
        time should be smaller than for new infaestructures, however we compensate
        for this assuming that the demantling time is included in onstruction time
        for replaced infrastructure.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: 0,
            lambda: replacement_rate_res_elec()
            * wear_res_elec()
            * (1 - res_elec_tot_overcapacity()),
        )
        * constraint_elec_storage_availability()
        * shortage_bioe_for_elec() ** 2
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def cp_res_elec():
    """
    Real Name: Cp RES elec
    Original Eqn: MAX(min Cp baseload RES[RES elec], "Cp-ini RES elec"[RES elec]*Cp exogenous RES elec reduction[RES elec]*shortage BioE for elec[RES elec])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Capacity factor of RES technologies (after accounting for the
        overcapacities required to manage the intermittency of RES elec variables).
    """
    return np.maximum(
        min_cp_baseload_res(),
        cpini_res_elec() * cp_exogenous_res_elec_reduction() * shortage_bioe_for_elec(),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def replacement_res_for_heatnc_tw():
    """
    Real Name: "replacement RES for heat-nc TW"
    Original Eqn: "wear RES capacity for heat-nc TW"[RES heat]*"replacement RES for heat-nc"[RES heat]*(1-"RES heat-nc tot overcapacity" )*shortage BioE for heat[RES heat]^2
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Annual replacement of RES for non-commercial heat by technology.
    """
    return (
        wear_res_capacity_for_heatnc_tw()
        * replacement_res_for_heatnc()
        * (1 - res_heatnc_tot_overcapacity())
        * shortage_bioe_for_heat() ** 2
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def replacement_res_for_heatcom_tw():
    """
    Real Name: "replacement RES for heat-com TW"
    Original Eqn: "wear RES capacity for heat-com TW"[RES heat]*"replacement RES for heat-com"[RES heat]*(1-"RES heat-com tot overcapacity" )*shortage BioE for heat[RES heat]^2
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Annual replacement of RES for commercial heat by technology.
    """
    return (
        wear_res_capacity_for_heatcom_tw()
        * replacement_res_for_heatcom()
        * (1 - res_heatcom_tot_overcapacity())
        * shortage_bioe_for_heat() ** 2
    )


@cache.step
@to_float
def demand_forest_energy_non_tradition_ej():
    """
    Real Name: demand forest energy non tradition EJ
    Original Eqn: MAX(0, solid bioE emissions relevant EJ-"PE bioE residues non-biofuels EJ")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of forest products for energy uses in non traditional uses, in
        terms of energy. Residuals and traditional biomass not included.
    """
    return np.maximum(
        0, solid_bioe_emissions_relevant_ej() - pe_bioe_residues_nonbiofuels_ej()
    )


@cache.step
@to_float
def max_e_forest_available_non_trad():
    """
    Real Name: max E forest available non trad
    Original Eqn: MAX(0, max E tot forest available-demand forest energy traditional EJ)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum energy from forest available excluding traditional use of biomasss.
    """
    return np.maximum(
        0, max_e_tot_forest_available() - demand_forest_energy_traditional_ej()
    )


@cache.step
@to_float
def max_e_tot_forest_available():
    """
    Real Name: max E tot forest available
    Original Eqn: "'Available' forest area"*forest extraction per Ha*(1+P forest overexplotation)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential energy from total forest available (including overexploitation).
    """
    return (
        available_forest_area()
        * forest_extraction_per_ha()
        * (1 + p_forest_overexplotation())
    )


@cache.step
@to_float
def max_e_forest_energy_non_trad():
    """
    Real Name: max E forest energy non trad
    Original Eqn: MAX(0, max E forest available non trad-consum wood products EJ)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum energy (NPP) from forest available for modern energy uses (i.e.
        excluding traditional use of biomasss).
    """
    return np.maximum(0, max_e_forest_available_non_trad() - consum_wood_products_ej())


@cache.run
@to_float
def max_eroi_fc():
    """
    Real Name: max EROI FC
    Original Eqn: 5
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    (ad hoc) Maximum value of EROI FC to introduce in the model in the case
        that the EROIst system <= 1 (in this case the "EROI FC system from 2015"
        reports an error).
    """
    return 5


@cache.step
@to_float
def eroi_fc_system_from_2015_1():
    """
    Real Name: EROI FC system from 2015 1
    Original Eqn: IF THEN ELSE(Time<2016,1, IF THEN ELSE(EROIst system delayed 1yr>1, MIN(max EROI FC, (EROIst system delayed 1yr/(EROIst system delayed 1yr - 1))*((EROIst system until 2015 -1)/EROIst system until 2015)), max EROI FC))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROI Feedback Coeficient. This coeficient allows to feedback the yearly change of
        the total EROI of the system on the real energy consuption of the system,
        taking as reference year 2015.        IF THEN ELSE("Activate EROI FC feedback?"=0,1,(EROEI Delayed 1yr/(EROEI
        Delayed 1yr - 1))*((EROEI Delayed 2yr -1)/EROEI Delayed 2yr))
    """
    return if_then_else(
        time() < 2016,
        lambda: 1,
        lambda: if_then_else(
            eroist_system_delayed_1yr() > 1,
            lambda: np.minimum(
                max_eroi_fc(),
                (eroist_system_delayed_1yr() / (eroist_system_delayed_1yr() - 1))
                * ((eroist_system_until_2015() - 1) / eroist_system_until_2015()),
            ),
            lambda: max_eroi_fc(),
        ),
    )


@cache.run
@to_float
def p_rr_ti_rest():
    """
    Real Name: P rr Ti Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E303')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ti_rest()


@cache.run
@to_float
def p_rr_li_rest():
    """
    Real Name: P rr Li Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E294')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_li_rest()


@cache.run
@to_float
def p_rr_v_rest():
    """
    Real Name: P rr V Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E304')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_v_rest()


@cache.run
@to_float
def p_rr_mg_rest():
    """
    Real Name: P rr Mg Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E295')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_mg_rest()


@cache.run
@to_float
def p_rr_zn_rest():
    """
    Real Name: P rr Zn Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E305')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_zn_rest()


@cache.run
@subs(["materials"], _subscript_dict)
def p_rr_minerals_rest():
    """
    Real Name: P rr minerals Rest
    Original Eqn:
      0
        .
        .
        .
      P rr Zn Rest
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Recycling rates by mineral for the rest of the economy selected by user by
        scenario.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"materials": ["Adhesive"]}, ["materials"]),
            rearrange(p_rr_al_rest(), ["materials"], {"materials": ["Aluminium"]}),
            xr.DataArray(0, {"materials": ["Aluminium mirrors"]}, ["materials"]),
            rearrange(p_rr_cd_rest(), ["materials"], {"materials": ["Cadmium"]}),
            xr.DataArray(0, {"materials": ["Carbon fiber"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cement"]}, ["materials"]),
            rearrange(p_rr_cr_rest(), ["materials"], {"materials": ["Chromium"]}),
            rearrange(p_rr_cu_rest(), ["materials"], {"materials": ["Copper"]}),
            xr.DataArray(0, {"materials": ["diesel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Dy"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Electric electronic components"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["Evacuation lines"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Fiberglass"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Foam glass"]}, ["materials"]),
            rearrange(p_rr_ga_rest(), ["materials"], {"materials": ["Galium"]}),
            xr.DataArray(0, {"materials": ["Glass"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Glass reinforcing plastic"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["gravel"]}, ["materials"]),
            rearrange(p_rr_in_rest(), ["materials"], {"materials": ["Indium"]}),
            rearrange(p_rr_fe_rest(), ["materials"], {"materials": ["Iron"]}),
            xr.DataArray(0, {"materials": ["KNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Asphalt"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lime"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Limestone"]}, ["materials"]),
            rearrange(p_rr_li_rest(), ["materials"], {"materials": ["Lithium"]}),
            xr.DataArray(0, {"materials": ["Lubricant"]}, ["materials"]),
            rearrange(p_rr_mg_rest(), ["materials"], {"materials": ["Magnesium"]}),
            rearrange(p_rr_mn_rest(), ["materials"], {"materials": ["Manganese"]}),
            xr.DataArray(0, {"materials": ["Heavy equipment"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Concrete"]}, ["materials"]),
            rearrange(p_rr_mo_rest(), ["materials"], {"materials": ["Molybdenum"]}),
            xr.DataArray(0, {"materials": ["NaNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 synthetic"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Neodymium"]}, ["materials"]),
            rearrange(p_rr_ni_rest(), ["materials"], {"materials": ["Nickel"]}),
            xr.DataArray(0, {"materials": ["Over grid 15per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 5per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Paint"]}, ["materials"]),
            rearrange(p_rr_pb_rest(), ["materials"], {"materials": ["Lead"]}),
            xr.DataArray(0, {"materials": ["Plastics"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Polypropylene"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock wool"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Silicon sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Silicon wafer modules"]}, ["materials"]),
            rearrange(p_rr_ag_rest(), ["materials"], {"materials": ["Silver"]}),
            xr.DataArray(0, {"materials": ["Site preparation"]}, ["materials"]),
            rearrange(p_rr_sn_rest(), ["materials"], {"materials": ["Tin"]}),
            xr.DataArray(0, {"materials": ["soda ash"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["steel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["synthetic oil"]}, ["materials"]),
            rearrange(p_rr_te_rest(), ["materials"], {"materials": ["tellurium"]}),
            rearrange(p_rr_ti_rest(), ["materials"], {"materials": ["titanium"]}),
            xr.DataArray(0, {"materials": ["titanium dioxide"]}, ["materials"]),
            rearrange(p_rr_v_rest(), ["materials"], {"materials": ["vanadium"]}),
            xr.DataArray(0, {"materials": ["wires"]}, ["materials"]),
            rearrange(p_rr_zn_rest(), ["materials"], {"materials": ["zinc"]}),
        ]
    )


@cache.run
@to_float
def p_rr_cd_rest():
    """
    Real Name: P rr Cd Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E288')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_cd_rest()


@cache.step
@subs(["materials"], _subscript_dict)
def improvement_recycling_rates_minerals_rest():
    """
    Real Name: improvement recycling rates minerals Rest
    Original Eqn: IF THEN ELSE(Time<2015, Historic improvement recycling rates minerals[materials], IF THEN ELSE(choose targets mineral recycling rates=2,common rr minerals variation Rest[materials] *recycling rates minerals Rest[materials], by mineral rr variation Rest[materials]))*constrain rr improv for Rest per mineral [materials]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual improvement of the recycling rates of minerals for the rest of the
        economy.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: historic_improvement_recycling_rates_minerals(),
            lambda: if_then_else(
                choose_targets_mineral_recycling_rates() == 2,
                lambda: common_rr_minerals_variation_rest()
                * recycling_rates_minerals_rest(),
                lambda: by_mineral_rr_variation_rest(),
            ),
        )
        * constrain_rr_improv_for_rest_per_mineral()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def b_lineal_regr_rr_alt_techn():
    """
    Real Name: b lineal regr rr alt techn
    Original Eqn: P rr minerals alt techn[materials]-a lineal regr rr alt techn[materials]*target year P rr minerals alt techn
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the recycling rate of each mineral over time ("by mineral rr
        alt technology").
    """
    return (
        p_rr_minerals_alt_techn()
        - a_lineal_regr_rr_alt_techn() * target_year_p_rr_minerals_alt_techn()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def b_lineal_regr_rr_rest():
    """
    Real Name: b lineal regr rr Rest
    Original Eqn: P rr minerals Rest[materials]-a lineal regr rr Rest[materials]*target year P rr minerals Rest
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    b parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the recycling rate of each mineral over time ("by mineral rr
        Rest").
    """
    return (
        p_rr_minerals_rest()
        - a_lineal_regr_rr_rest() * target_year_p_rr_minerals_rest()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def by_mineral_rr_rest_1yr():
    """
    Real Name: by mineral rr Rest 1yr
    Original Eqn: DELAY FIXED ( by mineral rr Rest[materials], 1, current recycling rates minerals alt techn[materials])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates over time delayed 1 year by mineral for the rest of the
        economy.
    """
    return _delayfixed_by_mineral_rr_rest_1yr()


@cache.run
@to_float
def p_rr_cu_rest():
    """
    Real Name: P rr Cu Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E290')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_cu_rest()


@cache.step
@subs(["materials"], _subscript_dict)
def a_lineal_regr_rr_alt_techn():
    """
    Real Name: a lineal regr rr alt techn
    Original Eqn: (P rr minerals alt techn[materials]-current recycling rates minerals alt techn[materials])/(target year P rr minerals alt techn -start year P rr minerals alt techn)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the recycling rate of each mineral over time ("by mineral rr
        alt technology").
    """
    return (
        p_rr_minerals_alt_techn() - current_recycling_rates_minerals_alt_techn()
    ) / (target_year_p_rr_minerals_alt_techn() - start_year_p_rr_minerals_alt_techn())


@cache.step
@subs(["materials"], _subscript_dict)
def a_lineal_regr_rr_rest():
    """
    Real Name: a lineal regr rr Rest
    Original Eqn: (P rr minerals Rest[materials]-current recycling rates minerals[materials])/(target year P rr minerals Rest -start year P rr minerals Rest)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    a parameter of lineal regression "y=a*TIME+b" where y corresponds to the
        evolution of the recycling rate of each mineral over time ("by mineral rr
        Rest").
    """
    return (p_rr_minerals_rest() - current_recycling_rates_minerals()) / (
        target_year_p_rr_minerals_rest() - start_year_p_rr_minerals_rest()
    )


@cache.run
@to_float
def start_year_p_rr_minerals_rest():
    """
    Real Name: start year P rr minerals Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B286')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of variation recycling rate of minerals for the rest of the
        economy.
    """
    return _ext_constant_start_year_p_rr_minerals_rest()


@cache.step
@subs(["materials"], _subscript_dict)
def common_rr_minerals_variation_rest():
    """
    Real Name: common rr minerals variation Rest
    Original Eqn: IF THEN ELSE(Time<start year P common rr minerals Rest, Historic improvement recycling rates minerals[materials], P common rr minerals variation Rest)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates of minererals (common annual variation).
    """
    return if_then_else(
        time() < start_year_p_common_rr_minerals_rest(),
        lambda: historic_improvement_recycling_rates_minerals(),
        lambda: p_common_rr_minerals_variation_rest(),
    )


@cache.run
@to_float
def p_rr_in_rest():
    """
    Real Name: P rr In Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E292')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_in_rest()


@cache.run
@to_float
def p_rr_te_rest():
    """
    Real Name: P rr Te Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E302')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_te_rest()


@cache.run
@to_float
def p_rr_mo_rest():
    """
    Real Name: P rr Mo Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E297')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_mo_rest()


@cache.step
@subs(["materials"], _subscript_dict)
def by_mineral_rr_rest():
    """
    Real Name: by mineral rr Rest
    Original Eqn: a lineal regr rr Rest[materials]*Time+b lineal regr rr Rest[materials]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates over time by mineral for the rest of the economy.
    """
    return a_lineal_regr_rr_rest() * time() + b_lineal_regr_rr_rest()


@cache.run
@to_float
def p_rr_ag_rest():
    """
    Real Name: P rr Ag Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E300')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ag_rest()


@cache.run
@to_float
def p_rr_mn_rest():
    """
    Real Name: P rr Mn Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E296')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_mn_rest()


@cache.run
@to_float
def p_rr_al_rest():
    """
    Real Name: P rr Al Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E287')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_al_rest()


@cache.run
@to_float
def target_year_p_rr_minerals_rest():
    """
    Real Name: target year P rr minerals Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B285')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year of variation recycling rate of minerals for the rest of the
        economy.
    """
    return _ext_constant_target_year_p_rr_minerals_rest()


@cache.run
@to_float
def p_rr_ga_rest():
    """
    Real Name: P rr Ga Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E291')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ga_rest()


@cache.run
@to_float
def p_rr_sn_rest():
    """
    Real Name: P rr Sn Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E301')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_sn_rest()


@cache.run
@to_float
def p_rr_pb_rest():
    """
    Real Name: P rr Pb Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E299')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_pb_rest()


@cache.run
@to_float
def p_rr_cr_rest():
    """
    Real Name: P rr Cr Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E289')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_cr_rest()


@cache.run
@to_float
def p_rr_ni_rest():
    """
    Real Name: P rr Ni Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E298')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ni_rest()


@cache.run
@to_float
def p_rr_fe_rest():
    """
    Real Name: P rr Fe Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E293')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_fe_rest()


@cache.step
@subs(["materials"], _subscript_dict)
def by_mineral_rr_variation_rest():
    """
    Real Name: by mineral rr variation Rest
    Original Eqn: IF THEN ELSE(Time<2015, Historic improvement recycling rates minerals[materials], IF THEN ELSE(Time<start year P rr minerals Rest, Historic improvement recycling rates minerals[materials], by mineral rr Rest[materials]-by mineral rr Rest 1yr[materials]))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Variation of recycling rates per mineral for the rest of the economy.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_improvement_recycling_rates_minerals(),
        lambda: if_then_else(
            time() < start_year_p_rr_minerals_rest(),
            lambda: historic_improvement_recycling_rates_minerals(),
            lambda: by_mineral_rr_rest() - by_mineral_rr_rest_1yr(),
        ),
    )


@cache.step
@subs(["materials"], _subscript_dict)
def current_recycling_rates_minerals_alt_techn():
    """
    Real Name: current recycling rates minerals alt techn
    Original Eqn: current recycling rates minerals[materials]*"EOL-RR minerals alt techn RES vs. total economy"
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Current recycling rates of minerales for alternative technologies. Since
        these technologies are novel and often include materials which are used in
        small quantities in complex products, the recycling rates of the used
        minerals are lower than for the whole economy (following the parameter
        "EOL-RR minerals alt techn RES vs. total economy").
    """
    return (
        current_recycling_rates_minerals()
        * eolrr_minerals_alt_techn_res_vs_total_economy()
    )


@cache.run
@to_float
def p_rr_mg_alt_techn():
    """
    Real Name: P rr Mg alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D295')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_mg_alt_techn()


@cache.run
@subs(["materials"], _subscript_dict)
def p_rr_minerals_alt_techn():
    """
    Real Name: P rr minerals alt techn
    Original Eqn:
      0
        .
        .
        .
      P rr Zn alt techn
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Recycling rates by mineral for alternative technologies (RES elec & EV
        batteries) selected by user by scenario.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"materials": ["Adhesive"]}, ["materials"]),
            rearrange(p_rr_al_alt_techn(), ["materials"], {"materials": ["Aluminium"]}),
            xr.DataArray(0, {"materials": ["Aluminium mirrors"]}, ["materials"]),
            rearrange(p_rr_cd_alt_techn(), ["materials"], {"materials": ["Cadmium"]}),
            xr.DataArray(0, {"materials": ["Carbon fiber"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cement"]}, ["materials"]),
            rearrange(p_rr_cr_alt_techn(), ["materials"], {"materials": ["Chromium"]}),
            rearrange(p_rr_cu_alt_techn(), ["materials"], {"materials": ["Copper"]}),
            xr.DataArray(0, {"materials": ["diesel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Dy"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Electric electronic components"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["Evacuation lines"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Fiberglass"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Foam glass"]}, ["materials"]),
            rearrange(p_rr_ga_alt_techn(), ["materials"], {"materials": ["Galium"]}),
            xr.DataArray(0, {"materials": ["Glass"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Glass reinforcing plastic"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["gravel"]}, ["materials"]),
            rearrange(p_rr_in_alt_techn(), ["materials"], {"materials": ["Indium"]}),
            rearrange(p_rr_fe_alt_techn(), ["materials"], {"materials": ["Iron"]}),
            xr.DataArray(0, {"materials": ["KNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Asphalt"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lime"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Limestone"]}, ["materials"]),
            rearrange(p_rr_li_alt_techn(), ["materials"], {"materials": ["Lithium"]}),
            xr.DataArray(0, {"materials": ["Lubricant"]}, ["materials"]),
            rearrange(p_rr_mg_alt_techn(), ["materials"], {"materials": ["Magnesium"]}),
            rearrange(p_rr_mn_alt_techn(), ["materials"], {"materials": ["Manganese"]}),
            xr.DataArray(0, {"materials": ["Heavy equipment"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Concrete"]}, ["materials"]),
            rearrange(
                p_rr_mo_alt_techn(), ["materials"], {"materials": ["Molybdenum"]}
            ),
            xr.DataArray(0, {"materials": ["NaNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 synthetic"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Neodymium"]}, ["materials"]),
            rearrange(p_rr_ni_alt_techn(), ["materials"], {"materials": ["Nickel"]}),
            xr.DataArray(0, {"materials": ["Over grid 15per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 5per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Paint"]}, ["materials"]),
            rearrange(p_rr_pb_alt_techn(), ["materials"], {"materials": ["Lead"]}),
            xr.DataArray(0, {"materials": ["Plastics"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Polypropylene"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock wool"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Silicon sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Silicon wafer modules"]}, ["materials"]),
            rearrange(p_rr_ag_alt_techn(), ["materials"], {"materials": ["Silver"]}),
            xr.DataArray(0, {"materials": ["Site preparation"]}, ["materials"]),
            rearrange(p_rr_sn_alt_techn(), ["materials"], {"materials": ["Tin"]}),
            xr.DataArray(0, {"materials": ["soda ash"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["steel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["synthetic oil"]}, ["materials"]),
            rearrange(p_rr_te_alt_techn(), ["materials"], {"materials": ["tellurium"]}),
            rearrange(p_rr_ti_alt_techn(), ["materials"], {"materials": ["titanium"]}),
            xr.DataArray(0, {"materials": ["titanium dioxide"]}, ["materials"]),
            rearrange(p_rr_v_alt_techn(), ["materials"], {"materials": ["vanadium"]}),
            xr.DataArray(0, {"materials": ["wires"]}, ["materials"]),
            rearrange(p_rr_zn_alt_techn(), ["materials"], {"materials": ["zinc"]}),
        ]
    )


@cache.run
@to_float
def p_rr_mn_alt_techn():
    """
    Real Name: P rr Mn alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D296')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_mn_alt_techn()


@cache.run
@to_float
def p_rr_mo_alt_techn():
    """
    Real Name: P rr Mo alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D297')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_mo_alt_techn()


@cache.run
@to_float
def p_rr_ni_alt_techn():
    """
    Real Name: P rr Ni alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D298')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ni_alt_techn()


@cache.run
@to_float
def p_rr_pb_alt_techn():
    """
    Real Name: P rr Pb alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D299')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_pb_alt_techn()


@cache.step
@subs(["materials"], _subscript_dict)
def by_mineral_rr_alt_techn():
    """
    Real Name: by mineral rr alt techn
    Original Eqn: a lineal regr rr alt techn[materials]*Time+b lineal regr rr alt techn[materials]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates over time by mineral for alternative technologies (RES
        elec & EV batteries).
    """
    return a_lineal_regr_rr_alt_techn() * time() + b_lineal_regr_rr_alt_techn()


@cache.step
@subs(["materials"], _subscript_dict)
def by_mineral_rr_alt_techn_1yr():
    """
    Real Name: by mineral rr alt techn 1yr
    Original Eqn: DELAY FIXED ( by mineral rr alt techn[materials], 1, current recycling rates minerals alt techn[materials])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates over time delayed 1 year by mineral for alternative
        technologies (RES elec & EV batteries).
    """
    return _delayfixed_by_mineral_rr_alt_techn_1yr()


@cache.run
@to_float
def p_rr_al_alt_techn():
    """
    Real Name: P rr Al alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D287')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_al_alt_techn()


@cache.run
@to_float
def p_rr_cd_alt_techn():
    """
    Real Name: P rr Cd alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D288')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_cd_alt_techn()


@cache.run
@to_float
def p_rr_cu_alt_techn():
    """
    Real Name: P rr Cu alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D290')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_cu_alt_techn()


@cache.run
@to_float
def p_rr_fe_alt_techn():
    """
    Real Name: P rr Fe alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D293')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_fe_alt_techn()


@cache.run
@to_float
def p_rr_ga_alt_techn():
    """
    Real Name: P rr Ga alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D291')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ga_alt_techn()


@cache.run
@to_float
def p_rr_in_alt_techn():
    """
    Real Name: P rr In alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D292')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_in_alt_techn()


@cache.run
@to_float
def p_rr_li_alt_techn():
    """
    Real Name: P rr Li alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D294')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_li_alt_techn()


@cache.step
@subs(["materials"], _subscript_dict)
def recycling_rates_minerals_alt_techn():
    """
    Real Name: recycling rates minerals alt techn
    Original Eqn: INTEG ( improvement recycling rates minerals alt techn[materials], current recycling rates minerals alt techn[materials]*"All minerals virgin?")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates minerals of alternative technologies (RES elec & EV
        batteries).
    """
    return _integ_recycling_rates_minerals_alt_techn()


@cache.run
@to_float
def p_rr_v_alt_techn():
    """
    Real Name: P rr V alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D304')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_v_alt_techn()


@cache.run
@to_float
def p_rr_zn_alt_techn():
    """
    Real Name: P rr Zn alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D305')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_zn_alt_techn()


@cache.run
@to_float
def p_rr_ti_alt_techn():
    """
    Real Name: P rr Ti alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D303')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ti_alt_techn()


@cache.run
@to_float
def p_rr_cr_alt_techn():
    """
    Real Name: P rr Cr alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D289')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_cr_alt_techn()


@cache.run
@to_float
def p_rr_ag_alt_techn():
    """
    Real Name: P rr Ag alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D300')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_ag_alt_techn()


@cache.run
@to_float
def p_rr_sn_alt_techn():
    """
    Real Name: P rr Sn alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D301')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_sn_alt_techn()


@cache.run
@to_float
def p_rr_te_alt_techn():
    """
    Real Name: P rr Te alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D302')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_p_rr_te_alt_techn()


@cache.step
@subs(["materials"], _subscript_dict)
def improvement_recycling_rates_minerals_alt_techn():
    """
    Real Name: improvement recycling rates minerals alt techn
    Original Eqn: IF THEN ELSE(Time<2015, Historic improvement recycling rates minerals[materials], IF THEN ELSE(choose targets mineral recycling rates=2,common rr minerals variation alt techn[materials ]*recycling rates minerals alt techn[materials], by mineral rr variation alt techn[materials]))*constrain rr improv for alt techn per mineral[materials]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual improvement of the recycling rates of minerals for alternative
        technologies (RES elec & EV batteries).
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: historic_improvement_recycling_rates_minerals(),
            lambda: if_then_else(
                choose_targets_mineral_recycling_rates() == 2,
                lambda: common_rr_minerals_variation_alt_techn()
                * recycling_rates_minerals_alt_techn(),
                lambda: by_mineral_rr_variation_alt_techn(),
            ),
        )
        * constrain_rr_improv_for_alt_techn_per_mineral()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def by_mineral_rr_variation_alt_techn():
    """
    Real Name: by mineral rr variation alt techn
    Original Eqn: IF THEN ELSE(Time<2015, Historic improvement recycling rates minerals[materials], IF THEN ELSE(Time<start year P rr minerals alt techn, Historic improvement recycling rates minerals[materials], by mineral rr alt techn[materials]-by mineral rr alt techn 1yr[materials]))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Variation of recycling rates per mineral for alternative technologies (RES
        elec & EV batteries).
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_improvement_recycling_rates_minerals(),
        lambda: if_then_else(
            time() < start_year_p_rr_minerals_alt_techn(),
            lambda: historic_improvement_recycling_rates_minerals(),
            lambda: by_mineral_rr_alt_techn() - by_mineral_rr_alt_techn_1yr(),
        ),
    )


@cache.run
@to_float
def start_year_p_rr_minerals_alt_techn():
    """
    Real Name: start year P rr minerals alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B286')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of variation recycling rate of minerals for alternative
        technologies (RES elec & EV batteries).
    """
    return _ext_constant_start_year_p_rr_minerals_alt_techn()


@cache.run
@to_float
def target_year_p_rr_minerals_alt_techn():
    """
    Real Name: target year P rr minerals alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B285')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year of variation recycling rate of minerals for alternative
        technologies (RES elec & EV batteries).
    """
    return _ext_constant_target_year_p_rr_minerals_alt_techn()


@cache.step
@subs(["RCP Scenario"], _subscript_dict)
def sf6_emissions_rcp():
    """
    Real Name: SF6 emissions RCP
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J63')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J64')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J65')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J66')
    Units: tons/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RCP Scenario']

    Historic data + projections "Representative Concentration Pathways" (RCPs,
        see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_sf6_emissions_rcp(time())


@cache.run
@to_float
def choose_rcp():
    """
    Real Name: Choose RCP
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'G116')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Choose RCP (Representative Concentration Pathway)        1. RCP 2.6        2. RCP 4.5        3. RCP 6.0        4. RCP 8.5
    """
    return _ext_constant_choose_rcp()


@cache.step
@subs(["RCP Scenario"], _subscript_dict)
def ch4_anthro_emissions_rcp():
    """
    Real Name: CH4 anthro emissions RCP
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J51')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J52')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J53')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J54')
    Units: Mton/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RCP Scenario']

    "Representative Concentration Pathways" (RCPs, see
        http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_ch4_anthro_emissions_rcp(time())


@cache.step
@subs(["HFC type"], _subscript_dict)
def hfc_emissions():
    """
    Real Name: HFC emissions
    Original Eqn:
      IF THEN ELSE(Choose RCP=1, "HFC emissions RCP 2.6"[HFC134a], IF THEN ELSE(Choose RCP=2, "HFC emissions RCP 4.5"[HFC134a], IF THEN ELSE(Choose RCP=3, "HFC emissions RCP 6.0"[HFC134a], "HFC emissions RCP 8.5"[HFC134a])))
        .
        .
        .
      IF THEN ELSE(Choose RCP=1, "HFC emissions RCP 2.6"[HFC4310mee], IF THEN ELSE(Choose RCP=2, "HFC emissions RCP 4.5"[HFC4310mee], IF THEN ELSE(Choose RCP=3, "HFC emissions RCP 6.0"[HFC4310mee], "HFC emissions RCP 8.5"[HFC4310mee])))
    Units: tons/Year
    Limits: (None, None)
    Type: component
    Subs: ['HFC type']

    Historic data + projections "Representative Concentration Pathways" (RCPs, see
        http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)        Choose RCP:        1. RCP 2.6        2. RCP 4.5        3. RCP 6.0        4. RCP 8.5
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26()
                    .loc["HFC134a"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC134a"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC134a"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC134a"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC134a"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26().loc["HFC23"].reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC23"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC23"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC23"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC23"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26().loc["HFC32"].reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC32"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC32"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC32"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC32"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26()
                    .loc["HFC125"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC125"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC125"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC125"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC125"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26()
                    .loc["HFC143a"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC143a"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC143a"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC143a"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC143a"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26()
                    .loc["HFC152a"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC152a"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC152a"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC152a"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC152a"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26()
                    .loc["HFC227ea"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC227ea"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC227ea"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC227ea"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC227ea"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26()
                    .loc["HFC245ca"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC245ca"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC245ca"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC245ca"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC245ca"]},
            ),
            rearrange(
                if_then_else(
                    choose_rcp() == 1,
                    lambda: hfc_emissions_rcp_26()
                    .loc["HFC4310mee"]
                    .reset_coords(drop=True),
                    lambda: if_then_else(
                        choose_rcp() == 2,
                        lambda: hfc_emissions_rcp_45()
                        .loc["HFC4310mee"]
                        .reset_coords(drop=True),
                        lambda: if_then_else(
                            choose_rcp() == 3,
                            lambda: hfc_emissions_rcp_60()
                            .loc["HFC4310mee"]
                            .reset_coords(drop=True),
                            lambda: hfc_emissions_rcp_85()
                            .loc["HFC4310mee"]
                            .reset_coords(drop=True),
                        ),
                    ),
                ),
                ["HFC type"],
                {"HFC type": ["HFC4310mee"]},
            ),
        ]
    )


@cache.step
@subs(["HFC type"], _subscript_dict)
def hfc_emissions_rcp_26():
    """
    Real Name: "HFC emissions RCP 2.6"
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J68')
        .
        .
        .
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J100')
    Units: tons/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['HFC type']

    Historic data + projections "Representative Concentration Pathways" (RCPs,
        see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_26(time())


@cache.step
@subs(["HFC type"], _subscript_dict)
def hfc_emissions_rcp_45():
    """
    Real Name: "HFC emissions RCP 4.5"
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J69')
        .
        .
        .
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J101')
    Units: tons/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['HFC type']

    Historic data + projections "Representative Concentration Pathways" (RCPs,
        see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_45(time())


@cache.step
@subs(["HFC type"], _subscript_dict)
def hfc_emissions_rcp_60():
    """
    Real Name: "HFC emissions RCP 6.0"
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J70')
        .
        .
        .
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J102')
    Units: tons/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['HFC type']

    Historic data + projections "Representative Concentration Pathways" (RCPs,
        see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_60(time())


@cache.step
@to_float
def pfc_emissions():
    """
    Real Name: PFC emissions
    Original Eqn: IF THEN ELSE(Choose RCP=1, PFC emissions RCP[RCP26], IF THEN ELSE(Choose RCP=2, PFC emissions RCP[RCP45], IF THEN ELSE(Choose RCP=3,PFC emissions RCP[RCP60], PFC emissions RCP[RCP85])))
    Units: tons/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Historic data + projections "Representative Concentration Pathways" (RCPs, see
        http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)        Choose RCP:        1. RCP 2.6        2. RCP 4.5        3. RCP 6.0        4. RCP 8.5
    """
    return if_then_else(
        choose_rcp() == 1,
        lambda: pfc_emissions_rcp().loc["RCP26"].reset_coords(drop=True),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: pfc_emissions_rcp().loc["RCP45"].reset_coords(drop=True),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: pfc_emissions_rcp().loc["RCP60"].reset_coords(drop=True),
                lambda: pfc_emissions_rcp().loc["RCP85"].reset_coords(drop=True),
            ),
        ),
    )


@cache.step
@subs(["RCP Scenario"], _subscript_dict)
def pfc_emissions_rcp():
    """
    Real Name: PFC emissions RCP
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J59')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J60')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J61')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J62')
    Units: tons/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RCP Scenario']

    Historic data + projections "Representative Concentration Pathways" (RCPs,
        see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_pfc_emissions_rcp(time())


@cache.step
@to_float
def sf6_emissions():
    """
    Real Name: SF6 emissions
    Original Eqn: IF THEN ELSE(Choose RCP=1, SF6 emissions RCP[RCP26], IF THEN ELSE(Choose RCP=2, SF6 emissions RCP[RCP45], IF THEN ELSE(Choose RCP=3, SF6 emissions RCP[RCP60], SF6 emissions RCP[RCP85])))
    Units: tons/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Historic data + projections "Representative Concentration Pathways" (RCPs, see
        http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)        Choose RCP:        1. RCP 2.6        2. RCP 4.5        3. RCP 6.0        4. RCP 8.5
    """
    return if_then_else(
        choose_rcp() == 1,
        lambda: sf6_emissions_rcp().loc["RCP26"].reset_coords(drop=True),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: sf6_emissions_rcp().loc["RCP45"].reset_coords(drop=True),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: sf6_emissions_rcp().loc["RCP60"].reset_coords(drop=True),
                lambda: sf6_emissions_rcp().loc["RCP85"].reset_coords(drop=True),
            ),
        ),
    )


@cache.step
@to_float
def n2o_anthro_emissions():
    """
    Real Name: N2O Anthro Emissions
    Original Eqn: IF THEN ELSE(Choose RCP=1, N2O Anthro Emissions RCP[RCP26], IF THEN ELSE(Choose RCP=2, N2O Anthro Emissions RCP[RCP45], IF THEN ELSE(Choose RCP=3, N2O Anthro Emissions RCP[RCP60], N2O Anthro Emissions RCP[RCP85])))
    Units: Mton N/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Historic data + projections "Representative Concentration Pathways" (RCPs, see
        http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)        Choose RCP:        1. RCP 2.6        2. RCP 4.5        3. RCP 6.0        4. RCP 8.5
    """
    return if_then_else(
        choose_rcp() == 1,
        lambda: n2o_anthro_emissions_rcp().loc["RCP26"].reset_coords(drop=True),
        lambda: if_then_else(
            choose_rcp() == 2,
            lambda: n2o_anthro_emissions_rcp().loc["RCP45"].reset_coords(drop=True),
            lambda: if_then_else(
                choose_rcp() == 3,
                lambda: n2o_anthro_emissions_rcp().loc["RCP60"].reset_coords(drop=True),
                lambda: n2o_anthro_emissions_rcp().loc["RCP85"].reset_coords(drop=True),
            ),
        ),
    )


@cache.step
@subs(["RCP Scenario"], _subscript_dict)
def n2o_anthro_emissions_rcp():
    """
    Real Name: N2O Anthro Emissions RCP
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J55')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J56')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J57')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J58')
    Units: Mton N/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RCP Scenario']

    Historic data + projections "Representative Concentration Pathways" (RCPs,
        see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_n2o_anthro_emissions_rcp(time())


@cache.step
@subs(["HFC type"], _subscript_dict)
def hfc_emissions_rcp_85():
    """
    Real Name: "HFC emissions RCP 8.5"
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J71')
        .
        .
        .
      GET DIRECT DATA('?inputs_eu.xlsx', 'Climate', '50', 'J103')
    Units: tons/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['HFC type']

    Historic data + projections "Representative Concentration Pathways" (RCPs,
        see http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=compare)
    """
    return _ext_data_hfc_emissions_rcp_85(time())


@cache.step
@subs(["materials"], _subscript_dict)
def common_rr_minerals_variation_alt_techn():
    """
    Real Name: common rr minerals variation alt techn
    Original Eqn: IF THEN ELSE(Time<start year P common rr minerals alt techn, Historic improvement recycling rates minerals[materials], P common rr minerals variation alt techn)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates of minererals (common annual variation).
    """
    return if_then_else(
        time() < start_year_p_common_rr_minerals_alt_techn(),
        lambda: historic_improvement_recycling_rates_minerals(),
        lambda: p_common_rr_minerals_variation_alt_techn(),
    )


@cache.run
@to_float
def choose_targets_mineral_recycling_rates():
    """
    Real Name: choose targets mineral recycling rates
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D283')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1- Disaggregated by mineral.        2- Common annual variation for all minerals.
    """
    return _ext_constant_choose_targets_mineral_recycling_rates()


@cache.step
@to_float
def total_water_use_per_capita():
    """
    Real Name: Total water use per capita
    Original Eqn: Total water use/Population
    Units: dam3/person
    Limits: (None, None)
    Type: component
    Subs: None

    Total water use (all types aggregated) per capita.
    """
    return total_water_use() / population()


@cache.step
@to_float
def total_water_use():
    """
    Real Name: Total water use
    Original Eqn: SUM(Total water use by type[water!])
    Units: dam3
    Limits: (None, None)
    Type: component
    Subs: None

    Total water use (all types aggregated).
    """
    return sum(total_water_use_by_type(), dim=("water",))


@cache.step
@subs(["water"], _subscript_dict)
def water_use_per_type_per_capita():
    """
    Real Name: Water use per type per capita
    Original Eqn: Total water use by type[water]/Population
    Units: dam3/person
    Limits: (None, None)
    Type: component
    Subs: ['water']

    Water use per type per capita.
    """
    return total_water_use_by_type() / population()


@cache.step
@subs(["sectors", "water"], _subscript_dict)
def variation_water_intensity_by_sector():
    """
    Real Name: Variation water intensity by sector
    Original Eqn: IF THEN ELSE(Time<2008, Historic water by type intensities by sector[sectors,water]-Historic water intensities by sector delayed 1yr[sectors,water], 0)
    Units: dam3/$1995
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'water']

    Variation of water intensity by type,  sector and year.
    """
    return if_then_else(
        time() < 2008,
        lambda: historic_water_by_type_intensities_by_sector()
        - historic_water_intensities_by_sector_delayed_1yr(),
        lambda: 0,
    )


@cache.step
@subs(["sectors", "water"], _subscript_dict)
def historic_water_intensities_by_sector_delayed_1yr():
    """
    Real Name: Historic water intensities by sector delayed 1yr
    Original Eqn: DELAY FIXED ( Historic water by type intensities by sector[sectors,water], 1, Initial water intensity by sector[sectors,water])
    Units: dam3/Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'water']


    """
    return _delayfixed_historic_water_intensities_by_sector_delayed_1yr()


@cache.step
@subs(["water"], _subscript_dict)
def historic_water_intensities_for_households_delayed_1yr():
    """
    Real Name: Historic water intensities for households delayed 1yr
    Original Eqn: DELAY FIXED ( Historic water by type intensities for households[water], 1, Initial water intensity for households[water])
    Units: dam3/Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['water']


    """
    return _delayfixed_historic_water_intensities_for_households_delayed_1yr()


@cache.step
@subs(["water"], _subscript_dict)
def variation_water_intensity_households():
    """
    Real Name: Variation water intensity households
    Original Eqn: IF THEN ELSE(Time<2008, Historic water by type intensities for households[water]-Historic water intensities for households delayed 1yr [water], 0)
    Units: dam3/Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['water']

    Variation of water intensity for households by type and year.
    """
    return if_then_else(
        time() < 2008,
        lambda: historic_water_by_type_intensities_for_households()
        - historic_water_intensities_for_households_delayed_1yr(),
        lambda: 0,
    )


@cache.step
@subs(["water"], _subscript_dict)
def water_intensity_for_households():
    """
    Real Name: Water intensity for households
    Original Eqn: INTEG ( Variation water intensity households[water], Initial water intensity for households[water])
    Units: dam3/$1995
    Limits: (None, None)
    Type: component
    Subs: ['water']


    """
    return _integ_water_intensity_for_households()


@cache.run
@to_float
def p_minimum_forest():
    """
    Real Name: P minimum forest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C270')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Minimum surface of forest land accepted.
    """
    return _ext_constant_p_minimum_forest()


@cache.run
@to_float
def forest_extraction_per_ha():
    """
    Real Name: forest extraction per Ha
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'C3')
    Units: EJ/MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Wood extration from forest in 2015, we assume this extraction is
        sustainable and it might grow slightly 10% because of better management,
        average last years
    """
    return _ext_constant_forest_extraction_per_ha()


@cache.step
@to_float
def max_sustainable_forest_extraction_ej():
    """
    Real Name: max sustainable forest extraction EJ
    Original Eqn: "'Available' forest area"*forest extraction per Ha
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Wood that might be extracted from forest according to usable foresta area
        in terms of energy equivalent
    """
    return available_forest_area() * forest_extraction_per_ha()


@cache.run
@to_float
def demand_forest_wood_products_pc():
    """
    Real Name: demand forest wood products pc
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'C2')
    Units: m3/people
    Limits: (None, None)
    Type: constant
    Subs: None

    Demand of forest non energy products per capita, data FAO2016
    """
    return _ext_constant_demand_forest_wood_products_pc()


@cache.step
@to_float
def demand_wood_products_m3():
    """
    Real Name: demand wood products m3
    Original Eqn: demand forest wood products pc*Population
    Units: m3
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of non-energy product forests
    """
    return demand_forest_wood_products_pc() * population()


@cache.step
@to_float
def past_trends_co2_lucf():
    """
    Real Name: Past trends CO2 LUCF
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H44')
    Units: GtCO2
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic CO2 emissions from Land-Use Change and Forestry.
    """
    return _ext_data_past_trends_co2_lucf(time())


@cache.step
@to_float
def deficit_wood_products():
    """
    Real Name: deficit wood products
    Original Eqn: (demand wood products EJ-consum wood products EJ)/demand wood products EJ
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Percent of the demand of wood products that cannot be met. I should
        influence the corresponding economic sector  but it does not
    """
    return (
        demand_wood_products_ej() - consum_wood_products_ej()
    ) / demand_wood_products_ej()


@cache.step
@to_float
def unsustainable_loggin():
    """
    Real Name: unsustainable loggin
    Original Eqn: MAX(0, (forest extraction EJ-max sustainable forest extraction EJ )*forest stock ratio)
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Loss of forest land due to overexplotation of forest for energy uses.
    """
    return np.maximum(
        0,
        (forest_extraction_ej() - max_sustainable_forest_extraction_ej())
        * forest_stock_ratio(),
    )


@cache.run
@to_float
def wood_energy_density():
    """
    Real Name: wood energy density
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'C4')
    Units: EJ/m3
    Limits: (None, None)
    Type: constant
    Subs: None

    Average energy of wood products.
    """
    return _ext_constant_wood_energy_density()


@cache.step
@to_float
def demand_wood_products_ej():
    """
    Real Name: demand wood products EJ
    Original Eqn: demand wood products m3*wood energy density
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of non energy forest products expressed as energy (to compare with
        other uses)
    """
    return demand_wood_products_m3() * wood_energy_density()


@cache.step
@to_float
def total_demand_forest_biomass_ej():
    """
    Real Name: total demand forest biomass EJ
    Original Eqn: demand forest energy non tradition EJ+demand forest energy traditional EJ+demand wood products EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total demand of wood products from forest for all uses
    """
    return (
        demand_forest_energy_non_tradition_ej()
        + demand_forest_energy_traditional_ej()
        + demand_wood_products_ej()
    )


@cache.step
@to_float
def demand_forest_energy_traditional_ej():
    """
    Real Name: demand forest energy traditional EJ
    Original Eqn: PE traditional biomass demand EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of tradition biomass in terms of EJ
    """
    return pe_traditional_biomass_demand_ej()


def historic_water_use_by_type_sectors(x):
    """
    Real Name: Historic water use by type sectors
    Original Eqn:
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Water', '1', 'B2')
        .
        .
        .
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Water', '1', 'B112')
    Units: dam3/$
    Limits: (None, None)
    Type: lookup
    Subs: ['sectors1', 'water']

    Historic water use by type for 35 WIOD sectors.
    """
    return _ext_lookup_historic_water_use_by_type_sectors(x)


@cache.step
@subs(["sectors", "water"], _subscript_dict)
def historic_water_by_type_intensities_by_sector():
    """
    Real Name: Historic water by type intensities by sector
    Original Eqn: IF THEN ELSE( Time<2009, Historic water use by type sectors[sectors,water](Time)/Real total output by sector EU[sectors], 0)
    Units: dam3/Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'water']


    """
    return if_then_else(
        time() < 2009,
        lambda: rearrange(
            historic_water_use_by_type_sectors(time()),
            ["sectors", "water"],
            _subscript_dict,
        )
        / real_total_output_by_sector_eu(),
        lambda: 0,
    )


@cache.step
@subs(["water"], _subscript_dict)
def total_water_use_by_type():
    """
    Real Name: Total water use by type
    Original Eqn: SUM(Water use by sector[sectors!,water])+Water use by households[water]+"Total water for O&M required by RES elec dam3"[water]
    Units: dam3
    Limits: (None, None)
    Type: component
    Subs: ['water']

    Total water consumption by type (green, blue, grey).
    """
    return (
        sum(water_use_by_sector(), dim=("sectors",))
        + water_use_by_households()
        + total_water_for_om_required_by_res_elec_dam3()
    )


@cache.step
@subs(["water"], _subscript_dict)
def total_water_for_om_required_by_res_elec_dam3():
    """
    Real Name: "Total water for O&M required by RES elec dam3"
    Original Eqn: "Total water for O&M required by RES elec"[ water]*Mt to dam3
    Units: dam3
    Limits: (None, None)
    Type: component
    Subs: ['water']


    """
    return total_water_for_om_required_by_res_elec() * mt_to_dam3()


@cache.step
@subs(["sectors", "water"], _subscript_dict)
def water_intensity_by_sector():
    """
    Real Name: Water intensity by sector
    Original Eqn: INTEG ( Variation water intensity by sector[sectors,water], Initial water intensity by sector[sectors,water])
    Units: dam3/$1995
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'water']


    """
    return _integ_water_intensity_by_sector()


@cache.step
@subs(["sectors", "water"], _subscript_dict)
def water_use_by_sector():
    """
    Real Name: Water use by sector
    Original Eqn: Water intensity by sector[sectors,water]*Real total output by sector EU[sectors]
    Units: dam3
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'water']

    Water use by type by sector.
    """
    return water_intensity_by_sector() * real_total_output_by_sector_eu()


@cache.step
@to_float
def total_co2_emissions_gtco2():
    """
    Real Name: Total CO2 emissions GTCO2
    Original Eqn: CO2 fossil fuel emissions+"CO2 soil&LUCF emissions"+BioE CO2 emissions+CO2 emissions peat-Afforestation program 2020 GtCO2
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total annual CO2 emissions. Original unit: "mill Tn CO2"
    """
    return (
        co2_fossil_fuel_emissions()
        + co2_soillucf_emissions()
        + bioe_co2_emissions()
        + co2_emissions_peat()
        - afforestation_program_2020_gtco2()
    )


@cache.step
@to_float
def pe_traditional_biomass_ej_delayed_1yr():
    """
    Real Name: PE traditional biomass EJ delayed 1yr
    Original Eqn: DELAY FIXED(PE traditional biomass consum EJ, TIME STEP, 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy consumption of traditional biomass. It also includes
        charcoal and biosolids for solids.
    """
    return _delayfixed_pe_traditional_biomass_ej_delayed_1yr()


@cache.step
@to_float
def population_dependent_on_trad_biomass():
    """
    Real Name: Population dependent on trad biomass
    Original Eqn: ZIDZ( PE traditional biomass consum EJ , PEpc consumption people depending on trad biomass)
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Population dependent on traditional biomass.
    """
    return zidz(
        pe_traditional_biomass_consum_ej(),
        pepc_consumption_people_depending_on_trad_biomass(),
    )


@cache.run
@to_float
def mt_to_dam3():
    """
    Real Name: Mt to dam3
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G17')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_mt_to_dam3()


@cache.step
@subs(["water"], _subscript_dict)
def total_water_for_om_required_by_res_elec():
    """
    Real Name: "Total water for O&M required by RES elec"
    Original Eqn:
      SUM("Total water for O&M required by RES elec per techn"[RES elec!])
      0
      0
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['water']


    """
    return xrmerge(
        [
            rearrange(
                sum(
                    total_water_for_om_required_by_res_elec_per_techn(),
                    dim=("RES elec",),
                ),
                ["water"],
                {"water": ["blue water"]},
            ),
            xr.DataArray(0, {"water": ["green water"]}, ["water"]),
            xr.DataArray(0, {"water": ["gray water"]}, ["water"]),
        ]
    )


def historic_water_use_by_type_for_households(x):
    """
    Real Name: Historic water use by type for households
    Original Eqn:
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Water', '1', 'B37')
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Water', '1', 'B75'))
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Water', '1', 'B113'))
    Units: Mdollars
    Limits: (None, None)
    Type: lookup
    Subs: ['water']

    Historic water use by type for households.
    """
    return _ext_lookup_historic_water_use_by_type_for_households(x)


@cache.step
@subs(["sectors", "water"], _subscript_dict)
def initial_water_intensity_by_sector():
    """
    Real Name: Initial water intensity by sector
    Original Eqn: IF THEN ELSE(Time<1996, Initial water use by sector[sectors, water]/Real total output by sector EU[sectors] , 0 )
    Units: dam3/Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'water']


    """
    return if_then_else(
        time() < 1996,
        lambda: rearrange(
            initial_water_use_by_sector(), ["sectors", "water"], _subscript_dict
        )
        / real_total_output_by_sector_eu(),
        lambda: 0,
    )


@cache.run
@subs(["water"], _subscript_dict)
def initial_water_use_by_households():
    """
    Real Name: Initial water use by households
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Water', 'B37')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Water', 'B75')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Water', 'B113')
    Units: dam3
    Limits: (None, None)
    Type: constant
    Subs: ['water']

    Water use by type by households in the year 1995 (WIOD database).
    """
    return _ext_constant_initial_water_use_by_households()


@cache.run
@subs(["sectors1", "water"], _subscript_dict)
def initial_water_use_by_sector():
    """
    Real Name: Initial water use by sector
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Water', 'B2')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Water', 'B112')
    Units: dam3/$
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'water']

    Water use by type and sector in the year 1995 (WIOD database).
    """
    return _ext_constant_initial_water_use_by_sector()


@cache.step
@to_float
def deficit_forest_biomass():
    """
    Real Name: deficit forest biomass
    Original Eqn: IF THEN ELSE( max sustainable forest extraction EJ>total demand forest biomass EJ , 0, (total demand forest biomass EJ -max sustainable forest extraction EJ)/total demand forest biomass EJ )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Percent of deficit of forest biomass, in terms of forest extraction
        demand. If maximun extration is greater than demand it is 0
    """
    return if_then_else(
        max_sustainable_forest_extraction_ej() > total_demand_forest_biomass_ej(),
        lambda: 0,
        lambda: (
            total_demand_forest_biomass_ej() - max_sustainable_forest_extraction_ej()
        )
        / total_demand_forest_biomass_ej(),
    )


@cache.step
@to_float
def total_demand_energy_forest_ej():
    """
    Real Name: total demand energy forest EJ
    Original Eqn: demand forest energy non tradition EJ+demand forest energy traditional EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total demand of forest energy.
    """
    return (
        demand_forest_energy_non_tradition_ej() + demand_forest_energy_traditional_ej()
    )


@cache.run
@to_float
def p_forest_overexplotation():
    """
    Real Name: P forest overexplotation
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C268')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of forest extraction for energy uses. Describes the percent of
        deficit of forest biomass acepted. If gives the percent at which wood for
        energy and non energy uses must adapt to sustainable potencial. If it's
        greater than 0 means that overexplotaion of forest leads to forest stock
        destruction.
    """
    return _ext_constant_p_forest_overexplotation()


@cache.step
@to_float
def adapt_growth_waste():
    """
    Real Name: adapt growth waste
    Original Eqn: IF THEN ELSE(Time<2015, Past waste growth, IF THEN ELSE(Time<2020, Past waste growth+(waste change-Past waste growth)*(Time dmnl(Time)-2015)/5, waste change))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Modeling of a soft transition from current historic annual growth to reach
        the policy-objective 5 years later.
    """
    return if_then_else(
        time() < 2015,
        lambda: past_waste_growth(),
        lambda: if_then_else(
            time() < 2020,
            lambda: past_waste_growth()
            + (waste_change() - past_waste_growth()) * (time_dmnl(time()) - 2015) / 5,
            lambda: waste_change(),
        ),
    )


@cache.step
@to_float
def adapt_co2_emissions_unconv_gas():
    """
    Real Name: Adapt CO2 emissions unconv gas
    Original Eqn: IF THEN ELSE( Time<2050, 0.01+(0.22-0.01)*(Time dmnl(Time)-2000)/50, IF THEN ELSE( Time<2100, 0.22+(0.6-0.22)*(Time dmnl(Time)-2050)/50, 0.6))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Unconventional gas emissions are 3,53 tCO2/toe vs 2,35 for conventional.
        Since we have all natural gas modeled in an aggregated manner, this
        function corrects these emissions assuming that unconventional gas would
        follow the share un relation to natural gas as estimated by
        [Mohr&Evans2011](BG) for 2050 and 2100 (linear interpolation).
    """
    return if_then_else(
        time() < 2050,
        lambda: 0.01 + (0.22 - 0.01) * (time_dmnl(time()) - 2000) / 50,
        lambda: if_then_else(
            time() < 2100,
            lambda: 0.22 + (0.6 - 0.22) * (time_dmnl(time()) - 2050) / 50,
            lambda: 0.6,
        ),
    )


@cache.step
@to_float
def adapt_emissions_shale_oil():
    """
    Real Name: Adapt emissions shale oil
    Original Eqn: IF THEN ELSE(Time<2050, 0.001+(0.15-0.001)*(Time dmnl(Time)-2000)/50, IF THEN ELSE( Time<2100, 0.15+(0.72-0.15)*(Time dmnl(Time)-2050)/50, 0.72))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Shale oil emissions are 6,14tCO2/toe vs 3,84 for unconventional oil. Since
        we have unconventional oils in an aggregated manner, this functions
        corrects these emissions assuming that shale oil would follow the share in
        relation to the total unconventional oil as estimated by
        [Mohr&Evans2010](Low Case) for 2050 and 2100 (linear interpolation)
    """
    return if_then_else(
        time() < 2050,
        lambda: 0.001 + (0.15 - 0.001) * (time_dmnl(time()) - 2000) / 50,
        lambda: if_then_else(
            time() < 2100,
            lambda: 0.15 + (0.72 - 0.15) * (time_dmnl(time()) - 2050) / 50,
            lambda: 0.72,
        ),
    )


@cache.step
@to_float
def adapt_growth_biofuels_2gen():
    """
    Real Name: adapt growth biofuels 2gen
    Original Eqn: IF THEN ELSE(Time<2015, 0, IF THEN ELSE(Time<2020, past biofuels 2gen+(P biofuels 2gen land compet-past biofuels 2gen)*(Time dmnl(Time)-2015)/5, P biofuels 2gen land compet))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Modeling of a soft transition from current historic annual growth to reach
        the policy-objective 5 years later. Growth for 2nd generation biofuels in
        competition and marginal lands.
    """
    return if_then_else(
        time() < 2015,
        lambda: 0,
        lambda: if_then_else(
            time() < 2020,
            lambda: past_biofuels_2gen()
            + (p_biofuels_2gen_land_compet() - past_biofuels_2gen())
            * (time_dmnl(time()) - 2015)
            / 5,
            lambda: p_biofuels_2gen_land_compet(),
        ),
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def demand_by_sector_fd_adjusted():
    """
    Real Name: demand by sector FD adjusted
    Original Eqn: Demand by sector FD EU[sectors]*diff demand EU
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Demand by sector after adjustment to match the desired GDP level.
    """
    return demand_by_sector_fd_eu() * diff_demand_eu()


@cache.step
@to_float
def total_demand_adjusted():
    """
    Real Name: total demand adjusted
    Original Eqn: SUM(demand by sector FD adjusted[sectors!])/1e+06
    Units: Tdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Total demand after adjustment of the demand function.
    """
    return sum(demand_by_sector_fd_adjusted(), dim=("sectors",)) / 1e06


@cache.step
@subs(["sectors"], _subscript_dict)
def domestic_demand_by_sector():
    """
    Real Name: Domestic demand by sector
    Original Eqn: demand by sector FD adjusted[sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    EU28 total final demand by sector
    """
    return demand_by_sector_fd_adjusted()


@cache.step
@to_float
def aux4():
    """
    Real Name: aux4
    Original Eqn: DELAY FIXED ( EROIst system until 2015, TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the EROIst of the system in the year 2015.
    """
    return _delayfixed_aux4()


@cache.run
@to_float
def nvs_1_year():
    """
    Real Name: "1 year"
    Original Eqn: 1
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 1


@cache.step
@subs(["RES elec"], _subscript_dict)
def eptb_dynamic():
    """
    Real Name: EPTB dynamic
    Original Eqn: ZIDZ( lifetime RES elec[RES elec] , "'dynamic' EROI RES elec var"[RES elec] )
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return zidz(lifetime_res_elec(), dynamic_eroi_res_elec_var())


@cache.step
@to_float
def eroist_system_delayed():
    """
    Real Name: EROIst system delayed
    Original Eqn: DELAY FIXED ( EROIst system, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROIst of the system delayed. This variable is introduced to avoid
        simultaneous equations.
    """
    return _delayfixed_eroist_system_delayed()


@cache.step
@to_float
def eroist_system_delayed_1yr():
    """
    Real Name: EROIst system delayed 1yr
    Original Eqn: DELAY FIXED ( EROIst system, 1, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROIst of the system delayed 1 year.
    """
    return _delayfixed_eroist_system_delayed_1yr()


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix():
    """
    Real Name: IA Matrix
    Original Eqn: IA matrix for Python[sectors,sectors1]
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    IA Matrix        Code for Vensim: IF THEN ELSE("calculate Leontief matrix?"=1, IA Matrix
        endogenous[sectors,sectors1], IA matrix for Python[sectors,sectors1])        Code for Python: IA matrix for Python[sectors,sectors1]
    """
    return ia_matrix_for_python()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2002():
    """
    Real Name: IA matrix 2002
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'IL609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2002()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2003():
    """
    Real Name: IA matrix 2003
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'JU609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2003()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2004():
    """
    Real Name: IA matrix 2004
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'LD609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2004()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2005():
    """
    Real Name: IA matrix 2005
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'MM609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2005()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2006():
    """
    Real Name: IA matrix 2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'NV609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2006()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2007():
    """
    Real Name: IA matrix 2007
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'PE609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2007()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2008():
    """
    Real Name: IA matrix 2008
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'QN609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2008()


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_for_python():
    """
    Real Name: IA matrix for Python
    Original Eqn: IF THEN ELSE(Time<1996, IA matrix 1995[sectors,sectors1], IF THEN ELSE(Time<1997, IA matrix 1996[sectors ,sectors1], IF THEN ELSE(Time<1998, IA matrix 1997[sectors,sectors1], IF THEN ELSE(Time<1999, IA matrix 1998[sectors,sectors1], IF THEN ELSE(Time<2000, IA matrix 1999[sectors,sectors1], IF THEN ELSE(Time<2001, IA matrix 2000[sectors,sectors1], IF THEN ELSE(Time<2002, IA matrix 2001[sectors,sectors1], IF THEN ELSE(Time<2003, IA matrix 2002[sectors,sectors1], IF THEN ELSE(Time<2004, IA matrix 2003[sectors,sectors1], IF THEN ELSE(Time<2005, IA matrix 2004[sectors,sectors1], IF THEN ELSE(Time<2006, IA matrix 2005[sectors,sectors1], IF THEN ELSE(Time<2007, IA matrix 2006[sectors,sectors1], IF THEN ELSE(Time<2008, IA matrix 2007[sectors,sectors1], IF THEN ELSE(Time<2009, IA matrix 2008[sectors,sectors1], IA matrix 2009[sectors,sectors1]))))))))))))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    IA matrix WIOD database
    """
    return if_then_else(
        time() < 1996,
        lambda: ia_matrix_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: ia_matrix_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: ia_matrix_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: ia_matrix_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: ia_matrix_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: ia_matrix_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: ia_matrix_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: ia_matrix_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: ia_matrix_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: ia_matrix_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: ia_matrix_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: ia_matrix_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: ia_matrix_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: ia_matrix_2008(),
                                                            lambda: ia_matrix_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_1995():
    """
    Real Name: IA matrix 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'A609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_1995()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_1996():
    """
    Real Name: IA matrix 1996
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'AJ609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_1996()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_1997():
    """
    Real Name: IA matrix 1997
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'BS609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_1997()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_1998():
    """
    Real Name: IA matrix 1998
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'DB609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_1998()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_1999():
    """
    Real Name: IA matrix 1999
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'EK609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_1999()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2000():
    """
    Real Name: IA matrix 2000
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FT609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2000()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2001():
    """
    Real Name: IA matrix 2001
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'HC609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2001()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def ia_matrix_2009():
    """
    Real Name: IA matrix 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'RW609')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_ia_matrix_2009()


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_domestic():
    """
    Real Name: Leontief Matrix domestic
    Original Eqn: Leontief matrix for Python[sectors,sectors1]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    Leontieff matrix in interregional Input-Output Analysis can be divided in
        submatrixes. Domestic submatrix (upper-left quadrant) gives the
        sensitiveness of domestic production to domestic final demand of EU28
        products.        Code for Vensim: IF THEN ELSE("calculate Leontief matrix?"=1, Leontief Matrix
        endogenous[sectors,sectors1], Leontief matrix for Python[sectors,sectors1])        Code for Python: Leontief matrix for Python[sectors,sectors1])
    """
    return leontief_matrix_for_python()


@cache.step
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_for_python():
    """
    Real Name: Leontief matrix for Python
    Original Eqn: IF THEN ELSE(Time<1996, Leontief matrix 1995[sectors,sectors1], IF THEN ELSE(Time<1997, Leontief matrix 1996[sectors ,sectors1], IF THEN ELSE(Time<1998, Leontief matrix 1997[sectors,sectors1], IF THEN ELSE(Time<1999, Leontief matrix 1998[sectors,sectors1], IF THEN ELSE(Time<2000, Leontief matrix 1999[sectors,sectors1], IF THEN ELSE(Time<2001, Leontief matrix 2000[sectors,sectors1],IF THEN ELSE( Time<2002, Leontief matrix 2001[sectors,sectors1], IF THEN ELSE(Time<2003, Leontief matrix 2002[sectors,sectors1], IF THEN ELSE(Time<2004, Leontief matrix 2003[sectors,sectors1], IF THEN ELSE(Time<2005, Leontief matrix 2004[sectors,sectors1],IF THEN ELSE(Time<2006, Leontief matrix 2005[sectors,sectors1], IF THEN ELSE(Time<2007, Leontief matrix 2006[sectors,sectors1], IF THEN ELSE(Time<2008, Leontief matrix 2007[sectors,sectors1], IF THEN ELSE(Time<2009, Leontief matrix 2008[sectors,sectors1],Leontief matrix 2009[sectors,sectors1]))))))))))))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors', 'sectors1']

    Leontief Matrix (1995-2009). WIOD data
    """
    return if_then_else(
        time() < 1996,
        lambda: leontief_matrix_1995(),
        lambda: if_then_else(
            time() < 1997,
            lambda: leontief_matrix_1996(),
            lambda: if_then_else(
                time() < 1998,
                lambda: leontief_matrix_1997(),
                lambda: if_then_else(
                    time() < 1999,
                    lambda: leontief_matrix_1998(),
                    lambda: if_then_else(
                        time() < 2000,
                        lambda: leontief_matrix_1999(),
                        lambda: if_then_else(
                            time() < 2001,
                            lambda: leontief_matrix_2000(),
                            lambda: if_then_else(
                                time() < 2002,
                                lambda: leontief_matrix_2001(),
                                lambda: if_then_else(
                                    time() < 2003,
                                    lambda: leontief_matrix_2002(),
                                    lambda: if_then_else(
                                        time() < 2004,
                                        lambda: leontief_matrix_2003(),
                                        lambda: if_then_else(
                                            time() < 2005,
                                            lambda: leontief_matrix_2004(),
                                            lambda: if_then_else(
                                                time() < 2006,
                                                lambda: leontief_matrix_2005(),
                                                lambda: if_then_else(
                                                    time() < 2007,
                                                    lambda: leontief_matrix_2006(),
                                                    lambda: if_then_else(
                                                        time() < 2008,
                                                        lambda: leontief_matrix_2007(),
                                                        lambda: if_then_else(
                                                            time() < 2009,
                                                            lambda: leontief_matrix_2008(),
                                                            lambda: leontief_matrix_2009(),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_1996():
    """
    Real Name: Leontief matrix 1996
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'AJ571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_1996()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_1997():
    """
    Real Name: Leontief matrix 1997
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'BS571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_1997()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_1998():
    """
    Real Name: Leontief matrix 1998
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'DB571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_1998()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_1999():
    """
    Real Name: Leontief matrix 1999
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'EK571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_1999()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2000():
    """
    Real Name: Leontief matrix 2000
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'FT571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2000()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2001():
    """
    Real Name: Leontief matrix 2001
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'HC571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2001()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2002():
    """
    Real Name: Leontief matrix 2002
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'IL571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2002()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2003():
    """
    Real Name: Leontief matrix 2003
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'JU571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2003()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2004():
    """
    Real Name: Leontief matrix 2004
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'LD571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2004()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2005():
    """
    Real Name: Leontief matrix 2005
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'MM571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2005()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2006():
    """
    Real Name: Leontief matrix 2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'NV571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2006()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2007():
    """
    Real Name: Leontief matrix 2007
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'PE571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2007()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2008():
    """
    Real Name: Leontief matrix 2008
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'QN571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2008()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_2009():
    """
    Real Name: Leontief matrix 2009
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'RW571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_2009()


@cache.run
@subs(["sectors", "sectors1"], _subscript_dict)
def leontief_matrix_1995():
    """
    Real Name: Leontief matrix 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'A571')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors', 'sectors1']


    """
    return _ext_constant_leontief_matrix_1995()


@cache.step
@to_float
def replacement_batteries():
    """
    Real Name: replacement batteries
    Original Eqn: discarded batteries
    Units: batteries/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Replacement of electric batteries.due to degradation of existing ones
    """
    return discarded_batteries()


@cache.step
@to_float
def share_of_electric_light_vehicles():
    """
    Real Name: share of electric light vehicles
    Original Eqn: total number elec light vehicles/total number light vehicles
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of electric LD vehicles
    """
    return total_number_elec_light_vehicles() / total_number_light_vehicles()


@cache.step
@to_float
def share_elechyb_light_vehicles():
    """
    Real Name: "share elec+hyb light vehicles"
    Original Eqn: (total number hybrid light vehicles+total number elec light vehicles)/total number light vehicles
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of electricity+hybrid LD vehicles
    """
    return (
        total_number_hybrid_light_vehicles() + total_number_elec_light_vehicles()
    ) / total_number_light_vehicles()


@cache.run
@to_float
def t_fin_inlandt():
    """
    Real Name: T fin inlandT
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C175')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Time of begining of inland transport policies
    """
    return _ext_constant_t_fin_inlandt()


@cache.run
@to_float
def t_fin_hveh():
    """
    Real Name: T fin Hveh
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C173')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Time when policies of change in percentages of household vehicles start
    """
    return _ext_constant_t_fin_hveh()


@cache.run
@to_float
def t_ini_hveh():
    """
    Real Name: T ini Hveh
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C172')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Time when policies of change in percentages of household vehicles start
    """
    return _ext_constant_t_ini_hveh()


@cache.step
@to_float
def variation_pop_ssp4():
    """
    Real Name: variation pop SSP4
    Original Eqn: IF THEN ELSE(Time<2010, 0, -1+Pop SSP4(Time+1)/Pop SSP4(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of population in SSP4.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp4(time() + 1) / pop_ssp4(time())
    )


@cache.step
@to_float
def variation_pop_ssp5():
    """
    Real Name: variation pop SSP5
    Original Eqn: IF THEN ELSE(Time<2010, 0, -1+Pop SSP5(Time+1)/Pop SSP5(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of population in SSP5.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp5(time() + 1) / pop_ssp5(time())
    )


@cache.run
@to_float
def start_year_p_common_rr_minerals_alt_techn():
    """
    Real Name: start year P common rr minerals alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F308')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of variation recycling rate of minerals for alternative
        technologies (RES elec & EV batteries).
    """
    return _ext_constant_start_year_p_common_rr_minerals_alt_techn()


@cache.run
@to_float
def start_year_p_common_rr_minerals_rest():
    """
    Real Name: start year P common rr minerals Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F307')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of variation recycling rate of minerals of the rest of the
        economy.
    """
    return _ext_constant_start_year_p_common_rr_minerals_rest()


@cache.run
@to_float
def select_pop_ssps():
    """
    Real Name: select pop SSPs
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'D11')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1=SSP1, 2=SSP2, 3=SSP3, 4=SSP4, 5=SSP5
    """
    return _ext_constant_select_pop_ssps()


@cache.step
@to_float
def variation_pop_ssp1():
    """
    Real Name: variation pop SSP1
    Original Eqn: IF THEN ELSE(Time<2010, 0, -1+Pop SSP1(Time+1)/Pop SSP1(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of population in SSP1.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp1(time() + 1) / pop_ssp1(time())
    )


@cache.step
@to_float
def variation_pop_ssp2():
    """
    Real Name: variation pop SSP2
    Original Eqn: IF THEN ELSE(Time<2010, 0, -1+Pop SSP2(Time+1)/Pop SSP2(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of population in SSP2.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp2(time() + 1) / pop_ssp2(time())
    )


@cache.step
@to_float
def variation_pop_ssp3():
    """
    Real Name: variation pop SSP3
    Original Eqn: IF THEN ELSE(Time<2010, 0, -1+Pop SSP3(Time+1)/Pop SSP3(Time))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of population in SSP3.
    """
    return if_then_else(
        time() < 2010, lambda: 0, lambda: -1 + pop_ssp3(time() + 1) / pop_ssp3(time())
    )


@cache.step
@to_float
def annual_population_growth_rate():
    """
    Real Name: Annual population growth rate
    Original Eqn: IF THEN ELSE(select Population evolution input=0, variation pop SSPs, IF THEN ELSE(select Population evolution input=1, P timeseries pop growth rate, IF THEN ELSE (Time<P customized year pop evolution, P timeseries pop growth rate, P customized cte pop variation)))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        select_population_evolution_input() == 0,
        lambda: variation_pop_ssps(),
        lambda: if_then_else(
            select_population_evolution_input() == 1,
            lambda: p_timeseries_pop_growth_rate(),
            lambda: if_then_else(
                time() < p_customized_year_pop_evolution(),
                lambda: p_timeseries_pop_growth_rate(),
                lambda: p_customized_cte_pop_variation(),
            ),
        ),
    )


@cache.step
@to_float
def variation_pop_ssps():
    """
    Real Name: variation pop SSPs
    Original Eqn: IF THEN ELSE(select pop SSPs=1, variation pop SSP1, IF THEN ELSE(select pop SSPs=2, variation pop SSP2, IF THEN ELSE(select pop SSPs=3, variation pop SSP3, IF THEN ELSE(select pop SSPs=4, variation pop SSP4, variation pop SSP5))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        select_pop_ssps() == 1,
        lambda: variation_pop_ssp1(),
        lambda: if_then_else(
            select_pop_ssps() == 2,
            lambda: variation_pop_ssp2(),
            lambda: if_then_else(
                select_pop_ssps() == 3,
                lambda: variation_pop_ssp3(),
                lambda: if_then_else(
                    select_pop_ssps() == 4,
                    lambda: variation_pop_ssp4(),
                    lambda: variation_pop_ssp5(),
                ),
            ),
        ),
    )


def pop_ssp2(x):
    """
    Real Name: Pop SSP2
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Result comparison', '25', 'C28'))
    Units: Mpeople
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_pop_ssp2(x)


def pop_ssp4(x):
    """
    Real Name: Pop SSP4
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Result comparison', '25', 'C30'))
    Units: Mpeople
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_pop_ssp4(x)


def pop_ssp1(x):
    """
    Real Name: Pop SSP1
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Result comparison', '25', 'C27'))
    Units: Mpeople
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_pop_ssp1(x)


def pop_ssp5(x):
    """
    Real Name: Pop SSP5
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Result comparison', '25', 'C31'))
    Units: Mpeople
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_pop_ssp5(x)


def pop_ssp3(x):
    """
    Real Name: Pop SSP3
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Result comparison', '25', 'C29'))
    Units: Mpeople
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_pop_ssp3(x)


@cache.step
@to_float
def cp_ev_batteries_for_elec_storage():
    """
    Real Name: Cp EV batteries for elec storage
    Original Eqn: MIN(Cp EV batteries required, max Cp EV batteries for elec storage)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Dynamic evolution of the Cp of EV batteries for electricity storage.
    """
    return np.minimum(
        cp_ev_batteries_required(), max_cp_ev_batteries_for_elec_storage()
    )


@cache.step
@to_float
def max_cp_ev_batteries_for_elec_storage():
    """
    Real Name: max Cp EV batteries for elec storage
    Original Eqn: Cp EV batteries for Transp
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    We assume a maximum Cp of EV batteries dedicated for electric storage
        which equates the use for Transportation uses.
    """
    return cp_ev_batteries_for_transp()


@cache.step
@to_float
def tfec_intensity_until_2009():
    """
    Real Name: TFEC intensity until 2009
    Original Eqn: IF THEN ELSE(Time<2009, TFES intensity EJ T$ , aux15)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    TFEC intensity until the year 2009.
    """
    return if_then_else(time() < 2009, lambda: tfes_intensity_ej_t(), lambda: aux15())


@cache.step
@to_float
def cumulative_tfec_intensity_change_from_2009():
    """
    Real Name: Cumulative TFEC intensity change from 2009
    Original Eqn: IF THEN ELSE(Time<2009, 0, -1+(TFES intensity EJ T$/TFEC intensity until 2009))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2009,
        lambda: 0,
        lambda: -1 + (tfes_intensity_ej_t() / tfec_intensity_until_2009()),
    )


@cache.step
@to_float
def lifetime_ev_batteries():
    """
    Real Name: lifetime EV batteries
    Original Eqn: ZIDZ( Net stored energy EV battery over lifetime , ((Cp EV batteries for elec storage+Cp EV batteries for Transp)*MW in 1 year to MJ*(kW per battery EV /kW per MW)) )
    Units: Years
    Limits: (None, None)
    Type: component
    Subs: None

    Lifetime of standard EV batteries considered.
    """
    return zidz(
        net_stored_energy_ev_battery_over_lifetime(),
        (
            (cp_ev_batteries_for_elec_storage() + cp_ev_batteries_for_transp())
            * mw_in_1_year_to_mj()
            * (kw_per_battery_ev() / kw_per_mw())
        ),
    )


@cache.step
@to_float
def tfec_per_capita():
    """
    Real Name: TFEC per capita
    Original Eqn: ZIDZ( Real TFEC*GJ per EJ , Population )
    Units: GJ/person
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(real_tfec() * gj_per_ej(), population())


@cache.step
@to_float
def aux15():
    """
    Real Name: aux15
    Original Eqn: DELAY FIXED ( TFEC intensity until 2009, TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the cumulative TFEC intensity change until
        2009.
    """
    return _delayfixed_aux15()


@cache.run
@to_float
def cp_ev_batteries_for_transp():
    """
    Real Name: Cp EV batteries for Transp
    Original Eqn: 0.0055
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 0.0055


@cache.step
@to_float
def annual_growth_rate_electricity_generation_res_elec_tot():
    """
    Real Name: Annual growth rate electricity generation RES elec tot
    Original Eqn: -1+FE tot generation all RES elec TWh/FE tot generation all RES elec TWh delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual growth rate of electricity generation from RES.
    """
    return (
        -1
        + fe_tot_generation_all_res_elec_twh()
        / fe_tot_generation_all_res_elec_twh_delayed_1yr()
    )


@cache.step
@to_float
def annual_growth_rate_res_for_heat():
    """
    Real Name: Annual growth rate RES for heat
    Original Eqn: -1+FES RES for heat EJ/FES RES for heat delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual growth rate of heat generation from RES.
    """
    return -1 + fes_res_for_heat_ej() / fes_res_for_heat_delayed_1yr()


@cache.run
@to_float
def p_customized_year_pop_evolution():
    """
    Real Name: P customized year pop evolution
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'E14')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_year_pop_evolution()


@cache.run
@to_float
def select_population_evolution_input():
    """
    Real Name: select Population evolution input
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'B11')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0. From SSPs        1. Timeseries        2. From cusotmized year, set annual constant variation
    """
    return _ext_constant_select_population_evolution_input()


@cache.step
@to_float
def fe_tot_generation_all_res_elec_twh_delayed_1yr():
    """
    Real Name: FE tot generation all RES elec TWh delayed 1yr
    Original Eqn: DELAY FIXED ( FE tot generation all RES elec TWh, 1, 396.6)
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation from all RES technologies. delayed 1 year.
    """
    return _delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr()


@cache.run
@to_float
def p_customized_cte_pop_variation():
    """
    Real Name: P customized cte pop variation
    Original Eqn: GET DIRECT CONSTANTS( '?../../scenarios/scen_eu.xlsx', 'User scenario', 'G14')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    From customized year, set annual constant variation.
    """
    return _ext_constant_p_customized_cte_pop_variation()


@cache.step
@to_float
def fes_res_for_heat_delayed_1yr():
    """
    Real Name: FES RES for heat delayed 1yr
    Original Eqn: DELAY FIXED ( FES RES for heat EJ, 1, 3.488)
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Heat from renewable energy sources delayed 1 year.
    """
    return _delayfixed_fes_res_for_heat_delayed_1yr()


@cache.step
@to_float
def tpes_intensity_until_2009():
    """
    Real Name: TPES intensity until 2009
    Original Eqn: IF THEN ELSE(Time<2009, TPES intensity EJ T$, aux14)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    TPES intensity until the year 2009.
    """
    return if_then_else(time() < 2009, lambda: tpes_intensity_ej_t(), lambda: aux14())


@cache.step
@to_float
def aux13():
    """
    Real Name: aux13
    Original Eqn: DELAY FIXED ( TFEC intensity until 2009 without EROI, TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the cumulative TFEC intensity change until
        2009.
    """
    return _delayfixed_aux13()


@cache.step
@to_float
def aux14():
    """
    Real Name: aux14
    Original Eqn: DELAY FIXED ( TPES intensity until 2009, TIME STEP , 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the cumulative TPES intensity change until
        2009.
    """
    return _delayfixed_aux14()


@cache.step
@to_float
def cumulative_tpes_intensity_change_from_2009():
    """
    Real Name: Cumulative TPES intensity change from 2009
    Original Eqn: IF THEN ELSE(Time<2009, 0, -1+(TPES intensity EJ T$/TPES intensity until 2009))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulative TPES intensity change from 2009.
    """
    return if_then_else(
        time() < 2009,
        lambda: 0,
        lambda: -1 + (tpes_intensity_ej_t() / tpes_intensity_until_2009()),
    )


@cache.step
@to_float
def cumulative_tfec_intensity_change_from_2009_without_eroi():
    """
    Real Name: Cumulative TFEC intensity change from 2009 without EROI
    Original Eqn: IF THEN ELSE(Time<2009, 0, -1+(TFES intensity EJ T$ without EROI/TFEC intensity until 2009 without EROI))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2009,
        lambda: 0,
        lambda: -1
        + (
            tfes_intensity_ej_t_without_eroi()
            / tfec_intensity_until_2009_without_eroi()
        ),
    )


@cache.step
@to_float
def tfec_intensity_until_2009_without_eroi():
    """
    Real Name: TFEC intensity until 2009 without EROI
    Original Eqn: IF THEN ELSE(Time<2009, TFES intensity EJ T$ without EROI , aux13)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    TFEC intensity without EROI until the year 2009.
    """
    return if_then_else(
        time() < 2009, lambda: tfes_intensity_ej_t_without_eroi(), lambda: aux13()
    )


@cache.step
@to_float
def annual_tfes_intensity_change_rate_without_eroi():
    """
    Real Name: Annual TFES intensity change rate without EROI
    Original Eqn: -1+ZIDZ( TFES intensity EJ T$ without EROI , TFES intensity without EROI delayed 1yr)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual TFES intensity change rate without EROI.
    """
    return -1 + zidz(
        tfes_intensity_ej_t_without_eroi(), tfes_intensity_without_eroi_delayed_1yr()
    )


@cache.step
@to_float
def tfes_intensity_without_eroi_delayed_1yr():
    """
    Real Name: TFES intensity without EROI delayed 1yr
    Original Eqn: DELAY FIXED ( TFES intensity EJ T$ without EROI, 1, 8.827)
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    TFES intensity delayed 1 year.
    """
    return _delayfixed_tfes_intensity_without_eroi_delayed_1yr()


@cache.step
@to_float
def required_tfed_sectors():
    """
    Real Name: required TFED sectors
    Original Eqn: SUM(required FED sectors by fuel[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return sum(required_fed_sectors_by_fuel(), dim=("final sources",))


@cache.step
@to_float
def ratio_fed_households_vs_sectors():
    """
    Real Name: ratio FED households vs sectors
    Original Eqn: ZIDZ( Households total final energy demand , required TFED sectors )
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Ratio of final energy demand of households vs 35 WIOD sectors.
    """
    return zidz(households_total_final_energy_demand(), required_tfed_sectors())


@cache.step
@to_float
def tfes_intensity_ej_t_without_eroi():
    """
    Real Name: TFES intensity EJ T$ without EROI
    Original Eqn: ZIDZ(Real TFEC/EROI FC system from 2015, GDP EU)
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(real_tfec() / eroi_fc_system_from_2015(), gdp_eu())


@cache.step
@to_float
def cumulative_co2e_ghg_emissions():
    """
    Real Name: Cumulative CO2e GHG emissions
    Original Eqn: INTEG ( Total CO2e Ce, 0)
    Units: GTCO2e/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _integ_cumulative_co2e_ghg_emissions()


@cache.run
@to_float
def target_year_p_growth_res_elec():
    """
    Real Name: Target year P growth RES elec
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F33')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year of the policy growth of RES technologies for generating
        electricity.
    """
    return _ext_constant_target_year_p_growth_res_elec()


@cache.run
@to_float
def target_year_p_growth_res_heat():
    """
    Real Name: Target year P growth RES heat
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C59')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Target year of the policy growth of RES technologies for generating heat.
    """
    return _ext_constant_target_year_p_growth_res_heat()


@cache.step
@to_float
def total_ghg_emissions_baucat_medeas_d32():
    """
    Real Name: "Total GHG emissions BAU-CAT MEDEAS D3.2"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Result comparison', '18', 'C20')
    Units: GTCO2e/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_total_ghg_emissions_baucat_medeas_d32(time())


@cache.step
@to_float
def total_ghg_emissions_mlt2030_medeas_d32():
    """
    Real Name: "Total GHG emissions MLT2030 MEDEAS D3.2"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Result comparison', '18', 'C23')
    Units: GTCO2e/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_total_ghg_emissions_mlt2030_medeas_d32(time())


@cache.step
@to_float
def total_ghg_emissions_mlt2020_medeas_d32():
    """
    Real Name: "Total GHG emissions MLT2020 MEDEAS D3.2"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Result comparison', '18', 'C22')
    Units: GTCO2e/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None


    """
    return _ext_data_total_ghg_emissions_mlt2020_medeas_d32(time())


@cache.run
@to_float
def low_range_fec_good_standard_of_living():
    """
    Real Name: Low range FEC good standard of living
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Result comparison', 'C6')
    Units: GJ/(Year*people)
    Limits: (None, None)
    Type: constant
    Subs: None

    30 GJ/yr per capita: low range FEC good standard of living (Lamb &
        Steinberger (2017), i.e. above 70 years life expectancy, full access to
        water, sanitation, electricity and other basic infrastructures.
    """
    return _ext_constant_low_range_fec_good_standard_of_living()


@cache.run
@to_float
def threshold_fec_high_development():
    """
    Real Name: Threshold FEC 'high development'
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Result comparison', 'C8')
    Units: GJ/(Year*people)
    Limits: (None, None)
    Type: constant
    Subs: None

    75 GJ/yr per capita. Minimum final energy consumption threshold
        approximating a "high development" standard of living (Arto et al.
        (2016)), i.e. HDI>0.8.
    """
    return _ext_constant_threshold_fec_high_development()


@cache.run
@to_float
def high_range_fec_good_standard_of_living():
    """
    Real Name: High range FEC good standard of living
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Result comparison', 'C7')
    Units: GJ/(Year*people)
    Limits: (None, None)
    Type: constant
    Subs: None

    40 GJ/yr per capita: high range FEC good standard of living (Lamb &
        Steinberger (2017), i.e. above 70 years life expectancy, full access to
        water, sanitation, electricity and other basic infrastructures.
    """
    return _ext_constant_high_range_fec_good_standard_of_living()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def minimum_fraction():
    """
    Real Name: minimum fraction
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B213')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP213')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']


    """
    return _ext_constant_minimum_fraction()


@cache.run
@subs(["sectors1", "final sources"], _subscript_dict)
def max_yearly_change():
    """
    Real Name: Max yearly change
    Original Eqn:
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B214')
        .
        .
        .
      GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'FP214')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: ['sectors1', 'final sources']


    """
    return _ext_constant_max_yearly_change()


@cache.run
@to_float
def gwp_100_years_ch4():
    """
    Real Name: GWP 100 years CH4
    Original Eqn: 34
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 34


@cache.run
@to_float
def correction_factor_all_ghgs():
    """
    Real Name: correction factor all GHGs
    Original Eqn: 1.22
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Taking as reference data for 2012 (comparing MEDEAS outputs and CAT from
        INSTM report).
    """
    return 1.22


@cache.run
@to_float
def activate_energy_scarcity_feedback():
    """
    Real Name: "Activate energy scarcity feedback?"
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0- NOT activated        1- ACTIVATED
    """
    return 1


@cache.step
@to_float
def max_potential_phs_twh():
    """
    Real Name: max potential PHS TWh
    Original Eqn: max capacity potential PHS*Cp PHS/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return max_capacity_potential_phs() * cp_phs() / twe_per_twh()


@cache.step
@to_float
def replacement_rate_phs():
    """
    Real Name: replacement rate PHS
    Original Eqn: IF THEN ELSE(real FE elec stored PHS TWh<max potential PHS TWh,1,0.8)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Replacement rate of PHS infrastructure: by default all decommissioned
        capacity is replaced (=1). In the case of overcapacity in relation to the
        potential, we reduce the annual replacement rate to 0.8.
    """
    return if_then_else(
        real_fe_elec_stored_phs_twh() < max_potential_phs_twh(), lambda: 1, lambda: 0.8
    )


@cache.step
@to_float
def real_fe_elec_stored_ev_batteries_twh():
    """
    Real Name: real FE elec stored EV batteries TWh
    Original Eqn: Used EV batteries for elec storage/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    installed capacity PHS TW*Cp PHS/TWe per TWh        Electricity stored in EV batteries. It does not add up to the electricity
        generation of other sources since this electricity has already been
        accounted for! (stored).
    """
    return used_ev_batteries_for_elec_storage() / twe_per_twh()


@cache.step
@to_float
def share_tot_fei_res_elec_var():
    """
    Real Name: share tot FEI RES elec var
    Original Eqn: Total final energy invested RES elec var/Total dyn FEI RES
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return total_final_energy_invested_res_elec_var() / total_dyn_fei_res()


@cache.step
@to_float
def cp_ev_batteries_required():
    """
    Real Name: Cp EV batteries required
    Original Eqn: MAX(0, demand EV batteries for elec storage/EV batteries TW)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(0, demand_ev_batteries_for_elec_storage() / ev_batteries_tw())


@cache.step
@to_float
def output_ev_bateries_for_storage_over_lifetime():
    """
    Real Name: output EV bateries for storage over lifetime
    Original Eqn: Cp EV batteries for elec storage*"new+replaced batteries TW"*(1/TWe per TWh)*lifetime EV batteries*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total electricity output generated over the full operation of the
        infrastructure of the new capacity installed.
    """
    return (
        cp_ev_batteries_for_elec_storage()
        * newreplaced_batteries_tw()
        * (1 / twe_per_twh())
        * lifetime_ev_batteries()
        * ej_per_twh()
    )


@cache.step
@to_float
def discarded_batteries():
    """
    Real Name: discarded batteries
    Original Eqn: MAX(0 ,ZIDZ( "batteries EV+hib+2wE" , lifetime EV batteries ))
    Units: batteries
    Limits: (None, None)
    Type: component
    Subs: None

    Discarded electric batteries due to wear.
    """
    return np.maximum(0, zidz(batteries_evhib2we(), lifetime_ev_batteries()))


@cache.step
@to_float
def esoi_elec_storage():
    """
    Real Name: ESOI elec storage
    Original Eqn: (ESOI PHS*installed capacity PHS TW+ESOI EV batteries*Used EV batteries for elec storage)/Total capacity elec storage TW
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    ESOI of electric storage (PHS and EV batteries).
    """
    return (
        esoi_phs() * installed_capacity_phs_tw()
        + esoi_ev_batteries() * used_ev_batteries_for_elec_storage()
    ) / total_capacity_elec_storage_tw()


@cache.step
@to_float
def esoi_ev_batteries():
    """
    Real Name: ESOI EV batteries
    Original Eqn: lifetime EV batteries*Cp EV batteries for elec storage*MW in 1 year to MJ/("g=quality of electricity"*"Energy intensity construction EV batteries MJ/MW"*(1+Share energy requirements for decom EV batteries+Grid correction factor EV batteries))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    ESOI batteries of electric vehicles for electricity storage.        (To estimate the ESOI static: g=0.7 and constant recycling rates)
    """
    return (
        lifetime_ev_batteries()
        * cp_ev_batteries_for_elec_storage()
        * mw_in_1_year_to_mj()
        / (
            gquality_of_electricity()
            * energy_intensity_construction_ev_batteries_mjmw()
            * (
                1
                + share_energy_requirements_for_decom_ev_batteries()
                + grid_correction_factor_ev_batteries()
            )
        )
    )


@cache.step
@to_float
def rt_elec_storage_efficiency():
    """
    Real Name: rt elec storage efficiency
    Original Eqn: (rt storage efficiency PHS*installed capacity PHS TW+rt storage efficiency EV batteries*Used EV batteries for elec storage)/Total capacity elec storage TW
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Round-trip storage efficiency of electric storage (PHS and EV batteries).
    """
    return (
        rt_storage_efficiency_phs() * installed_capacity_phs_tw()
        + rt_storage_efficiency_ev_batteries() * used_ev_batteries_for_elec_storage()
    ) / total_capacity_elec_storage_tw()


@cache.step
@to_float
def abundance_storage():
    """
    Real Name: abundance storage
    Original Eqn: 1-IF THEN ELSE(demand storage capacity <= Total capacity elec storage TW, 1, MAX(0, 1-(demand storage capacity-Total capacity elec storage TW)/Total capacity elec storage TW))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Increases the planning of PHS if there is a deficit of electric storage.
    """
    return 1 - if_then_else(
        demand_storage_capacity() <= total_capacity_elec_storage_tw(),
        lambda: 1,
        lambda: np.maximum(
            0,
            1
            - (demand_storage_capacity() - total_capacity_elec_storage_tw())
            / total_capacity_elec_storage_tw(),
        ),
    )


@cache.step
@to_float
def used_ev_batteries_for_elec_storage():
    """
    Real Name: Used EV batteries for elec storage
    Original Eqn: EV batteries TW*Cp EV batteries for elec storage
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Bateries from electric vehicles used for electric storage.
    """
    return ev_batteries_tw() * cp_ev_batteries_for_elec_storage()


@cache.step
@to_float
def max_cp_ev_batteries():
    """
    Real Name: max Cp EV batteries
    Original Eqn: Net stored energy EV battery over lifetime/(min lifetime EV batteries*MW in 1 year to MJ*(kW per battery EV/kW per MW))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum Cp allowed associated to the minimum lifetime.
    """
    return net_stored_energy_ev_battery_over_lifetime() / (
        min_lifetime_ev_batteries()
        * mw_in_1_year_to_mj()
        * (kw_per_battery_ev() / kw_per_mw())
    )


@cache.step
@to_float
def total_capacity_elec_storage_tw():
    """
    Real Name: Total capacity elec storage TW
    Original Eqn: installed capacity PHS TW+Used EV batteries for elec storage
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Total capacity electricity storage installed.
    """
    return installed_capacity_phs_tw() + used_ev_batteries_for_elec_storage()


@cache.step
@to_float
def demand_ev_batteries_for_elec_storage():
    """
    Real Name: demand EV batteries for elec storage
    Original Eqn: MAX(0, demand storage capacity-installed capacity PHS TW)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of EV batteries for storage of electricity.
    """
    return np.maximum(0, demand_storage_capacity() - installed_capacity_phs_tw())


@cache.step
@to_float
def ced_per_tw_over_lifetime_phs():
    """
    Real Name: CED per TW over lifetime PHS
    Original Eqn: ZIDZ( (Cp PHS*lifetime RES elec[hydro]*EJ per TWh/TWe per TWh) , ESOI static PHS*quality of electricity 2015 )
    Units: EJ/TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(
        (
            cp_phs()
            * lifetime_res_elec().loc["hydro"].reset_coords(drop=True)
            * ej_per_twh()
            / twe_per_twh()
        ),
        esoi_static_phs() * quality_of_electricity_2015(),
    )


@cache.step
@to_float
def remaining_potential_constraint_on_new_phs_capacity():
    """
    Real Name: remaining potential constraint on new PHS capacity
    Original Eqn: IF THEN ELSE(remaining potential PHS>threshold remaining potential new capacity,1,remaining potential PHS*(1/threshold remaining potential new capacity))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        remaining_potential_phs() > threshold_remaining_potential_new_capacity(),
        lambda: 1,
        lambda: remaining_potential_phs()
        * (1 / threshold_remaining_potential_new_capacity()),
    )


@cache.step
@to_float
def new_required_phs_capacity():
    """
    Real Name: new required PHS capacity
    Original Eqn: IF THEN ELSE(Time<(2014-"total time plan+constr RES elec"[hydro]), Historic new required capacity PHS, installed capacity PHS TW *adapt growth PHS*remaining potential constraint on new PHS capacity)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    IF THEN ELSE(Time<(2014-"total time plan+constr RES elec"[RES elec]), Historic new
        required capacity RES elec[RES elec],installed capacity RES elec TW[RES
        elec]*adapt growth RES elec after allocation[RES elec]*remaining potential
        constraint on new RES elec capacity[RES elec]*abundance RES elec2)        0.9*installed capacity PHS TW*(1-(installed capacity PHS TW/demand storage
        capacity))
    """
    return if_then_else(
        time()
        < (
            2014 - total_time_planconstr_res_elec().loc["hydro"].reset_coords(drop=True)
        ),
        lambda: historic_new_required_capacity_phs(),
        lambda: installed_capacity_phs_tw()
        * adapt_growth_phs()
        * remaining_potential_constraint_on_new_phs_capacity(),
    )


@cache.step
@to_float
def share_dyn_fei_for_res_vs_tfec():
    """
    Real Name: share dyn FEI for RES vs TFEC
    Original Eqn: Total dyn FEI RES/Real TFEC
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of dynamic final energy investments for RES technologies vs TFES.
    """
    return total_dyn_fei_res() / real_tfec()


@cache.step
@to_float
def fei_ev_batteries():
    """
    Real Name: FEI EV batteries
    Original Eqn: ZIDZ( output EV bateries for storage over lifetime , ESOI EV batteries )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy invested (equivalent to the denominator of the EROI (=CED*g).
    """
    return zidz(output_ev_bateries_for_storage_over_lifetime(), esoi_ev_batteries())


@cache.step
@to_float
def output_phs_over_lifetime():
    """
    Real Name: output PHS over lifetime
    Original Eqn: Cp PHS*PHS capacity under construction*(1/TWe per TWh)*lifetime RES elec[hydro]*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total electricity output generated over the full operation of the
        infrastructure of the new capacity installed.
    """
    return (
        cp_phs()
        * phs_capacity_under_construction()
        * (1 / twe_per_twh())
        * lifetime_res_elec().loc["hydro"].reset_coords(drop=True)
        * ej_per_twh()
    )


@cache.step
@to_float
def esoi_static_phs():
    """
    Real Name: ESOI static PHS
    Original Eqn: MAX(5,a lineal regr*installed capacity PHS TW+b lineal regr )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    ESOI of the PHS without accounting for endogenous dynamic variations.
    """
    return np.maximum(
        5, a_lineal_regr() * installed_capacity_phs_tw() + b_lineal_regr()
    )


@cache.step
@to_float
def total_dyn_fei_res():
    """
    Real Name: Total dyn FEI RES
    Original Eqn: Total final energy invested RES elec var+FEI EV batteries+Total FEI over lifetime RES elec dispatch+Final energy invested PHS
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total (dynamic) final energy investment for RES.
    """
    return (
        total_final_energy_invested_res_elec_var()
        + fei_ev_batteries()
        + total_fei_over_lifetime_res_elec_dispatch()
        + final_energy_invested_phs()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def adapt_growth_res_elec_after_allocation():
    """
    Real Name: adapt growth RES elec after allocation
    Original Eqn: IF THEN ELSE(activate EROI allocation rule=0, adapt growth RES elec[RES elec], adapt growth RES elec[RES elec ]*EROI allocation rule per RES elec[RES elec])*constraint elec storage availability[RES elec]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual growth per RES elec technology after accounting for the allocation
        rule.
    """
    return (
        if_then_else(
            activate_eroi_allocation_rule() == 0,
            lambda: adapt_growth_res_elec(),
            lambda: adapt_growth_res_elec() * eroi_allocation_rule_per_res_elec(),
        )
        * constraint_elec_storage_availability()
    )


@cache.step
@to_float
def esoi_phs():
    """
    Real Name: ESOI PHS
    Original Eqn: ZIDZ( output PHS over lifetime , CEDtot over lifetime PHS*"g=quality of electricity")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    ESOI of pumped hydro storage.        *lifetime RES elec[hydro]
    """
    return zidz(
        output_phs_over_lifetime(),
        cedtot_over_lifetime_phs() * gquality_of_electricity(),
    )


@cache.run
@to_float
def p_phs_growth():
    """
    Real Name: P PHS growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F37')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_phs_growth()


@cache.step
@subs(["RES elec"], _subscript_dict)
def constraint_elec_storage_availability():
    """
    Real Name: constraint elec storage availability
    Original Eqn: IF THEN ELSE("RES elec variables?"[RES elec]=0,1, IF THEN ELSE(demand storage capacity <= Total capacity elec storage TW, 1, MAX(0, 1-(demand storage capacity-Total capacity elec storage TW)/Total capacity elec storage TW)))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Remaining potential available as a fraction of unity. This feedback
        ensures that the electricity storage levels required by the penetration of
        the RES variables for the generation of electricity are respected.
    """
    return if_then_else(
        res_elec_variables() == 0,
        lambda: 1,
        lambda: if_then_else(
            demand_storage_capacity() <= total_capacity_elec_storage_tw(),
            lambda: 1,
            lambda: np.maximum(
                0,
                1
                - (demand_storage_capacity() - total_capacity_elec_storage_tw())
                / total_capacity_elec_storage_tw(),
            ),
        ),
    )


@cache.run
@to_float
def initial_instal_cap_phs():
    """
    Real Name: initial instal cap PHS
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H182')
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: None

    Installed capacity of PHS in the initial year 1995.
    """
    return _ext_constant_initial_instal_cap_phs()


@cache.step
@to_float
def cedtot_over_lifetime_phs():
    """
    Real Name: CEDtot over lifetime PHS
    Original Eqn: PHS capacity under construction*CED per TW over lifetime PHS
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return phs_capacity_under_construction() * ced_per_tw_over_lifetime_phs()


@cache.step
@to_float
def installed_capacity_phs_tw():
    """
    Real Name: installed capacity PHS TW
    Original Eqn: INTEG ( PHS capacity under construction-wear PHS, initial instal cap PHS)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _integ_installed_capacity_phs_tw()


@cache.step
@to_float
def phs_capacity_under_construction():
    """
    Real Name: PHS capacity under construction
    Original Eqn: PHS planned capacity/time construction RES elec[hydro]
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return phs_planned_capacity() / time_construction_res_elec().loc[
        "hydro"
    ].reset_coords(drop=True)


@cache.run
@to_float
def past_phs_capacity_growth():
    """
    Real Name: past PHS capacity growth
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C84')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Current growth levels.
    """
    return _ext_constant_past_phs_capacity_growth()


@cache.step
@to_float
def new_phs_capacity_under_planning():
    """
    Real Name: new PHS capacity under planning
    Original Eqn: required capacity PHS/time planification RES elec[hydro]
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return required_capacity_phs() / time_planification_res_elec().loc[
        "hydro"
    ].reset_coords(drop=True)


@cache.step
@to_float
def wear_phs():
    """
    Real Name: wear PHS
    Original Eqn: IF THEN ELSE(Time<2015, 0, installed capacity PHS TW/lifetime RES elec[hydro])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        time() < 2015,
        lambda: 0,
        lambda: installed_capacity_phs_tw()
        / lifetime_res_elec().loc["hydro"].reset_coords(drop=True),
    )


@cache.step
@to_float
def replacement_capacity_phs():
    """
    Real Name: replacement capacity PHS
    Original Eqn: IF THEN ELSE(Time<2015,0,replacement rate PHS*wear PHS)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    IF THEN ELSE(Time<2015,0,replacement rate PHS*wear PHS*(1-RES elec tot
        overcapacity))*remaining potential elec storage by RES techn2[RES elec]
    """
    return if_then_else(
        time() < 2015, lambda: 0, lambda: replacement_rate_phs() * wear_phs()
    )


@cache.step
@to_float
def real_fe_elec_stored_phs_twh():
    """
    Real Name: real FE elec stored PHS TWh
    Original Eqn: installed capacity PHS TW*Cp PHS/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity stored in pumped hydro storage plants. It does not add up to
        the electricity generation of other sources since this electricity has
        already been accounted for! (stored).
    """
    return installed_capacity_phs_tw() * cp_phs() / twe_per_twh()


@cache.step
@to_float
def phs_planned_capacity():
    """
    Real Name: PHS planned capacity
    Original Eqn: INTEG ( new PHS capacity under planning+replacement capacity PHS-PHS capacity under construction, initial capacity in construction PHS)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _integ_phs_planned_capacity()


@cache.step
@to_float
def final_energy_invested_phs():
    """
    Real Name: Final energy invested PHS
    Original Eqn: real FE elec stored PHS TWh*EJ per TWh/ESOI PHS
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy invested is equivalent to the denominator of the EROI
        (=CED*g).
    """
    return real_fe_elec_stored_phs_twh() * ej_per_twh() / esoi_phs()


@cache.step
@to_float
def remaining_potential_phs():
    """
    Real Name: remaining potential PHS
    Original Eqn: IF THEN ELSE(max capacity potential PHS > installed capacity PHS TW, (max capacity potential PHS-installed capacity PHS TW)/max capacity potential PHS, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        max_capacity_potential_phs() > installed_capacity_phs_tw(),
        lambda: (max_capacity_potential_phs() - installed_capacity_phs_tw())
        / max_capacity_potential_phs(),
        lambda: 0,
    )


@cache.step
@to_float
def historic_new_required_capacity_phs():
    """
    Real Name: Historic new required capacity PHS
    Original Eqn: table hist capacity PHS(Time+"total time plan+constr RES elec"[hydro]+1)-table hist capacity PHS(Time+"total time plan+constr RES elec"[hydro])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    (Assuming 100% of planned was planned and constructed).
    """
    return table_hist_capacity_phs(
        time()
        + total_time_planconstr_res_elec().loc["hydro"].reset_coords(drop=True)
        + 1
    ) - table_hist_capacity_phs(
        time() + total_time_planconstr_res_elec().loc["hydro"].reset_coords(drop=True)
    )


def table_hist_capacity_phs(x):
    """
    Real Name: table hist capacity PHS
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '172', 'H182'))
    Units: TW/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_hist_capacity_phs(x)


@cache.step
@to_float
def initial_capacity_in_construction_phs():
    """
    Real Name: initial capacity in construction PHS
    Original Eqn: initial required capacity PHS
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Initial capacity of PHS in construction (year 1995). We assume that it is
        the same than the additional installed capacity between 1995 and 1996.
    """
    return initial_required_capacity_phs()


@cache.step
@to_float
def required_capacity_phs():
    """
    Real Name: required capacity PHS
    Original Eqn: INTEG ( new required PHS capacity-new PHS capacity under planning, initial required capacity PHS)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _integ_required_capacity_phs()


@cache.run
@to_float
def initial_required_capacity_phs():
    """
    Real Name: initial required capacity PHS
    Original Eqn: table hist capacity PHS(1996)-table hist capacity PHS(1995)
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial required capacity of PHS (year 1995). We assume that it is the
        same than the additional installed capacity between 1995 and 1996.
    """
    return table_hist_capacity_phs(1996) - table_hist_capacity_phs(1995)


@cache.step
@to_float
def total_fei_over_lifetime_res_elec_dispatch():
    """
    Real Name: Total FEI over lifetime RES elec dispatch
    Original Eqn: SUM(FEI over lifetime RES elec dispatch[RES elec!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return sum(fei_over_lifetime_res_elec_dispatch(), dim=("RES elec",))


@cache.run
@to_float
def min_lifetime_ev_batteries():
    """
    Real Name: min lifetime EV batteries
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G45')
    Units: Years
    Limits: (None, None)
    Type: constant
    Subs: None

    User-selection of the minimum lifetime of the batteries for electric
        vehicles given the issues arising from ain increased Cp for electric
        storage, i.e. a reduced lifetime of the battery (lower availability for
        the user, replace more often the battery, worsening of EROI of the system,
        etc.). It would be more interesting that Governments invest in electric
        batteries for storage if the performance of the electric vehicles would be
        significantly negatively affected.
    """
    return _ext_constant_min_lifetime_ev_batteries()


@cache.step
@to_float
def total_final_energy_invested_res_elec_var():
    """
    Real Name: Total final energy invested RES elec var
    Original Eqn: SUM(FEI RES elec var[RES elec!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy invested is equivalent to the denominator of the EROI
        (=CED*g).
    """
    return sum(fei_res_elec_var(), dim=("RES elec",))


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_ev_batteries_mt():
    """
    Real Name: materials required for EV batteries Mt
    Original Eqn: "new+replaced batteries TW"*"materials per new capacity installed - EV batteries"[materials]*M per T/kg per Mt
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the fabrication of EV batteries.
    """
    return (
        newreplaced_batteries_tw()
        * materials_per_new_capacity_installed__ev_batteries()
        * m_per_t()
        / kg_per_mt()
    )


@cache.step
@to_float
def newreplaced_batteries_tw():
    """
    Real Name: "new+replaced batteries TW"
    Original Eqn: (new batteries+replacement batteries)*kW per battery EV/kWh per TWh
    Units: batteries/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New and replaced electric batteries.
    """
    return (
        (new_batteries() + replacement_batteries())
        * kw_per_battery_ev()
        / kwh_per_twh()
    )


@cache.step
@to_float
def energy_intensity_construction_ev_batteries_mjmw():
    """
    Real Name: "Energy intensity construction EV batteries MJ/MW"
    Original Eqn: ZIDZ( Total energy required for total material consumption for EV batteries*MJ per EJ, "new+replaced batteries TW"*M per T )
    Units: MJ/MW
    Limits: (None, None)
    Type: component
    Subs: None

    Energy intensity of the construction of EV batteries. Dynamic variable
        affected by recycling policies.
    """
    return zidz(
        total_energy_required_for_total_material_consumption_for_ev_batteries()
        * mj_per_ej(),
        newreplaced_batteries_tw() * m_per_t(),
    )


@cache.step
@to_float
def new_batteries():
    """
    Real Name: new batteries
    Original Eqn: required number standard batteries-"batteries EV+hib+2wE"
    Units: batteries/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New standard electric batteries. The number of batteries converges to the desired
        number via a logistic funcion. Number 10 is an arbitrary parameter, the
        bigger the faster the convergence to the desired number of batteries.        5*"batteries EV+hib+2wE"*(1-(MIN(1,"batteries EV+hib+2wE"/required number
        standard batteries)))
    """
    return required_number_standard_batteries() - batteries_evhib2we()


@cache.step
@to_float
def batteries_evhib2we():
    """
    Real Name: "batteries EV+hib+2wE"
    Original Eqn: INTEG ( new batteries+replacement batteries-discarded batteries, 1)
    Units: batteries
    Limits: (None, None)
    Type: component
    Subs: None

    Number of batteries required for electric and hybrid mobility espreseed in
        termos of "standard" electric batteries of 21,3KWh
    """
    return _integ_batteries_evhib2we()


@cache.run
@to_float
def kw_per_mw():
    """
    Real Name: kW per MW
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G14')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1000 kW = 1 MW.
    """
    return _ext_constant_kw_per_mw()


@cache.run
@to_float
def net_stored_energy_ev_battery_over_lifetime():
    """
    Real Name: Net stored energy EV battery over lifetime
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G48')
    Units: MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Net stored energy EV battery in whole lifetime.
    """
    return _ext_constant_net_stored_energy_ev_battery_over_lifetime()


@cache.run
@to_float
def grid_correction_factor_ev_batteries():
    """
    Real Name: Grid correction factor EV batteries
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'F64')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_grid_correction_factor_ev_batteries()


@cache.run
@to_float
def share_energy_requirements_for_decom_ev_batteries():
    """
    Real Name: Share energy requirements for decom EV batteries
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'F122')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_share_energy_requirements_for_decom_ev_batteries()


@cache.step
@to_float
def working_hours_per_year():
    """
    Real Name: Working hours per year
    Original Eqn: Working hours per day*days per year
    Units: Hour*person/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return working_hours_per_day() * days_per_year()


@cache.run
@to_float
def days_per_year():
    """
    Real Name: days per year
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G5')
    Units: days/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Constant: 365 days in a year.
    """
    return _ext_constant_days_per_year()


@cache.step
@to_float
def total_energy_required_for_material_consumption_for_res_elec():
    """
    Real Name: Total energy required for material consumption for RES elec
    Original Eqn: SUM(Energy required for material consumption per RES elec[RES elec!,materials!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total energy required for material consumption for RES elec.
    """
    return sum(
        energy_required_for_material_consumption_per_res_elec(),
        dim=("RES elec", "materials"),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def total_energy_required_for_material_consumption_per_res_elec():
    """
    Real Name: Total energy required for material consumption per RES elec
    Original Eqn: SUM(Energy required for material consumption per RES elec[RES elec,materials!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Total energy required for material consumption per RES elec
    """
    return sum(
        energy_required_for_material_consumption_per_res_elec(), dim=("materials",)
    )


@cache.run
@to_float
def mw_in_1_year_to_mj():
    """
    Real Name: MW in 1 year to MJ
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G18')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion factor MW in 1 year to MJ.
    """
    return _ext_constant_mw_in_1_year_to_mj()


@cache.run
@to_float
def working_hours_per_day():
    """
    Real Name: Working hours per day
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G40')
    Units: Hour*people
    Limits: (None, None)
    Type: constant
    Subs: None

    Working hours per day.
    """
    return _ext_constant_working_hours_per_day()


@cache.step
@to_float
def annual_work_hours_for_res():
    """
    Real Name: Annual work hours for RES
    Original Eqn: Total jobs RES*Working hours per year
    Units: Hours/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return total_jobs_res() * working_hours_per_year()


@cache.step
@to_float
def hours_work_per_gj_res_delivered():
    """
    Real Name: Hours work per GJ RES delivered
    Original Eqn: ZIDZ( Annual work hours for RES , (TFEC RES EJ*GJ per EJ) )
    Units: Hours/GJ
    Limits: (None, None)
    Type: component
    Subs: None

    Hours of work per GJ of RES delivered (final energy).
    """
    return zidz(annual_work_hours_for_res(), (tfec_res_ej() * gj_per_ej()))


@cache.step
@to_float
def total_energy_required_for_total_material_consumption_for_ev_batteries():
    """
    Real Name: Total energy required for total material consumption for EV batteries
    Original Eqn: SUM(Energy required for material consumption for EV batteries[materials!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total energy required for total material consumption for EV batteries.
    """
    return sum(
        energy_required_for_material_consumption_for_ev_batteries(), dim=("materials",)
    )


@cache.step
@to_float
def tfe_required_for_total_material_consumption_for_alt_techn():
    """
    Real Name: TFE required for total material consumption for alt techn
    Original Eqn: Total energy required for material consumption for RES elec+Total energy required for total material consumption for EV batteries
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy required for total material consumption for alternative
        technologies (RES elec & EV Batteries).
    """
    return (
        total_energy_required_for_material_consumption_for_res_elec()
        + total_energy_required_for_total_material_consumption_for_ev_batteries()
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def energy_required_for_material_consumption_per_res_elec():
    """
    Real Name: Energy required for material consumption per RES elec
    Original Eqn: "Energy required for material consumption for O&M RES elec"[RES elec,materials]+Energy required for material consumption for new RES elec[RES elec, materials]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Energy required for material consumption per material per RES elec
        technologies.
    """
    return (
        energy_required_for_material_consumption_for_om_res_elec()
        + energy_required_for_material_consumption_for_new_res_elec()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def total_energy_required_per_material_for_alt_techn():
    """
    Real Name: Total energy required per material for alt techn
    Original Eqn: SUM(Energy required for material consumption per RES elec[RES elec!,materials])+Energy required for material consumption for EV batteries[materials]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total energy required for total material consumption per material for
        alternative technologies (RES elec & EV Batteries).
    """
    return (
        sum(energy_required_for_material_consumption_per_res_elec(), dim=("RES elec",))
        + energy_required_for_material_consumption_for_ev_batteries()
    )


@cache.step
@to_float
def total_jobs_res_elec():
    """
    Real Name: Total jobs RES elec
    Original Eqn: SUM("Total D+I jobs RES elec per techn"[RES elec!])
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Total jobs RES elec.
    """
    return sum(total_di_jobs_res_elec_per_techn(), dim=("RES elec",))


@cache.step
@to_float
def total_jobs_biofuels():
    """
    Real Name: total jobs biofuels
    Original Eqn: Employment factor biofuels*FES total biofuels production EJ
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Total (direct+indirect) jobs biofuels.
    """
    return employment_factor_biofuels() * fes_total_biofuels_production_ej()


@cache.step
@to_float
def total_jobs_res():
    """
    Real Name: Total jobs RES
    Original Eqn: Total jobs RES elec+Total jobs RES heat+D jobs fuel supply solids bioE+total jobs biofuels
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Total jobs RES.
    """
    return (
        total_jobs_res_elec()
        + total_jobs_res_heat()
        + d_jobs_fuel_supply_solids_bioe()
        + total_jobs_biofuels()
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def total_di_jobs_res_heat_per_techn():
    """
    Real Name: "Total D+I jobs RES heat per techn"
    Original Eqn: Total D jobs RES heat per techn[RES heat]*Ratio total vs D jobs RES heat[RES heat]
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Total (direct+indirect) jobs RES heat per technology.
    """
    return total_d_jobs_res_heat_per_techn() * ratio_total_vs_d_jobs_res_heat()


@cache.step
@to_float
def total_jobs_res_heat():
    """
    Real Name: Total jobs RES heat
    Original Eqn: SUM("Total D+I jobs RES heat per techn"[RES heat!])
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Total jobs RES heat.
    """
    return sum(total_di_jobs_res_heat_per_techn(), dim=("RES heat",))


@cache.step
@subs(["RES elec"], _subscript_dict)
def total_di_jobs_res_elec_per_techn():
    """
    Real Name: "Total D+I jobs RES elec per techn"
    Original Eqn: Total D jobs RES elec per techn[RES elec]*Ratio total vs D jobs RES elec[RES elec]
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Total (direct+indirect) jobs RES elec per technology.
    """
    return total_d_jobs_res_elec_per_techn() * ratio_total_vs_d_jobs_res_elec()


@cache.run
@subs(["RES heat"], _subscript_dict)
def ratio_total_vs_d_jobs_res_heat():
    """
    Real Name: Ratio total vs D jobs RES heat
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'AB17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'AB18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'AB19')
    Units: people*Year/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Ratio total (direct+indirect) vs direct jobs RES heat.
    """
    return _ext_constant_ratio_total_vs_d_jobs_res_heat()


@cache.run
@subs(["RES elec"], _subscript_dict)
def ratio_total_vs_d_jobs_res_elec():
    """
    Real Name: Ratio total vs D jobs RES elec
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'AB13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'AB16')
    Units: people*Year/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Ratio total (direct+indirect) vs direct jobs RES elec.
    """
    return _ext_constant_ratio_total_vs_d_jobs_res_elec()


@cache.run
@to_float
def employment_factor_biofuels():
    """
    Real Name: Employment factor biofuels
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Y21')
    Units: people/EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Employment factor (direct+indirect) biofuels.
    """
    return _ext_constant_employment_factor_biofuels()


@cache.step
@subs(["RES elec"], _subscript_dict)
def installed_capacity_res_elec_delayed_1yr():
    """
    Real Name: installed capacity RES elec delayed 1yr
    Original Eqn: DELAY FIXED ( installed capacity RES elec TW[RES elec], 1, 0)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual installed capacity of RES elec technologies for electricity
        generation delayed 1 year.
    """
    return _delayfixed_installed_capacity_res_elec_delayed_1yr()


@cache.step
@subs(["RES heat"], _subscript_dict)
def jobs_om_res_heat_per_techn():
    """
    Real Name: "Jobs O&M RES heat per techn"
    Original Eqn: ("installed capacity RES heat-com TW"[RES heat]+"installed capacity RES heat-nc TW"[RES heat])*"Employment factors O&M RES heat"[RES heat]*M per T
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Annual jobs operation&maintenance of RES heat per technology.
    """
    return (
        (installed_capacity_res_heatcom_tw() + installed_capacity_res_heatnc_tw())
        * employment_factors_om_res_heat()
        * m_per_t()
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def d_jobs_new_installed_res_heat_per_techn():
    """
    Real Name: D jobs new installed RES heat per techn
    Original Eqn: ("new RES capacity for heat-com TW"[RES heat]+"replacement RES for heat-com TW"[RES heat]+"new RES capacity for heat-nc TW"[RES heat]+"replacement RES for heat-nc TW"[RES heat])*Employment factors new RES heat[RES heat]*M per T
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Annual direct jobs new installed RES heat per technology.
    """
    return (
        (
            new_res_capacity_for_heatcom_tw()
            + replacement_res_for_heatcom_tw()
            + new_res_capacity_for_heatnc_tw()
            + replacement_res_for_heatnc_tw()
        )
        * employment_factors_new_res_heat()
        * m_per_t()
    )


@cache.step
@to_float
def d_jobs_fuel_supply_solids_bioe():
    """
    Real Name: D jobs fuel supply solids bioE
    Original Eqn: PES solids bioE EJ*Employment factor fuel supply solids bioE*1000
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Direct jobs in fuel supply of solids bioenergy.
    """
    return pes_solids_bioe_ej() * employment_factor_fuel_supply_solids_bioe() * 1000


@cache.step
@subs(["RES elec"], _subscript_dict)
def new_capacity_installed_growth_rate_res_elec():
    """
    Real Name: new capacity installed growth rate RES elec
    Original Eqn: -1+ZIDZ( installed capacity RES elec TW[RES elec] , installed capacity RES elec delayed 1yr[RES elec] )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual RES elec capacity installed growth rate.
    """
    return -1 + zidz(
        installed_capacity_res_elec_tw(), installed_capacity_res_elec_delayed_1yr()
    )


@cache.run
@to_float
def employment_factor_fuel_supply_solids_bioe():
    """
    Real Name: Employment factor fuel supply solids bioE
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'AA8')
    Units: people/EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Employment factor of the direct jobs in fuel supply of solids bioE.
    """
    return _ext_constant_employment_factor_fuel_supply_solids_bioe()


@cache.step
@to_float
def exogenous_growth_gtl():
    """
    Real Name: Exogenous growth GTL
    Original Eqn: IF THEN ELSE(Time<2015, Hist growth GTL, IF THEN ELSE("Crash programme GTL?"=0,P GTL, IF THEN ELSE("Crash programme GTL?"=1 :AND: abundance liquids>=1, Hist growth GTL, P GTL)))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    If there is not scarcity of liquids, GTL production increases at
        historical past rates.
    """
    return if_then_else(
        time() < 2015,
        lambda: hist_growth_gtl(),
        lambda: if_then_else(
            crash_programme_gtl() == 0,
            lambda: p_gtl(),
            lambda: if_then_else(
                logical_and(crash_programme_gtl() == 1, abundance_liquids() >= 1),
                lambda: hist_growth_gtl(),
                lambda: p_gtl(),
            ),
        ),
    )


@cache.step
@to_float
def replacement_gtl():
    """
    Real Name: replacement GTL
    Original Eqn: IF THEN ELSE(Time<2015,0, IF THEN ELSE("Crash programme GTL?"=0,0, IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?"*wear GTL, wear GTL)))*scarcity conv oil
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Replacement of GTL.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: 0,
            lambda: if_then_else(
                crash_programme_gtl() == 0,
                lambda: 0,
                lambda: if_then_else(
                    check_liquids() < 0,
                    lambda: constrain_liquids_exogenous_growth() * wear_gtl(),
                    lambda: wear_gtl(),
                ),
            ),
        )
        * scarcity_conv_oil()
    )


@cache.run
@to_float
def crash_programme_gtl():
    """
    Real Name: "Crash programme GTL?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D112')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0- Crash programme GTL NOT activated        1- Crash programme GTL activated
    """
    return _ext_constant_crash_programme_gtl()


@cache.run
@to_float
def activate_eroi_fc_system_feedback():
    """
    Real Name: "Activate EROI FC system feedback?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C312')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0- EROI FC tot feedback NOT activated        1- EROI FC tot feedback activated
    """
    return _ext_constant_activate_eroi_fc_system_feedback()


@cache.step
@to_float
def exogenous_growth_ctl():
    """
    Real Name: Exogenous growth CTL
    Original Eqn: IF THEN ELSE(Time<2015, Hist growth CTL, IF THEN ELSE("Crash programme CTL?"=0,P CTL, IF THEN ELSE("Crash programme CTL?"=1 :AND: abundance liquids>=1, Hist growth CTL, P CTL)))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    If there is not scarcity of liquids, CTL production increases at
        historical past rates.
    """
    return if_then_else(
        time() < 2015,
        lambda: hist_growth_ctl(),
        lambda: if_then_else(
            crash_programme_ctl() == 0,
            lambda: p_ctl(),
            lambda: if_then_else(
                logical_and(crash_programme_ctl() == 1, abundance_liquids() >= 1),
                lambda: hist_growth_ctl(),
                lambda: p_ctl(),
            ),
        ),
    )


@cache.step
@to_float
def replacement_ctl():
    """
    Real Name: replacement CTL
    Original Eqn: IF THEN ELSE(Time<2015,0, IF THEN ELSE("Crash programme CTL?"=0,0, IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?"*wear CTL, wear CTL)))*scarcity conv oil
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Replacement of CTL.
    """
    return (
        if_then_else(
            time() < 2015,
            lambda: 0,
            lambda: if_then_else(
                crash_programme_ctl() == 0,
                lambda: 0,
                lambda: if_then_else(
                    check_liquids() < 0,
                    lambda: constrain_liquids_exogenous_growth() * wear_ctl(),
                    lambda: wear_ctl(),
                ),
            ),
        )
        * scarcity_conv_oil()
    )


def table_max_extraction_aspo_oil_ej_0_1_0(x):
    """
    Real Name: table max extraction ASPO oil EJ 0 1 0
    Original Eqn: ( [(0,0)-(13200,200)],(0,0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),(3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),(6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),(9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),(12000,171.044),(12600,171.044),(13200,171.044))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir
        del 2050 se ha realizado una exponencial negativa hasta anular las
        reservas en 2100.        /*Considera crude y unconvencional oil, así que una vez separado no vale
        esta tabla*/
    """
    return lookup(
        x,
        [
            0,
            600,
            1200,
            1800,
            2400,
            3000,
            3600,
            4200,
            4800,
            5400,
            6000,
            6600,
            7200,
            7800,
            8400,
            9000,
            9600,
            10200,
            10800,
            11400,
            12000,
            12600,
            13200,
        ],
        [
            0,
            29.9783,
            46.7403,
            59.4953,
            71.3603,
            84.9357,
            96.0997,
            107.465,
            118.46,
            127.537,
            137.018,
            145.888,
            152.005,
            156.288,
            162.47,
            166.659,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
        ],
    )


@cache.step
@to_float
def aux12():
    """
    Real Name: aux12
    Original Eqn: DELAY FIXED ( RURR coal start year PLG, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux12()


@cache.step
@to_float
def coal_to_leave_underground():
    """
    Real Name: coal to leave underground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground coal, 0, share RURR coal to leave underground*RURR coal start year PLG)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Coal to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(),
        lambda: 0,
        lambda: share_rurr_coal_to_leave_underground() * rurr_coal_start_year_plg(),
    )


@cache.step
@to_float
def rurr_coal_start_year_plg():
    """
    Real Name: RURR coal start year PLG
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground coal, RURR coal , aux12 )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR until the start of the policy to leave in the ground (PLG) the
        resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(),
        lambda: rurr_coal(),
        lambda: aux12(),
    )


@cache.step
@to_float
def rurr_conv_oil_until_start_year_plg():
    """
    Real Name: RURR conv oil until start year PLG
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground conv oil, RURR conv oil, aux6)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR until the start of the policy to leave in the ground (PLG) the
        resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(),
        lambda: rurr_conv_oil(),
        lambda: aux6(),
    )


@cache.step
@to_float
def conv_gas_to_leave_underground():
    """
    Real Name: conv gas to leave underground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground conv gas, 0, RURR conv gas until start year PLG*share RURR conv gas to leave underground)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Conventional natural gas to be left underground due to the application of
        a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(),
        lambda: 0,
        lambda: rurr_conv_gas_until_start_year_plg()
        * share_rurr_conv_gas_to_leave_underground(),
    )


@cache.step
@to_float
def conv_oil_to_leave_underground():
    """
    Real Name: conv oil to leave underground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground conv oil,0,RURR conv oil until start year PLG*share RURR conv oil to leave underground)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Conventional oil to be left underground due to the application of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(),
        lambda: 0,
        lambda: rurr_conv_oil_until_start_year_plg()
        * share_rurr_conv_oil_to_leave_underground(),
    )


@cache.step
@to_float
def rurr_unconv_oil_until_start_year_plg():
    """
    Real Name: RURR unconv oil until start year PLG
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground unconv oil, RURR unconv oil EJ , aux7)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR until the start of the policy to leave in the ground (PLG) the
        resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(),
        lambda: rurr_unconv_oil_ej(),
        lambda: aux7(),
    )


@cache.step
@to_float
def rurr_unconv_gas_until_start_year_plg():
    """
    Real Name: RURR unconv gas until start year PLG
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground unconv gas, RURR unconv gas , aux10)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR until the start of the policy to leave in the ground (PLG) the
        resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(),
        lambda: rurr_unconv_gas(),
        lambda: aux10(),
    )


@cache.step
@to_float
def unconv_gas_to_leave_underground():
    """
    Real Name: unconv gas to leave underground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground unconv gas, 0, RURR unconv gas until start year PLG*share RURR unconv gas to leave underground )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Unconventional natural gas to be left underground due to the application
        of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(),
        lambda: 0,
        lambda: rurr_unconv_gas_until_start_year_plg()
        * share_rurr_unconv_gas_to_leave_underground(),
    )


@cache.step
@to_float
def tot_agg_gas_to_leave_underground():
    """
    Real Name: tot agg gas to leave underground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground tot agg gas, 0, RURR tot gas until start year PLG*share RURR tot agg gas to leave underground)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total aggregated natural gas to be left underground due to the application
        of a policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(),
        lambda: 0,
        lambda: rurr_tot_gas_until_start_year_plg()
        * share_rurr_tot_agg_gas_to_leave_underground(),
    )


@cache.step
@to_float
def unconv_oil_to_leave_underground():
    """
    Real Name: unconv oil to leave underground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground unconv oil,0, RURR unconv oil until start year PLG*share RURR unconv oil to leave underground )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Unconventional oil to be left underground due to the application of a
        policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(),
        lambda: 0,
        lambda: rurr_unconv_oil_until_start_year_plg()
        * share_rurr_unconv_oil_to_leave_underground(),
    )


@cache.step
@to_float
def aux11():
    """
    Real Name: aux11
    Original Eqn: DELAY FIXED ( RURR tot gas until start year PLG, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux11()


@cache.step
@to_float
def tot_agg_oil_to_leave_underground():
    """
    Real Name: tot agg oil to leave underground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground tot agg oil, 0, RURR tot oil until start year PLG*share RURR tot agg oil to leave underground)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total aggregated oil to be left underground due to the application of a
        policy.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(),
        lambda: 0,
        lambda: rurr_tot_oil_until_start_year_plg()
        * share_rurr_tot_agg_oil_to_leave_underground(),
    )


@cache.step
@to_float
def aux6():
    """
    Real Name: aux6
    Original Eqn: DELAY FIXED ( RURR conv oil until start year PLG, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux6()


@cache.step
@to_float
def aux7():
    """
    Real Name: aux7
    Original Eqn: DELAY FIXED ( RURR unconv oil until start year PLG, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux7()


@cache.step
@to_float
def aux8():
    """
    Real Name: aux8
    Original Eqn: DELAY FIXED ( RURR tot oil until start year PLG, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux8()


@cache.step
@to_float
def aux9():
    """
    Real Name: aux9
    Original Eqn: DELAY FIXED ( RURR conv gas until start year PLG, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux9()


@cache.step
@to_float
def rurr_conv_gas_until_start_year_plg():
    """
    Real Name: RURR conv gas until start year PLG
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground conv gas, RURR conv gas, aux9)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR until the start of the policy to leave in the ground (PLG) the
        resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(),
        lambda: rurr_conv_gas(),
        lambda: aux9(),
    )


@cache.step
@to_float
def aux10():
    """
    Real Name: aux10
    Original Eqn: DELAY FIXED ( RURR unconv gas until start year PLG, TIME STEP, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_aux10()


def table_max_extraction_aspo_oil_ej_0_1(x):
    """
    Real Name: table max extraction ASPO oil EJ 0 1
    Original Eqn: ( [(0,0)-(13200,200)],(0,0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),(3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),(6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),(9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),(12000,171.044),(12600,171.044),(13200,171.044))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir
        del 2050 se ha realizado una exponencial negativa hasta anular las
        reservas en 2100.        /*Considera crude y unconvencional oil, así que una vez separado no vale
        esta tabla*/
    """
    return lookup(
        x,
        [
            0,
            600,
            1200,
            1800,
            2400,
            3000,
            3600,
            4200,
            4800,
            5400,
            6000,
            6600,
            7200,
            7800,
            8400,
            9000,
            9600,
            10200,
            10800,
            11400,
            12000,
            12600,
            13200,
        ],
        [
            0,
            29.9783,
            46.7403,
            59.4953,
            71.3603,
            84.9357,
            96.0997,
            107.465,
            118.46,
            127.537,
            137.018,
            145.888,
            152.005,
            156.288,
            162.47,
            166.659,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
        ],
    )


def table_max_extraction_aspo_oil_ej_0(x):
    """
    Real Name: table max extraction ASPO oil EJ 0
    Original Eqn: ( [(0,0)-(13200,200)],(0,0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),(3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),(6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),(9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),(12000,171.044),(12600,171.044),(13200,171.044))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir
        del 2050 se ha realizado una exponencial negativa hasta anular las
        reservas en 2100.        /*Considera crude y unconvencional oil, así que una vez separado no vale
        esta tabla*/
    """
    return lookup(
        x,
        [
            0,
            600,
            1200,
            1800,
            2400,
            3000,
            3600,
            4200,
            4800,
            5400,
            6000,
            6600,
            7200,
            7800,
            8400,
            9000,
            9600,
            10200,
            10800,
            11400,
            12000,
            12600,
            13200,
        ],
        [
            0,
            29.9783,
            46.7403,
            59.4953,
            71.3603,
            84.9357,
            96.0997,
            107.465,
            118.46,
            127.537,
            137.018,
            145.888,
            152.005,
            156.288,
            162.47,
            166.659,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
        ],
    )


def table_max_extraction_aspo_oil_ej_0_0(x):
    """
    Real Name: table max extraction ASPO oil EJ 0 0
    Original Eqn: ( [(0,0)-(13200,200)],(0,0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),(3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),(6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),(9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),(12000,171.044),(12600,171.044),(13200,171.044))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir
        del 2050 se ha realizado una exponencial negativa hasta anular las
        reservas en 2100.        /*Considera crude y unconvencional oil, así que una vez separado no vale
        esta tabla*/
    """
    return lookup(
        x,
        [
            0,
            600,
            1200,
            1800,
            2400,
            3000,
            3600,
            4200,
            4800,
            5400,
            6000,
            6600,
            7200,
            7800,
            8400,
            9000,
            9600,
            10200,
            10800,
            11400,
            12000,
            12600,
            13200,
        ],
        [
            0,
            29.9783,
            46.7403,
            59.4953,
            71.3603,
            84.9357,
            96.0997,
            107.465,
            118.46,
            127.537,
            137.018,
            145.888,
            152.005,
            156.288,
            162.47,
            166.659,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
        ],
    )


@cache.step
@to_float
def rurr_tot_gas_until_start_year_plg():
    """
    Real Name: RURR tot gas until start year PLG
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground tot agg gas, RURR tot agg gas , aux11)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR until the start of the policy to leave in the ground (PLG) the
        resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(),
        lambda: rurr_tot_agg_gas(),
        lambda: aux11(),
    )


@cache.step
@to_float
def rurr_tot_oil_until_start_year_plg():
    """
    Real Name: RURR tot oil until start year PLG
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground tot agg oil, RURR tot agg oil , aux8)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR until the start of the policy to leave in the ground (PLG) the
        resource.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(),
        lambda: rurr_tot_agg_oil(),
        lambda: aux8(),
    )


@cache.step
@to_float
def share_elec_demand_covered_by_res():
    """
    Real Name: share Elec demand covered by RES
    Original Eqn: IF THEN ELSE(Total FE Elec demand TWh>0, MIN(1, FE tot generation all RES elec TWh/Total FE Elec demand TWh),0.5)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of the electricity demand covered by RES. Condition to avoid error
        when the denominator is zero (0.5 is an arbitrary value).
    """
    return if_then_else(
        total_fe_elec_demand_twh() > 0,
        lambda: np.minimum(
            1, fe_tot_generation_all_res_elec_twh() / total_fe_elec_demand_twh()
        ),
        lambda: 0.5,
    )


@cache.step
@to_float
def rurr_conv_gas():
    """
    Real Name: RURR conv gas
    Original Eqn: INTEG ( -extraction conv gas EJ-Flow conv gas left in ground, URR conv gas-cumulated conv gas extraction to 1995*"separate conv and unconv gas?")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR conventional gas.
    """
    return _integ_rurr_conv_gas()


@cache.step
@to_float
def rurr_unconv_gas():
    """
    Real Name: RURR unconv gas
    Original Eqn: INTEG ( -extraction unconv gas EJ-Flow unconv gas left in ground, URR unconv gas-cumulated unconv gas extraction to 1995*"separate conv and unconv gas?")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR unconventional gas.
    """
    return _integ_rurr_unconv_gas()


@cache.step
@to_float
def rurr_conv_oil():
    """
    Real Name: RURR conv oil
    Original Eqn: INTEG ( -extraction conv oil EJ-Flow conv oil left in ground, URR conv oil-cumulated conv oil extraction to 1995*"separate conv and unconv oil?")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR conventional oil.
    """
    return _integ_rurr_conv_oil()


@cache.step
@to_float
def variation_share_transmdistr_losses_elec():
    """
    Real Name: "variation share transm&distr losses elec"
    Original Eqn: "share transm&distr elec losses initial"*(0.0115*EXP(4.2297*share RES electricity generation)-0.00251)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Relationship between transmission and distribution losses of electricity
        and the penetration of RES in the electricity mix. Source: NREL (2012).
    """
    return share_transmdistr_elec_losses_initial() * (
        0.0115 * np.exp(4.2297 * share_res_electricity_generation()) - 0.00251
    )


@cache.step
@to_float
def share_demand_solids_in_transport():
    """
    Real Name: Share demand solids in transport
    Original Eqn: Share demand by fuel in transport[solids]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share demand solids in transport
    """
    return share_demand_by_fuel_in_transport().loc["solids"].reset_coords(drop=True)


@cache.step
@to_float
def share_demand_gas_in_transport():
    """
    Real Name: Share demand gas in transport
    Original Eqn: Share demand by fuel in transport[gases]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of gas in transport
    """
    return share_demand_by_fuel_in_transport().loc["gases"].reset_coords(drop=True)


@cache.step
@subs(["final sources"], _subscript_dict)
def share_demand_by_fuel_in_transport():
    """
    Real Name: Share demand by fuel in transport
    Original Eqn: Total transport FED by fuel[final sources]/Transport TFED
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Share demand by fuel in transport
    """
    return total_transport_fed_by_fuel() / transport_tfed()


@cache.step
@to_float
def share_demand_electricity_in_transport():
    """
    Real Name: Share demand electricity in transport
    Original Eqn: Share demand by fuel in transport[electricity]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of electricity in transport
    """
    return (
        share_demand_by_fuel_in_transport().loc["electricity"].reset_coords(drop=True)
    )


@cache.step
@to_float
def share_demand_heat_in_transport():
    """
    Real Name: Share demand heat in transport
    Original Eqn: Share demand by fuel in transport[heat]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share demand heat in transport
    """
    return share_demand_by_fuel_in_transport().loc["heat"].reset_coords(drop=True)


@cache.step
@to_float
def share_demand_liquids_in_transport():
    """
    Real Name: Share demand liquids in transport
    Original Eqn: Share demand by fuel in transport[liquids]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of liquids in transport
    """
    return share_demand_by_fuel_in_transport().loc["liquids"].reset_coords(drop=True)


@cache.step
@to_float
def co2_emissions_per_value_added():
    """
    Real Name: CO2 emissions per value added
    Original Eqn: ZIDZ( Total CO2 emissions GTCO2 , GDP EU )
    Units: GtCO2/(Year*T$)
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions per value added (GDP).
    """
    return zidz(total_co2_emissions_gtco2(), gdp_eu())


@cache.step
@to_float
def liquids_per_x_bus():
    """
    Real Name: liquids per X bus
    Original Eqn: Energy initial inland transport[bus liq]*adjust energy for transport to inland transport/initial Xt inland
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None

    EJ/T$economic activity  Average consumption of vehicles from historical data= energy
        used in that kind of transport/ economic activity of the sector        data 'International Energy Agency (2016), Energy Technology Perspectives 2016,
        OECD/IEA,data data 'International Energy Agency (2016), Energy Technology
        Perspectives 2016, OECD/IEA,   for energy        number of buses from
        http://www.theicct.org/global-transportation-roadmap-model
    """
    return (
        energy_initial_inland_transport().loc["bus liq"].reset_coords(drop=True)
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland()
    )


@cache.step
@to_float
def liquids_per_x_hv():
    """
    Real Name: liquids per X HV
    Original Eqn: Energy initial inland transport[HV liq]*adjust energy for transport to inland transport/initial Xt inland
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None

    EJ/T$economic activity  Average consumption of vehicles from historical data= energy
        used in that kind of transport/ economic activity of the sector        data 'International Energy Agency (2016), Energy Technology Perspectives
        2016, OECD/IEA,
    """
    return (
        energy_initial_inland_transport().loc["HV liq"].reset_coords(drop=True)
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland()
    )


@cache.step
@to_float
def liquids_per_x_lv():
    """
    Real Name: liquids per X LV
    Original Eqn: Energy initial inland transport[LV liq]*adjust energy for transport to inland transport/initial Xt inland
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None

    EJ/T$economic activity  Average consumption of vehicles from historical data= energy
        used in that kind of transport/ economic activity of the sector        data 'International Energy Agency (2016), Energy Technology Perspectives
        2016, OECD/IEA,data
    """
    return (
        energy_initial_inland_transport().loc["LV liq"].reset_coords(drop=True)
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland()
    )


@cache.step
@to_float
def energy_per_x_train():
    """
    Real Name: energy per X train
    Original Eqn: Energy initial inland transport[train liq]*adjust energy for transport to inland transport/initial Xt inland
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None

    EJ/T$economic activity  Average consumption of vehicles from historical data= energy
        used in that kind of transport/ economic activity of the sector        In the case of trains the number of vehicles is set to 1 since there are
        no data of the number of trains
    """
    return (
        energy_initial_inland_transport().loc["train liq"].reset_coords(drop=True)
        * adjust_energy_for_transport_to_inland_transport()
        / initial_xt_inland()
    )


@cache.run
@to_float
def adjust_energy_for_transport_to_inland_transport():
    """
    Real Name: adjust energy for transport to inland transport
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G72')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    'International Energy Agency (2016), Energy Technology Perspectives 2016,
        OECD/IEA, considers in 2015 about 34 EJ of liquids for commercial
        transport. However WIOD database considers to inland transport sector
        about 12 EJ. Provisionally, we adjust OECD/IEA data to WIOD. We consider
        OECD/IEA data in relative terms
    """
    return _ext_constant_adjust_energy_for_transport_to_inland_transport()


@cache.step
@to_float
def effects_shortage_elec_on_evhib():
    """
    Real Name: "effects shortage elec on EV/hib"
    Original Eqn: IF THEN ELSE(Abundance electricity>0.8, ((Abundance electricity-0.8)*5)^2, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The eventual scarcity of electricity would likely constrain the
        development of EVs. The proposed relationship avoids an abrupt limitation
        by introducing a range (1;0.8) in the electricity abundance that
        constrains the development of EVs.
    """
    return if_then_else(
        abundance_electricity() > 0.8,
        lambda: ((abundance_electricity() - 0.8) * 5) ** 2,
        lambda: 0,
    )


@cache.step
@to_float
def required_number_standard_batteries():
    """
    Real Name: required number standard batteries
    Original Eqn: bat number 2w+bat number EV+bat number hib+1
    Units: batteries
    Limits: (None, None)
    Type: component
    Subs: None

    Required number of  electric batteries taking as a stantad a 21,3KWh
        battery (average size of purely electric vehicle). The batteries of other
        vehicles are described in terms of this standard one using the batteries
        ratio coefficient, (relative to the size and amount of minerals). .
    """
    return bat_number_2w() + bat_number_ev() + bat_number_hib() + 1


@cache.step
@to_float
def transport_tfed_energy_intensity():
    """
    Real Name: Transport TFED energy intensity
    Original Eqn: ZIDZ( Transport TFED , GDP EU )
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(transport_tfed(), gdp_eu())


@cache.step
@to_float
def total_number_light_vehicles():
    """
    Real Name: total number light vehicles
    Original Eqn: Number vehicles H[liq 4wheels]+Number vehicles H[hib 4wheels]+Number vehicles H[elec 4wheels]+Number vehicles H[gas 4wheels]+vehicles inlandT[LV liq]+vehicles inlandT[LV elec]+vehicles inlandT[LV hib]+vehicles inlandT[LV gas]
    Units: Mvehicles
    Limits: (None, None)
    Type: component
    Subs: None

    Total number of ligth duty vehicles (cargo+households)
    """
    return (
        number_vehicles_h().loc["liq 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc["hib 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc["elec 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc["gas 4wheels"].reset_coords(drop=True)
        + vehicles_inlandt().loc["LV liq"].reset_coords(drop=True)
        + vehicles_inlandt().loc["LV elec"].reset_coords(drop=True)
        + vehicles_inlandt().loc["LV hib"].reset_coords(drop=True)
        + vehicles_inlandt().loc["LV gas"].reset_coords(drop=True)
    )


@cache.step
@to_float
def transport_tfed():
    """
    Real Name: Transport TFED
    Original Eqn: SUM(Total transport FED by fuel[final sources!])
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total Final Energy demand in transport
    """
    return sum(total_transport_fed_by_fuel(), dim=("final sources",))


@cache.step
@to_float
def co2_emissions_unconv_gas():
    """
    Real Name: CO2 emissions unconv gas
    Original Eqn: real extraction unconv gas emissions relevant EJ*gCO2 per MJ unconv gas*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions from unconventional gas.
    """
    return (
        real_extraction_unconv_gas_emissions_relevant_ej()
        * gco2_per_mj_unconv_gas()
        * mj_per_ej()
        / g_per_gt()
    )


@cache.run
@to_float
def phaseout_oil_for_electricity():
    """
    Real Name: "phase-out oil for electricity?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C167')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Activation of a policies to reduce oil contribution in electricity linearly:        If=1: ACTIVATED,        If=0: DEACTIVATED.
    """
    return _ext_constant_phaseout_oil_for_electricity()


@cache.step
@to_float
def total_ch4_emissions_fossil_fuels():
    """
    Real Name: Total CH4 emissions fossil fuels
    Original Eqn: CH4 emissions conv gas without GTL+CH4 emissions unconv gas+CH4 emissions coal without CTL+CH4 emissions oil+CH4 emissions CTL+CH4 emissions GTL
    Units: MtCH4
    Limits: (None, None)
    Type: component
    Subs: None

    Total CH4 emissions from fossil fuels.
    """
    return (
        ch4_emissions_conv_gas_without_gtl()
        + ch4_emissions_unconv_gas()
        + ch4_emissions_coal_without_ctl()
        + ch4_emissions_oil()
        + ch4_emissions_ctl()
        + ch4_emissions_gtl()
    )


@cache.step
@to_float
def max_csp_twe():
    """
    Real Name: max CSP TWe
    Original Eqn: max CSP on land MHa*power density CSP
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Techno-ecological potential of solar CSP. This potential depends on the
        assumed land availability for solar CSP power plants ("max solar PV on
        land MHa") and its power density (1 TWe = 8760 TWh in one year).
    """
    return max_csp_on_land_mha() * power_density_csp()


@cache.run
@to_float
def gch4_per_mj_gtl():
    """
    Real Name: gCH4 per MJ GTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G94')
    Units: GtCO2/MToe
    Limits: (None, None)
    Type: constant
    Subs: None

    CH4 emission factor of GTL.
    """
    return _ext_constant_gch4_per_mj_gtl()


@cache.step
@to_float
def ch4_emissions_gtl():
    """
    Real Name: CH4 emissions GTL
    Original Eqn: "PED nat. gas for GTL EJ"*gCH4 per MJ GTL*MJ per EJ/g per Mt
    Units: MtCH4
    Limits: (None, None)
    Type: component
    Subs: None

    CH4 emissions GTL.
    """
    return ped_nat_gas_for_gtl_ej() * gch4_per_mj_gtl() * mj_per_ej() / g_per_mt()


@cache.run
@to_float
def phaseout_oil_for_heat():
    """
    Real Name: "phase-out oil for heat?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C168')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Activation of a policies to reduce oil contribution in heat commercial linearly:        If=1: ACTIVATED,        If=0: DEACTIVATED.
    """
    return _ext_constant_phaseout_oil_for_heat()


@cache.run
@to_float
def gch4_per_mj_ctl():
    """
    Real Name: gCH4 per MJ CTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G93')
    Units: GtCO2/MToe
    Limits: (None, None)
    Type: constant
    Subs: None

    CH4 emission factor of CTL.
    """
    return _ext_constant_gch4_per_mj_ctl()


@cache.run
@to_float
def g_per_gt():
    """
    Real Name: g per Gt
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G15')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Unit conversion.
    """
    return _ext_constant_g_per_gt()


@cache.step
@to_float
def bioe_co2_emissions():
    """
    Real Name: BioE CO2 emissions
    Original Eqn: gCO2 per MJ conv gas*(Oil liquids saved by biofuels EJ+solid bioE emissions relevant EJ+"PES tot biogas for heat-com")*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions from biomass. We assume that biofuels have an emission
        intensity similar to natural gas (due to ILUCs, see Technical Report), and
        for the rest (traditional biomass, biomass for electricity and biomass for
        heat) we asssume that the carbon balance is null.
    """
    return (
        gco2_per_mj_conv_gas()
        * (
            oil_liquids_saved_by_biofuels_ej()
            + solid_bioe_emissions_relevant_ej()
            + pes_tot_biogas_for_heatcom()
        )
        * mj_per_ej()
        / g_per_gt()
    )


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def p_h_vehicle():
    """
    Real Name: P H vehicle
    Original Eqn:
      (1-(P share 2wheelers/100))*(100-P percent elec Hveh-P percent gas Hveh-P percent hyb Hveh)
        .
        .
        .
      (P share 2wheelers/100)*P percent 2w elec
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    desired percent of vehicles from each type in T fin. These are percentages
        relatives TO THE TOTAL AMOUNT OF VEHICLES ( 2 wheelers + 4 wheelers).
    """
    return xrmerge(
        [
            rearrange(
                (1 - (p_share_2wheelers() / 100))
                * (
                    100
                    - p_percent_elec_hveh()
                    - p_percent_gas_hveh()
                    - p_percent_hyb_hveh()
                ),
                ["Households vehicles"],
                {"Households vehicles": ["liq 4wheels"]},
            ),
            rearrange(
                p_percent_elec_hveh() * (1 - (p_share_2wheelers() / 100)),
                ["Households vehicles"],
                {"Households vehicles": ["elec 4wheels"]},
            ),
            rearrange(
                p_percent_hyb_hveh() * (1 - (p_share_2wheelers() / 100)),
                ["Households vehicles"],
                {"Households vehicles": ["hib 4wheels"]},
            ),
            rearrange(
                p_percent_gas_hveh() * (1 - (p_share_2wheelers() / 100)),
                ["Households vehicles"],
                {"Households vehicles": ["gas 4wheels"]},
            ),
            rearrange(
                (p_share_2wheelers() / 100) * (100 - p_percent_2w_elec()),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                (p_share_2wheelers() / 100) * p_percent_2w_elec(),
                ["Households vehicles"],
                {"Households vehicles": ["elec 2wheels"]},
            ),
        ]
    )


@cache.step
@to_float
def eroist_system_until_2015():
    """
    Real Name: EROIst system until 2015
    Original Eqn: IF THEN ELSE(Time<2015, EROIst system delayed , aux4)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROIst of the energy system until the year 2015.
    """
    return if_then_else(time() < 2015, lambda: eroist_system_delayed(), lambda: aux4())


@cache.step
@subs(["RES elec"], _subscript_dict)
def remaining_potential_elec_storage_by_res_techn():
    """
    Real Name: remaining potential elec storage by RES techn
    Original Eqn: IF THEN ELSE(max capacity elec storage >= demand storage capacity, (max capacity elec storage-demand storage capacity)/max capacity elec storage, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_capacity_elec_storage() >= demand_storage_capacity(),
        lambda: (max_capacity_elec_storage() - demand_storage_capacity())
        / max_capacity_elec_storage(),
        lambda: 0,
    )


@cache.run
@to_float
def cp_hydro_2015():
    """
    Real Name: Cp hydro 2015
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'I13')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Cp conventional hydro in 2015.
    """
    return _ext_constant_cp_hydro_2015()


@cache.step
@to_float
def esoi_phs_full_potential():
    """
    Real Name: ESOI PHS full potential
    Original Eqn: "EROI-ini RES elec dispatch"[hydro]*(Cp PHS/Cp hydro 2015)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    ESOI of PHS when the full potential is available.
    """
    return eroiini_res_elec_dispatch().loc["hydro"].reset_coords(drop=True) * (
        cp_phs() / cp_hydro_2015()
    )


@cache.step
@to_float
def max_capacity_elec_storage():
    """
    Real Name: max capacity elec storage
    Original Eqn: max capacity potential PHS+Used EV batteries for elec storage
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum capacity potential of electricity storage (PHS and electric
        bateries).
    """
    return max_capacity_potential_phs() + used_ev_batteries_for_elec_storage()


@cache.run
@to_float
def eolrr_minerals_alt_techn_res_vs_total_economy():
    """
    Real Name: "EOL-RR minerals alt techn RES vs. total economy"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G57')
    Units: Dnml
    Limits: (None, None)
    Type: constant
    Subs: None

    Recycling rate of minerals used in variable RES technologies in relation
        to the total economy. Since these technologies are novel and often include
        materials which are used in small quantities in complex products, the
        recycling rates of the used minerals are lower than for the whole economy.
    """
    return _ext_constant_eolrr_minerals_alt_techn_res_vs_total_economy()


@cache.run
@to_float
def crash_programme_ctl():
    """
    Real Name: "Crash programme CTL?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D110')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0- Crash programme CTL NOT activated        1- Crash programme CTL activated
    """
    return _ext_constant_crash_programme_ctl()


@cache.step
@subs(["materials"], _subscript_dict)
def recycling_rates_minerals_rest():
    """
    Real Name: recycling rates minerals Rest
    Original Eqn: INTEG ( improvement recycling rates minerals Rest[materials], current recycling rates minerals[materials]*"All minerals virgin?")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Recycling rates minerals for the rest of the economy.
    """
    return _integ_recycling_rates_minerals_rest()


@cache.run
@to_float
def p_percent_elec_hveh():
    """
    Real Name: P percent elec Hveh
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C177')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Desired percent of electrical vehicles (4 wheelers) in T fin our of TOTAL
        4 WHEEL vehicles
    """
    return _ext_constant_p_percent_elec_hveh()


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def percents_h_vehicles():
    """
    Real Name: percents H vehicles
    Original Eqn:
      INTEG ( var percents H vehicles[liq 4wheels], 100-initial 2w percent)
        .
        .
        .
      INTEG ( var percents H vehicles[elec 2wheels], 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    Percent relative to total number of vehicles 2w+4w.        Initial percentages in 1995 of alternative vehicles are considered cero,
        This is done that way in order to allow a lineal growth that matches
        historical vehaviour from 2005 to 2015. Percents relative to total 4w+2w.
    """
    return xrmerge(
        [
            rearrange(
                _integ_percents_h_vehicles(),
                ["Households vehicles"],
                {"Households vehicles": ["liq 4wheels"]},
            ),
            rearrange(
                _integ_percents_h_vehicles(),
                ["Households vehicles"],
                {"Households vehicles": ["elec 4wheels"]},
            ),
            rearrange(
                _integ_percents_h_vehicles(),
                ["Households vehicles"],
                {"Households vehicles": ["hib 4wheels"]},
            ),
            rearrange(
                _integ_percents_h_vehicles(),
                ["Households vehicles"],
                {"Households vehicles": ["gas 4wheels"]},
            ),
            rearrange(
                _integ_percents_h_vehicles(),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                _integ_percents_h_vehicles(),
                ["Households vehicles"],
                {"Households vehicles": ["elec 2wheels"]},
            ),
        ]
    )


@cache.run
@to_float
def t_hist_h_transp():
    """
    Real Name: T hist H transp
    Original Eqn: 2015
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year used to calibrate the historical growth of vehicles, 2015
    """
    return 2015


@cache.step
@to_float
def bat_number_2w():
    """
    Real Name: bat number 2w
    Original Eqn: Number vehicles H[elec 2wheels]*bateries ratio 2w E
    Units: batteries
    Limits: (None, None)
    Type: component
    Subs: None

    Required number of  electric batteries for 2w vehicles expressed in terms
        of a stantad a 21,3KWh battery, but taking into account the smaller size
        of 2 wheeler's batteries
    """
    return (
        number_vehicles_h().loc["elec 2wheels"].reset_coords(drop=True)
        * bateries_ratio_2w_e()
    )


@cache.run
@to_float
def bateries_ratio_2w_e():
    """
    Real Name: bateries ratio 2w E
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B114')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Ratio between the size of the electric 2 wheeler batteries and the
        standard 21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_2w_e()


@cache.step
@to_float
def bat_number_ev():
    """
    Real Name: bat number EV
    Original Eqn: Number vehicles H[elec 4wheels]+vehicles inlandT[LV elec]+vehicles inlandT[bus elec]*bateries ratio bus E
    Units: batteries
    Limits: (None, None)
    Type: component
    Subs: None

    Required number of  electric batteries for hybrid vehicles expressed in
        terms of a stantad a 21,3KWh battery,
    """
    return (
        number_vehicles_h().loc["elec 4wheels"].reset_coords(drop=True)
        + vehicles_inlandt().loc["LV elec"].reset_coords(drop=True)
        + vehicles_inlandt().loc["bus elec"].reset_coords(drop=True)
        * bateries_ratio_bus_e()
    )


@cache.step
@to_float
def bat_number_hib():
    """
    Real Name: bat number hib
    Original Eqn: vehicles inlandT[LV hib]*bateries ratio hib LV+vehicles inlandT[HV hib]*bateries ratio hib HV+vehicles inlandT [bus hib]*bateries ratio hib bus+Number vehicles H[hib 4wheels]*bateries ratio hib LV
    Units: batteries
    Limits: (None, None)
    Type: component
    Subs: None

    Required number of  electric batteries for hybrid vehicles expressed in
        terms of a stantad a 21,3KWh battery, but taking into account the greater
        size of heavy vehicle's batteries and the smaller one of hybrid ligh
        vehicles
    """
    return (
        vehicles_inlandt().loc["LV hib"].reset_coords(drop=True)
        * bateries_ratio_hib_lv()
        + vehicles_inlandt().loc["HV hib"].reset_coords(drop=True)
        * bateries_ratio_hib_hv()
        + vehicles_inlandt().loc["bus hib"].reset_coords(drop=True)
        * bateries_ratio_hib_bus()
        + number_vehicles_h().loc["hib 4wheels"].reset_coords(drop=True)
        * bateries_ratio_hib_lv()
    )


@cache.run
@to_float
def bateries_ratio_bus_e():
    """
    Real Name: bateries ratio bus E
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B112')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Ratio between the size of the electric bus batteries and the standard
        21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_bus_e()


@cache.run
@to_float
def bateries_ratio_hib_bus():
    """
    Real Name: bateries ratio hib bus
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B113')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Ratio between the size of the hybrid bus batteries and the standard
        21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_hib_bus()


@cache.run
@to_float
def bateries_ratio_hib_hv():
    """
    Real Name: bateries ratio hib HV
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B111')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Ratio between the size of the hybrid HV batteries and the standard 21,3KWh
        batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_hib_hv()


@cache.run
@to_float
def bateries_ratio_hib_lv():
    """
    Real Name: bateries ratio hib LV
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B110')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Ratio between the size of the electric LV hybrid batteries and the
        standard 21,3KWh batteries, per vehicle
    """
    return _ext_constant_bateries_ratio_hib_lv()


@cache.step
@to_float
def total_number_hybrid_light_vehicles():
    """
    Real Name: total number hybrid light vehicles
    Original Eqn: Number vehicles H[hib 4wheels]+vehicles inlandT[LV hib]
    Units: vehicle
    Limits: (None, None)
    Type: component
    Subs: None

    Total number of light hybrid vehicles, households+cargo
    """
    return number_vehicles_h().loc["hib 4wheels"].reset_coords(
        drop=True
    ) + vehicles_inlandt().loc["LV hib"].reset_coords(drop=True)


@cache.step
@to_float
def total_number_elec_light_vehicles():
    """
    Real Name: total number elec light vehicles
    Original Eqn: Number vehicles H[elec 4wheels]+vehicles inlandT[LV elec]
    Units: vehicle
    Limits: (None, None)
    Type: component
    Subs: None

    Total number of light electric vehicles, households+cargo  (battery
        based+plug in hybrid)
    """
    return number_vehicles_h().loc["elec 4wheels"].reset_coords(
        drop=True
    ) + vehicles_inlandt().loc["LV elec"].reset_coords(drop=True)


@cache.step
@to_float
def total_number_gas_light_vehicles():
    """
    Real Name: total number gas light vehicles
    Original Eqn: Number vehicles H[gas 4wheels]+vehicles inlandT[LV gas]
    Units: vehicle
    Limits: (None, None)
    Type: component
    Subs: None

    Total number of light gas vehicles, households+cargo
    """
    return number_vehicles_h().loc["gas 4wheels"].reset_coords(
        drop=True
    ) + vehicles_inlandt().loc["LV gas"].reset_coords(drop=True)


@cache.step
@to_float
def ev_batteries_tw():
    """
    Real Name: EV batteries TW
    Original Eqn: "batteries EV+hib+2wE"*kW per battery EV/kWh per TWh
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Electric batteries from electric vehicles, expresed in terms of power
        available (TW)
    """
    return batteries_evhib2we() * kw_per_battery_ev() / kwh_per_twh()


@cache.step
@subs(["vehicleT"], _subscript_dict)
def var_percent_t_vehicles():
    """
    Real Name: var percent T vehicles
    Original Eqn:
      IF THEN ELSE( Time<T ini inlandT,aux hist Tveh[HV liq],-adapt var inlandT[HV hib]-adapt var inlandT[HV gas])
        .
        .
        .
      adapt var inlandT[bus elec]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    growth of percents of inland transport vehicles, each type relative to its own:
        heavy vehicles (%liq+%hib+%gas) add 1, light vehicles
        (%liq+%elec+%gas+%hib) add 1, bus (%liq+%elec+%gas+%hib) add 1 and trains
        ((%liq+%elec) add 1.        The growth of liquids allways adapts to the one of the rest, we assume
        that the policies are passing from liquids to other fuels
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["HV liq"].reset_coords(drop=True),
                    lambda: -adapt_var_inlandt().loc["HV hib"].reset_coords(drop=True)
                    - adapt_var_inlandt().loc["HV gas"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["HV liq"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["HV hib"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt().loc["HV hib"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["HV hib"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["HV gas"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt().loc["HV gas"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["HV gas"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["LV liq"].reset_coords(drop=True),
                    lambda: -adapt_var_inlandt().loc["LV hib"].reset_coords(drop=True)
                    - adapt_var_inlandt().loc["LV elec"].reset_coords(drop=True)
                    - adapt_var_inlandt().loc["LV gas"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["LV liq"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["LV elec"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt().loc["LV elec"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["LV elec"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["LV hib"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt().loc["LV hib"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["LV hib"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["LV gas"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt().loc["LV gas"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["LV gas"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["bus liq"].reset_coords(drop=True),
                    lambda: -adapt_var_inlandt().loc["bus elec"].reset_coords(drop=True)
                    - adapt_var_inlandt().loc["bus hib"].reset_coords(drop=True)
                    - adapt_var_inlandt().loc["bus gas"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["bus liq"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["bus hib"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt().loc["bus hib"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["bus hib"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["bus gas"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt().loc["bus gas"].reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["bus gas"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["train liq"].reset_coords(drop=True),
                    lambda: -adapt_var_inlandt()
                    .loc["train elec"]
                    .reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["train liq"]},
            ),
            rearrange(
                if_then_else(
                    time() < t_ini_inlandt(),
                    lambda: aux_hist_tveh().loc["train elec"].reset_coords(drop=True),
                    lambda: adapt_var_inlandt()
                    .loc["train elec"]
                    .reset_coords(drop=True),
                ),
                ["vehicleT"],
                {"vehicleT": ["train elec"]},
            ),
            rearrange(
                adapt_var_inlandt().loc["bus elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus elec"]},
            ),
        ]
    )


@cache.run
@to_float
def p_percent_train_elec():
    """
    Real Name: P percent train elec
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C191')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of trains. Desired percent of train electric in T fin
        relative to the total of trains
    """
    return _ext_constant_p_percent_train_elec()


@cache.run
@to_float
def p_percent_hv_gas():
    """
    Real Name: P percent HV gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C184')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of heavy vehicles. Desired percent of HV gas in T fin
        relative to total Heavy Vehicles
    """
    return _ext_constant_p_percent_hv_gas()


@cache.run
@to_float
def t_ini_inlandt():
    """
    Real Name: T ini inlandT
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C174')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    By this time the policy objectives defined in policies must be obtained
    """
    return _ext_constant_t_ini_inlandt()


@cache.step
@subs(["vehicleT"], _subscript_dict)
def p_inlandt():
    """
    Real Name: P inlandT
    Original Eqn:
      100-P percent HV gas-P percent HV hyb
        .
        .
        .
      P percent LV hyb
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    Desired percent each type of inland transport vehicle in T fin, Liquids
        policies are obtained by substracting the rest of vehicles, the sum of all
        policies must be 1 for each type of vehicle (HV, LV, bus, train).
    """
    return xrmerge(
        [
            rearrange(
                100 - p_percent_hv_gas() - p_percent_hv_hyb(),
                ["vehicleT"],
                {"vehicleT": ["HV liq"]},
            ),
            rearrange(p_percent_hv_hyb(), ["vehicleT"], {"vehicleT": ["HV hib"]}),
            rearrange(p_percent_hv_gas(), ["vehicleT"], {"vehicleT": ["HV gas"]}),
            rearrange(
                100 - p_percent_lv_elec() - p_percent_lv_hyb() - p_percent_lv_gas(),
                ["vehicleT"],
                {"vehicleT": ["LV liq"]},
            ),
            rearrange(p_percent_lv_elec(), ["vehicleT"], {"vehicleT": ["LV elec"]}),
            rearrange(p_percent_lv_gas(), ["vehicleT"], {"vehicleT": ["LV gas"]}),
            rearrange(
                100 - p_percent_bus_hyb() - p_percent_bus_gas() - p_percent_bus_elec(),
                ["vehicleT"],
                {"vehicleT": ["bus liq"]},
            ),
            rearrange(p_percent_bus_elec(), ["vehicleT"], {"vehicleT": ["bus elec"]}),
            rearrange(p_percent_bus_hyb(), ["vehicleT"], {"vehicleT": ["bus hib"]}),
            rearrange(p_percent_bus_gas(), ["vehicleT"], {"vehicleT": ["bus gas"]}),
            rearrange(
                100 - p_percent_train_elec(), ["vehicleT"], {"vehicleT": ["train liq"]}
            ),
            rearrange(
                p_percent_train_elec(), ["vehicleT"], {"vehicleT": ["train elec"]}
            ),
            rearrange(p_percent_lv_hyb(), ["vehicleT"], {"vehicleT": ["LV hib"]}),
        ]
    )


@cache.run
@to_float
def activate_policy_inlandt():
    """
    Real Name: Activate policy inlandT
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C171')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1 to set growth of alternative inland transportation, starting in T ini
        and ending in T fin with the desired share defined in policies, linear
        growth
    """
    return _ext_constant_activate_policy_inlandt()


@cache.run
@to_float
def p_percent_lv_elec():
    """
    Real Name: P percent LV elec
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C185')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of light cargo vehicles. Percent of LV electric in T fin
        relative to the total of Light Vehicles
    """
    return _ext_constant_p_percent_lv_elec()


@cache.run
@to_float
def p_percent_lv_hyb():
    """
    Real Name: P percent LV hyb
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C186')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of light cargo vehicles. Desired percent of LV hibrid in
        T fin relative to the total Light Vehicles
    """
    return _ext_constant_p_percent_lv_hyb()


@cache.run
@to_float
def p_percent_bus_elec():
    """
    Real Name: P percent bus elec
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C188')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of bus. Desired percent of bus electric in T fin relative
        to the total bus
    """
    return _ext_constant_p_percent_bus_elec()


@cache.run
@to_float
def p_percent_bus_gas():
    """
    Real Name: P percent bus gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C190')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of bus. Desired percent of bus gas in T fin relative to
        the total  bus
    """
    return _ext_constant_p_percent_bus_gas()


@cache.run
@to_float
def p_percent_bus_hyb():
    """
    Real Name: P percent bus hyb
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C189')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of bus. Desired percent of bus hibrid in T fin relative
        to the total of bus
    """
    return _ext_constant_p_percent_bus_hyb()


@cache.run
@subs(["vehicleT"], _subscript_dict)
def percents_bus():
    """
    Real Name: percents bus
    Original Eqn:
      0
        .
        .
        .
      percent T vehicles[LV hib]
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    percents of bus of inland transport sector realtive to all buses
    """
    return xrmerge(
        [
            xr.DataArray(0, {"vehicleT": ["HV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV gas"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV gas"]}, ["vehicleT"]),
            rearrange(
                percent_t_vehicles().loc["bus liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus liq"]},
            ),
            rearrange(
                percent_t_vehicles().loc["bus elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus elec"]},
            ),
            rearrange(
                percent_t_vehicles().loc["bus hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus hib"]},
            ),
            rearrange(
                percent_t_vehicles().loc["bus gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus gas"]},
            ),
            xr.DataArray(0, {"vehicleT": ["train liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["train elec"]}, ["vehicleT"]),
            rearrange(
                percent_t_vehicles().loc["LV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV hib"]},
            ),
        ]
    )


@cache.run
@subs(["vehicleT"], _subscript_dict)
def percents_train():
    """
    Real Name: percents train
    Original Eqn:
      0
        .
        .
        .
      percent T vehicles[LV hib]
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    percents of trains of inland transport sector realtive to all  trains
    """
    return xrmerge(
        [
            xr.DataArray(0, {"vehicleT": ["HV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV gas"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV gas"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus gas"]}, ["vehicleT"]),
            rearrange(
                percent_t_vehicles().loc["train liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["train liq"]},
            ),
            rearrange(
                percent_t_vehicles().loc["train elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["train elec"]},
            ),
            rearrange(
                percent_t_vehicles().loc["LV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV hib"]},
            ),
        ]
    )


@cache.run
@to_float
def p_percent_hv_hyb():
    """
    Real Name: P percent HV hyb
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C183')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of heavy vehicles. Desired percent of HV hibrid in T fin
        relative to total Heavy Vehicles
    """
    return _ext_constant_p_percent_hv_hyb()


@cache.step
@subs(["vehicleT"], _subscript_dict)
def adapt_var_inlandt():
    """
    Real Name: adapt var inlandT
    Original Eqn: aux P inland transp[vehicleT]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    Growth of percent of vehicles adapted to saturation and shorgate of energy
    """
    return aux_p_inland_transp()


@cache.run
@subs(["vehicleT"], _subscript_dict)
def percents_lv():
    """
    Real Name: percents LV
    Original Eqn:
      0
        .
        .
        .
      percent T vehicles[LV hib]
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    percents of light cargo vehicles of inland transport sector realtive to
        all LV
    """
    return xrmerge(
        [
            xr.DataArray(0, {"vehicleT": ["HV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["HV gas"]}, ["vehicleT"]),
            rearrange(
                percent_t_vehicles().loc["LV liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV liq"]},
            ),
            rearrange(
                percent_t_vehicles().loc["LV elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV elec"]},
            ),
            rearrange(
                percent_t_vehicles().loc["LV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV gas"]},
            ),
            xr.DataArray(0, {"vehicleT": ["bus liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus gas"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["train liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["train elec"]}, ["vehicleT"]),
            rearrange(
                percent_t_vehicles().loc["LV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV hib"]},
            ),
        ]
    )


@cache.step
@subs(["vehicleT"], _subscript_dict)
def vehicles_inlandt():
    """
    Real Name: vehicles inlandT
    Original Eqn: (percent T vehicles[vehicleT]/100)*Real total output inland transport*NX0 vehicles per Xinland T[vehicleT]
    Units: vehicles
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    Estimation of the number of vehicles of inland transport sector by types,
        based on a constant ratio number ob vehicles per economic activity of the
        inland transport sector
    """
    return (
        (percent_t_vehicles() / 100)
        * real_total_output_inland_transport()
        * nx0_vehicles_per_xinland_t()
    )


@cache.run
@subs(["vehicleT"], _subscript_dict)
def efects_shortage_inlandt():
    """
    Real Name: Efects shortage inlandT
    Original Eqn:
      1
        .
        .
        .
      1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    Efects of shortage of alternative fuels
    """
    return xrmerge(
        [
            xr.DataArray(1, {"vehicleT": ["HV liq"]}, ["vehicleT"]),
            xr.DataArray(1, {"vehicleT": ["HV hib"]}, ["vehicleT"]),
            rearrange(effects_shortage_gas(), ["vehicleT"], {"vehicleT": ["HV gas"]}),
            xr.DataArray(1, {"vehicleT": ["LV liq"]}, ["vehicleT"]),
            rearrange(
                effects_shortage_elec_on_ev(), ["vehicleT"], {"vehicleT": ["LV elec"]}
            ),
            rearrange(effects_shortage_gas(), ["vehicleT"], {"vehicleT": ["LV gas"]}),
            xr.DataArray(1, {"vehicleT": ["bus liq"]}, ["vehicleT"]),
            rearrange(
                effects_shortage_elec_on_ev(), ["vehicleT"], {"vehicleT": ["bus elec"]}
            ),
            xr.DataArray(1, {"vehicleT": ["bus hib"]}, ["vehicleT"]),
            rearrange(effects_shortage_gas(), ["vehicleT"], {"vehicleT": ["bus gas"]}),
            xr.DataArray(1, {"vehicleT": ["train liq"]}, ["vehicleT"]),
            rearrange(
                effects_shortage_elec_on_ev(),
                ["vehicleT"],
                {"vehicleT": ["train elec"]},
            ),
            xr.DataArray(1, {"vehicleT": ["LV hib"]}, ["vehicleT"]),
        ]
    )


@cache.run
@to_float
def p_percent_lv_gas():
    """
    Real Name: P percent LV gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C187')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Policy of change of light cargo vehicles. Desired percent of LV gas in T
        fin relative to the total Light Vehicles
    """
    return _ext_constant_p_percent_lv_gas()


@cache.step
@subs(["vehicleT"], _subscript_dict)
def percents_hv():
    """
    Real Name: percents HV
    Original Eqn:
      percent T vehicles[HV liq]
        .
        .
        .
      0
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    percents of heavy vehicles realtive to all HV.
    """
    return xrmerge(
        [
            rearrange(
                percent_t_vehicles().loc["HV liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV liq"]},
            ),
            rearrange(
                percent_t_vehicles().loc["HV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV hib"]},
            ),
            rearrange(
                percent_t_vehicles().loc["HV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV gas"]},
            ),
            xr.DataArray(0, {"vehicleT": ["LV liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV gas"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus hib"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["bus gas"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["train liq"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["train elec"]}, ["vehicleT"]),
            xr.DataArray(0, {"vehicleT": ["LV hib"]}, ["vehicleT"]),
        ]
    )


@cache.run
@to_float
def initial_xt_inland():
    """
    Real Name: initial Xt inland
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B79')
    Units: T$
    Limits: (None, None)
    Type: constant
    Subs: None

    Economic activity of inland transport sector in the year of start of
        policies (2015 default) T$
    """
    return _ext_constant_initial_xt_inland()


@cache.step
@to_float
def nx_bus_inlandt():
    """
    Real Name: NX bus inlandT
    Original Eqn: (N vehicles inland t0[bus liq]+N vehicles inland t0[bus hib]+N vehicles inland t0[bus gas]+N vehicles inland t0[bus elec])/initial Xt inland
    Units: Mvehicles/Mdollar
    Limits: (None, None)
    Type: component
    Subs: None

    number of vehicles per unit of economic activity (e6 dollars) initial
        values in the year of initial policy (default 2015)
    """
    return (
        n_vehicles_inland_t0().loc["bus liq"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["bus hib"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["bus gas"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["bus elec"].reset_coords(drop=True)
    ) / initial_xt_inland()


@cache.step
@to_float
def nx_hv_inland_t():
    """
    Real Name: NX HV inland T
    Original Eqn: (N vehicles inland t0[HV liq]+N vehicles inland t0[HV hib]+N vehicles inland t0[HV gas])/initial Xt inland
    Units: vehicles/T$
    Limits: (None, None)
    Type: component
    Subs: None

    number of vehicles per unit of economic activity (e12 dollars) initial
        values in the year of initial policy (default 2015)
    """
    return (
        n_vehicles_inland_t0().loc["HV liq"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["HV hib"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["HV gas"].reset_coords(drop=True)
    ) / initial_xt_inland()


@cache.step
@to_float
def nx_lv_inland_t():
    """
    Real Name: NX LV inland T
    Original Eqn: (N vehicles inland t0[LV liq]+N vehicles inland t0[LV elec]+N vehicles inland t0[LV hib]+N vehicles inland t0[LV gas])/initial Xt inland
    Units: vehicles/Tdollar
    Limits: (None, None)
    Type: component
    Subs: None

    number of vehicles per unit of economic activity (Tdollars) initial values
        in the year of initial policy (default 2015)
    """
    return (
        n_vehicles_inland_t0().loc["LV liq"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["LV elec"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["LV hib"].reset_coords(drop=True)
        + n_vehicles_inland_t0().loc["LV gas"].reset_coords(drop=True)
    ) / initial_xt_inland()


@cache.run
@subs(["vehicleT"], _subscript_dict)
def n_vehicles_inland_t0():
    """
    Real Name: N vehicles inland t0
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B12')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B23')
    Units: vehicle
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    Initial number of vehicles in time TpolicyT, 2015 by default, vehicles         'International Energy Agency (2016), Energy Technology Perspectives 2016, OECD/IEA,
        Paris'        No data for train vehicles
    """
    return _ext_constant_n_vehicles_inland_t0()


@cache.run
@subs(["vehicleT"], _subscript_dict)
def energy_initial_inland_transport():
    """
    Real Name: Energy initial inland transport
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B62')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'C75')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    Initial energy consumed by the inland transport sector, before politics, TpolicyT
        (default 2015)        data 'International Energy Agency (2016), Energy Technology Perspectives
        2016, OECD/IEA,
    """
    return _ext_constant_energy_initial_inland_transport()


@cache.step
@subs(["vehicleT"], _subscript_dict)
def energy_per_x_t():
    """
    Real Name: energy per X t
    Original Eqn:
      liquids per X HV*saving ratios V[HV liq]
        .
        .
        .
      liquids per X bus*saving ratios V[bus elec]
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    Energy per T$ of economic activity of inland transport sector.
    """
    return xrmerge(
        [
            rearrange(
                liquids_per_x_hv()
                * saving_ratios_v().loc["HV liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV liq"]},
            ),
            rearrange(
                liquids_per_x_hv()
                * saving_ratios_v().loc["HV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV hib"]},
            ),
            rearrange(
                liquids_per_x_hv()
                * saving_ratios_v().loc["HV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["HV gas"]},
            ),
            rearrange(
                liquids_per_x_lv()
                * saving_ratios_v().loc["LV liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV liq"]},
            ),
            rearrange(
                liquids_per_x_lv()
                * saving_ratios_v().loc["LV elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV elec"]},
            ),
            rearrange(
                liquids_per_x_lv()
                * saving_ratios_v().loc["LV hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV hib"]},
            ),
            rearrange(
                liquids_per_x_lv()
                * saving_ratios_v().loc["LV gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["LV gas"]},
            ),
            rearrange(
                liquids_per_x_bus()
                * saving_ratios_v().loc["bus liq"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus liq"]},
            ),
            rearrange(
                liquids_per_x_bus()
                * saving_ratios_v().loc["bus hib"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus hib"]},
            ),
            rearrange(
                liquids_per_x_bus()
                * saving_ratios_v().loc["bus gas"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus gas"]},
            ),
            rearrange(
                energy_per_x_train() * 0.8, ["vehicleT"], {"vehicleT": ["train liq"]}
            ),
            rearrange(
                energy_per_x_train() * 0.2, ["vehicleT"], {"vehicleT": ["train elec"]}
            ),
            rearrange(
                liquids_per_x_bus()
                * saving_ratios_v().loc["bus elec"].reset_coords(drop=True),
                ["vehicleT"],
                {"vehicleT": ["bus elec"]},
            ),
        ]
    )


@cache.step
@to_float
def nx_train_inland_t():
    """
    Real Name: NX train inland T
    Original Eqn: 1/initial Xt inland
    Units: vehicles/Tdollar
    Limits: (None, None)
    Type: component
    Subs: None

    no number of trains found in data, assume the number of trains is 1
    """
    return 1 / initial_xt_inland()


@cache.step
@to_float
def h_gas_adapt_growth():
    """
    Real Name: H gas adapt growth
    Original Eqn: H gas initial growth
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Percent relative to total number of vehicles 2w+4w.  growth of the
        percentage of gas vehicles is linear at first but adapted to the shortage
        of gas and slows down when the maximum is reached.
    """
    return h_gas_initial_growth()


@cache.step
@to_float
def h_hyb_adapt_growth():
    """
    Real Name: H hyb adapt growth
    Original Eqn: H hyb initial growth
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Percent relative to total number of vehicles 2w+4w.growth of the
        percentage of hibrid vehicles is linear at first but slows down when the
        maximum is reached
    """
    return h_hyb_initial_growth()


@cache.run
@to_float
def activate_policy_h_transp():
    """
    Real Name: Activate policy H transp
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C170')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1 to set growth of alternative households transportation based on desired
        share in 2050, 0 for BAU linear growth
    """
    return _ext_constant_activate_policy_h_transp()


@cache.run
@subs(["final sources1"], _subscript_dict)
def initial_energy_intensity_of_households_transport_2009():
    """
    Real Name: Initial energy intensity of households transport 2009
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B119')
      0
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B121')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B120')
      0
    Units: EJ/T$
    Limits: (None, None)
    Type: constant
    Subs: ['final sources1']

    Initial values of household trasnport intensity. Starting year = 2009,
        before that year alternative vehicles are neglictible
    """
    return xrmerge(
        [
            _ext_constant_initial_energy_intensity_of_households_transport_2009(),
            xr.DataArray(0, {"final sources1": ["solids"]}, ["final sources1"]),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
        ]
    )


@cache.step
@to_float
def h_elec_adapt_growth():
    """
    Real Name: H elec adapt growth
    Original Eqn: H elec initial growth
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Percent relative to total number of vehicles 2w+4w.growth of the
        percentage of EV vehicles is linear at first but adapted to the shortage
        of electricity and slows down when the maximum is reached
    """
    return h_elec_initial_growth()


@cache.step
@to_float
def var_ih_e2():
    """
    Real Name: var IH E2
    Original Eqn: A1 coef tH*(var percents H vehicles[elec 4wheels]/100)*saving ratios V[LV elec]+A2 coef tH*(var percents H vehicles[elec 2wheels]/100)*saving ratio 2wE
    Units: EJ/T$/yr
    Limits: (None, None)
    Type: component
    Subs: None

    variation of the intensity of households transportation due of the change
        to electricity
    """
    return (
        a1_coef_th()
        * (var_percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True) / 100)
        * saving_ratios_v().loc["LV elec"].reset_coords(drop=True)
        + a2_coef_th()
        * (var_percents_h_vehicles().loc["elec 2wheels"].reset_coords(drop=True) / 100)
        * saving_ratio_2we()
    )


@cache.step
@to_float
def var_ih_gas2():
    """
    Real Name: var IH gas2
    Original Eqn: A1 coef tH*(var percents H vehicles[gas 4wheels]/100)*saving ratios V[LV gas]
    Units: EJ/T$/yr
    Limits: (None, None)
    Type: component
    Subs: None

    variation of the intensity of households transportation due of the change
        to gas
    """
    return (
        a1_coef_th()
        * (var_percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True) / 100)
        * saving_ratios_v().loc["LV gas"].reset_coords(drop=True)
    )


@cache.step
@to_float
def a1_coef_th():
    """
    Real Name: A1 coef tH
    Original Eqn: Liq 4w/(Demand H*(percent 4w liq/100))
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None

    Coeficients for the calculation of variations of trasnport intensities
    """
    return liq_4w() / (demand_h() * (percent_4w_liq() / 100))


@cache.step
@to_float
def var_ih_liq2():
    """
    Real Name: var IH liq2
    Original Eqn: A1 coef tH*(var percents H vehicles[liq 4wheels]/100)+A1 coef tH*(var percents H vehicles[hib 4wheels]/100)+A2 coef tH*(var percents H vehicles[liq 2wheels]/100)
    Units: EJ/T$/yr
    Limits: (None, None)
    Type: component
    Subs: None

    variation of the intensity of households transportation due of the change
        in liquids
    """
    return (
        a1_coef_th()
        * (var_percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True) / 100)
        + a1_coef_th()
        * (var_percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True) / 100)
        + a2_coef_th()
        * (var_percents_h_vehicles().loc["liq 2wheels"].reset_coords(drop=True) / 100)
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def energy_intensity_of_households_transport():
    """
    Real Name: Energy intensity of households transport
    Original Eqn: INTEG ( variation energy intensity of households transport[final sources], Initial energy intensity of households transport 2009[final sources])
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: ['final sources']


    """
    return _integ_energy_intensity_of_households_transport()


@cache.step
@to_float
def h_2w_elec_adapt_growth():
    """
    Real Name: H 2w elec adapt growth
    Original Eqn: H 2w elec initial growth
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Percent relative to total number of vehicles 2w+4w. growth of the
        percentage of electric 2 wheelers  vehicles is linear at first but slows
        down when the maximum is reached. No efects on the electricity shortage
        are noticed for these vehicles since their consumption is so low compared
        to others.
    """
    return h_2w_elec_initial_growth()


@cache.run
@to_float
def liq_4w():
    """
    Real Name: Liq 4w
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B55')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    liquids userd in households 4 wheelers in the initial year of policy (2015 default)        45.9341
    """
    return _ext_constant_liq_4w()


@cache.run
@to_float
def percent_2w_liq():
    """
    Real Name: percent 2w liq
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B30')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Percent of 2wheelers of liquids in the initial year of policy (2015
        default). percents relative to total number 4w+2w
    """
    return _ext_constant_percent_2w_liq()


@cache.run
@to_float
def percent_4w_liq():
    """
    Real Name: percent 4w liq
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B26')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Percent of 4wheelers of liquids in the initial year of policy (2015
        default). percents relative to total number 4w+2w  0.658
    """
    return _ext_constant_percent_4w_liq()


@cache.run
@to_float
def n_vehicles_h():
    """
    Real Name: N vehicles H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B10')
    Units: vehicles
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial number of household vehicles in time  2015 vehicles 2w+4w  2476
    """
    return _ext_constant_n_vehicles_h()


@cache.run
@to_float
def demand_h():
    """
    Real Name: Demand H
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B81')
    Units: T$
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial households economic demand in T dollars, in the year of start of
        alternative households vehicle policy (default 2015)  30.3 T$
    """
    return _ext_constant_demand_h()


@cache.step
@to_float
def ratio_n_veh_demand_h():
    """
    Real Name: ratio N veh Demand H
    Original Eqn: N vehicles H/Demand H
    Units: vehicles/T$
    Limits: (None, None)
    Type: component
    Subs: None

    Ration of number of vehicles by unit of household conomic demand, we
        assume that it is kept constant and variations are due to the change in
        the number of vehicles from one type to another
    """
    return n_vehicles_h() / demand_h()


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def percents_2w_h_vehicles():
    """
    Real Name: percents 2w H vehicles
    Original Eqn:
      percents H vehicles[liq 2wheels]/(percents H vehicles[elec 2wheels]+percents H vehicles[liq 2wheels])
        .
        .
        .
      0
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    Percent of electrical 2 wheeler as a percent of ONLY TWO WHEELERS
    """
    return xrmerge(
        [
            rearrange(
                percents_h_vehicles().loc["liq 2wheels"].reset_coords(drop=True)
                / (
                    percents_h_vehicles().loc["elec 2wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["liq 2wheels"].reset_coords(drop=True)
                ),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                percents_h_vehicles().loc["elec 2wheels"].reset_coords(drop=True)
                / (
                    percents_h_vehicles().loc["elec 2wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["liq 2wheels"].reset_coords(drop=True)
                ),
                ["Households vehicles"],
                {"Households vehicles": ["elec 2wheels"]},
            ),
            xr.DataArray(
                0, {"Households vehicles": ["liq 4wheels"]}, ["Households vehicles"]
            ),
            xr.DataArray(
                0, {"Households vehicles": ["elec 4wheels"]}, ["Households vehicles"]
            ),
            xr.DataArray(
                0, {"Households vehicles": ["gas 4wheels"]}, ["Households vehicles"]
            ),
            xr.DataArray(
                0, {"Households vehicles": ["hib 4wheels"]}, ["Households vehicles"]
            ),
        ]
    )


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def percents_4w_h_vehicles():
    """
    Real Name: percents 4w H vehicles
    Original Eqn:
      percents H vehicles[liq 4wheels]/(percents H vehicles[elec 4wheels]+percents H vehicles[hib 4wheels]+percents H vehicles[gas 4wheels]+percents H vehicles[liq 4wheels])
        .
        .
        .
      0
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    Percent of alternative 4 wheelers as a percent of ONLY 4 WHEELERS
    """
    return xrmerge(
        [
            rearrange(
                percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True)
                / (
                    percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True)
                ),
                ["Households vehicles"],
                {"Households vehicles": ["liq 4wheels"]},
            ),
            rearrange(
                percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True)
                / (
                    percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True)
                ),
                ["Households vehicles"],
                {"Households vehicles": ["elec 4wheels"]},
            ),
            rearrange(
                percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True)
                / (
                    percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True)
                ),
                ["Households vehicles"],
                {"Households vehicles": ["hib 4wheels"]},
            ),
            rearrange(
                percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True)
                / (
                    percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True)
                    + percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True)
                ),
                ["Households vehicles"],
                {"Households vehicles": ["gas 4wheels"]},
            ),
            xr.DataArray(
                0, {"Households vehicles": ["liq 2wheels"]}, ["Households vehicles"]
            ),
            xr.DataArray(
                0, {"Households vehicles": ["elec 2wheels"]}, ["Households vehicles"]
            ),
        ]
    )


@cache.run
@to_float
def p_percent_2w_elec():
    """
    Real Name: P percent 2w elec
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C180')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Desired percent of electrical 2 wheelers in T fin our of TOTAL 2 WHEEL
        vehicles
    """
    return _ext_constant_p_percent_2w_elec()


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def aux_hist_h():
    """
    Real Name: aux hist H
    Original Eqn:
      -hist var percent H[hib 4wheels]-hist var percent H[elec 4wheels]-hist var percent H[gas 4wheels]
        .
        .
        .
      hist var percent H[gas 4wheels]
    Units: 1/yr
    Limits: (None, None)
    Type: component
    Subs: ['Households vehicles']

    auxiliar variable to set the variation of liquid vehicles
    """
    return xrmerge(
        [
            rearrange(
                -hist_var_percent_h().loc["hib 4wheels"].reset_coords(drop=True)
                - hist_var_percent_h().loc["elec 4wheels"].reset_coords(drop=True)
                - hist_var_percent_h().loc["gas 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["liq 4wheels"]},
            ),
            rearrange(
                hist_var_percent_h().loc["hib 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["hib 4wheels"]},
            ),
            rearrange(
                hist_var_percent_h().loc["elec 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["elec 4wheels"]},
            ),
            rearrange(
                -hist_var_percent_h().loc["elec 2wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                hist_var_percent_h().loc["elec 2wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["elec 2wheels"]},
            ),
            rearrange(
                hist_var_percent_h().loc["gas 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["gas 4wheels"]},
            ),
        ]
    )


@cache.run
@to_float
def p_percent_gas_hveh():
    """
    Real Name: P percent gas Hveh
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C179')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Desired percent of gas vehicles (4 wheelers) in Tfin our of TOTAL 4 WHEEL
        vehicles
    """
    return _ext_constant_p_percent_gas_hveh()


@cache.run
@to_float
def p_share_2wheelers():
    """
    Real Name: P share 2wheelers
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C181')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    desired percent of all 2 WHEELS vehicles in T fin relative to total 2w+4w,
        initial value in 2015 is 0.34
    """
    return _ext_constant_p_share_2wheelers()


@cache.run
@to_float
def p_percent_hyb_hveh():
    """
    Real Name: P percent hyb Hveh
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C178')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Desired percent of hibrid vehicles (4 wheelers) in T fin our of TOTAL 4
        WHEEL vehicles
    """
    return _ext_constant_p_percent_hyb_hveh()


@cache.run
@to_float
def initial_2w_percent():
    """
    Real Name: initial 2w percent
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B33')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    2015 percent of 2 wheelers 0,332
    """
    return _ext_constant_initial_2w_percent()


@cache.run
@subs(["final sources1"], _subscript_dict)
def share_feh_over_fed_by_final_fuel():
    """
    Real Name: share FEH over FED by final fuel
    Original Eqn:
      0
      0
      share FEH over FED oil
      "share FEH over FED nat. gas"
      (share FEH over FED coal+share FEH over FED solid bioE)
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['final sources1']

    Share FEH over FED by final fuel.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"final sources1": ["electricity"]}, ["final sources1"]),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
            rearrange(
                share_feh_over_fed_oil(),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                share_feh_over_fed_nat_gas(),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                (share_feh_over_fed_coal() + share_feh_over_fed_solid_bioe()),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
        ]
    )


@cache.run
@to_float
def share_feh_over_fed_oil():
    """
    Real Name: share FEH over FED oil
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C66')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Estimated share of FEH over FED for liquids (IEA, 2014 and own calculations).        GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C65')        FEH oil delayed/Required FED by fuel before heat correction[liquids]
    """
    return _ext_constant_share_feh_over_fed_oil()


@cache.run
@to_float
def share_feh_over_fed_coal():
    """
    Real Name: share FEH over FED coal
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C68')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Estimated share of FEH over FED for coal solids (IEA, 2014 and own calculations).        GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C67')        FEH coal delayed/Required FED by fuel before heat correction[solids]
    """
    return _ext_constant_share_feh_over_fed_coal()


@cache.run
@to_float
def share_feh_over_fed_nat_gas():
    """
    Real Name: "share FEH over FED nat. gas"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C67')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Estimated share of FEH over FED for gases (IEA, 2014 and own calculations).        GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C66')        FEH gas delayed/Required FED by fuel before heat correction[gases]
    """
    return _ext_constant_share_feh_over_fed_nat_gas()


@cache.step
@to_float
def fed_coal_for_heatnc():
    """
    Real Name: "FED coal for heat-nc"
    Original Eqn: Required FED by fuel before heat correction[solids]*(share FEH over FED by final fuel[solids]-share FEH over FED solid bioE)*efficiency coal for heat plants /(1+Share heat distribution losses)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand (excluding distribution and generation losses) of
        non-commercial heat from coal.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc["solids"]
        .reset_coords(drop=True)
        * (
            share_feh_over_fed_by_final_fuel().loc["solids"].reset_coords(drop=True)
            - share_feh_over_fed_solid_bioe()
        )
        * efficiency_coal_for_heat_plants()
        / (1 + share_heat_distribution_losses())
    )


@cache.step
@to_float
def pes_oil_ej_delayed():
    """
    Real Name: PES oil EJ delayed
    Original Eqn: DELAY FIXED ( PES total oil EJ EU, 0.1, 139.5)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    PES total oil extraction delayed.
    """
    return _delayfixed_pes_oil_ej_delayed()


@cache.step
@subs(["materials"], _subscript_dict)
def energy_required_for_material_consumption_for_ev_batteries():
    """
    Real Name: Energy required for material consumption for EV batteries
    Original Eqn: materials required for EV batteries Mt[materials]*Energy cons per unit of material cons for RES elec [materials]*kg per Mt/MJ per EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Energy required for material consumption for EV batteries.
    """
    return (
        materials_required_for_ev_batteries_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@cache.step
@to_float
def effects_shortage_elec_on_ev():
    """
    Real Name: effects shortage elec on EV
    Original Eqn: IF THEN ELSE(Abundance electricity>0.8, ((Abundance electricity-0.8)*5)^2, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The eventual scarcity of electricity would likely constrain the
        development of EVs. The proposed relationship avoids an abrupt limitation
        by introducing a range (1;0.8) in the electricity abundance that
        constrains the development of EVs.
    """
    return if_then_else(
        abundance_electricity() > 0.8,
        lambda: ((abundance_electricity() - 0.8) * 5) ** 2,
        lambda: 0,
    )


@cache.step
@to_float
def effects_shortage_gas_h_veh():
    """
    Real Name: effects shortage gas H veh
    Original Eqn: IF THEN ELSE(abundance gases>0.8, ((abundance gases-0.8)*5)^2, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The eventual scarcity of gas would likely constrain the development of
        NGVs/GTLs. The proposed relationship avoids an abrupt limitation by
        introducing a range (1;0.8) in the gas abundance that constrains the
        development of NGVs/GTLs.
    """
    return if_then_else(
        abundance_gases() > 0.8, lambda: ((abundance_gases() - 0.8) * 5) ** 2, lambda: 0
    )


@cache.run
@subs(["final sources1"], _subscript_dict)
def variation_nonenergy_use():
    """
    Real Name: "variation non-energy use"
    Original Eqn:
      0
      0
      IF THEN ELSE("Non-energy use demand by final fuel EJ"[liquids]>0.01,0.461414*(GDP EU-GDP delayed 1yr),0)
      IF THEN ELSE("Non-energy use demand by final fuel EJ"[gases]>0.01,0.123925*(GDP EU-GDP delayed 1yr),0)
      IF THEN ELSE("Non-energy use demand by final fuel EJ"[solids]>0.01,0.0797511*(GDP EU-GDP delayed 1yr),0)
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: ['final sources1']


    """
    return xrmerge(
        [
            xr.DataArray(0, {"final sources1": ["electricity"]}, ["final sources1"]),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
            rearrange(
                if_then_else(
                    nonenergy_use_demand_by_final_fuel_ej()
                    .loc["liquids"]
                    .reset_coords(drop=True)
                    > 0.01,
                    lambda: 0.461414 * (gdp_eu() - gdp_delayed_1yr()),
                    lambda: 0,
                ),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                if_then_else(
                    nonenergy_use_demand_by_final_fuel_ej()
                    .loc["gases"]
                    .reset_coords(drop=True)
                    > 0.01,
                    lambda: 0.123925 * (gdp_eu() - gdp_delayed_1yr()),
                    lambda: 0,
                ),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                if_then_else(
                    nonenergy_use_demand_by_final_fuel_ej()
                    .loc["solids"]
                    .reset_coords(drop=True)
                    > 0.01,
                    lambda: 0.0797511 * (gdp_eu() - gdp_delayed_1yr()),
                    lambda: 0,
                ),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
        ]
    )


@cache.step
@to_float
def number_2w():
    """
    Real Name: Number 2w
    Original Eqn: Number vehicles H[liq 2wheels]+Number vehicles H[elec 2wheels]
    Units: vehicles
    Limits: (None, None)
    Type: component
    Subs: None

    total number of 2w vehicles househols
    """
    return number_vehicles_h().loc["liq 2wheels"].reset_coords(
        drop=True
    ) + number_vehicles_h().loc["elec 2wheels"].reset_coords(drop=True)


@cache.step
@to_float
def number_4w():
    """
    Real Name: Number 4w
    Original Eqn: Number vehicles H[liq 4wheels]+Number vehicles H[hib 4wheels]+Number vehicles H[elec 4wheels]+Number vehicles H[gas 4wheels]
    Units: vehicles
    Limits: (None, None)
    Type: component
    Subs: None

    agregated number of 4w vehicles
    """
    return (
        number_vehicles_h().loc["liq 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc["hib 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc["elec 4wheels"].reset_coords(drop=True)
        + number_vehicles_h().loc["gas 4wheels"].reset_coords(drop=True)
    )


@cache.step
@to_float
def number_all():
    """
    Real Name: Number all
    Original Eqn: Number 2w+Number 4w
    Units: vehicles
    Limits: (None, None)
    Type: component
    Subs: None

    Total number of household vehicles 4w+2w
    """
    return number_2w() + number_4w()


@cache.step
@to_float
def percent_4w():
    """
    Real Name: percent 4w
    Original Eqn: percents H vehicles[liq 4wheels]+percents H vehicles[hib 4wheels]+percents H vehicles[elec 4wheels]+percents H vehicles[gas 4wheels]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    percentages of  4 wheels vehicles
    """
    return (
        percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True)
        + percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True)
        + percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True)
        + percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True)
    )


@cache.run
@to_float
def saving_ratio_2we():
    """
    Real Name: saving ratio 2wE
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B92')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    saving ratio of electrical 2wheelers compared to gasoline 2 wheelers
    """
    return _ext_constant_saving_ratio_2we()


@cache.step
@to_float
def percent_all():
    """
    Real Name: percent all
    Original Eqn: percent 2w+percent 4w
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Variable to check that the total percent is 1
    """
    return percent_2w() + percent_4w()


@cache.step
@to_float
def percent_2w():
    """
    Real Name: percent 2w
    Original Eqn: percents H vehicles[liq 2wheels]+percents H vehicles[elec 2wheels]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    percentages of 2 wheels and 3 wheels vehicles
    """
    return percents_h_vehicles().loc["liq 2wheels"].reset_coords(
        drop=True
    ) + percents_h_vehicles().loc["elec 2wheels"].reset_coords(drop=True)


@cache.step
@to_float
def share_fed_coal_vs_nre_heatnc():
    """
    Real Name: "share FED coal vs NRE heat-nc"
    Original Eqn: ZIDZ( "FED coal for heat-nc" , "FED NRE for heat-nc" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share coal vs non-renewable energy sources for non-commercial heat
        generation.
    """
    return zidz(fed_coal_for_heatnc(), fed_nre_for_heatnc())


@cache.step
@to_float
def share_fed_gas_vs_nre_heatnc():
    """
    Real Name: "share FED gas vs NRE heat-nc"
    Original Eqn: ZIDZ( "FED nat. gas for heat-nc" , "FED NRE for heat-nc" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share gas vs non-renewable energy sources for non-commercial heat
        generation.
    """
    return zidz(fed_nat_gas_for_heatnc(), fed_nre_for_heatnc())


@cache.step
@to_float
def fed_nre_for_heatnc():
    """
    Real Name: "FED NRE for heat-nc"
    Original Eqn: "FED coal for heat-nc"+"FED nat. gas for heat-nc"+"FED oil for heat-nc"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return fed_coal_for_heatnc() + fed_nat_gas_for_heatnc() + fed_oil_for_heatnc()


@cache.step
@to_float
def share_fed_liquids_vs_nre_heatnc():
    """
    Real Name: "share FED liquids vs NRE heat-nc"
    Original Eqn: ZIDZ( "FED oil for heat-nc" , "FED NRE for heat-nc" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share liquids vs non-renewable energy sources for non-commercial heat
        generation.
    """
    return zidz(fed_oil_for_heatnc(), fed_nre_for_heatnc())


@cache.step
@subs(["final sources1"], _subscript_dict)
def required_fed_by_fuel():
    """
    Real Name: Required FED by fuel
    Original Eqn:
      Required FED by fuel before heat correction[electricity]
      Required FED by fuel before heat correction[heat]*(1+"ratio FED for heat-nc vs FED for heat-com")
      Required FED by fuel before heat correction[liquids]*(1-share FEH over FED by final fuel[liquids])
      Required FED by fuel before heat correction[gases]*(1-share FEH over FED by final fuel[gases])
      Required FED by fuel before heat correction[solids]*(1-share FEH over FED by final fuel[solids])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Required final energy demand by fuel after heat demand correction.
    """
    return xrmerge(
        [
            rearrange(
                required_fed_by_fuel_before_heat_correction()
                .loc["electricity"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            rearrange(
                required_fed_by_fuel_before_heat_correction()
                .loc["heat"]
                .reset_coords(drop=True)
                * (1 + ratio_fed_for_heatnc_vs_fed_for_heatcom()),
                ["final sources1"],
                {"final sources1": ["heat"]},
            ),
            rearrange(
                required_fed_by_fuel_before_heat_correction()
                .loc["liquids"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["liquids"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                required_fed_by_fuel_before_heat_correction()
                .loc["gases"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["gases"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                required_fed_by_fuel_before_heat_correction()
                .loc["solids"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["solids"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
        ]
    )


@cache.step
@to_float
def bioe_gen_land_marg_available():
    """
    Real Name: BioE gen land marg available
    Original Eqn: ZIDZ( (Max PEavail potential biofuels marginal lands-Potential PEavail biofuels land marg EJ) , Max PEavail potential biofuels marginal lands)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as given as a fraction of unity.
    """
    return zidz(
        (
            max_peavail_potential_biofuels_marginal_lands()
            - potential_peavail_biofuels_land_marg_ej()
        ),
        max_peavail_potential_biofuels_marginal_lands(),
    )


@cache.step
@to_float
def potential_peavail_cellulosic_biofuel_ej():
    """
    Real Name: Potential PEavail cellulosic biofuel EJ
    Original Eqn: Potential PE cellulosic biofuel EJ*Conv efficiency from NPP to biofuels
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return potential_pe_cellulosic_biofuel_ej() * conv_efficiency_from_npp_to_biofuels()


@cache.step
@to_float
def potential_peavail_total_biofuels():
    """
    Real Name: Potential PEavail total biofuels
    Original Eqn: Potential PEavail biofuels 2gen land compet EJ+Potential PEavail biofuels prod 3gen EJ+Potential PEavail biofuels land marg EJ+Potential PEavail cellulosic biofuel EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        potential_peavail_biofuels_2gen_land_compet_ej()
        + potential_peavail_biofuels_prod_3gen_ej()
        + potential_peavail_biofuels_land_marg_ej()
        + potential_peavail_cellulosic_biofuel_ej()
    )


@cache.step
@to_float
def biofuels_3gen_land_compet_available():
    """
    Real Name: Biofuels 3gen land compet available
    Original Eqn: (Max land compet biofuels 2gen-Land compet biofuels 3gen Mha)/Max land compet biofuels 2gen
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential land available (dedicated to 2nd generation) as given
        as a fraction of unity. We assume that no new land starts directly to
        produce biofuels 3rd generation biofuels.
    """
    return (
        max_land_compet_biofuels_2gen() - land_compet_biofuels_3gen_mha()
    ) / max_land_compet_biofuels_2gen()


@cache.step
@to_float
def fes_total_biofuels_production_ej_2():
    """
    Real Name: FES total biofuels production EJ 2
    Original Eqn: MIN(PED liquids EJ, Potential PEavail total biofuels)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply total biofuels liquids production. Equivalent to "FES
        total biofuels production EJ" but obtained aggregately to estimate the
        "share biofuels overcapacity".
    """
    return np.minimum(ped_liquids_ej(), potential_peavail_total_biofuels())


@cache.step
@to_float
def fes_total_biofuels_production_mbd():
    """
    Real Name: "FES total biofuels production Mb/d"
    Original Eqn: FES total biofuels production EJ*"Mb/d per EJ/year"
    Units: Mb/d
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply total biofuels liquids production.
    """
    return fes_total_biofuels_production_ej() * mbd_per_ejyear()


@cache.step
@to_float
def peavail_biofuels_2gen_land_compet_ej():
    """
    Real Name: PEavail biofuels 2gen land compet EJ
    Original Eqn: Potential PEavail biofuels 2gen land compet EJ*(1-share biofuels overcapacity)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy available of biofuels from dedicated crops (2nd generation).
    """
    return potential_peavail_biofuels_2gen_land_compet_ej() * (
        1 - share_biofuels_overcapacity()
    )


@cache.step
@to_float
def peavail_biofuels_3gen_land_compet_ej():
    """
    Real Name: PEavail biofuels 3gen land compet EJ
    Original Eqn: Potential PEavail biofuels prod 3gen EJ*(1-share biofuels overcapacity)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy available of biofuels from dedicated crops (3rd generation).
    """
    return potential_peavail_biofuels_prod_3gen_ej() * (
        1 - share_biofuels_overcapacity()
    )


@cache.step
@to_float
def peavail_biofuels_land_marg_ej():
    """
    Real Name: PEavail biofuels land marg EJ
    Original Eqn: Potential PEavail biofuels land marg EJ*(1-share biofuels overcapacity)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total annual biofuel production in marginal lands.
    """
    return potential_peavail_biofuels_land_marg_ej() * (
        1 - share_biofuels_overcapacity()
    )


@cache.step
@to_float
def pe_biofuels_land_marg_ej():
    """
    Real Name: PE biofuels land marg EJ
    Original Eqn: PEavail biofuels land marg EJ/Conv efficiency from NPP to biofuels
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Total annual primary energy biomass for biofuel production in marginal
        lands.
    """
    return peavail_biofuels_land_marg_ej() / conv_efficiency_from_npp_to_biofuels()


@cache.step
@to_float
def pe_biofuels_prod_2gen3gen_ej():
    """
    Real Name: "PE biofuels prod 2gen+3gen EJ"
    Original Eqn: (PEavail biofuels 2gen land compet EJ+PEavail biofuels 3gen land compet EJ)/Conv efficiency from NPP to biofuels
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total annual primary energy biomass for biofuel production (2nd and 3rd
        generation) in marginal lands.
    """
    return (
        peavail_biofuels_2gen_land_compet_ej() + peavail_biofuels_3gen_land_compet_ej()
    ) / conv_efficiency_from_npp_to_biofuels()


@cache.step
@to_float
def pe_biomass_for_biofuels_production_ej():
    """
    Real Name: PE biomass for biofuels production EJ
    Original Eqn: PE biofuels land marg EJ+PE cellulosic biofuel EJ+"PE biofuels prod 2gen+3gen EJ"
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy of biomass for biofuels production.
    """
    return (
        pe_biofuels_land_marg_ej()
        + pe_cellulosic_biofuel_ej()
        + pe_biofuels_prod_2gen3gen_ej()
    )


@cache.step
@to_float
def pe_cellulosic_biofuel_ej():
    """
    Real Name: PE cellulosic biofuel EJ
    Original Eqn: Potential PE cellulosic biofuel EJ*(1-share biofuels overcapacity)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy biomass used for cellulosic biofuels.
    """
    return potential_pe_cellulosic_biofuel_ej() * (1 - share_biofuels_overcapacity())


@cache.step
@to_float
def max_peavail_biofuels_potential():
    """
    Real Name: Max PEavail biofuels potential
    Original Eqn: Max PEavail potential bioE residues for cellulosic biofuels+Max PEavail potential biofuels land compet+Max PEavail potential biofuels marginal lands
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum biofuels potential (primary energy) available.
    """
    return (
        max_peavail_potential_bioe_residues_for_cellulosic_biofuels()
        + max_peavail_potential_biofuels_land_compet()
        + max_peavail_potential_biofuels_marginal_lands()
    )


@cache.run
@to_float
def start_year_biofuels_land_marg():
    """
    Real Name: start year biofuels land marg
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F45')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    First year when the technology "biofuels land marg" is available.
    """
    return _ext_constant_start_year_biofuels_land_marg()


@cache.step
@to_float
def land_required_biofuels_land_marg():
    """
    Real Name: Land required biofuels land marg
    Original Eqn: Potential PEavail biofuels land marg EJ*Land occupation ratio biofuels marg land/Conv efficiency from NPP to biofuels
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Marginal lands occupied by biofuels.
    """
    return (
        potential_peavail_biofuels_land_marg_ej()
        * land_occupation_ratio_biofuels_marg_land()
        / conv_efficiency_from_npp_to_biofuels()
    )


@cache.step
@to_float
def share_biofuels_overcapacity():
    """
    Real Name: share biofuels overcapacity
    Original Eqn: ZIDZ( (Potential PEavail total biofuels-FES total biofuels production EJ 2) , Potential PEavail total biofuels)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(
        (potential_peavail_total_biofuels() - fes_total_biofuels_production_ej_2()),
        potential_peavail_total_biofuels(),
    )


@cache.run
@to_float
def land_occupation_ratio_biofuels_marg_land():
    """
    Real Name: Land occupation ratio biofuels marg land
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C62')
    Units: MHa/EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Field et al. (2008) found that 27 EJ of NPP can be extracted from 386 MHa
        of marginal lands. So, the land occupation ratio would be 386 MHa/27 EJ,
        i.e. 14.3 MHa/EJ NPP.
    """
    return _ext_constant_land_occupation_ratio_biofuels_marg_land()


@cache.step
@to_float
def peavail_cellulosic_biofuel_ej():
    """
    Real Name: PEavail cellulosic biofuel EJ
    Original Eqn: PE cellulosic biofuel EJ*Efficiency bioE residues to cellulosic liquids
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cellulosic biofuels production from bioenergy-residues.
    """
    return pe_cellulosic_biofuel_ej() * efficiency_bioe_residues_to_cellulosic_liquids()


def start_production_biofuels(x):
    """
    Real Name: start production biofuels
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Parameters', '28', 'B29')
    Units: ktoe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Exogenous start production scenario from the year "start year biofuels
        land marg". It mimics the biofuel 2nd generation deployment from the year
        2000.
    """
    return _ext_lookup_start_production_biofuels(x)


@cache.step
@to_float
def additional_pe_production_of_bioenergy_for_biofuels():
    """
    Real Name: Additional PE production of bioenergy for biofuels
    Original Eqn: PE biomass for biofuels production EJ-Oil liquids saved by biofuels EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Additional primary energy demand of bioenergy (NPP) for biofuels in
        relation to the PEavail. We assume than 1 unit of energy of biofuels
        substitutes 1 unit of energy of oil.
    """
    return pe_biomass_for_biofuels_production_ej() - oil_liquids_saved_by_biofuels_ej()


@cache.step
@to_float
def oil_liquids_saved_by_biofuels_ej():
    """
    Real Name: Oil liquids saved by biofuels EJ
    Original Eqn: FES total biofuels production EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Oil liquids saved by biofuels.
    """
    return fes_total_biofuels_production_ej()


@cache.step
@to_float
def efficiency_bioe_residues_to_cellulosic_liquids():
    """
    Real Name: Efficiency bioE residues to cellulosic liquids
    Original Eqn: Conv efficiency from NPP to biofuels
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Efficiency of the transformation from bioenergy residues to cellulosic
        liquids. We assume it is the same efficiency than for the conversion from
        biomass to 2nd generation biofuels.
    """
    return conv_efficiency_from_npp_to_biofuels()


@cache.run
@to_float
def conv_efficiency_from_npp_to_biofuels():
    """
    Real Name: Conv efficiency from NPP to biofuels
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C61')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion efficiency from net primary productivity (NPP) of biomass to
        biofuels of 15%. Ref: de Castro & Carpintero (2014).
    """
    return _ext_constant_conv_efficiency_from_npp_to_biofuels()


@cache.step
@to_float
def ped_nre_liquids():
    """
    Real Name: PED NRE Liquids
    Original Eqn: MAX(0, PED liquids EJ-FES total biofuels production EJ)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of non-renewable energy for the production of
        liquids.
    """
    return np.maximum(0, ped_liquids_ej() - fes_total_biofuels_production_ej())


@cache.step
@to_float
def potential_fes_ctlgtl_ej():
    """
    Real Name: "Potential FES CTL+GTL EJ"
    Original Eqn: CTL potential production+GTL potential production
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return ctl_potential_production() + gtl_potential_production()


@cache.step
@to_float
def tfec_res_delayed_1yr():
    """
    Real Name: TFEC RES delayed 1yr
    Original Eqn: DELAY FIXED ( TFEC RES EJ, 1, 4.209)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_tfec_res_delayed_1yr()


@cache.step
@to_float
def fes_ctlgtl_ej():
    """
    Real Name: "FES CTL+GTL EJ"
    Original Eqn: MIN(PED NRE Liquids, "Potential FES CTL+GTL EJ")
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CTL and GTL production.
    """
    return np.minimum(ped_nre_liquids(), potential_fes_ctlgtl_ej())


@cache.step
@to_float
def tpes_res_delayed_1yr():
    """
    Real Name: TPES RES delayed 1yr
    Original Eqn: DELAY FIXED ( TPE from RES EJ, 1, 5.301)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_tpes_res_delayed_1yr()


@cache.step
@to_float
def annual_tpes_res_growth_rate():
    """
    Real Name: Annual TPES RES growth rate
    Original Eqn: -1+TPE from RES EJ/TPES RES delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return -1 + tpe_from_res_ej() / tpes_res_delayed_1yr()


@cache.step
@to_float
def ped_nat_gas_ej():
    """
    Real Name: "PED nat. gas EJ"
    Original Eqn: MAX(0, PED gases-PES biogas for TFC)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of natural (fossil) gas.
    """
    return np.maximum(0, ped_gases() - pes_biogas_for_tfc())


@cache.step
@to_float
def annual_share_res_vs_tfec_growth_rate():
    """
    Real Name: Annual share RES vs TFEC growth rate
    Original Eqn: -1+share RES vs TFEC/share RES vs TFEC delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return -1 + share_res_vs_tfec() / share_res_vs_tfec_delayed_1yr()


@cache.step
@to_float
def annual_share_res_vs_tpes_growth_rate():
    """
    Real Name: Annual share RES vs TPES growth rate
    Original Eqn: -1+share RES vs TPES/share RES vs TPES delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return -1 + share_res_vs_tpes() / share_res_vs_tpes_delayed_1yr()


@cache.step
@to_float
def share_res_vs_tpes_delayed_1yr():
    """
    Real Name: share RES vs TPES delayed 1yr
    Original Eqn: DELAY FIXED ( share RES vs TPES, 1, 0.123)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_share_res_vs_tpes_delayed_1yr()


@cache.step
@to_float
def gtl_production():
    """
    Real Name: GTL production
    Original Eqn: GTL potential production*(1-"share CTL+GTL overcapacity")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    GTL production.
    """
    return gtl_potential_production() * (1 - share_ctlgtl_overcapacity())


@cache.step
@to_float
def pes_biogas_for_tfc():
    """
    Real Name: PES biogas for TFC
    Original Eqn: MIN(PED gases, Potential PES biogas for TFC)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply biogas for total final consumption.
    """
    return np.minimum(ped_gases(), potential_pes_biogas_for_tfc())


@cache.step
@to_float
def share_ctlgtl_overcapacity():
    """
    Real Name: "share CTL+GTL overcapacity"
    Original Eqn: ZIDZ( ("Potential FES CTL+GTL EJ"-"FES CTL+GTL EJ") , "Potential FES CTL+GTL EJ" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(
        (potential_fes_ctlgtl_ej() - fes_ctlgtl_ej()), potential_fes_ctlgtl_ej()
    )


@cache.step
@to_float
def share_res_vs_tfec_delayed_1yr():
    """
    Real Name: share RES vs TFEC delayed 1yr
    Original Eqn: DELAY FIXED ( share RES vs TFEC, 1, 0.1614)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_share_res_vs_tfec_delayed_1yr()


@cache.step
@to_float
def ped_nat_gas_for_gtl_ej():
    """
    Real Name: "PED nat. gas for GTL EJ"
    Original Eqn: GTL production/GTL efficiency
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of gas for CTL.
    """
    return gtl_production() / gtl_efficiency()


@cache.step
@to_float
def max_unconv_gas_growth_extraction():
    """
    Real Name: max unconv gas growth extraction
    Original Eqn: MAX(0, 1+IF THEN ELSE(Selection constraint extraction unconv gas=1, (P constraint growth extraction unconv gas)*TIME STEP*scarcity conv gas stock,("User-defined extraction growth unconv gas"(Time))*TIME STEP))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Constraint to maximum annual unconventional gas extraction (%). This
        constraint is affected by the relative scarcity of conventional vs
        unconventional resource (priority to conventional resource to cover the
        demand while the maximum extraction level of energy/time is not reached).
    """
    return np.maximum(
        0,
        1
        + if_then_else(
            selection_constraint_extraction_unconv_gas() == 1,
            lambda: (p_constraint_growth_extraction_unconv_gas())
            * time_step()
            * scarcity_conv_gas_stock(),
            lambda: (userdefined_extraction_growth_unconv_gas(time())) * time_step(),
        ),
    )


@cache.step
@to_float
def ped_coal_for_ctl_ej():
    """
    Real Name: PED coal for CTL EJ
    Original Eqn: CTL production/CTL efficiency
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of coal for CTL.
    """
    return ctl_production() / ctl_efficiency()


@cache.step
@to_float
def annual_tfec_res_growth_rate():
    """
    Real Name: Annual TFEC RES growth rate
    Original Eqn: -1+TFEC RES EJ/TFEC RES delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return -1 + tfec_res_ej() / tfec_res_delayed_1yr()


@cache.step
@to_float
def ped_total_oil_ej():
    """
    Real Name: PED total oil EJ
    Original Eqn: MAX(0,PED NRE Liquids-"FES CTL+GTL EJ"-Oil refinery gains EJ)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of total oil (conventional and unconventional).
    """
    return np.maximum(0, ped_nre_liquids() - fes_ctlgtl_ej() - oil_refinery_gains_ej())


@cache.step
@to_float
def ctl_production():
    """
    Real Name: CTL production
    Original Eqn: CTL potential production*(1-"share CTL+GTL overcapacity")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    CTL production.
    """
    return ctl_potential_production() * (1 - share_ctlgtl_overcapacity())


@cache.step
@to_float
def total_fe_real_supply_res_for_heatnc_ej():
    """
    Real Name: "Total FE real supply RES for heat-nc EJ"
    Original Eqn: SUM("FE real generation RES heat-nc EJ"[RES heat!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy supply delivered by RES for non-commercial heat.
    """
    return sum(fe_real_generation_res_heatnc_ej(), dim=("RES heat",))


@cache.step
@to_float
def real_extraction_conv_oil_emissions_relevant_ej():
    """
    Real Name: real extraction conv oil emissions relevant EJ
    Original Eqn: MAX(0, real extraction conv oil EJ-("Non-energy use demand by final fuel EJ"[liquids])*share conv vs total oil extraction EU )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant conventional oil, i.e. excepting the
        resource used for non-energy uses. We assume conventional and
        unconventional resource are used for non-energy uses following the same
        share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_conv_oil_ej()
        - (
            nonenergy_use_demand_by_final_fuel_ej()
            .loc["liquids"]
            .reset_coords(drop=True)
        )
        * share_conv_vs_total_oil_extraction_eu(),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def new_res_capacity_for_heatnc_tw():
    """
    Real Name: "new RES capacity for heat-nc TW"
    Original Eqn: IF THEN ELSE(Time<2013, "Historic RES capacity for heat-nc"[RES heat](INTEGER(Time+1))-"Historic RES capacity for heat-nc"[RES heat ](INTEGER(Time)), "adapt growth RES for heat-nc"[RES heat]*"installed capacity RES heat-nc TW"[RES heat]*remaining potential constraint on new RES heat capacity[RES heat])*"abundance RES heat-nc2"
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    New annual installed capacity of RES technologies for non-commercial heat.
    """
    return (
        if_then_else(
            time() < 2013,
            lambda: historic_res_capacity_for_heatnc(int(time() + 1))
            - historic_res_capacity_for_heatnc(int(time())),
            lambda: adapt_growth_res_for_heatnc()
            * installed_capacity_res_heatnc_tw()
            * remaining_potential_constraint_on_new_res_heat_capacity(),
        )
        * abundance_res_heatnc2()
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def annual_variation_nonenergy_use():
    """
    Real Name: "Annual variation non-energy use"
    Original Eqn: IF THEN ELSE(Time>2009, "variation non-energy use"[final sources], "Historic non-energy use"[final sources](INTEGER(Time+1))-"Historic non-energy use"[final sources](INTEGER(Time)))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Annual variation non-energy use by final fuel.
    """
    return if_then_else(
        time() > 2009,
        lambda: rearrange(
            variation_nonenergy_use(), ["final sources"], _subscript_dict
        ),
        lambda: rearrange(
            historic_nonenergy_use(int(time() + 1)), ["final sources"], _subscript_dict
        )
        - rearrange(
            historic_nonenergy_use(int(time())), ["final sources"], _subscript_dict
        ),
    )


@cache.step
@to_float
def real_extraction_conv_gas_emissions_relevant_ej():
    """
    Real Name: real extraction conv gas emissions relevant EJ
    Original Eqn: MAX(0, real extraction conv gas EJ-("PED nat. gas for GTL EJ"+"Non-energy use demand by final fuel EJ"[gases])*share conv vs total gas extraction EU)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant conventional gas, i.e. excepting the
        resource used to produce GTL and for non-energy uses. We assume
        conventional and unconventional resource are used to produce GTL and for
        non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_conv_gas_ej()
        - (
            ped_nat_gas_for_gtl_ej()
            + nonenergy_use_demand_by_final_fuel_ej()
            .loc["gases"]
            .reset_coords(drop=True)
        )
        * share_conv_vs_total_gas_extraction_eu(),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def pes_res_for_heatnc_by_techn():
    """
    Real Name: "PES RES for heat-nc by techn"
    Original Eqn: "FE real generation RES heat-nc EJ"[RES heat]/Efficiency RES heat[RES heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Primary energy supply of RES technologies for non-commercial heat.
    """
    return fe_real_generation_res_heatnc_ej() / efficiency_res_heat()


@cache.step
@to_float
def fes_nre_for_heat():
    """
    Real Name: FES NRE for heat
    Original Eqn: "FES heat-com fossil fuels CHP plants EJ"+FES Heat from coal+"FES Heat from nat. gas"+ FES Heat from oil+"FES Heat-com nuclear CHP plants EJ"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Heat from non-renewable energy resources.
    """
    return (
        fes_heatcom_fossil_fuels_chp_plants_ej()
        + fes_heat_from_coal()
        + fes_heat_from_nat_gas()
        + fes_heat_from_oil()
        + fes_heatcom_nuclear_chp_plants_ej()
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def installed_capacity_res_heatnc_tw():
    """
    Real Name: "installed capacity RES heat-nc TW"
    Original Eqn: INTEG ( "new RES capacity for heat-nc TW"[RES heat]+"replacement RES for heat-nc TW"[RES heat]-"wear RES capacity for heat-nc TW"[RES heat], "initial value RES for heat-nc"[RES heat])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Installed capacity of RES for non-commercial heat.
    """
    return _integ_installed_capacity_res_heatnc_tw()


@cache.step
@to_float
def fed_heatcom_plants_fossil_fuels_ej():
    """
    Real Name: "FED Heat-com plants fossil fuels EJ"
    Original Eqn: MAX("FED Heat-com NRE EJ"-"FES heat-com fossil fuels CHP plants EJ"-"FES Heat-com nuclear CHP plants EJ",0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of fossil fuels for commercial heat plants. Fossil fuels CHP plants
        have priority due a better efficiency.
    """
    return np.maximum(
        fed_heatcom_nre_ej()
        - fes_heatcom_fossil_fuels_chp_plants_ej()
        - fes_heatcom_nuclear_chp_plants_ej(),
        0,
    )


@cache.step
@to_float
def real_extraction_unconv_gas_emissions_relevant_ej():
    """
    Real Name: real extraction unconv gas emissions relevant EJ
    Original Eqn: MAX(0, real extraction unconv gas EJ-("PED nat. gas for GTL EJ"+"Non-energy use demand by final fuel EJ"[gases])*(1-share conv vs total gas extraction EU))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant unconventional gas, i.e. excepting the
        resource used to produce GTL and for non-energy uses. We assume
        conventional and unconventional resource are used to produce GTL and for
        non-energy uses following the same share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_unconv_gas_ej()
        - (
            ped_nat_gas_for_gtl_ej()
            + nonenergy_use_demand_by_final_fuel_ej()
            .loc["gases"]
            .reset_coords(drop=True)
        )
        * (1 - share_conv_vs_total_gas_extraction_eu()),
    )


@cache.step
@to_float
def real_extraction_unconv_oil_emissions_relevant_ej():
    """
    Real Name: real extraction unconv oil emissions relevant EJ
    Original Eqn: MAX(0, real extraction unconv oil EJ-("Non-energy use demand by final fuel EJ"[liquids])*(1-share conv vs total oil extraction EU))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant unconventional oil, i.e. excepting the
        resource used for non-energy uses. We assume conventional and
        unconventional resource are used for non-energy uses following the same
        share as for their relative extraction.
    """
    return np.maximum(
        0,
        real_extraction_unconv_oil_ej()
        - (
            nonenergy_use_demand_by_final_fuel_ej()
            .loc["liquids"]
            .reset_coords(drop=True)
        )
        * (1 - share_conv_vs_total_oil_extraction_eu()),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def remaining_potential_res_for_heat():
    """
    Real Name: remaining potential RES for heat
    Original Eqn: ZIDZ( (MAX(0, Max FE RES for heat[RES heat]-"potential FES RES for heat-com EJ"[RES heat]-"potential FES RES for heat-nc EJ"[RES heat])) , Max FE RES for heat[RES heat] )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Remaining potential available as given as a fraction of unity.
    """
    return zidz(
        (
            np.maximum(
                0,
                max_fe_res_for_heat()
                - potential_fes_res_for_heatcom_ej()
                - potential_fes_res_for_heatnc_ej(),
            )
        ),
        max_fe_res_for_heat(),
    )


@cache.step
@to_float
def extraction_coal_emissions_relevant_ej():
    """
    Real Name: extraction coal emissions relevant EJ
    Original Eqn: MAX(0, extraction coal without CTL EJ-"Non-energy use demand by final fuel EJ"[solids])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of emission-relevant coal, i.e. excepting the resource used for
        non-energy uses.
    """
    return np.maximum(
        0,
        extraction_coal_without_ctl_ej()
        - nonenergy_use_demand_by_final_fuel_ej().loc["solids"].reset_coords(drop=True),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def wear_res_capacity_for_heatnc_tw():
    """
    Real Name: "wear RES capacity for heat-nc TW"
    Original Eqn: "installed capacity RES heat-nc TW"[RES heat]/life time RES for heat[RES heat]
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Decommission of the capacity that reachs the end of its lifetime.
    """
    return installed_capacity_res_heatnc_tw() / life_time_res_for_heat()


@cache.step
@subs(["RES heat"], _subscript_dict)
def fe_real_generation_res_heatnc_ej():
    """
    Real Name: "FE real generation RES heat-nc EJ"
    Original Eqn: "potential FES RES for heat-nc EJ"[RES heat]*(1-"RES heat-nc tot overcapacity")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Non-commercial heat generation by RES technology.
    """
    return potential_fes_res_for_heatnc_ej() * (1 - res_heatnc_tot_overcapacity())


@cache.step
@to_float
def total_fe_real_supply_res_for_heatcom_ej():
    """
    Real Name: "Total FE real supply RES for heat-com EJ"
    Original Eqn: SUM("FE real generation RES heat-com EJ"[RES heat!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy supply delivered by RES for commercial heat.
    """
    return sum(fe_real_generation_res_heatcom_ej(), dim=("RES heat",))


@cache.run
@subs(["RES heat"], _subscript_dict)
def past_res_growth_for_heatcom_0():
    """
    Real Name: "past RES growth for heat-com 0"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C101')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C102')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C103')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Historic annual average growth.
    """
    return _ext_constant_past_res_growth_for_heatcom_0()


@cache.run
@to_float
def efficiency_conversion_bioe_plants_to_heat_0():
    """
    Real Name: Efficiency conversion BioE plants to heat 0
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C43')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation from bioenergy to heat in heat and CHP
        plants (aggregated). Efficiency of the transformation from bioenergy to
        electricity (estimation for 2014 from the IEA balances.
    """
    return _ext_constant_efficiency_conversion_bioe_plants_to_heat_0()


@cache.step
@to_float
def fed_heatcom_after_priorities_ej():
    """
    Real Name: "FED Heat-com after priorities EJ"
    Original Eqn: MAX(0, "Total FED Heat-com EJ"-"FES heat-com from waste EJ"-"FES heat-com from biogas EJ")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total commercial heat demand including distribution losses after
        technologies with priority in the mix (waste and biogas).
    """
    return np.maximum(
        0,
        total_fed_heatcom_ej()
        - fes_heatcom_from_waste_ej()
        - fes_heatcom_from_biogas_ej(),
    )


@cache.step
@to_float
def fes_heat_from_biow():
    """
    Real Name: FES heat from BioW
    Original Eqn: "FE real supply RES for heat-com tot EJ"+"FE real supply RES for heat-nc tot EJ"+"FES heat-com from biogas EJ"+"FES heat-com from waste EJ"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Heat generation of total bioenergy and waste (to compare with more common
        statistics).
    """
    return (
        fe_real_supply_res_for_heatcom_tot_ej()
        + fe_real_supply_res_for_heatnc_tot_ej()
        + fes_heatcom_from_biogas_ej()
        + fes_heatcom_from_waste_ej()
    )


@cache.step
@to_float
def abundance_res_heatnc():
    """
    Real Name: "abundance RES heat-nc"
    Original Eqn: IF THEN ELSE("Total FED Heat-nc EJ"=0,0, ZIDZ( ("Total FED Heat-nc EJ"-"FE real supply RES for heat-nc tot EJ") , "Total FED Heat-nc EJ"))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). The closest to 1 indicates that heat
        generation from RES is far to cover to whole heat demand, if "abundance
        RES heat"=0 it means that RES heat cover the whole heat demand.        IF THEN ELSE(Total FED Heat EJ delayed 1yr=0,0,        IF THEN ELSE(Total FED Heat EJ delayed 1yr > FE real supply RES for heat tot EJ,         (Total FED Heat EJ delayed 1yr-FE real supply RES for heat tot EJ)/Total
        FED Heat EJ delayed 1yr, 0))
    """
    return if_then_else(
        total_fed_heatnc_ej() == 0,
        lambda: 0,
        lambda: zidz(
            (total_fed_heatnc_ej() - fe_real_supply_res_for_heatnc_tot_ej()),
            total_fed_heatnc_ej(),
        ),
    )


@cache.run
@to_float
def efficiency_geothermal_for_heat_0():
    """
    Real Name: Efficiency geothermal for heat 0
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G43')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_efficiency_geothermal_for_heat_0()


@cache.step
@to_float
def fes_heatcom_nuclear_chp_plants_ej():
    """
    Real Name: "FES Heat-com nuclear CHP plants EJ"
    Original Eqn: MIN("Potential FES Heat-com nuclear CHP plants EJ","FED Heat-com NRE EJ")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Commercial heat produced in cogeration nuclear plants.
    """
    return np.minimum(
        potential_fes_heatcom_nuclear_chp_plants_ej(), fed_heatcom_nre_ej()
    )


@cache.step
@to_float
def fe_real_supply_res_for_heatnc_tot_ej():
    """
    Real Name: "FE real supply RES for heat-nc tot EJ"
    Original Eqn: MIN(MAX("Total FED Heat-nc EJ", 0), "potential FES tot RES for heat-nc EJ")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy supply delivered by RES for non-commercial heat.
    """
    return np.minimum(
        np.maximum(total_fed_heatnc_ej(), 0), potential_fes_tot_res_for_heatnc_ej()
    )


@cache.run
@subs(["RES heat"], _subscript_dict)
def initial_value_res_for_heatnc():
    """
    Real Name: "initial value RES for heat-nc"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H62')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H63')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H61')
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    RES supply by technology for non-commercial heat in the year 1995.
    """
    return _ext_constant_initial_value_res_for_heatnc()


@cache.run
@subs(["RES heat"], _subscript_dict)
def past_res_growth_for_heatnc():
    """
    Real Name: "past RES growth for heat-nc"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C104')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C105')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C106')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Historic annual average growth.
    """
    return _ext_constant_past_res_growth_for_heatnc()


@cache.step
@to_float
def fed_heat_fossil_fuels_chp_plants_ej():
    """
    Real Name: FED heat fossil fuels CHP plants EJ
    Original Eqn: MAX("FED heat-com by NRE CHP plants EJ"-"FES Heat-com nuclear CHP plants EJ",0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of fossil fuels in CHP plants.
    """
    return np.maximum(
        fed_heatcom_by_nre_chp_plants_ej() - fes_heatcom_nuclear_chp_plants_ej(), 0
    )


@cache.run
@subs(["RES heat"], _subscript_dict)
def replacement_res_for_heatnc():
    """
    Real Name: "replacement RES for heat-nc"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D19')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    If =1, we asume that all the power that reaches the end of its lifetime is
        replaced.
    """
    return _ext_constant_replacement_res_for_heatnc()


@cache.run
@to_float
def efficiency_solar_panels_for_heat_0():
    """
    Real Name: Efficiency solar panels for heat 0
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G41')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_efficiency_solar_panels_for_heat_0()


@cache.step
@to_float
def abundance_res_heatcom():
    """
    Real Name: "abundance RES heat-com"
    Original Eqn: IF THEN ELSE("FED Heat-com after priorities EJ"=0,0, ZIDZ( ("FED Heat-com after priorities EJ"-"FE real supply RES for heat-com tot EJ") , "FED Heat-com after priorities EJ" ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). The closest to 1 indicates that heat
        generation from RES is far to cover to whole heat demand, if "abundance
        RES heat"=0 it means that RES heat cover the whole heat demand.        IF THEN ELSE(Total FED Heat EJ delayed 1yr=0,0,        IF THEN ELSE(Total FED Heat EJ delayed 1yr > FE real supply RES for heat tot EJ,         (Total FED Heat EJ delayed 1yr-FE real supply RES for heat tot EJ)/Total
        FED Heat EJ delayed 1yr, 0))
    """
    return if_then_else(
        fed_heatcom_after_priorities_ej() == 0,
        lambda: 0,
        lambda: zidz(
            (
                fed_heatcom_after_priorities_ej()
                - fe_real_supply_res_for_heatcom_tot_ej()
            ),
            fed_heatcom_after_priorities_ej(),
        ),
    )


@cache.step
@to_float
def abundance_res_heatnc2():
    """
    Real Name: "abundance RES heat-nc2"
    Original Eqn: SQRT ("abundance RES heat-nc")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Adaptation of the parameter abundance for better behaviour of the model.
    """
    return np.sqrt(abundance_res_heatnc())


@cache.step
@to_float
def potential_fes_tot_res_for_heatnc_ej():
    """
    Real Name: "potential FES tot RES for heat-nc EJ"
    Original Eqn: SUM("potential FES RES for heat-nc EJ"[RES heat!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential total final energy supply renewables for non-commercial heat
        given the installed capacity.
    """
    return sum(potential_fes_res_for_heatnc_ej(), dim=("RES heat",))


@cache.run
@subs(["RES heat"], _subscript_dict)
def life_time_res_for_heat_0():
    """
    Real Name: life time RES for heat 0
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C19')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Lifetime RES thermal technologies and plants.
    """
    return _ext_constant_life_time_res_for_heat_0()


@cache.step
@subs(["RES heat"], _subscript_dict)
def efficiency_res_heat_0():
    """
    Real Name: Efficiency RES heat 0
    Original Eqn:
      Efficiency solar panels for heat 0*Losses solar for heat 0
      Efficiency geothermal for heat 0
      Efficiency conversion BioE plants to heat 0
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']


    """
    return xrmerge(
        [
            rearrange(
                efficiency_solar_panels_for_heat_0() * losses_solar_for_heat_0(),
                ["RES heat"],
                {"RES heat": ["solar heat"]},
            ),
            rearrange(
                efficiency_geothermal_for_heat_0(),
                ["RES heat"],
                {"RES heat": ["geot heat"]},
            ),
            rearrange(
                efficiency_conversion_bioe_plants_to_heat_0(),
                ["RES heat"],
                {"RES heat": ["solid bioE heat"]},
            ),
        ]
    )


@cache.run
@subs(["RES heat"], _subscript_dict)
def replacement_res_for_heat_0():
    """
    Real Name: replacement RES for heat 0
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D19')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    If =1, we asume that all the power that reaches the end of its lifetime is
        replaced.
    """
    return _ext_constant_replacement_res_for_heat_0()


@cache.step
@to_float
def fes_res_for_heat_ej():
    """
    Real Name: FES RES for heat EJ
    Original Eqn: "FE real supply RES for heat-com tot EJ"+"FE real supply RES for heat-nc tot EJ"+"FES heat-com from biogas EJ"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Heat from renewable energy sources.
    """
    return (
        fe_real_supply_res_for_heatcom_tot_ej()
        + fe_real_supply_res_for_heatnc_tot_ej()
        + fes_heatcom_from_biogas_ej()
    )


@cache.step
@to_float
def fe_real_supply_res_for_heatcom_tot_ej():
    """
    Real Name: "FE real supply RES for heat-com tot EJ"
    Original Eqn: MIN(MAX("FED Heat-com after priorities EJ", 0), "potential FES tot RES for heat-com EJ")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy supply delivered by RES for commercial heat.
    """
    return np.minimum(
        np.maximum(fed_heatcom_after_priorities_ej(), 0),
        potential_fes_tot_res_for_heatcom_ej(),
    )


@cache.run
@to_float
def losses_solar_for_heat_0():
    """
    Real Name: Losses solar for heat 0
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G42')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_losses_solar_for_heat_0()


@cache.step
@to_float
def res_heatnc_tot_overcapacity():
    """
    Real Name: "RES heat-nc tot overcapacity"
    Original Eqn: IF THEN ELSE("potential FES tot RES for heat-nc EJ"=0,0, ("potential FES tot RES for heat-nc EJ"-"FE real supply RES for heat-nc tot EJ")/"potential FES tot RES for heat-nc EJ" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Overcapacity for each technology RES for heat-nc taking into account the
        installed capacity and the real generation.
    """
    return if_then_else(
        potential_fes_tot_res_for_heatnc_ej() == 0,
        lambda: 0,
        lambda: (
            potential_fes_tot_res_for_heatnc_ej()
            - fe_real_supply_res_for_heatnc_tot_ej()
        )
        / potential_fes_tot_res_for_heatnc_ej(),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def potential_fes_res_for_heatnc_ej():
    """
    Real Name: "potential FES RES for heat-nc EJ"
    Original Eqn: "potential FES RES for heat-nc TWh"[RES heat]*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Potential final energy supply renewables for non-commercial heat given the
        installed capacity.
    """
    return potential_fes_res_for_heatnc_twh() * ej_per_twh()


def historic_res_capacity_for_heatnc(x):
    """
    Real Name: "Historic RES capacity for heat-nc"
    Original Eqn:
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H62'))
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H63'))
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H61'))
    Units: TW
    Limits: (None, None)
    Type: lookup
    Subs: ['RES heat']

    Historic installed capacity of RES technologies for non-commercial heat
        generation.
    """
    return _ext_lookup_historic_res_capacity_for_heatnc(x)


@cache.step
@subs(["final sources1"], _subscript_dict)
def historic_share_of_transformation_losses_vs_extraction():
    """
    Real Name: Historic share of transformation losses vs extraction
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '203', 'B204')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '203', 'B205')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['final sources1']

    Historic share transformation losses of each fossil fuel vs annual
        extraction. (Own elaboration from IEA balances)
    """
    return _ext_data_historic_share_of_transformation_losses_vs_extraction(time())


@cache.step
@to_float
def ratio_gain_gas_vs_lose_solids_in_tranf_processes():
    """
    Real Name: Ratio gain gas vs lose solids in tranf processes
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '203', 'B206')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Gas gain in transformation processes of coal(Coke oven, Blust furnace,...)
        (Own elaboration from IEA balances)
    """
    return _ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes(time())


@cache.step
@to_float
def fes_elec_fossil_fuel_chp_plants_ej():
    """
    Real Name: FES Elec fossil fuel CHP plants EJ
    Original Eqn: MIN(Potential FE gen Elec fossil fuel CHP plants EJ, Demand Elec NRE TWh*EJ per TWh)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final Energy supply of electricity from fossil fuels in CHP plants. We
        assign priority to it due to its better efficiency.
    """
    return np.minimum(
        potential_fe_gen_elec_fossil_fuel_chp_plants_ej(),
        demand_elec_nre_twh() * ej_per_twh(),
    )


@cache.step
@to_float
def total_fe_elec_demand_after_priorities_twh():
    """
    Real Name: Total FE Elec demand after priorities TWh
    Original Eqn: MAX(Total FE Elec demand TWh-FES elec from RES with priority TWh-FES elec from waste TWh,0)
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(
        total_fe_elec_demand_twh()
        - fes_elec_from_res_with_priority_twh()
        - fes_elec_from_waste_twh(),
        0,
    )


@cache.step
@to_float
def demand_elec_nre_twh():
    """
    Real Name: Demand Elec NRE TWh
    Original Eqn: MAX(0, Total FE Elec demand TWh-FE tot generation all RES elec TWh-FES elec from waste TWh)
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    The model assigns priority to RES generation to cover the electricity
        demand.
    """
    return np.maximum(
        0,
        total_fe_elec_demand_twh()
        - fe_tot_generation_all_res_elec_twh()
        - fes_elec_from_waste_twh(),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def nonenergy_use_demand_by_final_fuel_ej():
    """
    Real Name: "Non-energy use demand by final fuel EJ"
    Original Eqn: INTEG ( "Annual variation non-energy use"[final sources], "initial non-energy use"[final sources])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Non-energy use demand by final fuel
    """
    return _integ_nonenergy_use_demand_by_final_fuel_ej()


@cache.step
@to_float
def share_solids_for_final_energy():
    """
    Real Name: share solids for final energy
    Original Eqn: ZIDZ( Required FED solids , (PED solids-PED coal for CTL EJ-Other solids required) )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of final energy vs primary energy for solids.
    """
    return zidz(
        required_fed_solids(),
        (ped_solids() - ped_coal_for_ctl_ej() - other_solids_required()),
    )


@cache.step
@to_float
def total_real_nonenergy_use_consumption_ej():
    """
    Real Name: "Total real non-energy use consumption EJ"
    Original Eqn: SUM("Non-energy use demand by final fuel EJ"[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return sum(nonenergy_use_demand_by_final_fuel_ej(), dim=("final sources",))


@cache.step
@to_float
def share_gases_for_final_energy():
    """
    Real Name: share gases for final energy
    Original Eqn: ZIDZ( Required FED by gas , (PED gases-"PED nat. gas for GTL EJ"-Other gases required) )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of final energy vs primary energy for gases.
    """
    return zidz(
        required_fed_by_gas(),
        (ped_gases() - ped_nat_gas_for_gtl_ej() - other_gases_required()),
    )


@cache.step
@to_float
def ratio_fed_for_heatnc_vs_fed_for_heatcom():
    """
    Real Name: "ratio FED for heat-nc vs FED for heat-com"
    Original Eqn: SUM("FED by fuel for heat-nc"[final sources!])*ZIDZ( 1, Required FED by fuel before heat correction[heat] )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Ratio FED for non-commercial heat vs FED for commercial heat (before
        climate change impacts).
    """
    return sum(
        rearrange(fed_by_fuel_for_heatnc(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    ) * zidz(
        1,
        required_fed_by_fuel_before_heat_correction()
        .loc["heat"]
        .reset_coords(drop=True),
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def real_fe_consumption_by_fuel_before_heat_correction():
    """
    Real Name: real FE consumption by fuel before heat correction
    Original Eqn:
      real FE consumption by fuel[electricity]
      real FE consumption by fuel[heat]/(1+"ratio FED for heat-nc vs FED for heat-com")
      real FE consumption by fuel[liquids]/(1-share FEH over FED by final fuel[liquids])
      real FE consumption by fuel[gases]/(1-share FEH over FED by final fuel[gases])
      real FE consumption by fuel[solids]/(1-share FEH over FED by final fuel[solids])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']


    """
    return xrmerge(
        [
            rearrange(
                real_fe_consumption_by_fuel()
                .loc["electricity"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["heat"].reset_coords(drop=True)
                / (1 + ratio_fed_for_heatnc_vs_fed_for_heatcom()),
                ["final sources1"],
                {"final sources1": ["heat"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["liquids"].reset_coords(drop=True)
                / (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["liquids"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["gases"].reset_coords(drop=True)
                / (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["gases"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                real_fe_consumption_by_fuel().loc["solids"].reset_coords(drop=True)
                / (
                    1
                    - share_feh_over_fed_by_final_fuel()
                    .loc["solids"]
                    .reset_coords(drop=True)
                ),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
        ]
    )


@cache.step
@to_float
def required_tfed_before_heat_dem_corr():
    """
    Real Name: Required TFED before heat dem corr
    Original Eqn: SUM(Required FED by fuel before heat correction[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy demand before heat demand correction, i.e. following
        the data from the IEA Balances (Non-commercial heat is not accounted as
        heat).
    """
    return sum(required_fed_by_fuel_before_heat_correction(), dim=("final sources",))


@cache.step
@subs(["materials"], _subscript_dict)
def cum_materials_to_extract_for_ev_batteries():
    """
    Real Name: cum materials to extract for EV batteries
    Original Eqn: INTEG ( Total materials to extract for EV batteries Mt[materials], initial cumulated material requirements for EV batteries 1995)
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Cumulative materials to be mined for EV batteries.
    """
    return _integ_cum_materials_to_extract_for_ev_batteries()


@cache.step
@subs(["materials"], _subscript_dict)
def total_recycled_materials_for_ev_batteries_mt():
    """
    Real Name: Total recycled materials for EV batteries Mt
    Original Eqn: Total materials required for EV batteries[materials]-Total materials to extract for EV batteries Mt[materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total recycled materials for EV batteries.
    """
    return (
        total_materials_required_for_ev_batteries()
        - total_materials_to_extract_for_ev_batteries_mt()
    )


@cache.step
@to_float
def share_res_vs_tfec():
    """
    Real Name: share RES vs TFEC
    Original Eqn: ZIDZ( TFEC RES EJ , Real TFEC )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of total final energy consumption from RES over the total.
    """
    return zidz(tfec_res_ej(), real_tfec())


@cache.step
@subs(["materials"], _subscript_dict)
def cum_materials_to_extract_for_alt_techn_from_2015_eu():
    """
    Real Name: cum materials to extract for alt techn from 2015 EU
    Original Eqn: cum materials to extract for EV batteries from 2015[materials]+cum materials to extract for RES elec from 2015[materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Cumulative materials demand for alternative technologies (RES elec & EV
        batteries) from the year 2015.
    """
    return (
        cum_materials_to_extract_for_ev_batteries_from_2015()
        + cum_materials_to_extract_for_res_elec_from_2015()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_to_extract_for_ev_batteries_from_2015_mt():
    """
    Real Name: Total materials to extract for EV batteries from 2015 Mt
    Original Eqn: IF THEN ELSE(Time<2015,0,Total materials to extract for EV batteries Mt[materials])
    Units: Mt/Year
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials to be mined for EV batteries from 2015.
    """
    return if_then_else(
        time() < 2015,
        lambda: 0,
        lambda: total_materials_to_extract_for_ev_batteries_mt(),
    )


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_new_capacity_installed__ev_batteries():
    """
    Real Name: "materials per new capacity installed - EV batteries"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'F5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'F62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements per EV battery.
    """
    return _ext_constant_materials_per_new_capacity_installed__ev_batteries()


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_to_extract_for_ev_batteries_mt():
    """
    Real Name: Total materials to extract for EV batteries Mt
    Original Eqn: Total materials required for EV batteries[materials]*(1-recycling rates minerals alt techn[materials])
    Units: Mt/Year
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials to be mined for the construction of EV batteries.
    """
    return total_materials_required_for_ev_batteries() * (
        1 - recycling_rates_minerals_alt_techn()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def cum_materials_requirements_for_ev_batteries():
    """
    Real Name: cum materials requirements for EV batteries
    Original Eqn: INTEG ( Total materials required for EV batteries[materials], initial cumulated material requirements for EV batteries 1995)
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total cumulative materials requirements for EV batteries.
    """
    return _integ_cum_materials_requirements_for_ev_batteries()


@cache.step
@subs(["RES elec"], _subscript_dict)
def static_eroigrid_res_elec():
    """
    Real Name: "'static' EROIgrid RES elec"
    Original Eqn: IF THEN ELSE("'static' EROI RES elec"[RES elec]<=0,0,(1-"share RES elec generation curtailed&stored"[RES elec]+"share RES elec generation curtailed&stored"[RES elec ]*rt elec storage efficiency)/(1/"'static' EROI RES elec"[RES elec]+"share RES elec generation curtailed&stored"[RES elec ]*rt elec storage efficiency/ESOI elec storage))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    System EROI after accounting for the energy losses of electricity storage.
        Equation from Barnhart et al (2013).
    """
    return if_then_else(
        static_eroi_res_elec() <= 0,
        lambda: 0,
        lambda: (
            1
            - share_res_elec_generation_curtailedstored()
            + share_res_elec_generation_curtailedstored() * rt_elec_storage_efficiency()
        )
        / (
            1 / static_eroi_res_elec()
            + share_res_elec_generation_curtailedstored()
            * rt_elec_storage_efficiency()
            / esoi_elec_storage()
        ),
    )


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_required_for_ev_batteries():
    """
    Real Name: Total materials required for EV batteries
    Original Eqn: materials required for EV batteries Mt[materials]
    Units: Mt/Year
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total annual materials requirements for EV batteries.
    """
    return materials_required_for_ev_batteries_mt()


@cache.step
@to_float
def tfec_from_res_per_capita():
    """
    Real Name: TFEC from RES per capita
    Original Eqn: ZIDZ( TFEC RES EJ*GJ per EJ , Population )
    Units: GJ/person
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return zidz(tfec_res_ej() * gj_per_ej(), population())


@cache.run
@to_float
def rt_storage_efficiency_ev_batteries():
    """
    Real Name: rt storage efficiency EV batteries
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G46')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Round-trip storage efficiency of electric batteries frome electric
        vehicles.
    """
    return _ext_constant_rt_storage_efficiency_ev_batteries()


@cache.step
@subs(["materials"], _subscript_dict)
def cum_materials_to_extract_for_ev_batteries_from_2015():
    """
    Real Name: cum materials to extract for EV batteries from 2015
    Original Eqn: INTEG ( Total materials to extract for EV batteries from 2015 Mt[materials], initial cumulated material requirements for EV batteries 1995)
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Cumulative materials to be mined for EV batteries.
    """
    return _integ_cum_materials_to_extract_for_ev_batteries_from_2015()


@cache.run
@to_float
def initial_cumulated_material_requirements_for_ev_batteries_1995():
    """
    Real Name: initial cumulated material requirements for EV batteries 1995
    Original Eqn: 0
    Units: Mt
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 0


@cache.step
@to_float
def fe_tot_generation_all_res_elec_ej():
    """
    Real Name: FE tot generation all RES elec EJ
    Original Eqn: FE tot generation all RES elec TWh*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation from all RES technologies.
    """
    return fe_tot_generation_all_res_elec_twh() * ej_per_twh()


@cache.step
@to_float
def carbon_footprint_tonnescperson():
    """
    Real Name: "Carbon footprint tonnesC/person"
    Original Eqn: "Carbon footprint tCO2/person"*C per CO2
    Units: tonnesC/person
    Limits: (None, None)
    Type: component
    Subs: None

    Carbon footprint.
    """
    return carbon_footprint_tco2person() * c_per_co2()


@cache.step
@to_float
def potential_max_hdi():
    """
    Real Name: Potential max HDI
    Original Eqn: IF THEN ELSE(Net TFEC per capita<=0, 0, MIN(1, 0.1395*LN(Net TFEC per capita)+0.1508))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Potential HDI that can be reached by a society given its final energy use
        per capita.
    """
    return if_then_else(
        net_tfec_per_capita() <= 0,
        lambda: 0,
        lambda: np.minimum(1, 0.1395 * np.log(net_tfec_per_capita()) + 0.1508),
    )


@cache.run
@to_float
def kw_per_battery_ev():
    """
    Real Name: kW per battery EV
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G49')
    Units: kW/battery
    Limits: (None, None)
    Type: constant
    Subs: None

    Average kW per battery of electrical vehicle.
    """
    return _ext_constant_kw_per_battery_ev()


@cache.step
@subs(["final sources1"], _subscript_dict)
def pes_fossil_fuel_extraction_delayed():
    """
    Real Name: PES fossil fuel extraction delayed
    Original Eqn:
      DELAY FIXED ( PES fossil fuel extraction[liquids], TIME STEP, 25.9)
      DELAY FIXED ( PES fossil fuel extraction[solids], TIME STEP , 15.05)
      DELAY FIXED ( PES fossil fuel extraction[gases], TIME STEP, 12.2)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Annual extraction of fossil fuels delayed
    """
    return xrmerge(
        [
            rearrange(
                _delayfixed_pes_fossil_fuel_extraction_delayed(),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                _delayfixed_pes_fossil_fuel_extraction_delayed(),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
            rearrange(
                _delayfixed_pes_fossil_fuel_extraction_delayed(),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
        ]
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def historic_share_of_losses_vs_extraction():
    """
    Real Name: Historic share of losses vs extraction
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '196', 'B198')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '196', 'B197')
      GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '196', 'B199')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['final sources1']

    Historic share losses of each fossil fuel vs annual extraction. (Own
        elaboration from IEA balances)
    """
    return _ext_data_historic_share_of_losses_vs_extraction(time())


@cache.step
@subs(["final sources1"], _subscript_dict)
def energy_distr_losses_ff_ej():
    """
    Real Name: Energy distr losses FF EJ
    Original Eqn:
      PES fossil fuel extraction delayed[liquids]*Historic share of losses vs extraction[liquids]
      PES fossil fuel extraction delayed[solids]*Historic share of losses vs extraction[solids]
      PES fossil fuel extraction delayed[gases]*Historic share of losses vs extraction[gases]
      0
      0
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Energy distribution losses of fossil fuels.
    """
    return xrmerge(
        [
            rearrange(
                pes_fossil_fuel_extraction_delayed()
                .loc["liquids"]
                .reset_coords(drop=True)
                * historic_share_of_losses_vs_extraction()
                .loc["liquids"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                pes_fossil_fuel_extraction_delayed()
                .loc["solids"]
                .reset_coords(drop=True)
                * historic_share_of_losses_vs_extraction()
                .loc["solids"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
            rearrange(
                pes_fossil_fuel_extraction_delayed()
                .loc["gases"]
                .reset_coords(drop=True)
                * historic_share_of_losses_vs_extraction()
                .loc["gases"]
                .reset_coords(drop=True),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            xr.DataArray(0, {"final sources1": ["electricity"]}, ["final sources1"]),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
        ]
    )


def historic_demand_by_sector(x):
    """
    Real Name: Historic demand by sector
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Economy', '1' , 'B2')
    Units: Mdollars
    Limits: (None, None)
    Type: lookup
    Subs: ['sectors']

    Historic demand (35 WIOD sectors). US$1995
    """
    return _ext_lookup_historic_demand_by_sector(x)


@cache.step
@subs(["sectors"], _subscript_dict)
def historic_variation_demand():
    """
    Real Name: historic variation demand
    Original Eqn: Historic demand by sector[sectors](INTEGER(Time+1))-Historic demand by sector[sectors](INTEGER(Time))
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Historic variation of demand (35 WIOD sectors). US$1995
    """
    return historic_demand_by_sector(int(time() + 1)) - historic_demand_by_sector(
        int(time())
    )


@cache.step
@to_float
def share_conv_vs_total_oil_extraction_eu():
    """
    Real Name: share conv vs total oil extraction EU
    Original Eqn: ZIDZ( real extraction conv oil EJ , (real extraction conv oil EJ+real extraction unconv oil EJ) )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Share of conventional oil vs total oil extracted.
    """
    return zidz(
        real_extraction_conv_oil_ej(),
        (real_extraction_conv_oil_ej() + real_extraction_unconv_oil_ej()),
    )


@cache.step
@to_float
def pes_nat_gas_without_gtl():
    """
    Real Name: "PES nat. gas without GTL"
    Original Eqn: PES nat gas EU-"PED nat. gas for GTL EJ"
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total extraction of conventional gas and unconventional (without GTL).
    """
    return pes_nat_gas_eu() - ped_nat_gas_for_gtl_ej()


@cache.step
@to_float
def co2_emissions_gtl():
    """
    Real Name: CO2 emissions GTL
    Original Eqn: "PED nat. gas for GTL EJ"*gCO2 per MJ GTL*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions associated to GTL production.
    """
    return ped_nat_gas_for_gtl_ej() * gco2_per_mj_gtl() * mj_per_ej() / g_per_gt()


@cache.step
@subs(["final sources"], _subscript_dict)
def shortage_coef_without_min_without_elosses():
    """
    Real Name: "Shortage coef without MIN without E-losses"
    Original Eqn: real FE consumption by fuel before heat correction[final sources]/Required FED by fuel before heat correction[final sources]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    ***Variable to test the consistency of the modeling. IT CAN NEVER BE > 1!
        (that would mean consumption > demand.***
    """
    return (
        rearrange(
            real_fe_consumption_by_fuel_before_heat_correction(),
            ["final sources"],
            _subscript_dict,
        )
        / required_fed_by_fuel_before_heat_correction()
    )


@cache.step
@to_float
def share_conv_vs_total_gas_extraction_eu():
    """
    Real Name: share conv vs total gas extraction EU
    Original Eqn: ZIDZ( real extraction conv gas EJ , (real extraction conv gas EJ+real extraction unconv gas EJ) )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Share of conventional gas vs total gas extracted.
    """
    return zidz(
        real_extraction_conv_gas_ej(),
        (real_extraction_conv_gas_ej() + real_extraction_unconv_gas_ej()),
    )


@cache.step
@to_float
def ch4_emissions_unconv_gas():
    """
    Real Name: CH4 emissions unconv gas
    Original Eqn: real extraction unconv gas emissions relevant EJ*gCH4 per MJ unconv gas*MJ per EJ/g per Mt
    Units: MtCH4
    Limits: (None, None)
    Type: component
    Subs: None

    CH4 emissions unconventional gas.
    """
    return (
        real_extraction_unconv_gas_emissions_relevant_ej()
        * gch4_per_mj_unconv_gas()
        * mj_per_ej()
        / g_per_mt()
    )


@cache.step
@to_float
def share_electricity_vs_tfes():
    """
    Real Name: share electricity vs TFES
    Original Eqn: real FE consumption by fuel[electricity]/SUM(real FE consumption by fuel[final sources!])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of electricity vs TFES.
    """
    return real_fe_consumption_by_fuel().loc["electricity"].reset_coords(
        drop=True
    ) / sum(
        rearrange(real_fe_consumption_by_fuel(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.step
@to_float
def co2_emissions_peat():
    """
    Real Name: CO2 emissions peat
    Original Eqn: PES peat EJ*gCO2 per MJ shale oil*MJ per EJ/g per Gt
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions from peat.
    """
    return pes_peat_ej() * gco2_per_mj_shale_oil() * mj_per_ej() / g_per_gt()


@cache.step
@to_float
def required_fed_by_gas():
    """
    Real Name: Required FED by gas
    Original Eqn: Required FED by fuel[gases]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Required final energy demand by gas.
    """
    return required_fed_by_fuel().loc["gases"].reset_coords(drop=True)


@cache.step
@to_float
def required_tfed():
    """
    Real Name: Required TFED
    Original Eqn: SUM(Required FED by fuel[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Required total final energy demand after heat demand correction.
        Non-commercial heat is accounted as heat, i.e. not following the data from
        the IEA Balances.
    """
    return sum(
        rearrange(required_fed_by_fuel(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.step
@to_float
def total_fe_elec_consumption_ej():
    """
    Real Name: Total FE Elec consumption EJ
    Original Eqn: Total FE Elec consumption TWh*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy electricity consumption (fossil fuels, nuclear, waste &
        renewables) (TWh) excluding distribution losses and the energy losses due
        to impacts of Climate Change.
    """
    return total_fe_elec_consumption_twh() * ej_per_twh()


@cache.step
@to_float
def ped_gases():
    """
    Real Name: PED gases
    Original Eqn: MAX(0, Required FED by gas+"PED nat. gas for GTL EJ"+PE demand gas Elec plants EJ+PED gases for Heat plants EJ+PED gas for CHP plants EJ +"PED gas Heat-nc"+Other gases required)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand total gases.
    """
    return np.maximum(
        0,
        required_fed_by_gas()
        + ped_nat_gas_for_gtl_ej()
        + pe_demand_gas_elec_plants_ej()
        + ped_gases_for_heat_plants_ej()
        + ped_gas_for_chp_plants_ej()
        + ped_gas_heatnc()
        + other_gases_required(),
    )


@cache.step
@to_float
def share_solids_vs_tfes():
    """
    Real Name: share solids vs TFES
    Original Eqn: real FE consumption by fuel[solids]/SUM(real FE consumption by fuel[final sources!])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of solids vs TFES.
    """
    return real_fe_consumption_by_fuel().loc["solids"].reset_coords(drop=True) / sum(
        rearrange(real_fe_consumption_by_fuel(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.step
@to_float
def share_gases_vs_tfes():
    """
    Real Name: share gases vs TFES
    Original Eqn: real FE consumption by fuel[gases]/SUM(real FE consumption by fuel[final sources!])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of gases vs TFES.
    """
    return real_fe_consumption_by_fuel().loc["gases"].reset_coords(drop=True) / sum(
        rearrange(real_fe_consumption_by_fuel(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.step
@to_float
def required_fed_solids():
    """
    Real Name: Required FED solids
    Original Eqn: Required FED by fuel[solids]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Required final energy demand solids.
    """
    return required_fed_by_fuel().loc["solids"].reset_coords(drop=True)


@cache.step
@to_float
def share_heat_vs_tfes():
    """
    Real Name: share heat vs TFES
    Original Eqn: real FE consumption by fuel[heat]/SUM(real FE consumption by fuel[final sources!])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of heat vs TFES.
    """
    return real_fe_consumption_by_fuel().loc["heat"].reset_coords(drop=True) / sum(
        rearrange(real_fe_consumption_by_fuel(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.step
@to_float
def ped_solids():
    """
    Real Name: PED solids
    Original Eqn: MAX(0, Required FED solids+PED coal for CTL EJ+PE demand coal Elec plants EJ+PED coal for Heat plants EJ +PED coal for CHP plants EJ+"PED coal Heat-nc"+Other solids required)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of solids.
    """
    return np.maximum(
        0,
        required_fed_solids()
        + ped_coal_for_ctl_ej()
        + pe_demand_coal_elec_plants_ej()
        + ped_coal_for_heat_plants_ej()
        + ped_coal_for_chp_plants_ej()
        + ped_coal_heatnc()
        + other_solids_required(),
    )


@cache.step
@to_float
def scarcity_conv_oil():
    """
    Real Name: scarcity conv oil
    Original Eqn: IF THEN ELSE(max extraction conv oil EJ=0,0, IF THEN ELSE(max extraction conv oil EJ>=extraction conv oil EJ, 1-((max extraction conv oil EJ-extraction conv oil EJ)/max extraction conv oil EJ)^exponent availability conv oil,0))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Priority to conventional resource to cover the demand while the maximum
        extraction level of energy/time is not reached. If "scarcity conv oil"=1
        there is no more available flow to be extracted from the conventional
        resource.
    """
    return if_then_else(
        max_extraction_conv_oil_ej() == 0,
        lambda: 0,
        lambda: if_then_else(
            max_extraction_conv_oil_ej() >= extraction_conv_oil_ej(),
            lambda: 1
            - (
                (max_extraction_conv_oil_ej() - extraction_conv_oil_ej())
                / max_extraction_conv_oil_ej()
            )
            ** exponent_availability_conv_oil(),
            lambda: 0,
        ),
    )


@cache.step
@to_float
def share_liquids_vs_tfes():
    """
    Real Name: share liquids vs TFES
    Original Eqn: real FE consumption by fuel[liquids]/SUM(real FE consumption by fuel[final sources!])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of liquids vs TFES.
    """
    return real_fe_consumption_by_fuel().loc["liquids"].reset_coords(drop=True) / sum(
        rearrange(real_fe_consumption_by_fuel(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.step
@to_float
def real_total_output_inland_transport():
    """
    Real Name: Real total output inland transport
    Original Eqn: Real total output by sector EU[Inland Transport]/1e+06
    Units: T$
    Limits: (None, None)
    Type: component
    Subs: None

    /1e+006
    """
    return (
        real_total_output_by_sector_eu().loc["Inland Transport"].reset_coords(drop=True)
        / 1e06
    )


@cache.step
@to_float
def tfes_intensity_ej_t():
    """
    Real Name: TFES intensity EJ T$
    Original Eqn: ZIDZ( Real TFEC , GDP EU )
    Units: EJ/T$
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy intensity.
    """
    return zidz(real_tfec(), gdp_eu())


@cache.step
@to_float
def tfes_intensity_ej_t_delayed_1yr():
    """
    Real Name: TFES intensity EJ T$ delayed 1yr
    Original Eqn: DELAY FIXED ( TFES intensity EJ T$, 1, 8.827)
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    TFES intensity delayed 1 year.
    """
    return _delayfixed_tfes_intensity_ej_t_delayed_1yr()


@cache.step
@to_float
def tpes_intensity_ej_t_delayed_1yr():
    """
    Real Name: TPES intensity EJ T$ delayed 1yr
    Original Eqn: DELAY FIXED ( TPES intensity EJ T$, 1, 13.14)
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    TPES intensity delayed 1 year.
    """
    return _delayfixed_tpes_intensity_ej_t_delayed_1yr()


@cache.step
@to_float
def annual_tpes_intensity_change_rate():
    """
    Real Name: Annual TPES intensity change rate
    Original Eqn: -1+ZIDZ( TPES intensity EJ T$ , TPES intensity EJ T$ delayed 1yr )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual TPES intensity change rate.
    """
    return -1 + zidz(tpes_intensity_ej_t(), tpes_intensity_ej_t_delayed_1yr())


@cache.step
@to_float
def annual_tfes_intensity_change_rate():
    """
    Real Name: Annual TFES intensity change rate
    Original Eqn: -1+ZIDZ( TFES intensity EJ T$ , TFES intensity EJ T$ delayed 1yr )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual TFES intensity change rate.
    """
    return -1 + zidz(tfes_intensity_ej_t(), tfes_intensity_ej_t_delayed_1yr())


@cache.step
@subs(["RES elec"], _subscript_dict)
def total_d_jobs_res_elec_per_techn():
    """
    Real Name: Total D jobs RES elec per techn
    Original Eqn: D jobs new installed RES elec per techn[RES elec]+"Jobs O&M RES elec per techn"[RES elec]
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Total direct annual jobs for RES elec per technology.
    """
    return d_jobs_new_installed_res_elec_per_techn() + jobs_om_res_elec_per_techn()


@cache.step
@subs(["RES heat"], _subscript_dict)
def total_d_jobs_res_heat_per_techn():
    """
    Real Name: Total D jobs RES heat per techn
    Original Eqn: D jobs new installed RES heat per techn[RES heat]+"Jobs O&M RES heat per techn"[RES heat]
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Total direct annual jobs for RES heat per technology.
    """
    return d_jobs_new_installed_res_heat_per_techn() + jobs_om_res_heat_per_techn()


@cache.run
@subs(["RES elec"], _subscript_dict)
def employment_factors_new_res_elec():
    """
    Real Name: Employment factors new RES elec
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Y13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Y16')
    Units: people*Year/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Employment factors for the manufacture, construction and installation of
        RES power plants for electricity generation.
    """
    return _ext_constant_employment_factors_new_res_elec()


@cache.run
@subs(["RES heat"], _subscript_dict)
def employment_factors_new_res_heat():
    """
    Real Name: Employment factors new RES heat
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Y17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Y18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Y19')
    Units: people*Year/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Employment factors for the manufacture, construction and installation of
        RES power plants for heat generation.
    """
    return _ext_constant_employment_factors_new_res_heat()


@cache.run
@subs(["RES elec"], _subscript_dict)
def employment_factors_om_res_elec():
    """
    Real Name: "Employment factors O&M RES elec"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Z13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Z16')
    Units: people/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Employment factors for the O&M of RES power plants for electricity
        generation.
    """
    return _ext_constant_employment_factors_om_res_elec()


@cache.run
@subs(["RES heat"], _subscript_dict)
def employment_factors_om_res_heat():
    """
    Real Name: "Employment factors O&M RES heat"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Z17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Z18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'Z19')
    Units: people/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Employment factors for the O&M of RES power plants for heat generation.
    """
    return _ext_constant_employment_factors_om_res_heat()


@cache.step
@subs(["RES elec"], _subscript_dict)
def d_jobs_new_installed_res_elec_per_techn():
    """
    Real Name: D jobs new installed RES elec per techn
    Original Eqn: RES elec capacity under construction TW[RES elec]*Employment factors new RES elec[RES elec]*M per T
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual direct jobs new installed RES elec per technology.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * employment_factors_new_res_elec()
        * m_per_t()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def jobs_om_res_elec_per_techn():
    """
    Real Name: "Jobs O&M RES elec per techn"
    Original Eqn: installed capacity RES elec TW[RES elec]*"Employment factors O&M RES elec"[RES elec]*M per T
    Units: people
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual jobs operation&maintenance of RES elec per technology.
    """
    return (
        installed_capacity_res_elec_tw() * employment_factors_om_res_elec() * m_per_t()
    )


@cache.step
@subs(["vehicleT"], _subscript_dict)
def nx0_vehicles_per_xinland_t():
    """
    Real Name: NX0 vehicles per Xinland T
    Original Eqn:
      NX HV inland T
        .
        .
        .
      NX bus inlandT
    Units: vehicles/T$
    Limits: (None, None)
    Type: component
    Subs: ['vehicleT']

    Estimated number of vehicles per unit of inland transport economic activity
    """
    return xrmerge(
        [
            rearrange(nx_hv_inland_t(), ["vehicleT"], {"vehicleT": ["HV liq"]}),
            rearrange(nx_hv_inland_t(), ["vehicleT"], {"vehicleT": ["HV hib"]}),
            rearrange(nx_hv_inland_t(), ["vehicleT"], {"vehicleT": ["HV gas"]}),
            rearrange(nx_lv_inland_t(), ["vehicleT"], {"vehicleT": ["LV liq"]}),
            rearrange(nx_lv_inland_t(), ["vehicleT"], {"vehicleT": ["LV elec"]}),
            rearrange(nx_lv_inland_t(), ["vehicleT"], {"vehicleT": ["LV hib"]}),
            rearrange(nx_lv_inland_t(), ["vehicleT"], {"vehicleT": ["LV gas"]}),
            rearrange(nx_bus_inlandt(), ["vehicleT"], {"vehicleT": ["bus liq"]}),
            rearrange(nx_bus_inlandt(), ["vehicleT"], {"vehicleT": ["bus hib"]}),
            rearrange(nx_bus_inlandt(), ["vehicleT"], {"vehicleT": ["bus gas"]}),
            rearrange(nx_train_inland_t(), ["vehicleT"], {"vehicleT": ["train liq"]}),
            rearrange(nx_train_inland_t(), ["vehicleT"], {"vehicleT": ["train elec"]}),
            rearrange(nx_bus_inlandt(), ["vehicleT"], {"vehicleT": ["bus elec"]}),
        ]
    )


@cache.run
@subs(["vehicleT"], _subscript_dict)
def initial_percent_t_vehicles():
    """
    Real Name: initial percent T vehicles
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B35')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B45')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    Initial percentage of vehicles of each fuel (2015), percents relative to
        each class of vehicles (LV; HV, bus, train)
    """
    return _ext_constant_initial_percent_t_vehicles()


@cache.run
@subs(["vehicleT"], _subscript_dict)
def saving_ratios_v():
    """
    Real Name: saving ratios V
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B94')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Transportation', 'B102')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    ratios of energy consumption of diferente vehicles per Km compared to
        conventional  liquids vechicles
    """
    return _ext_constant_saving_ratios_v()


@cache.run
@to_float
def share_feh_over_pes_gases():
    """
    Real Name: share FEH over PES gases
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'O39')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Estimated share of FEH over PES for gases (excluding the gas for GTL).
    """
    return _ext_constant_share_feh_over_pes_gases()


@cache.step
@to_float
def increase_scarcity_conv_gas():
    """
    Real Name: increase scarcity conv gas
    Original Eqn: scarcity conv gas-scarcity conv gas delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return scarcity_conv_gas() - scarcity_conv_gas_delayed_1yr()


@cache.step
@to_float
def scarcity_conv_gas_stock():
    """
    Real Name: scarcity conv gas stock
    Original Eqn: INTEG ( increase scarcity conv gas, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Stock which accounts for the relative scarcity of conventional vs
        unconventional resource. For the initial year we arbitrary chose the value
        "0".
    """
    return _integ_scarcity_conv_gas_stock()


@cache.step
@to_float
def real_growth_ctl():
    """
    Real Name: real growth CTL
    Original Eqn: IF THEN ELSE(abundance coal EU>=abundance liquids, IF THEN ELSE(abundance coal EU=1, Exogenous growth CTL,0 ),0)*abundance liquids CTL*scarcity conv oil
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    The real growth of CTL depends on the relative abundance of coal and
        liquids, as well as on the availability of coal.
    """
    return (
        if_then_else(
            abundance_coal_eu() >= abundance_liquids(),
            lambda: if_then_else(
                abundance_coal_eu() == 1, lambda: exogenous_growth_ctl(), lambda: 0
            ),
            lambda: 0,
        )
        * abundance_liquids_ctl()
        * scarcity_conv_oil()
    )


@cache.step
@to_float
def ctl_potential_production():
    """
    Real Name: CTL potential production
    Original Eqn: INTEG ( replacement CTL+variation CTL-wear CTL, initial CTL production)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual CTL potential production.
    """
    return _integ_ctl_potential_production()


@cache.step
@to_float
def abundance_liquids_gtl():
    """
    Real Name: abundance liquids GTL
    Original Eqn: SQRT(ABS((XIDZ( PED liquids EJ-GTL potential production, PED liquids EJ,0))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variable to moderate the growth of GTL when it comes close to supply all
        the liquids. This variable limits the growth of a technology supplying a
        particular final energy type when its supply increases its share in
        relation to the total supply of this energy type (to avoid overshootings).
    """
    return np.sqrt(
        abs((xidz(ped_liquids_ej() - gtl_potential_production(), ped_liquids_ej(), 0)))
    )


@cache.step
@to_float
def gtl_potential_production():
    """
    Real Name: GTL potential production
    Original Eqn: INTEG ( replacement GTL+variation GTL-wear GTL, initial GTL production)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual GTL potential production.
    """
    return _integ_gtl_potential_production()


@cache.step
@to_float
def abundance_liquids_ctl():
    """
    Real Name: abundance liquids CTL
    Original Eqn: SQRT(ABS((XIDZ( PED liquids EJ-CTL potential production, PED liquids EJ, 0))))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variable to moderate the growth of CTL when it comes close to supply all
        the liquids. This variable limits the growth of a technology supplying a
        particular final energy type when its supply increases its share in
        relation to the total supply of this energy type (to avoid overshootings).
    """
    return np.sqrt(
        abs((xidz(ped_liquids_ej() - ctl_potential_production(), ped_liquids_ej(), 0)))
    )


@cache.step
@to_float
def wear_gtl():
    """
    Real Name: wear GTL
    Original Eqn: IF THEN ELSE(Time<2015, 0, GTL potential production/lifetime GTL)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Depreciation of GTL plants.
    """
    return if_then_else(
        time() < 2015, lambda: 0, lambda: gtl_potential_production() / lifetime_gtl()
    )


@cache.run
@to_float
def lifetime_gtl():
    """
    Real Name: lifetime GTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G39')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Lifetime of GTL plants.
    """
    return _ext_constant_lifetime_gtl()


@cache.run
@to_float
def lifetime_ctl():
    """
    Real Name: lifetime CTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G38')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Lifetime of CTL plants.
    """
    return _ext_constant_lifetime_ctl()


@cache.step
@to_float
def wear_ctl():
    """
    Real Name: wear CTL
    Original Eqn: IF THEN ELSE(Time<2015, 0, CTL potential production/lifetime CTL)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Depreciation of CTL plants.
    """
    return if_then_else(
        time() < 2015, lambda: 0, lambda: ctl_potential_production() / lifetime_ctl()
    )


@cache.step
@to_float
def abundance_unconv_oil_stock():
    """
    Real Name: abundance unconv oil stock
    Original Eqn: INTEG ( increase abundance unconv oil, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _integ_abundance_unconv_oil_stock()


@cache.step
@to_float
def increase_abundance_unconv_oil():
    """
    Real Name: increase abundance unconv oil
    Original Eqn: abundance unconv oil-abundance unconv oil delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return abundance_unconv_oil() - abundance_unconv_oil_delayed_1yr()


@cache.step
@to_float
def abundance_unconv_oil():
    """
    Real Name: abundance unconv oil
    Original Eqn: IF THEN ELSE(PED total oil EJ=0,0, IF THEN ELSE(PED total oil EJ > real extraction unconv oil EJ, (PED total oil EJ-real extraction unconv oil EJ)/PED total oil EJ, 0))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). The closest to 1 indicates
        that unconventional oil extractione is far to cover to whole oil demand,
        if "abundance unconv oil"=0 it means that unconventional oil extraction
        covers the whole demand of oil.
    """
    return if_then_else(
        ped_total_oil_ej() == 0,
        lambda: 0,
        lambda: if_then_else(
            ped_total_oil_ej() > real_extraction_unconv_oil_ej(),
            lambda: (ped_total_oil_ej() - real_extraction_unconv_oil_ej())
            / ped_total_oil_ej(),
            lambda: 0,
        ),
    )


@cache.step
@to_float
def abundance_unconv_oil_delayed_1yr():
    """
    Real Name: abundance unconv oil delayed 1yr
    Original Eqn: DELAY FIXED ( abundance unconv oil, 1, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_abundance_unconv_oil_delayed_1yr()


@cache.step
@to_float
def abundance_unconv_oil2():
    """
    Real Name: abundance unconv oil2
    Original Eqn: abundance unconv oil stock
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Adaptation of the parameter abundance for better behaviour of the model.
        This variable limits the growth of a technology supplying a particular
        final energy type when its supply increases its share in relation to the
        total supply of this energy type (to avoid overshootings).
    """
    return abundance_unconv_oil_stock()


@cache.step
@to_float
def real_extraction_unconv_oil_ej():
    """
    Real Name: real extraction unconv oil EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv oil?"=1, extraction unconv oil EJ, "extraction unconv oil - tot agg" )
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: extraction_unconv_oil_ej(),
        lambda: extraction_unconv_oil__tot_agg(),
    )


@cache.step
@to_float
def scarcity_conv_oil_stock():
    """
    Real Name: scarcity conv oil stock
    Original Eqn: INTEG ( increase scarcity conv oil, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Stock which accounts for the relative scarcity of conventional vs
        unconventional resource. For the initial year we arbitrary chose the value
        "0".
    """
    return _integ_scarcity_conv_oil_stock()


@cache.step
@to_float
def share_variable_res_elec_generation_vs_total_gen():
    """
    Real Name: Share variable RES elec generation vs total gen
    Original Eqn: INTEG ( increase variable RES share elec vs total generation, initial share variable RES elec gen vs total)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share variable RES electricity generation vs total electricity generation.
        Same variable as "share variable RES elec generation vs total" but
        introduced as stock in order to avoid simultaneous equations.
    """
    return _integ_share_variable_res_elec_generation_vs_total_gen()


@cache.step
@to_float
def extra_monet_invest_to_cope_with_variable_elec_res():
    """
    Real Name: extra monet invest to cope with variable Elec RES
    Original Eqn: (FE Elec generation from onshore wind TWh+FE Elec generation from offshore wind TWh)*Balancing costs +Grid reinforcement costs Tdollar
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual additional monetary investment to cope with the intermittency of
        RES (taking wind as a proxy) including balancing and grid reinforcement
        costs (1995 US$).
    """
    return (
        fe_elec_generation_from_onshore_wind_twh()
        + fe_elec_generation_from_offshore_wind_twh()
    ) * balancing_costs() + grid_reinforcement_costs_tdollar()


@cache.step
@to_float
def increase_scarcity_conv_oil():
    """
    Real Name: increase scarcity conv oil
    Original Eqn: scarcity conv oil-scarcity conv oil delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return scarcity_conv_oil() - scarcity_conv_oil_delayed_1yr()


@cache.step
@to_float
def share_extra_monet_invest_to_cope_with_variable_elec_res():
    """
    Real Name: share extra monet invest to cope with variable Elec RES
    Original Eqn: extra monet invest to cope with variable Elec RES/Total monet invest RES for elec Tdolar
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Share of the anual additional monetary investment to cope with the
        intermittency of RES (taking wind as a proxy) in relation to the total
        investment for RES.
    """
    return (
        extra_monet_invest_to_cope_with_variable_elec_res()
        / total_monet_invest_res_for_elec_tdolar()
    )


@cache.run
@to_float
def initial_share_variable_res_elec_gen_vs_total():
    """
    Real Name: initial share variable RES elec gen vs total
    Original Eqn: 0.0071
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial share of variable RES electricity in relation to the total
        generation.
    """
    return 0.0071


@cache.step
@to_float
def cumulated_invest_e_grid():
    """
    Real Name: cumulated invest E grid
    Original Eqn: INTEG ( extra monet invest to cope with variable Elec RES, 0)
    Units: Tdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated monetary investment for developing electricity grids to
        integrate renewable intermittent sources.
    """
    return _integ_cumulated_invest_e_grid()


@cache.step
@to_float
def total_monet_invest_res_for_elec_tdolar():
    """
    Real Name: Total monet invest RES for elec Tdolar
    Original Eqn: Invest RES for Elec+extra monet invest to cope with variable Elec RES
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual total monetary investment for RES for electricity: capacity,
        balancing costs and grid improvements to cope with variability (1995 US$).
    """
    return invest_res_for_elec() + extra_monet_invest_to_cope_with_variable_elec_res()


@cache.step
@to_float
def cp_exogenous_res_elec_var_reduction():
    """
    Real Name: Cp exogenous RES elec var reduction
    Original Eqn: 1/(1+0.0001*EXP(9.85*Share variable RES elec generation vs total gen))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Reduction of the capacity factor of the RES elec variables plants as a
        function of the penetration of variables RES in the electricity generation
        (Source: Delarue & Morris (2015), see MEDEAS D4.1).
    """
    return 1 / (
        1 + 0.0001 * np.exp(9.85 * share_variable_res_elec_generation_vs_total_gen())
    )


@cache.step
@to_float
def cp_exogenous_res_elec_dispatch_reduction():
    """
    Real Name: Cp exogenous RES elec dispatch reduction
    Original Eqn: MIN(1, -0.6209*(Share variable RES elec generation vs total gen)^2 - 0.3998*(Share variable RES elec generation vs total gen) + 1.0222)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Reduction of the capacity factor of the dispatchable plants as a function
        of the penetration of variables RES in the electricity generation (Source:
        NREL (2012), see MEDEAS D4.1).
    """
    return np.minimum(
        1,
        -0.6209 * (share_variable_res_elec_generation_vs_total_gen()) ** 2
        - 0.3998 * (share_variable_res_elec_generation_vs_total_gen())
        + 1.0222,
    )


@cache.step
@to_float
def increase_variable_res_share_elec_vs_total_generation():
    """
    Real Name: increase variable RES share elec vs total generation
    Original Eqn: Share variable RES elec generation vs total-Share variable RES elec vs total generation delayed 1yr
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        share_variable_res_elec_generation_vs_total()
        - share_variable_res_elec_vs_total_generation_delayed_1yr()
    )


@cache.step
@to_float
def pes_nre_heatnc():
    """
    Real Name: "PES NRE Heat-nc"
    Original Eqn: "PES coal for Heat-nc plants"+"PES nat. gas for Heat-nc plants"+"PES oil for Heat-nc plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        pes_coal_for_heatnc_plants()
        + pes_nat_gas_for_heatnc_plants()
        + pes_oil_for_heatnc_plants()
    )


@cache.run
@to_float
def share_feh_over_pes_liquids():
    """
    Real Name: share FEH over PES liquids
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'O38')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Estimated share of FEH over PES for liquids.
    """
    return _ext_constant_share_feh_over_pes_liquids()


@cache.step
@to_float
def fed_nat_gas_for_heatnc():
    """
    Real Name: "FED nat. gas for heat-nc"
    Original Eqn: Required FED by fuel before heat correction[gases]*share FEH over FED by final fuel[gases]*efficiency gases for heat plants/(1+Share heat distribution losses)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand (excluding distribution and generation losses) of
        non-commercial heat from natural gas.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc["gases"]
        .reset_coords(drop=True)
        * share_feh_over_fed_by_final_fuel().loc["gases"].reset_coords(drop=True)
        * efficiency_gases_for_heat_plants()
        / (1 + share_heat_distribution_losses())
    )


@cache.step
@to_float
def tpes_heat():
    """
    Real Name: TPES heat
    Original Eqn: PES NRE heat+PES tot RES for heat+"PES tot waste for heat-com"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_nre_heat() + pes_tot_res_for_heat() + pes_tot_waste_for_heatcom()


@cache.step
@to_float
def fed_oil_for_heatnc():
    """
    Real Name: "FED oil for heat-nc"
    Original Eqn: Required FED by fuel before heat correction[liquids]*share FEH over FED by final fuel[liquids]*efficiency liquids for heat plants/(1+Share heat distribution losses)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand (excluding distribution and generation losses) of
        non-commercial heat from oil.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc["liquids"]
        .reset_coords(drop=True)
        * share_feh_over_fed_by_final_fuel().loc["liquids"].reset_coords(drop=True)
        * efficiency_liquids_for_heat_plants()
        / (1 + share_heat_distribution_losses())
    )


@cache.step
@to_float
def pes_nre_heat():
    """
    Real Name: PES NRE heat
    Original Eqn: "PES NRE Heat-com"+"PES NRE Heat-nc"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_nre_heatcom() + pes_nre_heatnc()


@cache.step
@to_float
def pes_nre_heatcom():
    """
    Real Name: "PES NRE Heat-com"
    Original Eqn: "PES coal for Heat-com plants"+"PES nat. gas for Heat-com plants"+"PES oil for Heat-com plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        pes_coal_for_heatcom_plants()
        + pes_nat_gas_for_heatcom_plants()
        + pes_oil_for_heatcom_plants()
    )


@cache.run
@subs(["final sources1"], _subscript_dict)
def fed_by_fuel_for_heatnc():
    """
    Real Name: "FED by fuel for heat-nc"
    Original Eqn:
      0
      0
      "FED oil for heat-nc"
      "FED nat. gas for heat-nc"
      "FED coal for heat-nc"+"FED solid bioE for heat-nc"
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: ['final sources1']

    Final energy demand (excluding distribution and generation losses) of
        non-commercial heat by final fuel.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"final sources1": ["electricity"]}, ["final sources1"]),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
            rearrange(
                fed_oil_for_heatnc(),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                fed_nat_gas_for_heatnc(),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
            rearrange(
                fed_coal_for_heatnc() + fed_solid_bioe_for_heatnc(),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
        ]
    )


@cache.step
@to_float
def share_fed_heatcom_vs_total_heat():
    """
    Real Name: "Share FED heat-com vs total heat"
    Original Eqn: "Total FED Heat-com EJ"/(Total FED Heat EJ+"Total FED Heat-com EJ")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of commercial heat in relation to total final energy use for heat.
    """
    return total_fed_heatcom_ej() / (total_fed_heat_ej() + total_fed_heatcom_ej())


@cache.step
@to_float
def average_elec_consumption_per_capita():
    """
    Real Name: Average elec consumption per capita
    Original Eqn: Total FE Elec consumption TWh*kWh per TWh/Population
    Units: kWh/people
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity consumption per capita (kWh per capita).
    """
    return total_fe_elec_consumption_twh() * kwh_per_twh() / population()


@cache.step
@to_float
def fed_solid_bioe_for_heatnc():
    """
    Real Name: "FED solid bioE for heat-nc"
    Original Eqn: Required FED by fuel before heat correction[solids]*share FEH over FED solid bioE*Efficiency conversion BioE plants to heat/(1+Share heat distribution losses)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand (excluding distribution and generation losses) of
        non-commercial heat from solid bioenergy.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc["solids"]
        .reset_coords(drop=True)
        * share_feh_over_fed_solid_bioe()
        * efficiency_conversion_bioe_plants_to_heat()
        / (1 + share_heat_distribution_losses())
    )


@cache.step
@to_float
def total_fed_heat_ej():
    """
    Real Name: Total FED Heat EJ
    Original Eqn: "Total FED Heat-com EJ"+"Total FED Heat-nc EJ"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy demand (including distribution losses) of heat.
    """
    return total_fed_heatcom_ej() + total_fed_heatnc_ej()


@cache.step
@to_float
def heatnc_distribution_losses():
    """
    Real Name: "Heat-nc distribution losses"
    Original Eqn: "Total FED Heat-nc EJ"-"FED Heat-nc EJ"
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Distribution losses associated to non-commercial heat.
    """
    return total_fed_heatnc_ej() - fed_heatnc_ej()


@cache.step
@to_float
def total_fed_heatnc_ej():
    """
    Real Name: "Total FED Heat-nc EJ"
    Original Eqn: "FED Heat-nc EJ"*(1+Share heat distribution losses)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total non-commercial heat demand including distribution losses (and
        climate change impacts).
    """
    return fed_heatnc_ej() * (1 + share_heat_distribution_losses())


@cache.step
@to_float
def total_fed_nre_heatnc():
    """
    Real Name: "Total FED NRE Heat-nc"
    Original Eqn: MAX(0,("Total FED Heat-nc EJ"-"Total FE real supply RES for heat-nc EJ"))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand heat non-commercial to be covered by NRE (including
        distribution losses and climate change impacts).
    """
    return np.maximum(
        0, (total_fed_heatnc_ej() - total_fe_real_supply_res_for_heatnc_ej())
    )


@cache.step
@to_float
def ped_gas_heatnc():
    """
    Real Name: "PED gas Heat-nc"
    Original Eqn: "Total FED NRE Heat-nc"*"share FED gas vs NRE heat-nc"/efficiency gases for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand heat non-commercial to be covered by natural gas.
        It corresponds to the FEH (final energy use for heat) metric which
        includes the distribution and generation losses (see IEA, 2014).
    """
    return (
        total_fed_nre_heatnc()
        * share_fed_gas_vs_nre_heatnc()
        / efficiency_gases_for_heat_plants()
    )


@cache.step
@to_float
def ped_coal_heatnc():
    """
    Real Name: "PED coal Heat-nc"
    Original Eqn: "Total FED NRE Heat-nc"*"share FED coal vs NRE heat-nc"/efficiency coal for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand heat non-commercial to be covered by coal. It
        corresponds to the FEH (final energy use for heat) metric which includes
        the distribution and generation losses (see IEA, 2014).
    """
    return (
        total_fed_nre_heatnc()
        * share_fed_coal_vs_nre_heatnc()
        / efficiency_coal_for_heat_plants()
    )


@cache.step
@to_float
def ped_liquids_heatnc():
    """
    Real Name: "PED liquids Heat-nc"
    Original Eqn: "Total FED NRE Heat-nc"*"share FED liquids vs NRE heat-nc"/efficiency liquids for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand heat non-commercial to be covered by liquids. It
        corresponds to the FEH (final energy use for heat) metric which includes
        the distribution and generation losses (see IEA, 2014).
    """
    return (
        total_fed_nre_heatnc()
        * share_fed_liquids_vs_nre_heatnc()
        / efficiency_liquids_for_heat_plants()
    )


@cache.run
@to_float
def share_feh_over_fed_solid_bioe():
    """
    Real Name: share FEH over FED solid bioE
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C69')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Estimated share of FEH over FED for solid bioenergy for the year 2011
        (IEA, 2014 and own calculations).
    """
    return _ext_constant_share_feh_over_fed_solid_bioe()


@cache.step
@to_float
def fes_heat_from_coal():
    """
    Real Name: FES Heat from coal
    Original Eqn: ("PES coal for Heat-com plants"+"PES coal for Heat-nc plants")*efficiency coal for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Heat from Heat plants that burn coal (both commercial and non-commercial).
    """
    return (
        pes_coal_for_heatcom_plants() + pes_coal_for_heatnc_plants()
    ) * efficiency_coal_for_heat_plants()


@cache.step
@to_float
def fes_heat_from_nat_gas():
    """
    Real Name: "FES Heat from nat. gas"
    Original Eqn: ("PES nat. gas for Heat-com plants"+"PES nat. gas for Heat-nc plants")*efficiency gases for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Heat from Heat plants that burn fossil natural gas (both commercial and
        non-commercial).
    """
    return (
        pes_nat_gas_for_heatcom_plants() + pes_nat_gas_for_heatnc_plants()
    ) * efficiency_gases_for_heat_plants()


@cache.step
@to_float
def fes_heat_from_oil():
    """
    Real Name: FES Heat from oil
    Original Eqn: ("PES oil for Heat-com plants"+"PES oil for Heat-nc plants")*efficiency liquids for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Heat from Heat plants that burn oil (both commercial and non-commercial).
    """
    return (
        pes_oil_for_heatcom_plants() + pes_oil_for_heatnc_plants()
    ) * efficiency_liquids_for_heat_plants()


@cache.step
@to_float
def abundance_heat():
    """
    Real Name: Abundance heat
    Original Eqn: IF THEN ELSE(Total FE Heat generation EJ>Total FED Heat EJ, 1, 1-ZIDZ( Total FED Heat EJ-Total FE Heat generation EJ , Total FED Heat EJ ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        total_fe_heat_generation_ej() > total_fed_heat_ej(),
        lambda: 1,
        lambda: 1
        - zidz(
            total_fed_heat_ej() - total_fe_heat_generation_ej(), total_fed_heat_ej()
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def required_fed_sectors_by_fuel():
    """
    Real Name: required FED sectors by fuel
    Original Eqn: SUM(Required final energy by sector and fuel EU[final sources,sectors!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources']


    """
    return sum(required_final_energy_by_sector_and_fuel_eu(), dim=("sectors",))


@cache.run
@to_float
def share_trad_biomass_vs_solids_in_households():
    """
    Real Name: share trad biomass vs solids in households
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G36')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_share_trad_biomass_vs_solids_in_households()


@cache.step
@subs(["RES heat"], _subscript_dict)
def new_res_capacity_for_heatcom_tw():
    """
    Real Name: "new RES capacity for heat-com TW"
    Original Eqn: IF THEN ELSE(Time<2013, "Historic RES capacity for heat-com"[RES heat](INTEGER(Time+1))-"Historic RES capacity for heat-com"[RES heat](INTEGER(Time)), "adapt growth RES for heat-com"[RES heat]*"installed capacity RES heat-com TW"[RES heat]*remaining potential constraint on new RES heat capacity [RES heat])*"abundance RES heat-com2"
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    New annual installed capacity of RES technologies for commercial heat.
    """
    return (
        if_then_else(
            time() < 2013,
            lambda: historic_res_capacity_for_heatcom(int(time() + 1))
            - historic_res_capacity_for_heatcom(int(time())),
            lambda: adapt_growth_res_for_heatcom()
            * installed_capacity_res_heatcom_tw()
            * remaining_potential_constraint_on_new_res_heat_capacity(),
        )
        * abundance_res_heatcom2()
    )


@cache.step
@to_float
def share_global_pop_dependent_on_trad_biomass():
    """
    Real Name: share global pop dependent on trad biomass
    Original Eqn: Population dependent on trad biomass/Population
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return population_dependent_on_trad_biomass() / population()


def historic_res_capacity_for_heatcom(x):
    """
    Real Name: "Historic RES capacity for heat-com"
    Original Eqn:
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H66'))
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H67'))
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H65'))
    Units: TW
    Limits: (None, None)
    Type: lookup
    Subs: ['RES heat']

    Historic installed capacity of RES technologies for commercial heat
        generation.
    """
    return _ext_lookup_historic_res_capacity_for_heatcom(x)


@cache.step
@to_float
def share_coal_dem_for_heatnc():
    """
    Real Name: "share coal dem for Heat-nc"
    Original Eqn: ZIDZ("PED coal Heat-nc", PED coal EJ )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of coal demand to cover non-commercial heat consumption in Heat
        plants.
    """
    return zidz(ped_coal_heatnc(), ped_coal_ej())


@cache.step
@to_float
def res_heatcom_tot_overcapacity():
    """
    Real Name: "RES heat-com tot overcapacity"
    Original Eqn: IF THEN ELSE("potential FES tot RES for heat-com EJ"=0,0, ("potential FES tot RES for heat-com EJ"-"FE real supply RES for heat-com tot EJ")/"potential FES tot RES for heat-com EJ" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Overcapacity for each technology RES for heat-com taking into account the
        installed capacity and the real generation.
    """
    return if_then_else(
        potential_fes_tot_res_for_heatcom_ej() == 0,
        lambda: 0,
        lambda: (
            potential_fes_tot_res_for_heatcom_ej()
            - fe_real_supply_res_for_heatcom_tot_ej()
        )
        / potential_fes_tot_res_for_heatcom_ej(),
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def share_inventories_next_step():
    """
    Real Name: share inventories next step
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Economy', '554' ,'C432')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['sectors']


    """
    return _ext_data_share_inventories_next_step(time())


@cache.step
@subs(["sectors"], _subscript_dict)
def government_expenditure_share():
    """
    Real Name: Government expenditure share
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Economy', '392' ,'B393')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['sectors']

    Government expenditure share in total sectoral final demand.
    """
    return _ext_data_government_expenditure_share(time())


@cache.step
@subs(["sectors"], _subscript_dict)
def changes_in_inventories_share():
    """
    Real Name: Changes in inventories share
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Economy', '392' ,'B432')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['sectors']

    Changes in inventories share in total sectoral final demand.
    """
    return _ext_data_changes_in_inventories_share(time())


@cache.step
@subs(["sectors"], _subscript_dict)
def share_government_expenditure_next_step():
    """
    Real Name: share Government expenditure next step
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Economy', '554' ,'C393')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['sectors']

    Share of public expenditures over total
    """
    return _ext_data_share_government_expenditure_next_step(time())


@cache.step
@subs(["sectors"], _subscript_dict)
def government_expenditure_and_changes_in_inventories_shares():
    """
    Real Name: Government expenditure and changes in inventories shares
    Original Eqn: Changes in inventories share[sectors]+Government expenditure share[sectors]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Government expenditure share in total sectoral final demand and changes in
        inventories share in total sectoral final demand.
    """
    return changes_in_inventories_share() + government_expenditure_share()


@cache.step
@subs(["sectors"], _subscript_dict)
def share_government_expenditures_and_changes_in_inventories_next_step():
    """
    Real Name: share Government expenditures and changes in inventories next step
    Original Eqn: share Government expenditure next step[sectors]+share inventories next step[sectors]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Sum of share of Public expenditures and changes in inventories.
    """
    return share_government_expenditure_next_step() + share_inventories_next_step()


@cache.run
@to_float
def include_materials_for_overgrids():
    """
    Real Name: "include materials for overgrids?"
    Original Eqn: 0
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1. Include materials for overgrids in the CED of RES elec var        0: NOT include materials for overgrids in the CED of RES elec var
    """
    return 0


@cache.run
@to_float
def all_minerals_virgin():
    """
    Real Name: "All minerals virgin?"
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    0. All minerals are virgin: current and future recycling rates set to 0% (pption to
        compare with results offline MEDEAS).        1. Real share of virgin/recycled minerals (for normal simulations).
    """
    return 1


@cache.run
@subs(["RES elec", "materials"], _subscript_dict)
def materials_for_new_res_elec_per_capacity_installed():
    """
    Real Name: materials for new RES elec per capacity installed
    Original Eqn:
      0
        .
        .
        .
      "materials per new capacity installed - CSP"[materials]+("materials per new RES elec capacity installed - HVDCs"[materials ]+"materials per new RES elec capacity installed - material overgrid high power"[materials])*"include materials for overgrids?"
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec', 'materials']


    """
    return xrmerge(
        [
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["hydro"],
                },
                ["RES elec", "materials"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["geot elec"],
                },
                ["RES elec", "materials"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["solid bioE elec"],
                },
                ["RES elec", "materials"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["oceanic"],
                },
                ["RES elec", "materials"],
            ),
            rearrange(
                materials_per_new_capacity_installed__wind_onshore()
                + (
                    materials_per_new_res_elec_capacity_installed__hvdcs()
                    + materials_per_new_res_elec_capacity_installed__material_overgrid_high_power()
                )
                * include_materials_for_overgrids(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["wind onshore"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
            rearrange(
                materials_per_new_capacity_installed__wind_offshore()
                + (
                    materials_per_new_res_elec_capacity_installed__hvdcs()
                    + materials_per_new_res_elec_capacity_installed__material_overgrid_high_power()
                )
                * include_materials_for_overgrids(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["wind offshore"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
            rearrange(
                materials_per_new_capacity_installed__pv()
                + (
                    materials_per_new_res_elec_capacity_installed__hvdcs()
                    + materials_per_new_res_elec_capacity_installed__material_overgrid_high_power()
                )
                * include_materials_for_overgrids(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["solar PV"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
            rearrange(
                materials_per_new_capacity_installed__csp()
                + (
                    materials_per_new_res_elec_capacity_installed__hvdcs()
                    + materials_per_new_res_elec_capacity_installed__material_overgrid_high_power()
                )
                * include_materials_for_overgrids(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["CSP"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
        ]
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def cedtot_per_material_res_elec_var():
    """
    Real Name: CEDtot per material RES elec var
    Original Eqn: CED new cap per material RES elec var[RES elec,materials]+"CED O&M over lifetime per material RES elec var"[RES elec,materials]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Total cumulative energy demand (construction+O&M) per material of RES
        variables per technology.
    """
    return (
        ced_new_cap_per_material_res_elec_var()
        + ced_om_over_lifetime_per_material_res_elec_var()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def cedtot_per_tw_res_elec_var():
    """
    Real Name: CEDtot per TW RES elec var
    Original Eqn: SUM(CEDtot per TW per material RES elec var[RES elec,materials!])*1e+06
    Units: MJ/MW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Total cumulative energy demand (construction+O&M) per power installed of
        RES variables per technology (considering only material requirements).
    """
    return sum(cedtot_per_tw_per_material_res_elec_var(), dim=("materials",)) * 1e06


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def cedtot_per_tw_per_material_res_elec_var():
    """
    Real Name: CEDtot per TW per material RES elec var
    Original Eqn: ZIDZ( CEDtot per material RES elec var[RES elec,materials] , RES elec capacity under construction TW[RES elec] )
    Units: EJ/TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Total cumulative energy demand (construction+O&M) per power installed per
        material of RES variables per technology (considering only material
        requirements).
    """
    return zidz(
        cedtot_per_material_res_elec_var(), res_elec_capacity_under_construction_tw()
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def demand_by_sector_fd_eu():
    """
    Real Name: Demand by sector FD EU
    Original Eqn: INTEG ( variation demand flow FD EU[sectors]-demand not covered by sector FD EU[sectors], initial demand by sectot[sectors])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Final demand by EU28 35 industrial sectors
    """
    return _integ_demand_by_sector_fd_eu()


@cache.step
@to_float
def sum_variation():
    """
    Real Name: sum variation
    Original Eqn: SUM(variation demand flow FD EU[sectors!])
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Variation of total final demand
    """
    return sum(variation_demand_flow_fd_eu(), dim=("sectors",))


@cache.step
@subs(["RES elec"], _subscript_dict)
def cedtot_per_tw_over_lifetime_res_elec_dispatch():
    """
    Real Name: CEDtot per TW over lifetime RES elec dispatch
    Original Eqn: ZIDZ( (1-"RES elec variables?"[RES elec])*("Cp-ini RES elec"[RES elec]*lifetime RES elec[RES elec]*EJ per TWh/TWe per TWh) , "EROI-ini RES elec dispatch"[RES elec]*quality of electricity 2015 )
    Units: EJ/TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Total cumulative energy demand (including installation of new capacity and
        O&M) per MW for RES dispatchables per technology over the lifetime of the
        infrastructure.
    """
    return zidz(
        (1 - res_elec_variables())
        * (cpini_res_elec() * lifetime_res_elec() * ej_per_twh() / twe_per_twh()),
        eroiini_res_elec_dispatch() * quality_of_electricity_2015(),
    )


@cache.step
@to_float
def quality_of_electricity_2015():
    """
    Real Name: quality of electricity 2015
    Original Eqn: IF THEN ELSE(Time<2015, share total final energy vs TPES , aux3)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Quality of electricity until the year 2015.
    """
    return if_then_else(
        time() < 2015, lambda: share_total_final_energy_vs_tpes(), lambda: aux3()
    )


@cache.step
@to_float
def share_total_final_energy_vs_tpes():
    """
    Real Name: share total final energy vs TPES
    Original Eqn: Real TFEC/(TPES EJ-"Total real non-energy use consumption EJ")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy vs TPES, the latter without taking into account the
        non-energy uses. We consider this ratio for the dynamic quality of
        electricity.
    """
    return real_tfec() / (tpes_ej() - total_real_nonenergy_use_consumption_ej())


@cache.step
@to_float
def gquality_of_electricity():
    """
    Real Name: "g=quality of electricity"
    Original Eqn: IF THEN ELSE("static/dynamic quality of electricity?"=1,quality of electricity 2015,share total final energy vs TPES)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Quality of electricity (TFES/TPES, the latter without taking into account
        the non-energy uses), also know as factor "g" in EROI studies.
    """
    return if_then_else(
        staticdynamic_quality_of_electricity() == 1,
        lambda: quality_of_electricity_2015(),
        lambda: share_total_final_energy_vs_tpes(),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def cp_exogenous_res_elec_reduction():
    """
    Real Name: Cp exogenous RES elec reduction
    Original Eqn:
      Cp exogenous RES elec dispatch reduction
        .
        .
        .
      Cp exogenous RES elec var reduction
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Reduction of Cp of RES elec due to the penetration of RES elec variables
        (modelling of overcapacities due to the intermittence of RES elec
        variables).
    """
    return xrmerge(
        [
            rearrange(
                cp_exogenous_res_elec_dispatch_reduction(),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                cp_exogenous_res_elec_dispatch_reduction(),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                cp_exogenous_res_elec_dispatch_reduction(),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                cp_exogenous_res_elec_dispatch_reduction(),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                cp_exogenous_res_elec_var_reduction(),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                cp_exogenous_res_elec_var_reduction(),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                cp_exogenous_res_elec_var_reduction(),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                cp_exogenous_res_elec_var_reduction(),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.run
@subs(["RES elec"], _subscript_dict)
def res_elec_variables():
    """
    Real Name: "RES elec variables?"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'X13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'X16')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Vector to distinguis between RES elec variables and dispatchables:        *If=1, RES elec variables (fully endogenous calculation from the materials
        requirements).        *If=0, RES elec dispatchables (partially endogenous calculation requiring
        a value of EROI as starting point).
    """
    return _ext_constant_res_elec_variables()


@cache.step
@to_float
def aux3():
    """
    Real Name: aux3
    Original Eqn: DELAY FIXED ( quality of electricity 2015, 0.03125 , 0.75)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Auxiliary variable to estimate the quality of electricity until the year
        2015.
    """
    return _delayfixed_aux3()


@cache.step
@subs(["RES elec"], _subscript_dict)
def fei_res_elec_var():
    """
    Real Name: FEI RES elec var
    Original Eqn: (CEDtot new cap RES elec var[RES elec]*(1+Grid correction factor RES elec[RES elec])+CED decom RES elec capacity [RES elec]+"CEDtot O&M RES elec var"[RES elec])*"g=quality of electricity"+real generation RES elec EJ[RES elec]*"self-electricity consumption RES elec"[RES elec]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Final energy invested (equivalent to the denominator of the EROI (=CED*g,
        with total cumulative energy demand including installation of new capacity
        and O&M) for RES variables per technology).
    """
    return (
        cedtot_new_cap_res_elec_var() * (1 + grid_correction_factor_res_elec())
        + ced_decom_res_elec_capacity()
        + cedtot_om_res_elec_var()
    ) * gquality_of_electricity() + real_generation_res_elec_ej() * selfelectricity_consumption_res_elec()


@cache.step
@subs(["RES elec"], _subscript_dict)
def static_eroi_res_elec():
    """
    Real Name: "'static' EROI RES elec"
    Original Eqn:
      IF THEN ELSE(FEI over lifetime RES elec dispatch[hydro]=0,0,output elec over lifetime RES elec[hydro ]/(FEI over lifetime RES elec dispatch[hydro]*"g=quality of electricity"))
        .
        .
        .
      IF THEN ELSE(FEI over lifetime RES elec var[CSP]=0,0,output elec over lifetime RES elec[CSP ]/FEI over lifetime RES elec var[CSP])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Energy return on energy invested (over the full lifetime of the
        infrastructure) per RES technology for generating electricity.
    """
    return xrmerge(
        [
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_dispatch()
                    .loc["hydro"]
                    .reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["hydro"]
                    .reset_coords(drop=True)
                    / (
                        fei_over_lifetime_res_elec_dispatch()
                        .loc["hydro"]
                        .reset_coords(drop=True)
                        * gquality_of_electricity()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_dispatch()
                    .loc["geot elec"]
                    .reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["geot elec"]
                    .reset_coords(drop=True)
                    / (
                        fei_over_lifetime_res_elec_dispatch()
                        .loc["geot elec"]
                        .reset_coords(drop=True)
                        * gquality_of_electricity()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_dispatch()
                    .loc["solid bioE elec"]
                    .reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["solid bioE elec"]
                    .reset_coords(drop=True)
                    / (
                        fei_over_lifetime_res_elec_dispatch()
                        .loc["solid bioE elec"]
                        .reset_coords(drop=True)
                        * gquality_of_electricity()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_dispatch()
                    .loc["oceanic"]
                    .reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["oceanic"]
                    .reset_coords(drop=True)
                    / (
                        fei_over_lifetime_res_elec_dispatch()
                        .loc["oceanic"]
                        .reset_coords(drop=True)
                        * gquality_of_electricity()
                    ),
                ),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_var()
                    .loc["wind onshore"]
                    .reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["wind onshore"]
                    .reset_coords(drop=True)
                    / fei_over_lifetime_res_elec_var()
                    .loc["wind onshore"]
                    .reset_coords(drop=True),
                ),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_var()
                    .loc["wind offshore"]
                    .reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["wind offshore"]
                    .reset_coords(drop=True)
                    / fei_over_lifetime_res_elec_var()
                    .loc["wind offshore"]
                    .reset_coords(drop=True),
                ),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_var()
                    .loc["solar PV"]
                    .reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["solar PV"]
                    .reset_coords(drop=True)
                    / fei_over_lifetime_res_elec_var()
                    .loc["solar PV"]
                    .reset_coords(drop=True),
                ),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                if_then_else(
                    fei_over_lifetime_res_elec_var().loc["CSP"].reset_coords(drop=True)
                    == 0,
                    lambda: 0,
                    lambda: output_elec_over_lifetime_res_elec()
                    .loc["CSP"]
                    .reset_coords(drop=True)
                    / fei_over_lifetime_res_elec_var()
                    .loc["CSP"]
                    .reset_coords(drop=True),
                ),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def materials_required_for_new_res_elec_mt():
    """
    Real Name: materials required for new RES elec Mt
    Original Eqn: RES elec capacity under construction TW[RES elec]*materials for new RES elec per capacity installed[RES elec,materials]*M per T/kg per Mt
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Annual materials required for the installation of new capacity of RES for
        electricity by technology.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * materials_for_new_res_elec_per_capacity_installed()
        * m_per_t()
        / kg_per_mt()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def fei_over_lifetime_res_elec_var():
    """
    Real Name: FEI over lifetime RES elec var
    Original Eqn: (CEDtot new cap RES elec var[RES elec]*(1+share energy requirements for decom RES elec[RES elec]+Grid correction factor RES elec [RES elec])+"CED O&M over lifetime RES elec var"[RES elec])*"g=quality of electricity"+output elec over lifetime RES elec[RES elec]*"self-electricity consumption RES elec"[RES elec]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Final energy invested over lifetime per RES elec variable technology
        (equivalent to the denominator of the EROI (=CED*g, with total cumulative
        energy demand (including installation of new capacity and O&M) for RES
        variables per technology over the lifetime of the infrastructure.
    """
    return (
        cedtot_new_cap_res_elec_var()
        * (
            1
            + share_energy_requirements_for_decom_res_elec()
            + grid_correction_factor_res_elec()
        )
        + ced_om_over_lifetime_res_elec_var()
    ) * gquality_of_electricity() + output_elec_over_lifetime_res_elec() * selfelectricity_consumption_res_elec()


@cache.step
@subs(["RES elec"], _subscript_dict)
def ced_decom_res_elec_capacity():
    """
    Real Name: CED decom RES elec capacity
    Original Eqn: ZIDZ( share energy requirements for decom RES elec[RES elec]*CEDtot new cap RES elec var[RES elec]*wear RES elec[RES elec], RES elec capacity under construction TW[RES elec])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Cumulative energy demand (CED) required to decommission RES electricity
        generation plants which have ended their lifetime.
    """
    return zidz(
        share_energy_requirements_for_decom_res_elec()
        * cedtot_new_cap_res_elec_var()
        * wear_res_elec(),
        res_elec_capacity_under_construction_tw(),
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def ced_om_per_material_res_elec_var():
    """
    Real Name: "CED O&M per material RES elec var"
    Original Eqn: "materials required for O&M RES elec Mt"[RES elec,materials]*Energy cons per unit of material cons for RES elec[materials]*kg per Mt/MJ per EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Cumulative energy demand per material of new installed capacity of RES
        variables per technology.
    """
    return (
        materials_required_for_om_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def cedtot_new_cap_res_elec_var():
    """
    Real Name: CEDtot new cap RES elec var
    Original Eqn: SUM(CED new cap per material RES elec var[RES elec,materials!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Cumulative energy demand of new capacity for RES variables per technology.
    """
    return sum(ced_new_cap_per_material_res_elec_var(), dim=("materials",))


@cache.step
@subs(["RES elec"], _subscript_dict)
def cedtot_om_res_elec_var():
    """
    Real Name: "CEDtot O&M RES elec var"
    Original Eqn: SUM("CED O&M per material RES elec var"[RES elec,materials!])+"Total energy requirements O&M for water consumption RES elec"[RES elec]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Cumulative energy demand of O&M for RES variables per technology.
    """
    return (
        sum(ced_om_per_material_res_elec_var(), dim=("materials",))
        + total_energy_requirements_om_for_water_consumption_res_elec()
    )


@cache.step
@to_float
def b_lineal_regr():
    """
    Real Name: b lineal regr
    Original Eqn: ESOI PHS depleted potential-a lineal regr*max capacity potential PHS
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        esoi_phs_depleted_potential() - a_lineal_regr() * max_capacity_potential_phs()
    )


@cache.step
@to_float
def a_lineal_regr():
    """
    Real Name: a lineal regr
    Original Eqn: (ESOI PHS full potential-ESOI PHS depleted potential)/(0-max capacity potential PHS)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (esoi_phs_full_potential() - esoi_phs_depleted_potential()) / (
        0 - max_capacity_potential_phs()
    )


@cache.run
@to_float
def esoi_phs_depleted_potential():
    """
    Real Name: ESOI PHS depleted potential
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G54')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    ESOI PHS of the depleted potential of the resource. We assume the ESOI of
        PHS linearly decreases with the PHS cumulated installed capacity.
    """
    return _ext_constant_esoi_phs_depleted_potential()


@cache.step
@to_float
def total_demand():
    """
    Real Name: total demand
    Original Eqn: SUM(Demand by sector FD EU[sectors!])/1e+06
    Units: Tdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Total final demand
    """
    return sum(demand_by_sector_fd_eu(), dim=("sectors",)) / 1e06


@cache.run
@subs(["sectors"], _subscript_dict)
def initial_demand_by_sectot():
    """
    Real Name: initial demand by sectot
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Economy', 'B341')
    Units: Mdollars
    Limits: (None, None)
    Type: constant
    Subs: ['sectors']


    """
    return _ext_constant_initial_demand_by_sectot()


@cache.step
@to_float
def demand_not_covered_total_fd():
    """
    Real Name: demand not covered total FD
    Original Eqn: SUM(demand not covered by sector FD EU[sectors!])
    Units: Mdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return sum(demand_not_covered_by_sector_fd_eu(), dim=("sectors",))


@cache.step
@to_float
def tped_by_fuel():
    """
    Real Name: TPED by fuel
    Original Eqn: extraction uranium EJ EU+"PE supply RES non-Elec EJ"+PE Elec generation from RES EJ+PED total oil EJ +PED coal EJ+"PED nat. gas EJ"+PES waste EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy demand by fuel.
    """
    return (
        extraction_uranium_ej_eu()
        + pe_supply_res_nonelec_ej()
        + pe_elec_generation_from_res_ej()
        + ped_total_oil_ej()
        + ped_coal_ej()
        + ped_nat_gas_ej()
        + pes_waste_ej()
    )


@cache.step
@to_float
def abundance_tpe():
    """
    Real Name: abundance TPE
    Original Eqn: IF THEN ELSE(TPES EJ>TPED by fuel, 1, 1-((TPED by fuel-TPES EJ)/TPED by fuel))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        tpes_ej() > tped_by_fuel(),
        lambda: 1,
        lambda: 1 - ((tped_by_fuel() - tpes_ej()) / tped_by_fuel()),
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def pes_res_for_heatcom_by_techn():
    """
    Real Name: "PES RES for heat-com by techn"
    Original Eqn: "FE real generation RES heat-com EJ"[RES heat]/Efficiency RES heat[RES heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Primary energy supply of RES technologies for commercial heat.
    """
    return fe_real_generation_res_heatcom_ej() / efficiency_res_heat()


@cache.step
@subs(["RES heat"], _subscript_dict)
def p_res_for_heat():
    """
    Real Name: P RES for heat
    Original Eqn:
      P solar for heat
      P geothermal for heat
      P solid bioE for heat
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Annual growth in RES supply for heat depending on the policy of the
        scenario.
    """
    return xrmerge(
        [
            rearrange(p_solar_for_heat(), ["RES heat"], {"RES heat": ["solar heat"]}),
            rearrange(
                p_geothermal_for_heat(), ["RES heat"], {"RES heat": ["geot heat"]}
            ),
            rearrange(
                p_solid_bioe_for_heat(), ["RES heat"], {"RES heat": ["solid bioE heat"]}
            ),
        ]
    )


@cache.step
@subs(["RES heat"], _subscript_dict)
def fe_real_generation_res_heatcom_ej():
    """
    Real Name: "FE real generation RES heat-com EJ"
    Original Eqn: "potential FES RES for heat-com EJ"[RES heat]*(1-"RES heat-com tot overcapacity")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Commercial heat generation by RES technology.
    """
    return potential_fes_res_for_heatcom_ej() * (1 - res_heatcom_tot_overcapacity())


@cache.step
@to_float
def potential_fes_tot_res_for_heatcom_ej():
    """
    Real Name: "potential FES tot RES for heat-com EJ"
    Original Eqn: SUM("potential FES RES for heat-com EJ"[RES heat!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential total final energy supply renewables for commercial heat given
        the installed capacity.
    """
    return sum(potential_fes_res_for_heatcom_ej(), dim=("RES heat",))


@cache.step
@to_float
def available_max_fe_solid_bioe_for_elec_ej():
    """
    Real Name: available max FE solid bioE for elec EJ
    Original Eqn: available max PE solid bioE for elec EJ*efficiency conversion bioE to Elec
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum available (final energy) solid bioenergy for electricity.
    """
    return (
        available_max_pe_solid_bioe_for_elec_ej() * efficiency_conversion_bioe_to_elec()
    )


@cache.step
@to_float
def max_bioe_twe():
    """
    Real Name: max BioE TWe
    Original Eqn: available max FE solid bioE for elec EJ*TWe per TWh/EJ per TWh
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Techno-ecological potential of biomass&waste. This potential is dynamic
        and dependant on the potential assigned for bioenergy residues.
    """
    return available_max_fe_solid_bioe_for_elec_ej() * twe_per_twh() / ej_per_twh()


@cache.step
@to_float
def potential_fes_heatcom_nuclear_chp_plants_ej():
    """
    Real Name: "Potential FES Heat-com nuclear CHP plants EJ"
    Original Eqn: FE nuclear Elec generation TWh*share of heat production in CHP plants vs total nucelar elec generation
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential commercial heat to be produced in cogeration nuclear plants.
    """
    return (
        fe_nuclear_elec_generation_twh()
        * share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation()
    )


@cache.run
@to_float
def share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation():
    """
    Real Name: share of heat production in CHP plants vs total nucelar elec generation
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G60')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of heat production in CHP plants vs total nucelar elec generation.
    """
    return (
        _ext_constant_share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation()
    )


@cache.step
@to_float
def pes_waste_for_elec_plants():
    """
    Real Name: PES waste for elec plants
    Original Eqn: PES waste EJ*share PES waste for elec plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of heat in Heat plants from waste.
    """
    return pes_waste_ej() * share_pes_waste_for_elec_plants()


@cache.step
@to_float
def losses_chp_biogas():
    """
    Real Name: Losses CHP biogas
    Original Eqn: PES biogas for CHP-"FES heat-com from biogas in CHP plants"-FES elec from biogas in CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Losses in biogas CHP plants.
    """
    return (
        pes_biogas_for_chp()
        - fes_heatcom_from_biogas_in_chp_plants()
        - fes_elec_from_biogas_in_chp_plants()
    )


@cache.step
@to_float
def losses_chp_waste():
    """
    Real Name: Losses CHP waste
    Original Eqn: PES waste for CHP plants-FES elec from waste in CHP plants-"FES heat-com from waste in CHP plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Losses in waste CHP plants.
    """
    return (
        pes_waste_for_chp_plants()
        - fes_elec_from_waste_in_chp_plants()
        - fes_heatcom_from_waste_in_chp_plants()
    )


@cache.step
@to_float
def share_pes_biogas_for_heat():
    """
    Real Name: share PES biogas for heat
    Original Eqn: "PES tot biogas for heat-com"/PES Biogas EJ
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_tot_biogas_for_heatcom() / pes_biogas_ej()


@cache.step
@to_float
def pe_losses_res_for_elec():
    """
    Real Name: PE losses RES for elec
    Original Eqn: PE losses BioE for Elec EJ+PE losses biogas for elec+PE losses waste for elec
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        pe_losses_bioe_for_elec_ej()
        + pe_losses_biogas_for_elec()
        + pe_losses_waste_for_elec()
    )


@cache.step
@to_float
def pes_tot_waste_for_elec():
    """
    Real Name: PES tot waste for elec
    Original Eqn: PES waste for elec plants+FES elec from waste in CHP plants+Losses CHP waste*share efficiency waste for elec in CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy supply for generating electricity from biogas
        (including CHP plants).
    """
    return (
        pes_waste_for_elec_plants()
        + fes_elec_from_waste_in_chp_plants()
        + losses_chp_waste() * share_efficiency_waste_for_elec_in_chp_plants()
    )


@cache.step
@to_float
def pes_tot_waste_for_heatcom():
    """
    Real Name: "PES tot waste for heat-com"
    Original Eqn: "PES waste for heat-com plants"+"FES heat-com from waste in CHP plants"+Losses CHP waste*(1-share efficiency waste for elec in CHP plants )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy supply for generating commercial heat from waste
        (including CHP plants).
    """
    return (
        pes_waste_for_heatcom_plants()
        + fes_heatcom_from_waste_in_chp_plants()
        + losses_chp_waste() * (1 - share_efficiency_waste_for_elec_in_chp_plants())
    )


@cache.step
@to_float
def abundance_res_heatcom2():
    """
    Real Name: "abundance RES heat-com2"
    Original Eqn: SQRT ("abundance RES heat-com")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Adaptation of the parameter abundance for better behaviour of the model.
    """
    return np.sqrt(abundance_res_heatcom())


@cache.step
@to_float
def max_pe_potential_biogas_for_heat():
    """
    Real Name: max PE potential biogas for heat
    Original Eqn: max PE biogas EJ*share PES biogas for heat
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy potential of biogas for heat taking into account the
        current share.
    """
    return max_pe_biogas_ej() * share_pes_biogas_for_heat()


@cache.step
@to_float
def share_efficiency_biogas_for_elec_in_chp_plants():
    """
    Real Name: share efficiency biogas for elec in CHP plants
    Original Eqn: efficiency biogas for elec CHP plants/(efficiency biogas for elec CHP plants+efficiency biogas for heat CHP plants)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return efficiency_biogas_for_elec_chp_plants() / (
        efficiency_biogas_for_elec_chp_plants()
        + efficiency_biogas_for_heat_chp_plants()
    )


@cache.step
@to_float
def share_efficiency_waste_for_elec_in_chp_plants():
    """
    Real Name: share efficiency waste for elec in CHP plants
    Original Eqn: efficiency waste for elec CHP plants/(efficiency waste for elec CHP plants+efficiency waste for heat CHP plants)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return efficiency_waste_for_elec_chp_plants() / (
        efficiency_waste_for_elec_chp_plants() + efficiency_waste_for_heat_chp_plants()
    )


@cache.step
@to_float
def max_potential_pe_nonelectric_res():
    """
    Real Name: "Max potential PE non-electric RES"
    Original Eqn: max PE potential tot RES heat EJ+Max PEavail biofuels potential
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Techno-ecological sustainable potential (primary energy) of non-electric
        RES.
    """
    return max_pe_potential_tot_res_heat_ej() + max_peavail_biofuels_potential()


@cache.step
@to_float
def pes_tot_biogas_for_elec():
    """
    Real Name: PES tot biogas for elec
    Original Eqn: PES biogas for elec plants+FES elec from biogas in CHP plants+Losses CHP biogas*share efficiency biogas for elec in CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy supply for generating electricity from biogas
        (including CHP plants).
    """
    return (
        pes_biogas_for_elec_plants()
        + fes_elec_from_biogas_in_chp_plants()
        + losses_chp_biogas() * share_efficiency_biogas_for_elec_in_chp_plants()
    )


@cache.step
@to_float
def pes_tot_biogas_for_heatcom():
    """
    Real Name: "PES tot biogas for heat-com"
    Original Eqn: "PES biogas for heat-com plants"+"FES heat-com from biogas in CHP plants"+Losses CHP biogas*(1-share efficiency biogas for elec in CHP plants)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy supply for generating commercial heat from biogas
        (including CHP plants).
    """
    return (
        pes_biogas_for_heatcom_plants()
        + fes_heatcom_from_biogas_in_chp_plants()
        + losses_chp_biogas() * (1 - share_efficiency_biogas_for_elec_in_chp_plants())
    )


@cache.step
@to_float
def pe_losses_nre_elec_generation():
    """
    Real Name: PE losses NRE elec generation
    Original Eqn: PE losses coal for Elec EJ+PE losses conv gas for Elec EJ+PE losses oil for Elec EJ+PE losses uncon gas for Elec EJ+PE losses uranium for Elec EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Losses for electricity generation from non-renewable energy resources.
    """
    return (
        pe_losses_coal_for_elec_ej()
        + pe_losses_conv_gas_for_elec_ej()
        + pe_losses_oil_for_elec_ej()
        + pe_losses_uncon_gas_for_elec_ej()
        + pe_losses_uranium_for_elec_ej()
    )


@cache.step
@to_float
def elec_gen_related_losses_ej():
    """
    Real Name: Elec gen related losses EJ
    Original Eqn: PE losses NRE elec generation+PE losses RES for elec
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation losses (EJ).
    """
    return pe_losses_nre_elec_generation() + pe_losses_res_for_elec()


@cache.step
@to_float
def pe_losses_biogas_for_elec():
    """
    Real Name: PE losses biogas for elec
    Original Eqn: PES tot biogas for elec-FES elec from biogas EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_tot_biogas_for_elec() - fes_elec_from_biogas_ej()


@cache.step
@to_float
def pe_losses_waste_for_elec():
    """
    Real Name: PE losses waste for elec
    Original Eqn: PES tot waste for elec-FES elec from waste EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_tot_waste_for_elec() - fes_elec_from_waste_ej()


@cache.step
@to_float
def share_pes_biogas_for_elec():
    """
    Real Name: share PES biogas for elec
    Original Eqn: PES tot biogas for elec/PES Biogas EJ
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return pes_tot_biogas_for_elec() / pes_biogas_ej()


@cache.run
@to_float
def p_hydro_growth():
    """
    Real Name: P hydro growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C32')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_hydro_growth()


@cache.step
@to_float
def fe_real_tot_generation_res_elec_twh():
    """
    Real Name: FE real tot generation RES elec TWh
    Original Eqn: MIN(MAX(Total FE Elec demand after priorities TWh, 0), potential tot generation RES elec TWh)
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.minimum(
        np.maximum(total_fe_elec_demand_after_priorities_twh(), 0),
        potential_tot_generation_res_elec_twh(),
    )


@cache.run
@to_float
def p_solar_pv_growth():
    """
    Real Name: P solar PV growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C38')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solar_pv_growth()


@cache.step
@subs(["RES heat"], _subscript_dict)
def remaining_potential_constraint_on_new_res_heat_capacity():
    """
    Real Name: remaining potential constraint on new RES heat capacity
    Original Eqn: IF THEN ELSE(remaining potential RES for heat[RES heat]>threshold remaining potential new capacity ,1,remaining potential RES for heat[RES heat]*(1/threshold remaining potential new capacity))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Constraint of remaining potential on new RES elec capacity.        Another alternative: SQRT(remaining potential RES elec after intermitt[RES
        elec])
    """
    return if_then_else(
        remaining_potential_res_for_heat()
        > threshold_remaining_potential_new_capacity(),
        lambda: 1,
        lambda: remaining_potential_res_for_heat()
        * (1 / threshold_remaining_potential_new_capacity()),
    )


@cache.step
@to_float
def total_fe_elec_generation_twh_eu():
    """
    Real Name: Total FE Elec generation TWh EU
    Original Eqn: FE Elec generation from NRE TWh+FE tot generation all RES elec TWh+FES elec from waste TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy electricity generation (fossil fuels, nuclear, waste &
        renewables) (TWh).
    """
    return (
        fe_elec_generation_from_nre_twh()
        + fe_tot_generation_all_res_elec_twh()
        + fes_elec_from_waste_twh()
    )


@cache.step
@to_float
def fe_tot_generation_all_res_elec_twh():
    """
    Real Name: FE tot generation all RES elec TWh
    Original Eqn: FE real tot generation RES elec TWh+FES elec from RES with priority TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation from all RES technologies.
    """
    return fe_real_tot_generation_res_elec_twh() + fes_elec_from_res_with_priority_twh()


@cache.run
@to_float
def p_oceanic_growth():
    """
    Real Name: P oceanic growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C35')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_oceanic_growth()


@cache.step
@to_float
def pe_elec_generation_from_res_ej():
    """
    Real Name: PE Elec generation from RES EJ
    Original Eqn: PE bioE for Elec generation EJ+"PE geot-elec for Elec generation EJ"+PE hydro for Elec generation EJ +PE oceanic for Elec generation EJ+PE solar PV for Elec generation EJ+PE CSP for Elec generation EJ +PE onshore wind for Elec generation EJ+PE offshore wind for Elec generation EJ+PES tot biogas for elec
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy from RES electricity generation. For all sources excepting
        "Bio" the factor "RES to fossil accounting" is applied for the equivalent
        primary energy.
    """
    return (
        pe_bioe_for_elec_generation_ej()
        + pe_geotelec_for_elec_generation_ej()
        + pe_hydro_for_elec_generation_ej()
        + pe_oceanic_for_elec_generation_ej()
        + pe_solar_pv_for_elec_generation_ej()
        + pe_csp_for_elec_generation_ej()
        + pe_onshore_wind_for_elec_generation_ej()
        + pe_offshore_wind_for_elec_generation_ej()
        + pes_tot_biogas_for_elec()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def p_res_elec_growth():
    """
    Real Name: P RES elec growth
    Original Eqn:
      P hydro growth
        .
        .
        .
      P CSP growth
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    For hydro, geot-elec and solid bioenergy this variable represents the
        projected annual growth in relation to past growth trends, for the rest of
        RES elec (oceanic, wind & solar), it represents the annual growth in
        relation to the existing installed capacity.
    """
    return xrmerge(
        [
            rearrange(p_hydro_growth(), ["RES elec"], {"RES elec": ["hydro"]}),
            rearrange(p_geot_growth(), ["RES elec"], {"RES elec": ["geot elec"]}),
            rearrange(
                p_solid_bioeelec_growth(),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(p_oceanic_growth(), ["RES elec"], {"RES elec": ["oceanic"]}),
            rearrange(
                p_wind_onshore_growth(), ["RES elec"], {"RES elec": ["wind onshore"]}
            ),
            rearrange(
                p_wind_offshore_growth(), ["RES elec"], {"RES elec": ["wind offshore"]}
            ),
            rearrange(p_solar_pv_growth(), ["RES elec"], {"RES elec": ["solar PV"]}),
            rearrange(p_csp_growth(), ["RES elec"], {"RES elec": ["CSP"]}),
        ]
    )


@cache.step
@to_float
def share_res_electricity_generation():
    """
    Real Name: share RES electricity generation
    Original Eqn: FE tot generation all RES elec TWh/Total FE Elec generation TWh EU
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of RES in the electricity generation.
    """
    return fe_tot_generation_all_res_elec_twh() / total_fe_elec_generation_twh_eu()


@cache.run
@to_float
def p_solid_bioeelec_growth():
    """
    Real Name: "P solid bioE-elec growth"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C34')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solid_bioeelec_growth()


@cache.run
@to_float
def p_csp_growth():
    """
    Real Name: P CSP growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F38')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_csp_growth()


@cache.step
@to_float
def remaining_potential_tot_res_elec():
    """
    Real Name: remaining potential tot RES elec
    Original Eqn: IF THEN ELSE(max potential tot RES elec TWh > FE tot generation all RES elec TWh, (max potential tot RES elec TWh-FE tot generation all RES elec TWh)/max potential tot RES elec TWh, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as a fraction of unity.
    """
    return if_then_else(
        max_potential_tot_res_elec_twh() > fe_tot_generation_all_res_elec_twh(),
        lambda: (
            max_potential_tot_res_elec_twh() - fe_tot_generation_all_res_elec_twh()
        )
        / max_potential_tot_res_elec_twh(),
        lambda: 0,
    )


@cache.run
@to_float
def p_wind_offshore_growth():
    """
    Real Name: P wind offshore growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C37')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_wind_offshore_growth()


@cache.run
@to_float
def p_wind_onshore_growth():
    """
    Real Name: P wind onshore growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C36')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_wind_onshore_growth()


@cache.step
@to_float
def elec_generation_dispatch_from_res_twh():
    """
    Real Name: Elec generation dispatch from RES TWh
    Original Eqn: FE Elec generation from bioE TWh+"FE Elec generation from geot-elec TWh"+FE Elec generation from hydro TWh +FE Elec generation from oceanic TWh+FES elec from biogas TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Base-load electricity generation from RES.
    """
    return (
        fe_elec_generation_from_bioe_twh()
        + fe_elec_generation_from_geotelec_twh()
        + fe_elec_generation_from_hydro_twh()
        + fe_elec_generation_from_oceanic_twh()
        + fes_elec_from_biogas_twh()
    )


@cache.step
@to_float
def fes_elec_from_res_with_priority_twh():
    """
    Real Name: FES elec from RES with priority TWh
    Original Eqn: FES elec from biogas TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return fes_elec_from_biogas_twh()


@cache.step
@to_float
def abundance_res_elec():
    """
    Real Name: abundance RES elec
    Original Eqn: IF THEN ELSE(Total FE Elec demand after priorities TWh=0,0, IF THEN ELSE(Total FE Elec demand after priorities TWh > FE real tot generation RES elec TWh, (Total FE Elec demand after priorities TWh-FE real tot generation RES elec TWh)/Total FE Elec demand after priorities TWh, 0))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). The closest to 1 indicates
        that electricity generation from RES is far to cover to whole electricity
        demand, if "abundance RES elec"=0 it means that RES elec cover the whole
        electricity demand.
    """
    return if_then_else(
        total_fe_elec_demand_after_priorities_twh() == 0,
        lambda: 0,
        lambda: if_then_else(
            total_fe_elec_demand_after_priorities_twh()
            > fe_real_tot_generation_res_elec_twh(),
            lambda: (
                total_fe_elec_demand_after_priorities_twh()
                - fe_real_tot_generation_res_elec_twh()
            )
            / total_fe_elec_demand_after_priorities_twh(),
            lambda: 0,
        ),
    )


@cache.step
@to_float
def fes_elec_from_biow():
    """
    Real Name: FES elec from BioW
    Original Eqn: real generation RES elec TWh[solid bioE elec]+FES elec from biogas TWh+FES elec from waste TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation of total bioenergy and waste (to compare with more
        common statistics).
    """
    return (
        real_generation_res_elec_twh().loc["solid bioE elec"].reset_coords(drop=True)
        + fes_elec_from_biogas_twh()
        + fes_elec_from_waste_twh()
    )


@cache.run
@to_float
def p_geot_growth():
    """
    Real Name: P geot growth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C33')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_geot_growth()


@cache.run
@to_float
def p_solid_bioe_for_heat():
    """
    Real Name: P solid bioE for heat
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C62')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solid_bioe_for_heat()


@cache.step
@subs(["RES elec"], _subscript_dict)
def pe_real_generation_res_elec():
    """
    Real Name: PE real generation RES elec
    Original Eqn:
      real generation RES elec TWh[hydro]*EJ per TWh*RES to fossil accounting
        .
        .
        .
      real generation RES elec TWh[CSP]*EJ per TWh*RES to fossil accounting
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Primary energy supply of electricity production of RES.
    """
    return xrmerge(
        [
            rearrange(
                real_generation_res_elec_twh().loc["hydro"].reset_coords(drop=True)
                * ej_per_twh()
                * res_to_fossil_accounting(),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                real_generation_res_elec_twh().loc["geot elec"].reset_coords(drop=True)
                * ej_per_twh()
                * res_to_fossil_accounting(),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                (
                    real_generation_res_elec_twh()
                    .loc["solid bioE elec"]
                    .reset_coords(drop=True)
                    / efficiency_conversion_bioe_to_elec()
                )
                * ej_per_twh(),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                real_generation_res_elec_twh().loc["oceanic"].reset_coords(drop=True)
                * ej_per_twh()
                * res_to_fossil_accounting(),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                real_generation_res_elec_twh()
                .loc["wind onshore"]
                .reset_coords(drop=True)
                * ej_per_twh()
                * res_to_fossil_accounting(),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                real_generation_res_elec_twh()
                .loc["wind offshore"]
                .reset_coords(drop=True)
                * ej_per_twh()
                * res_to_fossil_accounting(),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                real_generation_res_elec_twh().loc["solar PV"].reset_coords(drop=True)
                * ej_per_twh()
                * res_to_fossil_accounting(),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                real_generation_res_elec_twh().loc["CSP"].reset_coords(drop=True)
                * ej_per_twh()
                * res_to_fossil_accounting(),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.step
@to_float
def fed_heatcom_by_nre_chp_plants_ej():
    """
    Real Name: "FED heat-com by NRE CHP plants EJ"
    Original Eqn: "Share heat-com CHP plants NRE vs NRE tot heat-com generation"*"FED Heat-com NRE EJ"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of commercial heat in CHP plants without RES.
    """
    return (
        share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation()
        * fed_heatcom_nre_ej()
    )


@cache.step
@to_float
def share_oil_dem_for_heatcom():
    """
    Real Name: "share oil dem for Heat-com"
    Original Eqn: IF THEN ELSE(PED total oil EJ>0, PED oil for Heat plants EJ/PED total oil EJ,0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of oil demand for commercial Heat plants in relation to the total
        demand of oil.
    """
    return if_then_else(
        ped_total_oil_ej() > 0,
        lambda: ped_oil_for_heat_plants_ej() / ped_total_oil_ej(),
        lambda: 0,
    )


@cache.step
@to_float
def total_fe_heat_generation_ej():
    """
    Real Name: Total FE Heat generation EJ
    Original Eqn: FES RES for heat EJ+"FES heat-com from waste EJ"+FES NRE for heat
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total final heat generation (fossil fuels, nuclear, waste & renewables)
        (EJ).
    """
    return fes_res_for_heat_ej() + fes_heatcom_from_waste_ej() + fes_nre_for_heat()


@cache.step
@to_float
def share_coal_dem_for_elec():
    """
    Real Name: share coal dem for Elec
    Original Eqn: IF THEN ELSE(PED coal EJ>0, PE demand coal Elec plants EJ/PED coal EJ, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of coal demand to cover electricity consumption in Elec plants.
    """
    return if_then_else(
        ped_coal_ej() > 0,
        lambda: pe_demand_coal_elec_plants_ej() / ped_coal_ej(),
        lambda: 0,
    )


@cache.step
@to_float
def share_oil_dem_for_elec():
    """
    Real Name: share oil dem for Elec
    Original Eqn: IF THEN ELSE(PED total oil EJ>0, PE demand oil Elec plants EJ/PED total oil EJ, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of oil demand to cover electricity consumption.
    """
    return if_then_else(
        ped_total_oil_ej() > 0,
        lambda: pe_demand_oil_elec_plants_ej() / ped_total_oil_ej(),
        lambda: 0,
    )


@cache.step
@to_float
def share_coal_dem_for_heatcom():
    """
    Real Name: "share coal dem for Heat-com"
    Original Eqn: IF THEN ELSE(PED coal EJ>0, PED coal for Heat plants EJ/PED coal EJ, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of coal demand to cover commercial heat consumption in Heat plants.
    """
    return if_then_else(
        ped_coal_ej() > 0,
        lambda: ped_coal_for_heat_plants_ej() / ped_coal_ej(),
        lambda: 0,
    )


@cache.step
@to_float
def share_res_heat_generation():
    """
    Real Name: share RES heat generation
    Original Eqn: FES RES for heat EJ/Total FE Heat generation EJ
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of RES in the total heat generation.
    """
    return fes_res_for_heat_ej() / total_fe_heat_generation_ej()


@cache.step
@to_float
def share_nat_gas_dem_for_elec():
    """
    Real Name: "share nat. gas dem for Elec"
    Original Eqn: IF THEN ELSE("PED nat. gas EJ">0, PE demand gas Elec plants EJ/"PED nat. gas EJ", 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of natural gas demand to cover electricity consumption.
    """
    return if_then_else(
        ped_nat_gas_ej() > 0,
        lambda: pe_demand_gas_elec_plants_ej() / ped_nat_gas_ej(),
        lambda: 0,
    )


@cache.step
@to_float
def share_nat_gas_dem_for_heatcom():
    """
    Real Name: "share nat. gas dem for Heat-com"
    Original Eqn: IF THEN ELSE("PED nat. gas EJ">0, PED gases for Heat plants EJ/"PED nat. gas EJ", 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of natural gas demand for commercial Heat plants in relation to the
        demand of natural fossil gas.
    """
    return if_then_else(
        ped_nat_gas_ej() > 0,
        lambda: ped_gases_for_heat_plants_ej() / ped_nat_gas_ej(),
        lambda: 0,
    )


@cache.step
@to_float
def year_scarcity_heat():
    """
    Real Name: Year scarcity Heat
    Original Eqn: IF THEN ELSE(Abundance heat>0.95, 0, Time)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_heat() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def fes_heatcom_from_biogas_in_chp_plants():
    """
    Real Name: "FES heat-com from biogas in CHP plants"
    Original Eqn: PES biogas for CHP*efficiency biogas for heat CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of commercial heat in CHP plants from biogas.
    """
    return pes_biogas_for_chp() * efficiency_biogas_for_heat_chp_plants()


@cache.run
@to_float
def efficiency_biogas_for_heat_plants():
    """
    Real Name: efficiency biogas for heat plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G83')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of biogas in heat plants.
    """
    return _ext_constant_efficiency_biogas_for_heat_plants()


@cache.step
@to_float
def fes_elec_from_biogas_in_chp_plants():
    """
    Real Name: FES elec from biogas in CHP plants
    Original Eqn: PES biogas for CHP*efficiency biogas for elec CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of elec in CHP plants from biogas.
    """
    return pes_biogas_for_chp() * efficiency_biogas_for_elec_chp_plants()


@cache.step
@to_float
def fes_elec_from_biogas_ej():
    """
    Real Name: FES elec from biogas EJ
    Original Eqn: FES elec from biogas in CHP plants+FES elec from biogas in elec plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    TFES electricity from biogas.
    """
    return fes_elec_from_biogas_in_chp_plants() + fes_elec_from_biogas_in_elec_plants()


@cache.step
@to_float
def pes_biogas_for_heatcom_plants():
    """
    Real Name: "PES biogas for heat-com plants"
    Original Eqn: PES Biogas EJ*"share PES biogas for heat-com plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of heat in commercial Heat plants from biogas.
    """
    return pes_biogas_ej() * share_pes_biogas_for_heatcom_plants()


@cache.step
@to_float
def fes_elec_from_biogas_in_elec_plants():
    """
    Real Name: FES elec from biogas in elec plants
    Original Eqn: PES biogas for elec plants*efficiency biogas for elec plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of electricity in Elec plants from biogas.
    """
    return pes_biogas_for_elec_plants() * efficiency_biogas_for_elec_plants()


@cache.run
@to_float
def efficiency_biogas_for_elec_plants():
    """
    Real Name: efficiency biogas for elec plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G84')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of biogas in elec plants.
    """
    return _ext_constant_efficiency_biogas_for_elec_plants()


@cache.step
@to_float
def fes_biogas_for_heatcom_plants():
    """
    Real Name: "FES biogas for heat-com plants"
    Original Eqn: "PES biogas for heat-com plants"*efficiency biogas for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of commercial heat in Heat plants from biogas.
    """
    return pes_biogas_for_heatcom_plants() * efficiency_biogas_for_heat_plants()


@cache.step
@to_float
def pes_biogas_for_elec_plants():
    """
    Real Name: PES biogas for elec plants
    Original Eqn: PES Biogas EJ*share PES biogas for elec plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of heat in Heat plants from biogas.
    """
    return pes_biogas_ej() * share_pes_biogas_for_elec_plants()


@cache.run
@to_float
def share_pes_biogas_tfc():
    """
    Real Name: share PES biogas TFC
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G82')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES biogas for total final consumption.
    """
    return _ext_constant_share_pes_biogas_tfc()


@cache.step
@to_float
def potential_pes_biogas_for_tfc():
    """
    Real Name: Potential PES biogas for TFC
    Original Eqn: PES Biogas EJ*share PES biogas TFC
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential primary energy supply biogas for total final consumption.
    """
    return pes_biogas_ej() * share_pes_biogas_tfc()


@cache.step
@to_float
def fes_elec_from_biogas_twh():
    """
    Real Name: FES elec from biogas TWh
    Original Eqn: FES elec from biogas EJ/EJ per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    TFES electricity from biogas.
    """
    return fes_elec_from_biogas_ej() / ej_per_twh()


@cache.step
@to_float
def pes_biogas_for_chp():
    """
    Real Name: PES biogas for CHP
    Original Eqn: PES Biogas EJ*share PES biogas for CHP
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply biogas for CHP plants.
    """
    return pes_biogas_ej() * share_pes_biogas_for_chp()


@cache.run
@to_float
def share_pes_biogas_for_heatcom_plants():
    """
    Real Name: "share PES biogas for heat-com plants"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G79')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES biogas for commercial heat plants.
    """
    return _ext_constant_share_pes_biogas_for_heatcom_plants()


@cache.run
@to_float
def efficiency_biogas_for_elec_chp_plants():
    """
    Real Name: efficiency biogas for elec CHP plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G86')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of biogas in elec in CHP plants.
    """
    return _ext_constant_efficiency_biogas_for_elec_chp_plants()


@cache.step
@to_float
def fes_heatcom_from_biogas_ej():
    """
    Real Name: "FES heat-com from biogas EJ"
    Original Eqn: "FES biogas for heat-com plants"+"FES heat-com from biogas in CHP plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    TFES commercial heat from biogas.
    """
    return fes_biogas_for_heatcom_plants() + fes_heatcom_from_biogas_in_chp_plants()


@cache.run
@to_float
def efficiency_biogas_for_heat_chp_plants():
    """
    Real Name: efficiency biogas for heat CHP plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G85')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of biogas in heat in CHP plants.
    """
    return _ext_constant_efficiency_biogas_for_heat_chp_plants()


@cache.run
@to_float
def share_pes_biogas_for_elec_plants():
    """
    Real Name: share PES biogas for elec plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G80')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES biogas for elec plants.
    """
    return _ext_constant_share_pes_biogas_for_elec_plants()


@cache.run
@to_float
def share_pes_biogas_for_chp():
    """
    Real Name: share PES biogas for CHP
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'G81')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES biogas for CHP plants.
    """
    return _ext_constant_share_pes_biogas_for_chp()


@cache.step
@to_float
def demand_elec_plants_fossil_fuels_twh():
    """
    Real Name: demand Elec plants fossil fuels TWh
    Original Eqn: MAX(Demand Elec NRE TWh-FE nuclear Elec generation TWh-FES Elec fossil fuel CHP plants TWh, 0)
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    The model assigns priority to RES, CHP plants and nuclear generation
        (depending on the selected nuclear scenario) among the electricity
        generation.
    """
    return np.maximum(
        demand_elec_nre_twh()
        - fe_nuclear_elec_generation_twh()
        - fes_elec_fossil_fuel_chp_plants_twh(),
        0,
    )


@cache.step
@to_float
def new_pes_biogas():
    """
    Real Name: new PES biogas
    Original Eqn: IF THEN ELSE(Time<2014, (Historic biogas PES(INTEGER(Time+1))-Historic biogas PES(INTEGER(Time))), ((max PE biogas EJ-PES Biogas EJ )/max PE biogas EJ)*adapt growth biogas*PES Biogas EJ)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New annual primary energy supply of biogas.
    """
    return if_then_else(
        time() < 2014,
        lambda: (
            historic_biogas_pes(int(time() + 1)) - historic_biogas_pes(int(time()))
        ),
        lambda: ((max_pe_biogas_ej() - pes_biogas_ej()) / max_pe_biogas_ej())
        * adapt_growth_biogas()
        * pes_biogas_ej(),
    )


@cache.step
@subs(["materials"], _subscript_dict)
def constrain_rr_improv_for_alt_techn_per_mineral():
    """
    Real Name: constrain rr improv for alt techn per mineral
    Original Eqn: IF THEN ELSE(recycling rates minerals alt techn[materials]<Max recycling rates minerals,1,0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Constraint recycling rate improvement for alternative technologies (RES
        elec & EV batteries) per material.
    """
    return if_then_else(
        recycling_rates_minerals_alt_techn() < max_recycling_rates_minerals(),
        lambda: 1,
        lambda: 0,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def constrain_rr_improv_for_rest_per_mineral():
    """
    Real Name: constrain rr improv for Rest per mineral
    Original Eqn: IF THEN ELSE(recycling rates minerals Rest[materials]<Max recycling rates minerals,1,0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Remaining recycling rate improvement for the rest of the economy per
        material.
    """
    return if_then_else(
        recycling_rates_minerals_rest() < max_recycling_rates_minerals(),
        lambda: 1,
        lambda: 0,
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def ced_om_over_lifetime_per_material_res_elec_var():
    """
    Real Name: "CED O&M over lifetime per material RES elec var"
    Original Eqn: RES elec capacity under construction TW[RES elec]*"materials for O&M per capacity installed RES elec"[RES elec,materials]*Energy cons per unit of material cons for RES elec[materials]*lifetime RES elec[RES elec]*(M per T/kg per Mt)*(kg per Mt/MJ per EJ)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Cumulative energy demand per material for O&M of RES variables per
        technology over all the lifetime of the infrastructure.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * materials_for_om_per_capacity_installed_res_elec()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * lifetime_res_elec()
        * (m_per_t() / kg_per_mt())
        * (kg_per_mt() / mj_per_ej())
    )


@cache.step
@subs(["materials"], _subscript_dict)
def energy_cons_per_unit_of_material_cons_for_res_elec():
    """
    Real Name: Energy cons per unit of material cons for RES elec
    Original Eqn: recycling rates minerals alt techn[materials]*"Initial energy cons per unit of material cons (recycled)"[materials]+(1-recycling rates minerals alt techn[materials])*"Initial energy cons per unit of material cons (virgin)"[materials]
    Units: MJ/kg
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Average energy consumption per unit of material consumption accounting for recycling
        rates for RES elec technologies.        recycling rates minerals RES elec[materials]*"Initial energy cons per unit
        of material cons (recycled)"[materials]+(1-recycling rates minerals RES
        elec[materials])*"Initial energy cons per unit of material cons
        (virgin)"[materials]
    """
    return (
        recycling_rates_minerals_alt_techn()
        * initial_energy_cons_per_unit_of_material_cons_recycled()
        + (1 - recycling_rates_minerals_alt_techn())
        * initial_energy_cons_per_unit_of_material_cons_virgin()
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def ced_new_cap_per_material_res_elec_var():
    """
    Real Name: CED new cap per material RES elec var
    Original Eqn: materials required for new RES elec Mt[RES elec,materials]*Energy cons per unit of material cons for RES elec[materials]*kg per Mt/MJ per EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Cumulative energy demand per material of new installed capacity of RES
        variables per technology.
    """
    return (
        materials_required_for_new_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def energy_required_for_material_consumption_for_new_res_elec():
    """
    Real Name: Energy required for material consumption for new RES elec
    Original Eqn: materials required for new RES elec Mt[RES elec,materials]*Energy cons per unit of material cons for RES elec[materials]*kg per Mt/MJ per EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Energy required for material consumption for new RES elec.
    """
    return (
        materials_required_for_new_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def energy_required_for_material_consumption_for_om_res_elec():
    """
    Real Name: "Energy required for material consumption for O&M RES elec"
    Original Eqn: "materials required for O&M RES elec Mt"[RES elec,materials]*Energy cons per unit of material cons for RES elec[materials]*kg per Mt/MJ per EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']


    """
    return (
        materials_required_for_om_res_elec_mt()
        * energy_cons_per_unit_of_material_cons_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def total_recycled_materials_for_res_elec_mt():
    """
    Real Name: Total recycled materials for RES elec Mt
    Original Eqn: Total materials required for RES elec Mt[materials]-Total materials to extract for RES elec Mt[materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total recycled materials for RES technologies for the generation of
        electricity.
    """
    return (
        total_materials_required_for_res_elec_mt()
        - total_materials_to_extract_for_res_elec_mt()
    )


@cache.run
@to_float
def p_common_rr_minerals_variation_rest():
    """
    Real Name: P common rr minerals variation Rest
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C307')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual recycling rate improvement per mineral for the rest of the economy.
    """
    return _ext_constant_p_common_rr_minerals_variation_rest()


@cache.step
@subs(["materials"], _subscript_dict)
def cum_materials_to_extract_for_res_elec_from_2015():
    """
    Real Name: cum materials to extract for RES elec from 2015
    Original Eqn: INTEG ( Total materials to extract for RES elec from 2015 Mt[materials], initial cumulated material requirements for RES elec 1995)
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Cumulative materials to be mined for the installation and O&M of RES for
        electricity generation.
    """
    return _integ_cum_materials_to_extract_for_res_elec_from_2015()


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_to_extract_for_res_elec_mt():
    """
    Real Name: Total materials to extract for RES elec Mt
    Original Eqn: Total materials required for RES elec Mt[materials]*(1-recycling rates minerals alt techn[materials])
    Units: Mt/Year
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials to be mined for the installation and O&M of RES for
        electricity generation.
    """
    return total_materials_required_for_res_elec_mt() * (
        1 - recycling_rates_minerals_alt_techn()
    )


@cache.step
@subs(["materials"], _subscript_dict)
def cum_materials_to_extract_for_res_elec():
    """
    Real Name: cum materials to extract for RES elec
    Original Eqn: INTEG ( Total materials to extract for RES elec Mt[materials], initial cumulated material requirements for RES elec 1995)
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Cumulative materials to be mined for the installation and O&M of RES for
        electricity generation.
    """
    return _integ_cum_materials_to_extract_for_res_elec()


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_to_extract_for_res_elec_from_2015_mt():
    """
    Real Name: Total materials to extract for RES elec from 2015 Mt
    Original Eqn: IF THEN ELSE(Time<2015,0,Total materials to extract for RES elec Mt[materials])
    Units: Mt/Year
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials to be mined for the installation and O&M of RES for
        electricity generation from 2015.
    """
    return if_then_else(
        time() < 2015, lambda: 0, lambda: total_materials_to_extract_for_res_elec_mt()
    )


@cache.run
@to_float
def max_recycling_rates_minerals():
    """
    Real Name: Max recycling rates minerals
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G56')
    Units: Dnml
    Limits: (None, None)
    Type: constant
    Subs: None

    Maximum assumed recycling rate per mineral.
    """
    return _ext_constant_max_recycling_rates_minerals()


@cache.run
@to_float
def p_common_rr_minerals_variation_alt_techn():
    """
    Real Name: P common rr minerals variation alt techn
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C308')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual recycling rate improvement per mineral for alternative technologies
        (RES elec & EV batteries).
    """
    return _ext_constant_p_common_rr_minerals_variation_alt_techn()


@cache.run
@subs(["materials"], _subscript_dict)
def current_recycling_rates_minerals():
    """
    Real Name: current recycling rates minerals
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'AR5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'AR62')
    Units: Mt
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Current recycling rates minerals of the whole economy (UNEP, 2011).
    """
    return _ext_constant_current_recycling_rates_minerals()


@cache.run
@subs(["materials"], _subscript_dict)
def historic_improvement_recycling_rates_minerals():
    """
    Real Name: Historic improvement recycling rates minerals
    Original Eqn: 0
    Units: percent
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Due to the large uncertainty and slow evolution of these data, historical
        recycling rates minerals correspond with the current estimates (UNEP,
        2011).
    """
    return xr.DataArray(
        0, {dim: _subscript_dict[dim] for dim in ["materials"]}, ["materials"]
    )


@cache.step
@subs(["materials"], _subscript_dict)
def initial_energy_cons_per_unit_of_material_cons_recycled():
    """
    Real Name: "Initial energy cons per unit of material cons (recycled)"
    Original Eqn: IF THEN ELSE("Initial energy cons per unit of material cons (recycled) - data"[materials]=0,"Initial energy cons per unit of material cons (virgin)"[materials], "Initial energy cons per unit of material cons (recycled) - data"[materials])
    Units: MJ/kg
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Energy consumption required to use recycled materials per unit of material
        consumption. When data for recycled materials was not available, the
        energy consumption for virgin materials was assumed.
    """
    return if_then_else(
        initial_energy_cons_per_unit_of_material_cons_recycled__data() == 0,
        lambda: initial_energy_cons_per_unit_of_material_cons_virgin(),
        lambda: initial_energy_cons_per_unit_of_material_cons_recycled__data(),
    )


@cache.step
@subs(["RES elec", "materials"], _subscript_dict)
def materials_required_for_om_res_elec_mt():
    """
    Real Name: "materials required for O&M RES elec Mt"
    Original Eqn: installed capacity RES elec TW[RES elec]*"materials for O&M per capacity installed RES elec"[RES elec,materials]*M per T/kg per Mt
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'materials']

    Annual materials required for the operation and maintenance of the
        capacity of RES for electricity in operation by technology.
    """
    return (
        installed_capacity_res_elec_tw()
        * materials_for_om_per_capacity_installed_res_elec()
        * m_per_t()
        / kg_per_mt()
    )


@cache.step
@to_float
def tpes_ej():
    """
    Real Name: TPES EJ
    Original Eqn: Total consumption NRE EJ+TPE from RES EJ+PES waste EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total Primary Energy Supply.
    """
    return total_consumption_nre_ej() + tpe_from_res_ej() + pes_waste_ej()


@cache.step
@to_float
def fes_heatcom_from_waste_ej():
    """
    Real Name: "FES heat-com from waste EJ"
    Original Eqn: "FES waste for heat-com plants"+"FES heat-com from waste in CHP plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    TFES commercial heat from waste.
    """
    return fes_waste_for_heatcom_plants() + fes_heatcom_from_waste_in_chp_plants()


@cache.step
@to_float
def fes_waste_for_heatcom_plants():
    """
    Real Name: "FES waste for heat-com plants"
    Original Eqn: "PES waste for heat-com plants"*efficiency waste for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of heat in commercial Heat plants from waste.
    """
    return pes_waste_for_heatcom_plants() * efficiency_waste_for_heat_plants()


@cache.step
@to_float
def fes_elec_from_waste_in_chp_plants():
    """
    Real Name: FES elec from waste in CHP plants
    Original Eqn: PES waste for CHP plants*efficiency waste for elec CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of elec in CHP plants from waste.
    """
    return pes_waste_for_chp_plants() * efficiency_waste_for_elec_chp_plants()


@cache.step
@to_float
def fes_elec_from_waste_in_elec_plants():
    """
    Real Name: FES elec from waste in elec plants
    Original Eqn: PES waste for elec plants*efficiency waste for elec plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of electricity in Elec plants from waste.
    """
    return pes_waste_for_elec_plants() * efficiency_waste_for_elec_plants()


@cache.step
@to_float
def fes_heatcom_from_waste_in_chp_plants():
    """
    Real Name: "FES heat-com from waste in CHP plants"
    Original Eqn: PES waste for CHP plants*efficiency waste for heat CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy supply of commercial heat in CHP plants from waste.
    """
    return pes_waste_for_chp_plants() * efficiency_waste_for_heat_chp_plants()


@cache.step
@to_float
def pes_waste_for_heatcom_plants():
    """
    Real Name: "PES waste for heat-com plants"
    Original Eqn: PES waste EJ*"share PES waste for heat-com plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply of commercial heat in Heat plants from waste.
    """
    return pes_waste_ej() * share_pes_waste_for_heatcom_plants()


@cache.run
@to_float
def share_pes_waste_for_heatcom_plants():
    """
    Real Name: "share PES waste for heat-com plants"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C79')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES waste for commercial heat plants.
    """
    return _ext_constant_share_pes_waste_for_heatcom_plants()


@cache.run
@to_float
def share_pes_waste_tfc():
    """
    Real Name: share PES waste TFC
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C82')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES waste for total final consumption.
    """
    return _ext_constant_share_pes_waste_tfc()


@cache.run
@to_float
def share_pes_waste_for_chp():
    """
    Real Name: share PES waste for CHP
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C81')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES waste for CHP plants.
    """
    return _ext_constant_share_pes_waste_for_chp()


@cache.run
@to_float
def share_pes_waste_for_elec_plants():
    """
    Real Name: share PES waste for elec plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C80')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of PES waste for elec plants.
    """
    return _ext_constant_share_pes_waste_for_elec_plants()


@cache.step
@to_float
def new_waste_supply_ej():
    """
    Real Name: new waste supply EJ
    Original Eqn: IF THEN ELSE(Time<2014, (Historic PES waste EJ(Time+1)-Historic PES waste EJ(Time)), IF THEN ELSE(max PE waste=0,PES waste EJ*P waste change, ((max PE waste-PES waste EJ)/max PE waste)*adapt growth waste*PES waste EJ))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New annual waste primary energy supply.
    """
    return if_then_else(
        time() < 2014,
        lambda: (historic_pes_waste_ej(time() + 1) - historic_pes_waste_ej(time())),
        lambda: if_then_else(
            max_pe_waste() == 0,
            lambda: pes_waste_ej() * p_waste_change(),
            lambda: ((max_pe_waste() - pes_waste_ej()) / max_pe_waste())
            * adapt_growth_waste()
            * pes_waste_ej(),
        ),
    )


@cache.step
@to_float
def waste_change():
    """
    Real Name: waste change
    Original Eqn: IF THEN ELSE(Annual GDP growth rate EU<0, Annual GDP growth rate EU, P waste change)
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    If GDP becomes negative, annual PES change follows it decreasing trends.
    """
    return if_then_else(
        annual_gdp_growth_rate_eu() < 0,
        lambda: annual_gdp_growth_rate_eu(),
        lambda: p_waste_change(),
    )


@cache.step
@to_float
def fes_elec_from_waste_ej():
    """
    Real Name: FES elec from waste EJ
    Original Eqn: FES elec from waste in CHP plants+FES elec from waste in elec plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    TFES electricity from waste.
    """
    return fes_elec_from_waste_in_chp_plants() + fes_elec_from_waste_in_elec_plants()


@cache.step
@to_float
def fes_elec_from_waste_twh():
    """
    Real Name: FES elec from waste TWh
    Original Eqn: FES elec from waste EJ/EJ per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    TFES electricity from waste.
    """
    return fes_elec_from_waste_ej() / ej_per_twh()


@cache.run
@to_float
def efficiency_waste_for_elec_plants():
    """
    Real Name: efficiency waste for elec plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C84')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of waste in elec plants.
    """
    return _ext_constant_efficiency_waste_for_elec_plants()


@cache.step
@to_float
def pes_waste_ej():
    """
    Real Name: PES waste EJ
    Original Eqn: INTEG ( new waste supply EJ, initial PES waste)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Waste primary energy supply (includes industrial and municipal (renew and
        non-renew).
    """
    return _integ_pes_waste_ej()


@cache.step
@to_float
def pes_waste_for_chp_plants():
    """
    Real Name: PES waste for CHP plants
    Original Eqn: PES waste EJ*share PES waste for CHP
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply waste for CHP plants.
    """
    return pes_waste_ej() * share_pes_waste_for_chp()


@cache.run
@to_float
def efficiency_waste_for_elec_chp_plants():
    """
    Real Name: efficiency waste for elec CHP plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C86')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of waste in elec in CHP plants.
    """
    return _ext_constant_efficiency_waste_for_elec_chp_plants()


@cache.run
@to_float
def initial_pes_waste():
    """
    Real Name: initial PES waste
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Constants', 'B218')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Waste primary energy supply in 1995.
    """
    return _ext_constant_initial_pes_waste()


@cache.step
@to_float
def pes_waste_for_tfc():
    """
    Real Name: PES waste for TFC
    Original Eqn: PES waste EJ*share PES waste TFC
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy supply waste for total final consumption.
    """
    return pes_waste_ej() * share_pes_waste_tfc()


@cache.run
@to_float
def efficiency_waste_for_heat_chp_plants():
    """
    Real Name: efficiency waste for heat CHP plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C85')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of waste in heat in CHP plants.
    """
    return _ext_constant_efficiency_waste_for_heat_chp_plants()


@cache.run
@to_float
def p_waste_change():
    """
    Real Name: P waste change
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F53')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual PES growth depending on the policy of the scenario.
    """
    return _ext_constant_p_waste_change()


@cache.run
@to_float
def efficiency_waste_for_heat_plants():
    """
    Real Name: efficiency waste for heat plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Parameters', 'C83')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation of waste in heat plants.
    """
    return _ext_constant_efficiency_waste_for_heat_plants()


@cache.run
@to_float
def max_pe_waste():
    """
    Real Name: max PE waste
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F52')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Maximun potencial of waste (primary energy supply).
    """
    return _ext_constant_max_pe_waste()


@cache.step
@to_float
def pes_solids_bioe__waste_ej():
    """
    Real Name: "PES solids bioE & waste EJ"
    Original Eqn: PES solids bioE EJ-PES waste EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy supply solids biofuels and waste.
    """
    return pes_solids_bioe_ej() - pes_waste_ej()


@cache.run
@to_float
def past_waste_growth():
    """
    Real Name: Past waste growth
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Constants', 'X218')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Past growth in PES of waste supply.
    """
    return _ext_constant_past_waste_growth()


def historic_pes_waste_ej(x):
    """
    Real Name: Historic PES waste EJ
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '216', 'B218')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic primary energy supply of waste (1990-2014).
    """
    return _ext_lookup_historic_pes_waste_ej(x)


@cache.run
@to_float
def gch4_per_mj_coal():
    """
    Real Name: gCH4 per MJ coal
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G91')
    Units: GtCO2/MToe
    Limits: (None, None)
    Type: constant
    Subs: None

    CH4 emissions associated to the extraction of coal. Ref: Fig. 2 Howarth
        (2015).
    """
    return _ext_constant_gch4_per_mj_coal()


@cache.run
@to_float
def gch4_per_mj_oil():
    """
    Real Name: gCH4 per MJ oil
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G92')
    Units: GtCO2/MToe
    Limits: (None, None)
    Type: constant
    Subs: None

    CH4 emissions associated to the extraction of oil. Ref: Fig. 2 Howarth
        (2015).
    """
    return _ext_constant_gch4_per_mj_oil()


@cache.step
@to_float
def fe_elec_generation_from_fossil_fuels_twh():
    """
    Real Name: FE Elec generation from fossil fuels TWh
    Original Eqn: FE Elec generation from coal TWh+FE Elec generation from conv gas TWh+FE Elec generation from unconv gas TWh +FE Elec generation from total oil TWh+FES Elec fossil fuel CHP plants TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy electricity generation from fossil fuels (TWh).
    """
    return (
        fe_elec_generation_from_coal_twh()
        + fe_elec_generation_from_conv_gas_twh()
        + fe_elec_generation_from_unconv_gas_twh()
        + fe_elec_generation_from_total_oil_twh()
        + fes_elec_fossil_fuel_chp_plants_twh()
    )


@cache.step
@to_float
def pe_demand_uranium_eu_ej():
    """
    Real Name: PE demand uranium EU EJ
    Original Eqn: potential generation nuclear elec TWh*EJ per TWh/efficiency uranium for electricity
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of uranium for nuclear power generation.
    """
    return (
        potential_generation_nuclear_elec_twh()
        * ej_per_twh()
        / efficiency_uranium_for_electricity()
    )


@cache.step
@to_float
def fes_elec_fossil_fuel_chp_plants_twh():
    """
    Real Name: FES Elec fossil fuel CHP plants TWh
    Original Eqn: FES Elec fossil fuel CHP plants EJ/EJ per TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final Energy of fossil fuels to produce electricity (TWh) in CHP plants.
    """
    return fes_elec_fossil_fuel_chp_plants_ej() / ej_per_twh()


@cache.step
@to_float
def fes_heatcom_fossil_fuels_chp_plants_ej():
    """
    Real Name: "FES heat-com fossil fuels CHP plants EJ"
    Original Eqn: FED heat fossil fuels CHP plants EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final Energy supply of heat from fossil fuels in CHP plants. We assign
        priority to it due to its better efficiency.
    """
    return fed_heat_fossil_fuels_chp_plants_ej()


@cache.step
@to_float
def potential_generation_nuclear_elec_twh():
    """
    Real Name: potential generation nuclear elec TWh
    Original Eqn: MIN(installed capacity nuclear TW*Cp nuclear/TWe per TWh, Demand Elec NRE TWh)
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total potential generation of electricity from nuclear power plants given
        the installed capacity. A minimum function is introduced to assure that no
        more nuclear than electricity required (after the RES and oil
        contribution) is produced.
    """
    return np.minimum(
        installed_capacity_nuclear_tw() * cp_nuclear() / twe_per_twh(),
        demand_elec_nre_twh(),
    )


@cache.run
@to_float
def threshold_remaining_potential_new_capacity():
    """
    Real Name: threshold remaining potential new capacity
    Original Eqn: 0.5
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    This threshold represents the level of the remaining potential that starts
        to affects the planification of new RES elec capacity (decreasing
        returns). Avoid problems of (erroneously) affecting past historical growth
        trends.
    """
    return 0.5


@cache.step
@subs(["RES elec"], _subscript_dict)
def installed_capacity_res_elec_tw():
    """
    Real Name: installed capacity RES elec TW
    Original Eqn: INTEG ( RES elec capacity under construction TW[RES elec]-wear RES elec[RES elec], initial instal cap RES elec[RES elec])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual installed capacity of RES elec technologies for electricity
        generation.
    """
    return _integ_installed_capacity_res_elec_tw()


@cache.step
@subs(["RES elec"], _subscript_dict)
def total_time_planconstr_res_elec():
    """
    Real Name: "total time plan+constr RES elec"
    Original Eqn: MAX(time construction RES elec[RES elec],TIME STEP)+MAX(time planification RES elec[RES elec],TIME STEP)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return np.maximum(time_construction_res_elec(), time_step()) + np.maximum(
        time_planification_res_elec(), time_step()
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def historic_new_required_capacity_res_elec():
    """
    Real Name: Historic new required capacity RES elec
    Original Eqn: table hist capacity RES elec[RES elec]((INTEGER(Time+1))+"total time plan+constr RES elec"[RES elec])-table hist capacity RES elec[RES elec]((INTEGER(Time))+"total time plan+constr RES elec"[RES elec])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    (Assuming 100% of planned was planned and constructed).
    """
    return table_hist_capacity_res_elec(
        (int(time() + 1)) + total_time_planconstr_res_elec()
    ) - table_hist_capacity_res_elec((int(time())) + total_time_planconstr_res_elec())


@cache.step
@subs(["RES elec"], _subscript_dict)
def new_required_capacity_res_elec():
    """
    Real Name: new required capacity RES elec
    Original Eqn: IF THEN ELSE(Time<(2015-"total time plan+constr RES elec"[RES elec]), Historic new required capacity RES elec[RES elec],installed capacity RES elec TW[RES elec]*adapt growth RES elec after allocation[RES elec]*remaining potential constraint on new RES elec capacity [RES elec]*abundance RES elec2)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    New required capacity of RES technologies for electricity generation. We
        assume 100% of the required infraestructure is planned and constructed.
    """
    return if_then_else(
        time() < (2015 - total_time_planconstr_res_elec()),
        lambda: historic_new_required_capacity_res_elec(),
        lambda: installed_capacity_res_elec_tw()
        * adapt_growth_res_elec_after_allocation()
        * remaining_potential_constraint_on_new_res_elec_capacity()
        * abundance_res_elec2(),
    )


def table_hist_capacity_res_elec(x):
    """
    Real Name: table hist capacity RES elec
    Original Eqn:
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '172', 'H174'))
        .
        .
        .
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '172', 'H181'))
    Units: TW/Year
    Limits: (None, None)
    Type: lookup
    Subs: ['RES elec']


    """
    return _ext_lookup_table_hist_capacity_res_elec(x)


@cache.step
@subs(["RES elec"], _subscript_dict)
def initial_capacity_in_construction_res_elec():
    """
    Real Name: initial capacity in construction RES elec
    Original Eqn: initial required capacity RES elec[RES elec]
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Initial capacity of RES by technology in construction (year 1995). We
        assume that it is the same than the additional installed capacity between
        1995 and 1996.
    """
    return initial_required_capacity_res_elec()


@cache.step
@subs(["RES elec"], _subscript_dict)
def remaining_potential_constraint_on_new_res_elec_capacity():
    """
    Real Name: remaining potential constraint on new RES elec capacity
    Original Eqn: IF THEN ELSE(remaining potential RES elec after intermitt[RES elec]>threshold remaining potential new capacity,1,remaining potential RES elec after intermitt [RES elec]*(1/threshold remaining potential new capacity))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Constraint of remaining potential on new RES elec capacity.        Another alternative: SQRT(remaining potential RES elec after intermitt[RES
        elec])
    """
    return if_then_else(
        remaining_potential_res_elec_after_intermitt()
        > threshold_remaining_potential_new_capacity(),
        lambda: 1,
        lambda: remaining_potential_res_elec_after_intermitt()
        * (1 / threshold_remaining_potential_new_capacity()),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def required_capacity_res_elec_tw():
    """
    Real Name: required capacity RES elec TW
    Original Eqn: INTEG ( new required capacity RES elec[RES elec]-new RES elec capacity under planning[RES elec], initial required capacity RES elec[RES elec])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Required capacity of RES technologies for electricity generation.
    """
    return _integ_required_capacity_res_elec_tw()


@cache.step
@subs(["RES elec"], _subscript_dict)
def res_elec_planned_capacity_tw():
    """
    Real Name: RES elec planned capacity TW
    Original Eqn: INTEG ( new RES elec capacity under planning[RES elec]+replacement capacity RES elec[RES elec]-RES elec capacity under construction TW[RES elec], initial capacity in construction RES elec[RES elec])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Planned capacity of RES for electricity.
    """
    return _integ_res_elec_planned_capacity_tw()


@cache.run
@subs(["materials"], _subscript_dict)
def initial_energy_cons_per_unit_of_material_cons_recycled__data():
    """
    Real Name: "Initial energy cons per unit of material cons (recycled) - data"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'Z5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'Y62')
    Units: MJ/kg
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Energy consumption required to use recycled materials per unit of material
        consumption. This variable reads directly from "inputs_EU.xlsx" but has 0s
        for those materials for which information was not found.
    """
    return _ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data()


@cache.run
@to_float
def cp_phs():
    """
    Real Name: Cp PHS
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G53')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Capacity factor of pumped hydro storage (PHS).
    """
    return _ext_constant_cp_phs()


@cache.run
@to_float
def max_potential_phs_twe():
    """
    Real Name: max potential PHS TWe
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C26')
    Units: TWe
    Limits: (None, None)
    Type: constant
    Subs: None

    Maximum potential for PHS.
    """
    return _ext_constant_max_potential_phs_twe()


@cache.step
@to_float
def max_capacity_potential_phs():
    """
    Real Name: max capacity potential PHS
    Original Eqn: max potential PHS TWe/Cp PHS
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum capacity potential of PHS.
    """
    return max_potential_phs_twe() / cp_phs()


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_new_res_elec_capacity_installed__hvdcs():
    """
    Real Name: "materials per new RES elec capacity installed - HVDCs"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'H5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'H62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements for inter-regional grids (HVDCs) per unit of new
        installed capacity of RES variable for electricity.
    """
    return _ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs()


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_new_res_elec_capacity_installed__material_overgrid_high_power():
    """
    Real Name: "materials per new RES elec capacity installed - material overgrid high power"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'G5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'G62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements for overgrid high power per unit of new installed
        capacity of RES variable for electricity.
    """
    return (
        _ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power()
    )


@cache.step
@to_float
def real_growth_gtl():
    """
    Real Name: real growth GTL
    Original Eqn: IF THEN ELSE(abundance gases>=abundance liquids, IF THEN ELSE(abundance gases=1, Exogenous growth GTL,0 ),0)*abundance liquids GTL*scarcity conv oil
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    The real growth of GTL depends on the relative abundance of gas and
        liquids, as well as on the availability of gas.
    """
    return (
        if_then_else(
            abundance_gases() >= abundance_liquids(),
            lambda: if_then_else(
                abundance_gases() == 1, lambda: exogenous_growth_gtl(), lambda: 0
            ),
            lambda: 0,
        )
        * abundance_liquids_gtl()
        * scarcity_conv_oil()
    )


@cache.step
@to_float
def scarcity_conv_gas_delayed_1yr():
    """
    Real Name: scarcity conv gas delayed 1yr
    Original Eqn: DELAY FIXED ( scarcity conv gas, 1, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    "Scarcity conv gas" variable delayed 1 year. For the initial year we
        arbitrary chose the value "0" given that it will be endogenously
        calculated by the model for the following periods.
    """
    return _delayfixed_scarcity_conv_gas_delayed_1yr()


@cache.step
@to_float
def scarcity_conv_oil_delayed_1yr():
    """
    Real Name: scarcity conv oil delayed 1yr
    Original Eqn: DELAY FIXED ( scarcity conv oil, 1, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    "Scarcity conv gas" variable delayed 1 year. For the initial year we
        arbitrary chose the value "0" given that it will be endogenously
        calculated by the model for the following periods.
    """
    return _delayfixed_scarcity_conv_oil_delayed_1yr()


@cache.step
@to_float
def pes_nat_gas_eu():
    """
    Real Name: PES nat gas EU
    Original Eqn: real extraction conv gas EJ+real extraction unconv gas EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_extraction_conv_gas_ej() + real_extraction_unconv_gas_ej()


@cache.run
@to_float
def exponent_availability_conv_oil():
    """
    Real Name: exponent availability conv oil
    Original Eqn: 1/4
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    The smaller the exponent, more priority to conventional vs unconventional oil:        1: lineal        1/2: square root        1/3: cube root        ...
    """
    return 1 / 4


@cache.step
@to_float
def abundance_total_nat_gas_eu():
    """
    Real Name: "abundance total nat. gas EU"
    Original Eqn: IF THEN ELSE("PED nat. gas EJ"<PES nat gas EU, 1, 1-ZIDZ(("PED nat. gas EJ"-PES nat gas EU), "PED nat. gas EJ"))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        ped_nat_gas_ej() < pes_nat_gas_eu(),
        lambda: 1,
        lambda: 1 - zidz((ped_nat_gas_ej() - pes_nat_gas_eu()), ped_nat_gas_ej()),
    )


@cache.run
@to_float
def exponent_availability_conv_gas():
    """
    Real Name: exponent availability conv gas
    Original Eqn: 1/4
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    The smaller the exponent, more priority to conventional vs unconventional gas:        1: lineal        1/2: square root        1/3: cube root        ...
    """
    return 1 / 4


@cache.step
@to_float
def scarcity_conv_gas():
    """
    Real Name: scarcity conv gas
    Original Eqn: IF THEN ELSE(max extraction conv gas EJ=0,0, IF THEN ELSE(max extraction conv gas EJ>=extraction conv gas EJ, 1-((max extraction conv gas EJ-extraction conv gas EJ)/max extraction conv gas EJ)^exponent availability conv gas,0))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Priority to conventional resource to cover the demand while the maximum
        extraction level of energy/time is not reached. If "scarcity conv gas"=1
        there is no more available flow to be extracted from the conventional
        resource.
    """
    return if_then_else(
        max_extraction_conv_gas_ej() == 0,
        lambda: 0,
        lambda: if_then_else(
            max_extraction_conv_gas_ej() >= extraction_conv_gas_ej(),
            lambda: 1
            - (
                (max_extraction_conv_gas_ej() - extraction_conv_gas_ej())
                / max_extraction_conv_gas_ej()
            )
            ** exponent_availability_conv_gas(),
            lambda: 0,
        ),
    )


@cache.step
@to_float
def year_scarcity_total_nat_gas():
    """
    Real Name: "Year scarcity total nat. gas"
    Original Eqn: IF THEN ELSE("abundance total nat. gas EU">0.95, 0, Time)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_total_nat_gas_eu() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def share_unconv_gas_vs_tot_agg_in_2050():
    """
    Real Name: share unconv gas vs tot agg in 2050
    Original Eqn: IF THEN ELSE(choose extraction tot agg gas curve=1, share unconv gas vs tot agg in 2050 Lahèrrere2010, IF THEN ELSE(choose extraction tot agg gas curve=2, share unconv gas vs tot agg in 2050 Mohr12 BG, share unconv gas vs tot agg in 2050 User defined))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of unconventional gas vs total aggregated gas in 2050 depending on
        the maximum extraction curve selected for total aggregated gas.
    """
    return if_then_else(
        choose_extraction_tot_agg_gas_curve() == 1,
        lambda: share_unconv_gas_vs_tot_agg_in_2050_lahèrrere2010(),
        lambda: if_then_else(
            choose_extraction_tot_agg_gas_curve() == 2,
            lambda: share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg(),
            lambda: share_unconv_gas_vs_tot_agg_in_2050_user_defined(),
        ),
    )


@cache.run
@to_float
def share_unconv_gas_vs_tot_agg_in_2050_lahèrrere2010():
    """
    Real Name: share unconv gas vs tot agg in 2050 Lahèrrere2010
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'B153')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_share_unconv_gas_vs_tot_agg_in_2050_lahèrrere2010()


@cache.run
@to_float
def share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg():
    """
    Real Name: share unconv gas vs tot agg in 2050 Mohr12 BG
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'B155')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg()


@cache.run
@to_float
def share_unconv_gas_vs_tot_agg_in_2050_user_defined():
    """
    Real Name: share unconv gas vs tot agg in 2050 User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'B150')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_share_unconv_gas_vs_tot_agg_in_2050_user_defined()


@cache.step
@to_float
def cumulated_tot_agg_gas_extraction_to_1995():
    """
    Real Name: cumulated tot agg gas extraction to 1995
    Original Eqn: cumulated conv gas extraction to 1995+cumulated unconv gas extraction to 1995
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated total agg gas extraction to 1995.
    """
    return (
        cumulated_conv_gas_extraction_to_1995()
        + cumulated_unconv_gas_extraction_to_1995()
    )


@cache.step
@to_float
def share_conv_gas_vs_tot_agg():
    """
    Real Name: share conv gas vs tot agg
    Original Eqn: 1-share unconv gas vs tot agg
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return 1 - share_unconv_gas_vs_tot_agg()


@cache.run
@to_float
def share_rurr_tot_agg_gas_to_leave_underground():
    """
    Real Name: share RURR tot agg gas to leave underground
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F128')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    RURR's total aggregated natural gas to be left in the ground as a share of
        the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_tot_agg_gas_to_leave_underground()


@cache.step
@to_float
def share_unconv_gas_vs_tot_agg():
    """
    Real Name: share unconv gas vs tot agg
    Original Eqn: IF THEN ELSE(Time>2012, MIN(evolution share unconv gas vs tot agg, 1), Historic unconv gas/"PED nat. gas EJ")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Evolution of the share of unconventional gas vs total aggregated gas.
    """
    return if_then_else(
        time() > 2012,
        lambda: np.minimum(evolution_share_unconv_gas_vs_tot_agg(), 1),
        lambda: historic_unconv_gas() / ped_nat_gas_ej(),
    )


@cache.step
@to_float
def flow_tot_agg_gas_left_in_ground():
    """
    Real Name: Flow tot agg gas left in ground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground tot agg gas,0, IF THEN ELSE(Time>=Start policy leave in ground tot agg gas+1,0, tot agg gas to leave underground))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Flow of total aggregated natural gas left in the ground. We assume that
        this amount is removed from the stock of conventional natural gas
        available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_gas(),
        lambda: 0,
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_tot_agg_gas() + 1,
            lambda: 0,
            lambda: tot_agg_gas_to_leave_underground(),
        ),
    )


@cache.step
@to_float
def tot_rurr_tot_agg_gas():
    """
    Real Name: Tot RURR tot agg gas
    Original Eqn: RURR tot agg gas+Total agg gas left in ground
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total RURR of total aggregated natural gas considering the available RURR
        and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_tot_agg_gas() + total_agg_gas_left_in_ground()


@cache.run
@to_float
def urr_total_agg_gas_unlimited():
    """
    Real Name: URR total agg gas unlimited
    Original Eqn: 1e+09
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Arbitrary very high value.
    """
    return 1e09


@cache.run
@to_float
def start_policy_leave_in_ground_tot_agg_gas():
    """
    Real Name: Start policy leave in ground tot agg gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F126')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to leave in the ground an amount of total aggregated
        gas RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_tot_agg_gas()


@cache.step
@to_float
def extraction_unconv_gas__tot_agg():
    """
    Real Name: "extraction unconv gas - tot agg"
    Original Eqn: extraction tot agg gas EJ*share unconv gas vs tot agg
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return extraction_tot_agg_gas_ej() * share_unconv_gas_vs_tot_agg()


@cache.step
@to_float
def total_agg_gas_left_in_ground():
    """
    Real Name: Total agg gas left in ground
    Original Eqn: INTEG ( Flow tot agg gas left in ground, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total amount of aggregated natural gas left in the ground due to policies.
    """
    return _integ_total_agg_gas_left_in_ground()


@cache.step
@to_float
def evolution_share_unconv_gas_vs_tot_agg():
    """
    Real Name: evolution share unconv gas vs tot agg
    Original Eqn: (share unconv gas vs tot agg in 2050-0.1232)/(2050-2012)*Time+(share unconv gas vs tot agg in 2050-((share unconv gas vs tot agg in 2050-0.1232)/(2050-2012))*2050)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Linear relation of the evolution of the share of unconventional gas vs
        total aggregated gas.
    """
    return (share_unconv_gas_vs_tot_agg_in_2050() - 0.1232) / (2050 - 2012) * time() + (
        share_unconv_gas_vs_tot_agg_in_2050()
        - ((share_unconv_gas_vs_tot_agg_in_2050() - 0.1232) / (2050 - 2012)) * 2050
    )


@cache.step
@to_float
def real_extraction_conv_gas_ej():
    """
    Real Name: real extraction conv gas EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1, extraction conv gas EJ, "extraction conv gas - tot agg")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: extraction_conv_gas_ej(),
        lambda: extraction_conv_gas__tot_agg(),
    )


@cache.step
@to_float
def urr_tot_agg_gas():
    """
    Real Name: URR tot agg gas
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1,0, IF THEN ELSE("unlimited NRE?"=1,URR total agg gas unlimited, IF THEN ELSE("unlimited gas?"=1,URR total agg gas unlimited, IF THEN ELSE(choose extraction tot agg gas curve=1, URR total gas User defined, IF THEN ELSE(choose extraction tot agg gas curve=2, URR total gas User defined, URR total gas User defined)))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Ultimately Recoverable Resources (URR) associated to the selected
        depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: 0,
        lambda: if_then_else(
            unlimited_nre() == 1,
            lambda: urr_total_agg_gas_unlimited(),
            lambda: if_then_else(
                unlimited_gas() == 1,
                lambda: urr_total_agg_gas_unlimited(),
                lambda: if_then_else(
                    choose_extraction_tot_agg_gas_curve() == 1,
                    lambda: urr_total_gas_user_defined(),
                    lambda: if_then_else(
                        choose_extraction_tot_agg_gas_curve() == 2,
                        lambda: urr_total_gas_user_defined(),
                        lambda: urr_total_gas_user_defined(),
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def cumulated_tot_agg_gas_extraction():
    """
    Real Name: cumulated tot agg gas extraction
    Original Eqn: INTEG ( extraction tot agg gas EJ, cumulated tot agg gas extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated total aggregated gas extraction.
    """
    return _integ_cumulated_tot_agg_gas_extraction()


@cache.step
@to_float
def extraction_conv_gas__tot_agg():
    """
    Real Name: "extraction conv gas - tot agg"
    Original Eqn: extraction tot agg gas EJ*share conv gas vs tot agg
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return extraction_tot_agg_gas_ej() * share_conv_gas_vs_tot_agg()


@cache.step
@to_float
def real_extraction_unconv_gas_ej():
    """
    Real Name: real extraction unconv gas EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1, extraction unconv gas EJ, "extraction unconv gas - tot agg")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: extraction_unconv_gas_ej(),
        lambda: extraction_unconv_gas__tot_agg(),
    )


@cache.step
@to_float
def max_extraction_tot_agg_gas_ej():
    """
    Real Name: max extraction tot agg gas EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=0, IF THEN ELSE(choose extraction tot agg gas curve=1, table max extraction total gas User defined(Tot RURR tot agg gas), IF THEN ELSE(choose extraction tot agg gas curve=2, table max extraction total gas User defined(Tot RURR tot agg gas), table max extraction total gas User defined(Tot RURR tot agg gas))),0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 0,
        lambda: if_then_else(
            choose_extraction_tot_agg_gas_curve() == 1,
            lambda: table_max_extraction_total_gas_user_defined(tot_rurr_tot_agg_gas()),
            lambda: if_then_else(
                choose_extraction_tot_agg_gas_curve() == 2,
                lambda: table_max_extraction_total_gas_user_defined(
                    tot_rurr_tot_agg_gas()
                ),
                lambda: table_max_extraction_total_gas_user_defined(
                    tot_rurr_tot_agg_gas()
                ),
            ),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def real_extraction_conv_oil_mbd():
    """
    Real Name: "real extraction conv oil Mb/d"
    Original Eqn: real extraction conv oil EJ*"Mb/d per EJ/year"
    Units: Mb/d
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_extraction_conv_oil_ej() * mbd_per_ejyear()


@cache.step
@to_float
def share_unconv_oil_vs_tot_agg():
    """
    Real Name: share unconv oil vs tot agg
    Original Eqn: IF THEN ELSE(Time>2012, MIN(evolution share unconv oil vs tot agg, 1), Historic unconv oil/PED total oil EJ)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Evolution of the share of unconventional oil vs total aggregated oil.
    """
    return if_then_else(
        time() > 2012,
        lambda: np.minimum(evolution_share_unconv_oil_vs_tot_agg(), 1),
        lambda: historic_unconv_oil() / ped_total_oil_ej(),
    )


@cache.step
@to_float
def evolution_share_unconv_oil_vs_tot_agg():
    """
    Real Name: evolution share unconv oil vs tot agg
    Original Eqn: (share unconv oil vs tot agg in 2050-0.059)/(2050-2012)*Time+(share unconv oil vs tot agg in 2050-((share unconv oil vs tot agg in 2050-0.059)/(2050-2012))*2050)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Linear relation of the evolution of the share of unconventional oil vs
        total aggregated oil.
    """
    return (share_unconv_oil_vs_tot_agg_in_2050() - 0.059) / (2050 - 2012) * time() + (
        share_unconv_oil_vs_tot_agg_in_2050()
        - ((share_unconv_oil_vs_tot_agg_in_2050() - 0.059) / (2050 - 2012)) * 2050
    )


@cache.step
@to_float
def share_unconv_oil_vs_tot_agg_in_2050():
    """
    Real Name: share unconv oil vs tot agg in 2050
    Original Eqn: IF THEN ELSE(choose extraction curve tot agg oil=1, share unconv oil vs tot agg in 2050 Lahèrrere2006, share unconv oil vs tot agg in 2050 User defined)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of unconventional oil vs total aggregated oil in 2050 depending on
        the maximum extraction curve selected for total aggregated oil.
    """
    return if_then_else(
        choose_extraction_curve_tot_agg_oil() == 1,
        lambda: share_unconv_oil_vs_tot_agg_in_2050_lahèrrere2006(),
        lambda: share_unconv_oil_vs_tot_agg_in_2050_user_defined(),
    )


@cache.run
@to_float
def share_unconv_oil_vs_tot_agg_in_2050_lahèrrere2006():
    """
    Real Name: share unconv oil vs tot agg in 2050 Lahèrrere2006
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'B138')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_share_unconv_oil_vs_tot_agg_in_2050_lahèrrere2006()


@cache.run
@to_float
def share_unconv_oil_vs_tot_agg_in_2050_user_defined():
    """
    Real Name: share unconv oil vs tot agg in 2050 User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'B143')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_share_unconv_oil_vs_tot_agg_in_2050_user_defined()


@cache.step
@to_float
def extraction_conv_oil__tot_agg():
    """
    Real Name: "extraction conv oil - tot agg"
    Original Eqn: extraction tot agg oil EJ*share conv oil vs tot agg
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return extraction_tot_agg_oil_ej() * share_conv_oil_vs_tot_agg()


@cache.step
@to_float
def extraction_unconv_oil__tot_agg():
    """
    Real Name: "extraction unconv oil - tot agg"
    Original Eqn: extraction tot agg oil EJ*share unconv oil vs tot agg
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return extraction_tot_agg_oil_ej() * share_unconv_oil_vs_tot_agg()


@cache.step
@to_float
def share_conv_oil_vs_tot_agg():
    """
    Real Name: share conv oil vs tot agg
    Original Eqn: 1-share unconv oil vs tot agg
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return 1 - share_unconv_oil_vs_tot_agg()


@cache.step
@to_float
def pes_total_oil_ej_eu():
    """
    Real Name: PES total oil EJ EU
    Original Eqn: real extraction conv oil EJ+real extraction unconv oil EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total oil (conventional + unconventional) extraction.
    """
    return real_extraction_conv_oil_ej() + real_extraction_unconv_oil_ej()


@cache.step
@to_float
def real_extraction_conv_oil_ej():
    """
    Real Name: real extraction conv oil EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv oil?"=1, extraction conv oil EJ, "extraction conv oil - tot agg")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: extraction_conv_oil_ej(),
        lambda: extraction_conv_oil__tot_agg(),
    )


@cache.run
@to_float
def gch4_per_mj_conv_gas():
    """
    Real Name: gCH4 per MJ conv gas
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G89')
    Units: GtCO2/MToe
    Limits: (None, None)
    Type: constant
    Subs: None

    CH4 emissions associated to the extraction of conventional gas. Ref: Fig.
        2 Howarth (2015).
    """
    return _ext_constant_gch4_per_mj_conv_gas()


@cache.step
@to_float
def total_agg_oil_left_in_ground():
    """
    Real Name: Total agg oil left in ground
    Original Eqn: INTEG ( Flow tot agg oil left in ground, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total amount of aggregated oil left in the ground due to policies.
    """
    return _integ_total_agg_oil_left_in_ground()


@cache.step
@to_float
def cumulated_tot_agg_oil_extraction():
    """
    Real Name: cumulated tot agg oil extraction
    Original Eqn: INTEG ( extraction tot agg oil EJ, cumulated tot agg extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated total aggregated oil extraction.
    """
    return _integ_cumulated_tot_agg_oil_extraction()


@cache.step
@to_float
def cumulated_tot_agg_extraction_to_1995():
    """
    Real Name: cumulated tot agg extraction to 1995
    Original Eqn: cumulated conv oil extraction to 1995+cumulated unconv oil extraction to 1995
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated total aggregated oil extraction to 1995.
    """
    return (
        cumulated_conv_oil_extraction_to_1995()
        + cumulated_unconv_oil_extraction_to_1995()
    )


@cache.run
@to_float
def urr_tot_agg_oil_unlimited():
    """
    Real Name: URR tot agg oil unlimited
    Original Eqn: 1e+09
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Arbitrary very high value.
    """
    return 1e09


@cache.step
@to_float
def tot_rurr_tot_agg_oil():
    """
    Real Name: Tot RURR tot agg oil
    Original Eqn: RURR tot agg oil+Total agg oil left in ground
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total RURR of total aggregated oil considering the available RURR and the
        eventual amount of RURR left in the ground as a policy.
    """
    return rurr_tot_agg_oil() + total_agg_oil_left_in_ground()


@cache.run
@to_float
def start_policy_leave_in_ground_tot_agg_oil():
    """
    Real Name: Start policy leave in ground tot agg oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F122')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to leave in the ground an amount of total aggregated
        oil RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_tot_agg_oil()


@cache.step
@to_float
def flow_tot_agg_oil_left_in_ground():
    """
    Real Name: Flow tot agg oil left in ground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground tot agg oil,0, IF THEN ELSE(Time>=Start policy leave in ground tot agg oil+1,0, tot agg oil to leave underground))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Flow of total aggregated oil left in the ground. We assume that this
        amount is removed from the stock of total aggregated oil available in 1
        year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_tot_agg_oil(),
        lambda: 0,
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_tot_agg_oil() + 1,
            lambda: 0,
            lambda: tot_agg_oil_to_leave_underground(),
        ),
    )


@cache.run
@to_float
def g_per_mt():
    """
    Real Name: g per Mt
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G13')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1e12 grams = 1 Mtonne.
    """
    return _ext_constant_g_per_mt()


@cache.run
@to_float
def share_rurr_tot_agg_oil_to_leave_underground():
    """
    Real Name: share RURR tot agg oil to leave underground
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F124')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    RURR's total aggregatoid oil to be left in the ground as a share of the
        RURR in the year 2015.
    """
    return _ext_constant_share_rurr_tot_agg_oil_to_leave_underground()


@cache.run
@to_float
def gch4_per_mj_unconv_gas():
    """
    Real Name: gCH4 per MJ unconv gas
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G90')
    Units: GtCO2/MToe
    Limits: (None, None)
    Type: constant
    Subs: None

    CH4 emissions associated to the extraction of unconventional gas (shale
        gas). Ref: Fig. 2 Howarth (2015).
    """
    return _ext_constant_gch4_per_mj_unconv_gas()


@cache.step
@to_float
def tot_rurr_unconv_gas():
    """
    Real Name: Tot RURR unconv gas
    Original Eqn: RURR unconv gas+Total unconv gas left in ground
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total RURR of unconventional natural gas considering the available RURR
        and the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_unconv_gas() + total_unconv_gas_left_in_ground()


@cache.run
@to_float
def start_policy_leave_in_ground_coal():
    """
    Real Name: Start policy leave in ground coal
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C130')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to leave in the ground an amount of coal RURR enters
        into force.
    """
    return _ext_constant_start_policy_leave_in_ground_coal()


@cache.step
@to_float
def total_unconv_gas_left_in_ground():
    """
    Real Name: Total unconv gas left in ground
    Original Eqn: INTEG ( Flow unconv gas left in ground, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total amount of unconventional natural gas left in the ground due to
        policies.
    """
    return _integ_total_unconv_gas_left_in_ground()


@cache.step
@to_float
def flow_coal_left_in_ground():
    """
    Real Name: Flow coal left in ground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground coal,0, IF THEN ELSE(Time>=Start policy leave in ground coal+1,0, coal to leave underground))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Flow of coal left in the ground. We assume that this amount is removed
        from the stock of coal available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_coal(),
        lambda: 0,
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_coal() + 1,
            lambda: 0,
            lambda: coal_to_leave_underground(),
        ),
    )


@cache.step
@to_float
def flow_conv_gas_left_in_ground():
    """
    Real Name: Flow conv gas left in ground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground conv gas,0, IF THEN ELSE(Time>=Start policy leave in ground conv gas+1,0, conv gas to leave underground))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Flow of conventional natural gas left in the ground. We assume that this
        amount is removed from the stock of conventional natural gas available in
        1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_gas(),
        lambda: 0,
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_conv_gas() + 1,
            lambda: 0,
            lambda: conv_gas_to_leave_underground(),
        ),
    )


@cache.step
@to_float
def flow_conv_oil_left_in_ground():
    """
    Real Name: Flow conv oil left in ground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground conv oil,0, IF THEN ELSE(Time>=Start policy leave in ground conv oil+1,0, conv oil to leave underground))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Flow of conventional oil left in the ground. We assume that this amount is
        removed from the stock of conventional oil available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_conv_oil(),
        lambda: 0,
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_conv_oil() + 1,
            lambda: 0,
            lambda: conv_oil_to_leave_underground(),
        ),
    )


@cache.step
@to_float
def flow_unconv_oil_left_in_ground():
    """
    Real Name: Flow unconv oil left in ground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground unconv oil,0, IF THEN ELSE(Time>=Start policy leave in ground unconv oil+1,0, unconv oil to leave underground))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Flow of unconventional oil left in the ground. We assume that this amount
        is removed from the stock of unconventional oil available in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_oil(),
        lambda: 0,
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_unconv_oil() + 1,
            lambda: 0,
            lambda: unconv_oil_to_leave_underground(),
        ),
    )


@cache.run
@to_float
def share_rurr_unconv_gas_to_leave_underground():
    """
    Real Name: share RURR unconv gas to leave underground
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C129')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    RURR's unconventional natural gas to be left in the ground as a share of
        the RURR in the year 2015.
    """
    return _ext_constant_share_rurr_unconv_gas_to_leave_underground()


@cache.run
@to_float
def share_rurr_unconv_oil_to_leave_underground():
    """
    Real Name: share RURR unconv oil to leave underground
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C125')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    RURR's unconventional oil to be left in the ground as a share of the RURR
        in the year 2015.
    """
    return _ext_constant_share_rurr_unconv_oil_to_leave_underground()


@cache.step
@to_float
def extraction_unconv_gas_ej():
    """
    Real Name: extraction unconv gas EJ
    Original Eqn: IF THEN ELSE(RURR unconv gas<0,0, IF THEN ELSE(Time<2013, Historic unconv gas, IF THEN ELSE("separate conv and unconv gas?"=1, MIN(max extraction unconv gas ,max unconv gas growth extraction EJ), 0)))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of unconventional gas.        IF THEN ELSE("separate conv and unconv gas?"=1, IF THEN ELSE(Time<2011, Historic
        unconv gas(Time), MIN(max extraction unconv gas,max unconv gas growth
        extraction EJ        )), 0)
    """
    return if_then_else(
        rurr_unconv_gas() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2013,
            lambda: historic_unconv_gas(),
            lambda: if_then_else(
                separate_conv_and_unconv_gas() == 1,
                lambda: np.minimum(
                    max_extraction_unconv_gas(), max_unconv_gas_growth_extraction_ej()
                ),
                lambda: 0,
            ),
        ),
    )


@cache.step
@to_float
def tot_rurr_coal():
    """
    Real Name: Tot RURR coal
    Original Eqn: RURR coal+Total coal left in ground
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total RURR of coal considering the available RURR and the eventual amount
        of RURR left in the ground as a policy.
    """
    return rurr_coal() + total_coal_left_in_ground()


@cache.step
@to_float
def tot_rurr_conv_gas():
    """
    Real Name: Tot RURR conv gas
    Original Eqn: RURR conv gas+Total conv gas left in ground
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total RURR of conventional natural gas considering the available RURR and
        the eventual amount of RURR left in the ground as a policy.
    """
    return rurr_conv_gas() + total_conv_gas_left_in_ground()


@cache.step
@to_float
def tot_rurr_conv_oil():
    """
    Real Name: Tot RURR conv oil
    Original Eqn: RURR conv oil+Total conv oil left in ground
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total RURR of conventional oil considering the available RURR and the
        eventual amount of RURR left in the ground as a policy.
    """
    return rurr_conv_oil() + total_conv_oil_left_in_ground()


@cache.run
@to_float
def share_rurr_conv_oil_to_leave_underground():
    """
    Real Name: share RURR conv oil to leave underground
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C123')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    RURR's conventional oil to be left in the ground as a share of the RURR in
        the year 2015.
    """
    return _ext_constant_share_rurr_conv_oil_to_leave_underground()


@cache.step
@to_float
def tot_rurr_unconv_oil():
    """
    Real Name: Tot RURR unconv oil
    Original Eqn: RURR unconv oil EJ+Total unconv oil left in ground
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total RURR of unconventional oil considering the available RURR and the
        eventual amount of RURR left in the ground as a policy.
    """
    return rurr_unconv_oil_ej() + total_unconv_oil_left_in_ground()


@cache.step
@to_float
def total_unconv_oil_left_in_ground():
    """
    Real Name: Total unconv oil left in ground
    Original Eqn: INTEG ( Flow unconv oil left in ground, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total amount of unconventional oil left in the ground due to policies.
    """
    return _integ_total_unconv_oil_left_in_ground()


@cache.step
@to_float
def total_coal_left_in_ground():
    """
    Real Name: Total coal left in ground
    Original Eqn: INTEG ( Flow coal left in ground, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _integ_total_coal_left_in_ground()


@cache.step
@to_float
def total_conv_gas_left_in_ground():
    """
    Real Name: Total conv gas left in ground
    Original Eqn: INTEG ( Flow conv gas left in ground, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total amount of conventional natural gas left in the ground due to
        policies.
    """
    return _integ_total_conv_gas_left_in_ground()


@cache.step
@to_float
def total_conv_oil_left_in_ground():
    """
    Real Name: Total conv oil left in ground
    Original Eqn: INTEG ( Flow conv oil left in ground, 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total amount of conventional oil left in the ground due to policies.
    """
    return _integ_total_conv_oil_left_in_ground()


@cache.step
@to_float
def rurr_coal():
    """
    Real Name: RURR coal
    Original Eqn: INTEG ( -extraction coal EJ EU-Flow coal left in ground, URR coal-cumulated coal extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR coal. 4400 EJ extracted before 1990.
    """
    return _integ_rurr_coal()


@cache.step
@to_float
def max_extraction_conv_oil_ej():
    """
    Real Name: max extraction conv oil EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv oil?"=1, IF THEN ELSE(choose extraction curve conv oil=1, table max extraction Mohr15 Low conv oil EJ(Tot RURR conv oil), IF THEN ELSE(choose extraction curve conv oil=2, table max extraction Mohr15 BG conv oil EJ(Tot RURR conv oil), IF THEN ELSE(choose extraction curve conv oil=3, table max extraction Mohr15 High conv oil EJ(Tot RURR conv oil), table max conv oil extraction User defined(Tot RURR conv oil)))), 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: if_then_else(
            choose_extraction_curve_conv_oil() == 1,
            lambda: table_max_extraction_mohr15_low_conv_oil_ej(tot_rurr_conv_oil()),
            lambda: if_then_else(
                choose_extraction_curve_conv_oil() == 2,
                lambda: table_max_extraction_mohr15_bg_conv_oil_ej(tot_rurr_conv_oil()),
                lambda: if_then_else(
                    choose_extraction_curve_conv_oil() == 3,
                    lambda: table_max_extraction_mohr15_high_conv_oil_ej(
                        tot_rurr_conv_oil()
                    ),
                    lambda: table_max_conv_oil_extraction_user_defined(
                        tot_rurr_conv_oil()
                    ),
                ),
            ),
        ),
        lambda: 0,
    )


@cache.run
@to_float
def start_policy_leave_in_ground_unconv_gas():
    """
    Real Name: Start policy leave in ground unconv gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C128')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to leave in the ground an amount of unconventional
        gas RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_unconv_gas()


@cache.step
@to_float
def flow_unconv_gas_left_in_ground():
    """
    Real Name: Flow unconv gas left in ground
    Original Eqn: IF THEN ELSE(Time<Start policy leave in ground unconv gas,0, IF THEN ELSE(Time>=Start policy leave in ground unconv gas+1,0, unconv gas to leave underground))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Flow of unconventional natural gas left in the ground. We assume that this
        amount is removed from the stock of unconventional natural gas available
        in 1 year.
    """
    return if_then_else(
        time() < start_policy_leave_in_ground_unconv_gas(),
        lambda: 0,
        lambda: if_then_else(
            time() >= start_policy_leave_in_ground_unconv_gas() + 1,
            lambda: 0,
            lambda: unconv_gas_to_leave_underground(),
        ),
    )


@cache.run
@to_float
def start_policy_leave_in_ground_unconv_oil():
    """
    Real Name: Start policy leave in ground unconv oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C124')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to leave in the ground an amount of unconventional
        oil RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_unconv_oil()


@cache.run
@to_float
def start_policy_leave_in_ground_conv_oil():
    """
    Real Name: Start policy leave in ground conv oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C122')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to leave in the ground an amount of conventional oil
        RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_conv_oil()


@cache.run
@to_float
def share_rurr_coal_to_leave_underground():
    """
    Real Name: share RURR coal to leave underground
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C131')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    RURR's coal to be left in the ground as a share of the RURR in the year
        2015.
    """
    return _ext_constant_share_rurr_coal_to_leave_underground()


@cache.step
@to_float
def pes_oil_mbd():
    """
    Real Name: "PES oil Mb/d"
    Original Eqn: PES total oil EJ EU*"Mb/d per EJ/year"
    Units: Mb/d
    Limits: (None, None)
    Type: component
    Subs: None

    Total oil (conventional + unconventional) extraction.
    """
    return pes_total_oil_ej_eu() * mbd_per_ejyear()


@cache.step
@to_float
def losses_in_charcoal_plants_ej():
    """
    Real Name: Losses in charcoal plants EJ
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '216', 'B229')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Losses of energy (EJ) produced in charcoal plants.
    """
    return _ext_data_losses_in_charcoal_plants_ej(time())


@cache.run
@to_float
def share_rurr_conv_gas_to_leave_underground():
    """
    Real Name: share RURR conv gas to leave underground
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C127')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    RURR's conventional gas to be left in the ground as a share of the RURR in
        the year 2015.
    """
    return _ext_constant_share_rurr_conv_gas_to_leave_underground()


@cache.run
@to_float
def start_policy_leave_in_ground_conv_gas():
    """
    Real Name: Start policy leave in ground conv gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C126')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Year when the policy to leave in the ground an amount of conventional gas
        RURR enters into force.
    """
    return _ext_constant_start_policy_leave_in_ground_conv_gas()


@cache.step
@to_float
def demand_conv_gas():
    """
    Real Name: Demand conv gas
    Original Eqn: MAX("PED nat. gas EJ"-extraction unconv gas EJ, 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of conventional gas. It is assumed that conventional gas covers the
        rest of the liquids demand after accounting for the contributions from
        unconventional gas.
    """
    return np.maximum(ped_nat_gas_ej() - extraction_unconv_gas_ej(), 0)


@cache.step
@to_float
def ped_nat_gas_without_gtl():
    """
    Real Name: "PED nat. gas without GTL"
    Original Eqn: MAX(0, "PED nat. gas EJ"-"PED nat. gas for GTL EJ")
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total demand of natural gas without GTL.
    """
    return np.maximum(0, ped_nat_gas_ej() - ped_nat_gas_for_gtl_ej())


@cache.step
@to_float
def abundance_solids():
    """
    Real Name: abundance solids
    Original Eqn: IF THEN ELSE(PES solids>PED solids, 1, 1 - ZIDZ(PED solids-PES solids , PED solids ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        pes_solids() > ped_solids(),
        lambda: 1,
        lambda: 1 - zidz(ped_solids() - pes_solids(), ped_solids()),
    )


@cache.step
@to_float
def fe_demand_coal_elec_plants_twh():
    """
    Real Name: FE demand coal Elec plants TWh
    Original Eqn: share coal for Elec*demand Elec gas and coal TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of coal for electricity consumption (TWh).
    """
    return share_coal_for_elec() * demand_elec_gas_and_coal_twh()


@cache.step
@to_float
def fe_demand_gas_elec_plants_twh():
    """
    Real Name: FE demand gas Elec plants TWh
    Original Eqn: "share gas/(coal +gas) for Elec"*demand Elec gas and coal TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of natural gas for electricity consumption (TWh).
    """
    return share_gascoal_gas_for_elec() * demand_elec_gas_and_coal_twh()


@cache.step
@to_float
def share_coal_for_elec():
    """
    Real Name: share coal for Elec
    Original Eqn: 1-"share gas/(coal +gas) for Elec"
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Coal is assumed to cover the rest of the electricity demand after RES,
        nuclear, oil and gas.
    """
    return 1 - share_gascoal_gas_for_elec()


@cache.step
@to_float
def share_chp_plants_oil():
    """
    Real Name: share CHP plants oil
    Original Eqn: MAX(IF THEN ELSE(Time>2014, -0.002985*(Time)+6.04554, historic share CHP plants oil),0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Oil share of heat demand. Since this share has been falling globally since
        the first oil shock, and given the difficulties to substitute oil in other
        sectors (e.g. Transportation) and that there are many more resources that
        can supply heat, we assume an exogenous linear decreasing trend for the
        oil share of heat demand to reach 0% around 2025.
    """
    return np.maximum(
        if_then_else(
            time() > 2014,
            lambda: -0.002985 * (time()) + 6.04554,
            lambda: historic_share_chp_plants_oil(),
        ),
        0,
    )


@cache.step
@to_float
def historic_share_chp_plants_gas():
    """
    Real Name: historic share CHP plants gas
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H30')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic share of natural gas for electricity in relation to the total
        fossil fuels for CHP plants
    """
    return _ext_data_historic_share_chp_plants_gas(time())


@cache.step
@to_float
def share_chp_plants_coal():
    """
    Real Name: share CHP plants coal
    Original Eqn: 1-historic share CHP plants gas-share CHP plants oil
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Coal is assumed to cover the rest of the CHP plants demand after RES,
        nuclear, oil and gas.
    """
    return 1 - historic_share_chp_plants_gas() - share_chp_plants_oil()


@cache.step
@to_float
def historic_share_liquids_for_heat_plants():
    """
    Real Name: Historic share liquids for heat plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H75')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic share liquids for heat plants vs heat production from fossil
        fuels.
    """
    return _ext_data_historic_share_liquids_for_heat_plants(time())


@cache.step
@to_float
def share_coalcoalgas_for_heat_plants():
    """
    Real Name: "share coal(coal+gas) for heat plants"
    Original Eqn: 1-"share gas/(coal+gas) for heat plants"
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Coal is assumed to cover the rest of the heat demand after RES, nuclear,
        oil and gas.
    """
    return 1 - share_gascoalgas_for_heat_plants()


@cache.step
@to_float
def historic_share_chp_plants_oil():
    """
    Real Name: historic share CHP plants oil
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H32')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    historic share CHP plants oil
    """
    return _ext_data_historic_share_chp_plants_oil(time())


@cache.step
@subs(["RES elec"], _subscript_dict)
def output_elec_over_lifetime_res_elec_for_allocation2():
    """
    Real Name: output elec over lifetime RES elec for allocation2
    Original Eqn: "'static' EROIgrid RES elec"[RES elec]*FEI over lifetime RES elec for allocation[RES elec]*"g=quality of electricity"
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return (
        static_eroigrid_res_elec()
        * fei_over_lifetime_res_elec_for_allocation()
        * gquality_of_electricity()
    )


@cache.step
@to_float
def demand_storage_capacity():
    """
    Real Name: demand storage capacity
    Original Eqn: "share capacity storage/RES elec var"*Total installed capacity RES elec var
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Required storage capacity to install to deal with the variability of RES
        for electricity.
    """
    return (
        share_capacity_storageres_elec_var() * total_installed_capacity_res_elec_var()
    )


@cache.step
@to_float
def share_capacity_storageres_elec_var():
    """
    Real Name: "share capacity storage/RES elec var"
    Original Eqn: 0.099+0.1132*share Elec demand covered by RES
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share installed capacity of storage vs installed capacity of variable RES
        for electricity. Estimation from NREL (2012).
    """
    return 0.099 + 0.1132 * share_elec_demand_covered_by_res()


@cache.run
@to_float
def staticdynamic_quality_of_electricity():
    """
    Real Name: "static/dynamic quality of electricity?"
    Original Eqn: 0
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    This variable controls the method of calculation of the parameter "quality of
        electricity" from static (2015 value) or dynamic (MEDEAS endogenous
        calculation:        1. Static EROI calculation (2015 value)        0. Dynamic EROI calculation (endogenous MEDEAS)
    """
    return 0


@cache.step
@to_float
def static_eroigrid_toteffective_for_allocation_res_elec():
    """
    Real Name: "'static' EROIgrid tot-effective for allocation RES elec"
    Original Eqn: ZIDZ( SUM(output elec over lifetime RES elec for allocation2[RES elec!]) , SUM(FEI over lifetime RES elec for allocation[RES elec!]) )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROI of the aggregated outputs and inputs of RES for generating
        electricity.
    """
    return zidz(
        sum(output_elec_over_lifetime_res_elec_for_allocation2(), dim=("RES elec",)),
        sum(fei_over_lifetime_res_elec_for_allocation(), dim=("RES elec",)),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def ratio_eroigrid_vs_eroi_static():
    """
    Real Name: "ratio EROIgrid vs EROI (static)"
    Original Eqn: IF THEN ELSE("'static' EROI RES elec"[RES elec]<=0,0,"'static' EROIgrid RES elec"[RES elec]/"'static' EROI RES elec"[RES elec])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return if_then_else(
        static_eroi_res_elec() <= 0,
        lambda: 0,
        lambda: static_eroigrid_res_elec() / static_eroi_res_elec(),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def ratio_eroi_per_techn_vs_eroitot_static():
    """
    Real Name: "ratio EROI per techn vs EROItot (static)"
    Original Eqn: XIDZ( "'static' EROIgrid RES elec"[RES elec] , "'static' EROIgrid tot-effective for allocation RES elec", 0 )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return xidz(
        static_eroigrid_res_elec(),
        static_eroigrid_toteffective_for_allocation_res_elec(),
        0,
    )


@cache.step
@to_float
def total_installed_capacity_res_elec_var():
    """
    Real Name: Total installed capacity RES elec var
    Original Eqn: installed capacity RES elec TW[wind onshore]+installed capacity RES elec TW[wind offshore]+installed capacity RES elec TW[solar PV]+installed capacity RES elec TW[CSP]
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Total installed capacity of RES variables for electricity generation.
    """
    return (
        installed_capacity_res_elec_tw().loc["wind onshore"].reset_coords(drop=True)
        + installed_capacity_res_elec_tw().loc["wind offshore"].reset_coords(drop=True)
        + installed_capacity_res_elec_tw().loc["solar PV"].reset_coords(drop=True)
        + installed_capacity_res_elec_tw().loc["CSP"].reset_coords(drop=True)
    )


@cache.run
@subs(["RES elec"], _subscript_dict)
def share_res_elec_generation_curtailedstored():
    """
    Real Name: "share RES elec generation curtailed&stored"
    Original Eqn:
      0
        .
        .
        .
      0.2
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Share of the generation of electricity from RES technologies curtailed or
        stored.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"RES elec": ["hydro"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["geot elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["solid bioE elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["oceanic"]}, ["RES elec"]),
            xr.DataArray(0.2, {"RES elec": ["wind onshore"]}, ["RES elec"]),
            xr.DataArray(0.2, {"RES elec": ["wind offshore"]}, ["RES elec"]),
            xr.DataArray(0.2, {"RES elec": ["solar PV"]}, ["RES elec"]),
            xr.DataArray(0.2, {"RES elec": ["CSP"]}, ["RES elec"]),
        ]
    )


@cache.run
@to_float
def rt_storage_efficiency_phs():
    """
    Real Name: rt storage efficiency PHS
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G51')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Round-trip storage efficiency.
    """
    return _ext_constant_rt_storage_efficiency_phs()


@cache.step
@subs(["RES elec"], _subscript_dict)
def cp_baseload_reduction():
    """
    Real Name: Cp baseload reduction
    Original Eqn: Cp RES elec[RES elec]/"Cp-ini RES elec"[RES elec]
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return cp_res_elec() / cpini_res_elec()


@cache.run
@to_float
def ratio__1():
    """
    Real Name: "ratio = 1"
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 1


@cache.step
@subs(["RES elec"], _subscript_dict)
def fei_over_lifetime_res_elec():
    """
    Real Name: FEI over lifetime RES elec
    Original Eqn:
      FEI over lifetime RES elec dispatch[hydro]
        .
        .
        .
      FEI over lifetime RES elec var[CSP]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Final energy investments over lifetime for RES elec technologies.
    """
    return xrmerge(
        [
            rearrange(
                fei_over_lifetime_res_elec_dispatch()
                .loc["hydro"]
                .reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["hydro"]},
            ),
            rearrange(
                fei_over_lifetime_res_elec_dispatch()
                .loc["geot elec"]
                .reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["geot elec"]},
            ),
            rearrange(
                fei_over_lifetime_res_elec_dispatch()
                .loc["solid bioE elec"]
                .reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["solid bioE elec"]},
            ),
            rearrange(
                fei_over_lifetime_res_elec_dispatch()
                .loc["oceanic"]
                .reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["oceanic"]},
            ),
            rearrange(
                fei_over_lifetime_res_elec_var()
                .loc["wind onshore"]
                .reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["wind onshore"]},
            ),
            rearrange(
                fei_over_lifetime_res_elec_var()
                .loc["wind offshore"]
                .reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["wind offshore"]},
            ),
            rearrange(
                fei_over_lifetime_res_elec_var()
                .loc["solar PV"]
                .reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["solar PV"]},
            ),
            rearrange(
                fei_over_lifetime_res_elec_var().loc["CSP"].reset_coords(drop=True),
                ["RES elec"],
                {"RES elec": ["CSP"]},
            ),
        ]
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def real_cp_res_elec():
    """
    Real Name: real Cp RES elec
    Original Eqn: IF THEN ELSE(Time<2015,Cp RES elec[RES elec], IF THEN ELSE(installed capacity RES elec TW[RES elec]=0,0, real generation RES elec TWh[RES elec]*TWe per TWh/installed capacity RES elec TW[RES elec]))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return if_then_else(
        time() < 2015,
        lambda: cp_res_elec(),
        lambda: if_then_else(
            installed_capacity_res_elec_tw() == 0,
            lambda: 0,
            lambda: real_generation_res_elec_twh()
            * twe_per_twh()
            / installed_capacity_res_elec_tw(),
        ),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def fei_over_lifetime_res_elec_for_allocation():
    """
    Real Name: FEI over lifetime RES elec for allocation
    Original Eqn: FEI over lifetime RES elec[RES elec]*remaining potential RES elec switch[RES elec]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Final energy investments over lifetime for RES elec technologies. Adapted
        for allocating technologies.
    """
    return fei_over_lifetime_res_elec() * remaining_potential_res_elec_switch()


@cache.step
@subs(["RES elec"], _subscript_dict)
def remaining_potential_res_elec_after_intermitt():
    """
    Real Name: remaining potential RES elec after intermitt
    Original Eqn: IF THEN ELSE(potential RES elec after intermitt TWh[RES elec] > potential generation RES elec TWh[RES elec], ZIDZ( potential RES elec after intermitt TWh[RES elec]-potential generation RES elec TWh[RES elec] , potential RES elec after intermitt TWh[RES elec] ), 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return if_then_else(
        potential_res_elec_after_intermitt_twh() > potential_generation_res_elec_twh(),
        lambda: zidz(
            potential_res_elec_after_intermitt_twh()
            - potential_generation_res_elec_twh(),
            potential_res_elec_after_intermitt_twh(),
        ),
        lambda: 0,
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def remaining_potential_res_elec_switch():
    """
    Real Name: remaining potential RES elec switch
    Original Eqn: IF THEN ELSE(remaining potential RES elec after intermitt[RES elec]<0.025,0,1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    This variable detects when a RES elec technology has (almost, 97.5%)
        reached its full potential so this technology is not taken into account in
        the estimation of the total EROI aggregated for the calculation of the mix
        allocation.
    """
    return if_then_else(
        remaining_potential_res_elec_after_intermitt() < 0.025, lambda: 0, lambda: 1
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def output_elec_over_lifetime_res_elec_for_allocation():
    """
    Real Name: output elec over lifetime RES elec for allocation
    Original Eqn: output elec over lifetime RES elec[RES elec]*remaining potential RES elec switch[RES elec]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return output_elec_over_lifetime_res_elec() * remaining_potential_res_elec_switch()


@cache.step
@subs(["RES elec"], _subscript_dict)
def potential_res_elec_after_intermitt_twh():
    """
    Real Name: potential RES elec after intermitt TWh
    Original Eqn: max RES elec TWe[RES elec]*Cp baseload reduction[RES elec]/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Potential of RES for electricity per technology after accounting for the
        reduction of the maximal potential given the reduction of the Cp.
    """
    return max_res_elec_twe() * cp_baseload_reduction() / twe_per_twh()


@cache.step
@subs(["RES elec"], _subscript_dict)
def replacement_rate_res_elec():
    """
    Real Name: replacement rate RES elec
    Original Eqn: IF THEN ELSE(potential generation RES elec TWh[RES elec]<potential RES elec after intermitt TWh[RES elec],1,0.9)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Replacement rate of RES for electricity: by default all decommissioned
        capacity is replaced (=1). In the case of overcapacity in relation to the
        potential after accounting for intermittency, we reduce the annual
        replacement rate to 0.9.
    """
    return if_then_else(
        potential_generation_res_elec_twh() < potential_res_elec_after_intermitt_twh(),
        lambda: 1,
        lambda: 0.9,
    )


@cache.step
@to_float
def static_eroitot_res_elec():
    """
    Real Name: "'static' EROItot RES elec"
    Original Eqn: IF THEN ELSE(SUM(FEI over lifetime RES elec[RES elec!])<0, 0, SUM(output elec over lifetime RES elec [RES elec!])/(SUM(FEI over lifetime RES elec[RES elec!])))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROI over the lifetime of the aggregated outputs and inputs of RES for
        generating electricity.
    """
    return if_then_else(
        sum(fei_over_lifetime_res_elec(), dim=("RES elec",)) < 0,
        lambda: 0,
        lambda: sum(output_elec_over_lifetime_res_elec(), dim=("RES elec",))
        / (sum(fei_over_lifetime_res_elec(), dim=("RES elec",))),
    )


@cache.step
@to_float
def static_eroitoteffective_for_allocation_res_elec():
    """
    Real Name: "'static' EROItot-effective for allocation RES elec"
    Original Eqn: ZIDZ( SUM(output elec over lifetime RES elec for allocation[RES elec!]) , SUM(FEI over lifetime RES elec for allocation[RES elec!]) )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    EROI of the aggregated outputs and inputs of RES for generating
        electricity.
    """
    return zidz(
        sum(output_elec_over_lifetime_res_elec_for_allocation(), dim=("RES elec",)),
        sum(fei_over_lifetime_res_elec_for_allocation(), dim=("RES elec",)),
    )


@cache.step
@to_float
def new_capacity_installed_onshore_wind_tw():
    """
    Real Name: new capacity installed onshore wind TW
    Original Eqn: new RES elec capacity under planning[wind onshore]
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        new_res_elec_capacity_under_planning()
        .loc["wind onshore"]
        .reset_coords(drop=True)
    )


@cache.step
@subs(["RES elec", "water0"], _subscript_dict)
def ced_om_over_lifetime_per_water_res_elec_var():
    """
    Real Name: "CED O&M over lifetime per water RES elec var"
    Original Eqn: RES elec capacity under construction TW[RES elec]*"water for O&M - RES elec"[RES elec,water0]* Energy requirements per unit of water consumption[water0]*lifetime RES elec[RES elec]*(M per T/kg per Mt)*(kg per Mt/MJ per EJ )
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'water0']

    Cumulative energy demand per water type for O&M of RES variables per
        technology over all the lifetime of the infrastructure.
    """
    return (
        res_elec_capacity_under_construction_tw()
        * water_for_om__res_elec()
        * energy_requirements_per_unit_of_water_consumption()
        * lifetime_res_elec()
        * (m_per_t() / kg_per_mt())
        * (kg_per_mt() / mj_per_ej())
    )


@cache.run
@subs(["RES elec"], _subscript_dict)
def selfelectricity_consumption_res_elec():
    """
    Real Name: "self-electricity consumption RES elec"
    Original Eqn:
      0
        .
        .
        .
      0
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']


    """
    return xrmerge(
        [
            xr.DataArray(0, {"RES elec": ["hydro"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["geot elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["solid bioE elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["oceanic"]}, ["RES elec"]),
            _ext_constant_selfelectricity_consumption_res_elec(),
            xr.DataArray(0, {"RES elec": ["CSP"]}, ["RES elec"]),
        ]
    )


@cache.run
@subs(["RES elec"], _subscript_dict)
def share_energy_requirements_for_decom_res_elec():
    """
    Real Name: share energy requirements for decom RES elec
    Original Eqn:
      0
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'B122')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Share energy requirements for decomissioning power RES plants as a share
        of the energy requirements for the construction of new capacity.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"RES elec": ["hydro"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["geot elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["solid bioE elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["oceanic"]}, ["RES elec"]),
            _ext_constant_share_energy_requirements_for_decom_res_elec(),
        ]
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def ced_om_over_lifetime_res_elec_var():
    """
    Real Name: "CED O&M over lifetime RES elec var"
    Original Eqn: (SUM("CED O&M over lifetime per material RES elec var"[RES elec,materials!])+SUM("CED O&M over lifetime per water RES elec var" [RES elec,water0!]))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Cumulative energy demand for O&M of RES variables per technology over all
        the lifetime of the infrastructure.
    """
    return sum(
        ced_om_over_lifetime_per_material_res_elec_var(), dim=("materials",)
    ) + sum(ced_om_over_lifetime_per_water_res_elec_var(), dim=("water0",))


@cache.run
@subs(["RES elec"], _subscript_dict)
def grid_correction_factor_res_elec():
    """
    Real Name: Grid correction factor RES elec
    Original Eqn:
      0
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'B64')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Grid correction factor to take into account the electricity losses due to
        Joule effect in each power plant.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"RES elec": ["hydro"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["geot elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["solid bioE elec"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["oceanic"]}, ["RES elec"]),
            _ext_constant_grid_correction_factor_res_elec(),
        ]
    )


@cache.run
@subs(["materials"], _subscript_dict)
def materials_for_om_per_capacity_installed__csp():
    """
    Real Name: "materials for O&M per capacity installed - CSP"
    Original Eqn:
      0
        .
        .
        .
      0
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements for operation and maintenance per unit of new
        installed capacity of solar CSP.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"materials": ["Adhesive"]}, ["materials"]),
            _ext_constant_materials_for_om_per_capacity_installed__csp(),
            xr.DataArray(0, {"materials": ["Aluminium mirrors"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cadmium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cement"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Chromium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Dy"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Electric electronic components"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["Evacuation lines"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Foam glass"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Galium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["gravel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Indium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Iron"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["KNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Asphalt"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Limestone"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lithium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Manganese"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Heavy equipment"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Concrete"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Molybdenum"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 synthetic"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Neodymium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Nickel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 15per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 5per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Paint"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lead"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Polypropylene"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock wool"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Site preparation"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Tin"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["soda ash"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["steel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["tellurium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium dioxide"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["vanadium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["wires"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["zinc"]}, ["materials"]),
        ]
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def total_water_for_om_required_by_res_elec_per_techn():
    """
    Real Name: "Total water for O&M required by RES elec per techn"
    Original Eqn: SUM("Water for O&M required for RES elec"[RES elec,water0!])
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Annual total water required by RES technology for generating electricity.
    """
    return sum(water_for_om_required_for_res_elec(), dim=("water0",))


@cache.step
@subs(["RES elec", "water0"], _subscript_dict)
def water_for_om_required_for_res_elec():
    """
    Real Name: "Water for O&M required for RES elec"
    Original Eqn:
      installed capacity RES elec TW[hydro]*"water for O&M - RES elec"[hydro,water0]*M per T/kg per Mt
        .
        .
        .
      installed capacity RES elec TW[CSP]*"water for O&M - RES elec"[CSP,water0]*M per T/kg per Mt
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'water0']

    Annual water required for the operation and maintenance of the capacity of
        RES for electricity in operation by technology.
    """
    return xrmerge(
        [
            rearrange(
                installed_capacity_res_elec_tw().loc["hydro"].reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec().loc["hydro", :].reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["hydro"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                installed_capacity_res_elec_tw()
                .loc["geot elec"]
                .reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec()
                    .loc["geot elec", :]
                    .reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["geot elec"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                installed_capacity_res_elec_tw()
                .loc["solid bioE elec"]
                .reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec()
                    .loc["solid bioE elec", :]
                    .reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["solid bioE elec"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                installed_capacity_res_elec_tw().loc["oceanic"].reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec().loc["oceanic", :].reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["oceanic"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                installed_capacity_res_elec_tw()
                .loc["wind onshore"]
                .reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec()
                    .loc["wind onshore", :]
                    .reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["wind onshore"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                installed_capacity_res_elec_tw()
                .loc["wind offshore"]
                .reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec()
                    .loc["wind offshore", :]
                    .reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["wind offshore"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                installed_capacity_res_elec_tw().loc["solar PV"].reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec().loc["solar PV", :].reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["solar PV"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                installed_capacity_res_elec_tw().loc["CSP"].reset_coords(drop=True)
                * rearrange(
                    water_for_om__res_elec().loc["CSP", :].reset_coords(drop=True),
                    ["water0"],
                    _subscript_dict,
                )
                * m_per_t()
                / kg_per_mt(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["CSP"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
        ]
    )


@cache.run
@subs(["RES elec", "materials"], _subscript_dict)
def materials_for_om_per_capacity_installed_res_elec():
    """
    Real Name: "materials for O&M per capacity installed RES elec"
    Original Eqn:
      0
        .
        .
        .
      "materials for O&M per capacity installed - CSP"[materials]
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec', 'materials']


    """
    return xrmerge(
        [
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["hydro"],
                },
                ["RES elec", "materials"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["geot elec"],
                },
                ["RES elec", "materials"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["solid bioE elec"],
                },
                ["RES elec", "materials"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["materials"]},
                    "RES elec": ["oceanic"],
                },
                ["RES elec", "materials"],
            ),
            rearrange(
                materials_for_om_per_capacity_installed__wind_onshore(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["wind onshore"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
            rearrange(
                materials_for_om_per_capacity_installed__wind_offshore(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["wind offshore"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
            rearrange(
                materials_for_om_per_capacity_installed__pv(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["solar PV"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
            rearrange(
                materials_for_om_per_capacity_installed__csp(),
                ["RES elec", "materials"],
                {
                    "RES elec": ["CSP"],
                    "materials": [
                        "Adhesive",
                        "Aluminium",
                        "Aluminium mirrors",
                        "Cadmium",
                        "Carbon fiber",
                        "Cement",
                        "Chromium",
                        "Copper",
                        "diesel",
                        "Dy",
                        "Electric electronic components",
                        "Evacuation lines",
                        "Fiberglass",
                        "Foam glass",
                        "Galium",
                        "Glass",
                        "Glass reinforcing plastic",
                        "gravel",
                        "Indium",
                        "Iron",
                        "KNO3 mined",
                        "Asphalt",
                        "Lime",
                        "Limestone",
                        "Lithium",
                        "Lubricant",
                        "Magnesium",
                        "Manganese",
                        "Heavy equipment",
                        "Concrete",
                        "Molybdenum",
                        "NaNO3 mined",
                        "NaNO3 synthetic",
                        "Neodymium",
                        "Nickel",
                        "Over grid 15per",
                        "Over grid 5per",
                        "Paint",
                        "Lead",
                        "Plastics",
                        "Polypropylene",
                        "Rock",
                        "Rock wool",
                        "Sand",
                        "Silicon sand",
                        "Silicon wafer modules",
                        "Silver",
                        "Site preparation",
                        "Tin",
                        "soda ash",
                        "steel",
                        "synthetic oil",
                        "tellurium",
                        "titanium",
                        "titanium dioxide",
                        "vanadium",
                        "wires",
                        "zinc",
                    ],
                },
            ),
        ]
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def total_energy_requirements_om_for_water_consumption_res_elec():
    """
    Real Name: "Total energy requirements O&M for water consumption RES elec"
    Original Eqn: SUM("Energy requirements for O&M for water consumption RES elec"[RES elec,water0!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Total energy requirements for water consumption (all types) by RES
        technology for electricity generation.
    """
    return sum(
        energy_requirements_for_om_for_water_consumption_res_elec(), dim=("water0",)
    )


@cache.step
@subs(["RES elec", "water0"], _subscript_dict)
def energy_requirements_for_om_for_water_consumption_res_elec():
    """
    Real Name: "Energy requirements for O&M for water consumption RES elec"
    Original Eqn: Energy requirements per unit of water consumption[water0]*"Water for O&M required for RES elec"[RES elec,water0]*kg per Mt /MJ per EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec', 'water0']

    Energy requirements for operation and maintenance of water consumption by
        RES technology for generating electricity.
    """
    return (
        energy_requirements_per_unit_of_water_consumption()
        * water_for_om_required_for_res_elec()
        * kg_per_mt()
        / mj_per_ej()
    )


@cache.run
@subs(["RES elec", "water0"], _subscript_dict)
def water_for_om__res_elec():
    """
    Real Name: "water for O&M - RES elec"
    Original Eqn:
      0
        .
        .
        .
      "water for O&M - CSP"[water0]
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec', 'water0']


    """
    return xrmerge(
        [
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["water0"]},
                    "RES elec": ["hydro"],
                },
                ["RES elec", "water0"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["water0"]},
                    "RES elec": ["geot elec"],
                },
                ["RES elec", "water0"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["water0"]},
                    "RES elec": ["solid bioE elec"],
                },
                ["RES elec", "water0"],
            ),
            xr.DataArray(
                0,
                {
                    **{dim: _subscript_dict[dim] for dim in ["water0"]},
                    "RES elec": ["oceanic"],
                },
                ["RES elec", "water0"],
            ),
            rearrange(
                water_for_om__wind_onshore(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["wind onshore"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                water_for_om__wind_offshore(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["wind offshore"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                water_for_om__pv(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["solar PV"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
            rearrange(
                water_for_om__csp(),
                ["RES elec", "water0"],
                {
                    "RES elec": ["CSP"],
                    "water0": ["clean pumped water", "distilled deionized water"],
                },
            ),
        ]
    )


@cache.run
@subs(["water0"], _subscript_dict)
def energy_requirements_per_unit_of_water_consumption():
    """
    Real Name: Energy requirements per unit of water consumption
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'Y114')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'Y115')
    Units: MJ/kg
    Limits: (None, None)
    Type: constant
    Subs: ['water0']

    Energy requirements for water consumption in RES plants for generation of
        electricity.
    """
    return _ext_constant_energy_requirements_per_unit_of_water_consumption()


@cache.run
@to_float
def unlimited_nre():
    """
    Real Name: "unlimited NRE?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E66')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to consider if non-renewable resources (oil, gas, coal and uranium)
        are unlimited (1), or if it is limited (0). If limited then the available
        depletion curves are considered.
    """
    return _ext_constant_unlimited_nre()


@cache.step
@to_float
def extraction_uranium_ej_eu():
    """
    Real Name: extraction uranium EJ EU
    Original Eqn: IF THEN ELSE(RURR uranium<0,0, IF THEN ELSE(Time<2016, Historic uranium domestic EU extracted t/(kt uranium per EJ*tonnes per kt), IF THEN ELSE("unlimited NRE?"=1, PE demand uranium EU EJ, IF THEN ELSE("unlimited uranium?"=1, PE demand uranium EU EJ, MIN(PE demand uranium EU EJ, max extraction uranium EJ)))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of uranium.
    """
    return if_then_else(
        rurr_uranium() < 0,
        lambda: 0,
        lambda: if_then_else(
            time() < 2016,
            lambda: historic_uranium_domestic_eu_extracted_t()
            / (kt_uranium_per_ej() * tonnes_per_kt()),
            lambda: if_then_else(
                unlimited_nre() == 1,
                lambda: pe_demand_uranium_eu_ej(),
                lambda: if_then_else(
                    unlimited_uranium() == 1,
                    lambda: pe_demand_uranium_eu_ej(),
                    lambda: np.minimum(
                        pe_demand_uranium_eu_ej(), max_extraction_uranium_ej()
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def urr_uranium():
    """
    Real Name: URR uranium
    Original Eqn: IF THEN ELSE("unlimited NRE?"=1, URR uranium unlimited, IF THEN ELSE("unlimited uranium?"=1, URR uranium unlimited, IF THEN ELSE(Choose extraction uranium curve=1, URR uranium User defined, IF THEN ELSE(Choose extraction uranium curve=2, URR uranium User defined, IF THEN ELSE(Choose extraction uranium curve=3, URR uranium unlimited, URR uranium User defined)))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Ultimately Recoverable Resources (URR) associated to the selected
        depletion curve.
    """
    return if_then_else(
        unlimited_nre() == 1,
        lambda: urr_uranium_unlimited(),
        lambda: if_then_else(
            unlimited_uranium() == 1,
            lambda: urr_uranium_unlimited(),
            lambda: if_then_else(
                choose_extraction_uranium_curve() == 1,
                lambda: urr_uranium_user_defined(),
                lambda: if_then_else(
                    choose_extraction_uranium_curve() == 2,
                    lambda: urr_uranium_user_defined(),
                    lambda: if_then_else(
                        choose_extraction_uranium_curve() == 3,
                        lambda: urr_uranium_unlimited(),
                        lambda: urr_uranium_user_defined(),
                    ),
                ),
            ),
        ),
    )


@cache.step
@to_float
def urr_conv_oil():
    """
    Real Name: URR conv oil
    Original Eqn: IF THEN ELSE("separate conv and unconv oil?"=1, IF THEN ELSE("unlimited NRE?"=1,URR conv oil unlimited, IF THEN ELSE("unlimited oil?"=1,URR conv oil unlimited, IF THEN ELSE(choose extraction curve conv oil=1, URR conv oil Mohr15 Low, IF THEN ELSE(choose extraction curve conv oil=2, URR conv oil Mohr15 BG, IF THEN ELSE(choose extraction curve conv oil=3, URR conv oil Mohr15 High, URR conv oil User defined))))) , 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Ultimately Recoverable Resources (URR) associated to the selected
        depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: if_then_else(
            unlimited_nre() == 1,
            lambda: urr_conv_oil_unlimited(),
            lambda: if_then_else(
                unlimited_oil() == 1,
                lambda: urr_conv_oil_unlimited(),
                lambda: if_then_else(
                    choose_extraction_curve_conv_oil() == 1,
                    lambda: urr_conv_oil_mohr15_low(),
                    lambda: if_then_else(
                        choose_extraction_curve_conv_oil() == 2,
                        lambda: urr_conv_oil_mohr15_bg(),
                        lambda: if_then_else(
                            choose_extraction_curve_conv_oil() == 3,
                            lambda: urr_conv_oil_mohr15_high(),
                            lambda: urr_conv_oil_user_defined(),
                        ),
                    ),
                ),
            ),
        ),
        lambda: 0,
    )


def historic_biogas_pes(x):
    """
    Real Name: Historic biogas PES
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '216', 'B231')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic production of biogases (1990-2014).
    """
    return _ext_lookup_historic_biogas_pes(x)


@cache.run
@to_float
def past_biogas_growth():
    """
    Real Name: past biogas growth
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx' , 'Constants', 'X231')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Current growth patterns.
    """
    return _ext_constant_past_biogas_growth()


@cache.step
@to_float
def pes_biogas_ej():
    """
    Real Name: PES Biogas EJ
    Original Eqn: INTEG ( new PES biogas, 0.13135)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Biogases primary energy supply. Includes all uses: heat, electricity,
        total final energy consumption, etc. The same share for final energy uses
        as well as the efficiency of transformation than for natural fossil gas
        are assumed.
    """
    return _integ_pes_biogas_ej()


@cache.run
@to_float
def p_biogas():
    """
    Real Name: P biogas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C53')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Projected annual growth.
    """
    return _ext_constant_p_biogas()


@cache.run
@to_float
def max_pe_biogas_ej():
    """
    Real Name: max PE biogas EJ
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C52')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Maximun potencial (primary energy) of biogases production.
    """
    return _ext_constant_max_pe_biogas_ej()


@cache.step
@to_float
def historic_pes_peat_ej():
    """
    Real Name: Historic PES peat EJ
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '216', 'B230')
    Units: EJ
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic primary energy supply of peat.
    """
    return _ext_data_historic_pes_peat_ej(time())


@cache.step
@to_float
def pes_peat_ej():
    """
    Real Name: PES peat EJ
    Original Eqn: MAX(IF THEN ELSE(Time>2014, -0.0125*(Time)+25.3125, Historic PES peat EJ),0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(
        if_then_else(
            time() > 2014,
            lambda: -0.0125 * (time()) + 25.3125,
            lambda: historic_pes_peat_ej(),
        ),
        0,
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def fei_over_lifetime_res_elec_dispatch():
    """
    Real Name: FEI over lifetime RES elec dispatch
    Original Eqn: CEDtot per TW over lifetime RES elec dispatch[RES elec]*RES elec capacity under construction TW[RES elec]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Final energy invested over lifetime per RES elec dispatchable technology
        (equivalent to the denominator of the EROI (=CED*g).
    """
    return (
        cedtot_per_tw_over_lifetime_res_elec_dispatch()
        * res_elec_capacity_under_construction_tw()
    )


@cache.run
@to_float
def activate_eroi_allocation_rule():
    """
    Real Name: activate EROI allocation rule
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Activate/Deactivate EROI allocation rule for the RES elec technologies:        1. Activated        0. Deactivated
    """
    return 1


@cache.step
@subs(["RES elec"], _subscript_dict)
def eroi_allocation_rule_per_res_elec():
    """
    Real Name: EROI allocation rule per RES elec
    Original Eqn: IF THEN ELSE(Time<2015, 1, IF THEN ELSE("ratio EROI per techn vs EROItot (static)"[RES elec]=0,0, IF THEN ELSE("ratio EROI per techn vs EROItot (static)"[RES elec]<0.1,0, 0.434294*LN("ratio EROI per techn vs EROItot (static)"[RES elec])+1)))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Allocation rule for the RES elec technologies based on their EROI.
    """
    return if_then_else(
        time() < 2015,
        lambda: 1,
        lambda: if_then_else(
            ratio_eroi_per_techn_vs_eroitot_static() == 0,
            lambda: 0,
            lambda: if_then_else(
                ratio_eroi_per_techn_vs_eroitot_static() < 0.1,
                lambda: 0,
                lambda: 0.434294 * np.log(ratio_eroi_per_techn_vs_eroitot_static()) + 1,
            ),
        ),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def dynamic_eroi_res_elec_var():
    """
    Real Name: "'dynamic' EROI RES elec var"
    Original Eqn: IF THEN ELSE(FEI RES elec var[RES elec]=0, 0, real generation RES elec EJ[RES elec]/FEI RES elec var [RES elec])
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Evolution of EROI over time per RES variable technology, considering CED
        dynamic over time.
    """
    return if_then_else(
        fei_res_elec_var() == 0,
        lambda: 0,
        lambda: real_generation_res_elec_ej() / fei_res_elec_var(),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def eroiini_res_elec_dispatch():
    """
    Real Name: "EROI-ini RES elec dispatch"
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Parameters', '6', 'G21')
        .
        .
        .
      0
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RES elec']

    Energy return on energy invested of RES technologies for generating
        electricity dispatchables at the initial Cp level.
    """
    return xrmerge(
        [
            _ext_data_eroiini_res_elec_dispatch(time()),
            _ext_constant_eroiini_res_elec_dispatch(),
            xr.DataArray(0, {"RES elec": ["wind onshore"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["wind offshore"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["solar PV"]}, ["RES elec"]),
            xr.DataArray(0, {"RES elec": ["CSP"]}, ["RES elec"]),
        ]
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def res_elec_capacity_under_construction_tw():
    """
    Real Name: RES elec capacity under construction TW
    Original Eqn: RES elec planned capacity TW[RES elec]/MAX(time construction RES elec[RES elec],TIME STEP)
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    RES infraestructure for electricity generation capacity under construction.
    """
    return res_elec_planned_capacity_tw() / np.maximum(
        time_construction_res_elec(), time_step()
    )


@cache.step
@to_float
def real_generation_solar_pv_ej():
    """
    Real Name: real generation solar PV EJ
    Original Eqn: real generation RES elec EJ[solar PV]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return real_generation_res_elec_ej().loc["solar PV"].reset_coords(drop=True)


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_new_csp_mt():
    """
    Real Name: materials required for new CSP Mt
    Original Eqn: materials required for new RES elec Mt[CSP,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the installation of new capacity of solar
        CSP.
    """
    return rearrange(
        materials_required_for_new_res_elec_mt().loc["CSP", :].reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_new_pv_mt():
    """
    Real Name: materials required for new PV Mt
    Original Eqn: materials required for new RES elec Mt[solar PV,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the installation of new capacity of solar PV.
    """
    return rearrange(
        materials_required_for_new_res_elec_mt()
        .loc["solar PV", :]
        .reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_new_wind_offshore_mt():
    """
    Real Name: materials required for new wind offshore Mt
    Original Eqn: materials required for new RES elec Mt[wind offshore,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the installation of new capacity of wind
        offshore.
    """
    return rearrange(
        materials_required_for_new_res_elec_mt()
        .loc["wind offshore", :]
        .reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_new_wind_onshore_mt():
    """
    Real Name: materials required for new wind onshore Mt
    Original Eqn: materials required for new RES elec Mt[wind onshore,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the installation of new capacity of wind
        oshore.
    """
    return rearrange(
        materials_required_for_new_res_elec_mt()
        .loc["wind onshore", :]
        .reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_om_csp_mt():
    """
    Real Name: "materials required for O&M CSP Mt"
    Original Eqn: "materials required for O&M RES elec Mt"[CSP,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the operation and maintenance of solar CSP.
    """
    return rearrange(
        materials_required_for_om_res_elec_mt().loc["CSP", :].reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_om_pv_mt():
    """
    Real Name: "materials required for O&M PV Mt"
    Original Eqn: "materials required for O&M RES elec Mt"[solar PV,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the operation and maintenance of solar PV.
    """
    return rearrange(
        materials_required_for_om_res_elec_mt()
        .loc["solar PV", :]
        .reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_om_wind_offshore_mt():
    """
    Real Name: "materials required for O&M wind offshore Mt"
    Original Eqn: "materials required for O&M RES elec Mt"[wind offshore,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the operation and maintenance of wind
        offshore.
    """
    return rearrange(
        materials_required_for_om_res_elec_mt()
        .loc["wind offshore", :]
        .reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["materials"], _subscript_dict)
def materials_required_for_om_wind_onshore_mt():
    """
    Real Name: "materials required for O&M wind onshore Mt"
    Original Eqn: "materials required for O&M RES elec Mt"[wind onshore,materials]
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Annual materials required for the operation and maintenance of wind
        onshore.
    """
    return rearrange(
        materials_required_for_om_res_elec_mt()
        .loc["wind onshore", :]
        .reset_coords(drop=True),
        ["materials"],
        _subscript_dict,
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def real_generation_res_elec_ej():
    """
    Real Name: real generation RES elec EJ
    Original Eqn: real generation RES elec TWh[RES elec]*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Electricity generation by RES technology.
    """
    return real_generation_res_elec_twh() * ej_per_twh()


@cache.step
@to_float
def cedtot_solar_pv():
    """
    Real Name: CEDtot solar PV
    Original Eqn: FEI RES elec var[solar PV]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return fei_res_elec_var().loc["solar PV"].reset_coords(drop=True)


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_required_for_new_res_elec_mt():
    """
    Real Name: Total materials required for new RES elec Mt
    Original Eqn: SUM(materials required for new RES elec Mt[RES elec!,materials])
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total annual materials requirements per new installed capacity of RES for
        electricity generation.
    """
    return sum(materials_required_for_new_res_elec_mt(), dim=("RES elec",))


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_required_for_om_res_elec_mt():
    """
    Real Name: "Total materials required for O&M RES elec Mt"
    Original Eqn: SUM("materials required for O&M RES elec Mt"[RES elec!,materials])
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total annual materials required for the operation and maintenance of the
        capacity of RES for electricity in operation by technology.
    """
    return sum(materials_required_for_om_res_elec_mt(), dim=("RES elec",))


@cache.run
@to_float
def eroi1():
    """
    Real Name: "EROI=1"
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 1


@cache.step
@to_float
def electrical_distribution_losses_twh():
    """
    Real Name: Electrical distribution losses TWh
    Original Eqn: Total FE Elec demand TWh*"share transm&distr elec losses"
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Electrical transmission and distribution losses.
    """
    return total_fe_elec_demand_twh() * share_transmdistr_elec_losses()


@cache.step
@to_float
def max_share_transmdistr_elec_losses():
    """
    Real Name: "Max share transm&distr elec losses"
    Original Eqn: "share transm&distr elec losses initial"*(1+0.0115*EXP(4.2297*1)-0.00251)
    Units: Dnml
    Limits: (None, None)
    Type: component
    Subs: None

    Assumed maximum share of transmission and distribution electric losses
        (when RES supply 100% of the total consumption).
    """
    return share_transmdistr_elec_losses_initial() * (
        1 + 0.0115 * np.exp(4.2297 * 1) - 0.00251
    )


@cache.step
@to_float
def heatcom_distribution_losses():
    """
    Real Name: "Heat-com distribution losses"
    Original Eqn: "FED Heat-com EJ"*Share heat distribution losses
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Distribution losses associated to heat commercial.
    """
    return fed_heatcom_ej() * share_heat_distribution_losses()


@cache.step
@subs(["RES elec"], _subscript_dict)
def potential_generation_res_elec_twh():
    """
    Real Name: potential generation RES elec TWh
    Original Eqn: installed capacity RES elec TW[RES elec]*Cp RES elec[RES elec]/TWe per TWh
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Potential generation of electricity by RES technology given the installed
        capacity.
    """
    return installed_capacity_res_elec_tw() * cp_res_elec() / twe_per_twh()


@cache.step
@subs(["RES elec"], _subscript_dict)
def output_elec_over_lifetime_res_elec():
    """
    Real Name: output elec over lifetime RES elec
    Original Eqn: real Cp RES elec[RES elec]*RES elec capacity under construction TW[RES elec]*(1/TWe per TWh)*lifetime RES elec[RES elec]*EJ per TWh
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Total electricity output generated over the full operation of the
        infrastructure of the new capacity installed.
    """
    return (
        real_cp_res_elec()
        * res_elec_capacity_under_construction_tw()
        * (1 / twe_per_twh())
        * lifetime_res_elec()
        * ej_per_twh()
    )


@cache.step
@to_float
def variation_share_transmdistr_elec_losses():
    """
    Real Name: "variation share transm&distr elec losses"
    Original Eqn: IF THEN ELSE(Time<2015, 0, "variation share transm&distr losses elec"*"remaining share transm&distr elec losses")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual variation of the share of transmission and distribution losses of
        electricity.
    """
    return if_then_else(
        time() < 2015,
        lambda: 0,
        lambda: variation_share_transmdistr_losses_elec()
        * remaining_share_transmdistr_elec_losses(),
    )


@cache.step
@to_float
def remaining_share_transmdistr_elec_losses():
    """
    Real Name: "remaining share transm&distr elec losses"
    Original Eqn: ("Max share transm&distr elec losses"-"share transm&distr elec losses")/"Max share transm&distr elec losses"
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining share in relation to the assumed maximum transmission and
        distribution losses.
    """
    return (
        max_share_transmdistr_elec_losses() - share_transmdistr_elec_losses()
    ) / max_share_transmdistr_elec_losses()


@cache.step
@to_float
def share_transmdistr_elec_losses():
    """
    Real Name: "share transm&distr elec losses"
    Original Eqn: INTEG ( "variation share transm&distr elec losses", "share transm&distr elec losses initial")
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Evolution over time of the share of transmission and distribution losses
        of electricity. It is assumed that these losses increase over time as the
        share of RES increase in the electricity mix.
    """
    return _integ_share_transmdistr_elec_losses()


@cache.step
@to_float
def total_gen_losses_demand_for_elec_plants_ej():
    """
    Real Name: Total gen losses demand for Elec plants EJ
    Original Eqn: PE demand gas Elec plants EJ*(1-efficiency gas for electricity)+PE demand coal Elec plants EJ*(1-efficiency coal for electricity)+PE demand oil Elec plants EJ*(1-efficiency liquids for electricity)+PE losses uranium for Elec EJ+PE losses BioE for Elec EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total generation losses associated to electricity demand.
    """
    return (
        pe_demand_gas_elec_plants_ej() * (1 - efficiency_gas_for_electricity())
        + pe_demand_coal_elec_plants_ej() * (1 - efficiency_coal_for_electricity())
        + pe_demand_oil_elec_plants_ej() * (1 - efficiency_liquids_for_electricity())
        + pe_losses_uranium_for_elec_ej()
        + pe_losses_bioe_for_elec_ej()
    )


@cache.step
@to_float
def pe_losses_bioe_for_elec_ej():
    """
    Real Name: PE losses BioE for Elec EJ
    Original Eqn: PE real generation RES elec[solid bioE elec]-FE Elec generation from bioE TWh*EJ per TWh
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    (Primary energy) losses due to the production of electricity from solid
        bioenergy.
    """
    return (
        pe_real_generation_res_elec().loc["solid bioE elec"].reset_coords(drop=True)
        - fe_elec_generation_from_bioe_twh() * ej_per_twh()
    )


@cache.run
@subs(["water0"], _subscript_dict)
def water_for_om__wind_offshore():
    """
    Real Name: "water for O&M - wind offshore"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'E114')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'E115')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['water0']


    """
    return _ext_constant_water_for_om__wind_offshore()


@cache.step
@subs(["materials"], _subscript_dict)
def total_materials_required_for_res_elec_mt():
    """
    Real Name: Total materials required for RES elec Mt
    Original Eqn: Total materials required for new RES elec Mt[materials]+"Total materials required for O&M RES elec Mt"[materials]
    Units: Mt/Year
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total annual materials requirements for the installation and O&M of RES
        for electricity generation.
    """
    return (
        total_materials_required_for_new_res_elec_mt()
        + total_materials_required_for_om_res_elec_mt()
    )


@cache.step
@to_float
def share_energy_for_material_consumption_for_alt_techn_vs_tfec():
    """
    Real Name: share energy for material consumption for alt techn vs TFEC
    Original Eqn: TFE required for total material consumption for alt techn/Real TFEC
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of energy requirements for alternative technologies (RES elec & EV
        Batteries) vs TFES.
    """
    return tfe_required_for_total_material_consumption_for_alt_techn() / real_tfec()


@cache.run
@subs(["water0"], _subscript_dict)
def water_for_om__pv():
    """
    Real Name: "water for O&M - PV"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'C114')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'C115')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['water0']


    """
    return _ext_constant_water_for_om__pv()


@cache.run
@subs(["water0"], _subscript_dict)
def water_for_om__wind_onshore():
    """
    Real Name: "water for O&M - wind onshore"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'D114')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'D115')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['water0']


    """
    return _ext_constant_water_for_om__wind_onshore()


@cache.run
@subs(["materials"], _subscript_dict)
def materials_for_om_per_capacity_installed__wind_offshore():
    """
    Real Name: "materials for O&M per capacity installed - wind offshore"
    Original Eqn:
      0
        .
        .
        .
      0
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements for operation and maintenance per unit of new
        installed capacity of wind offshore.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"materials": ["Adhesive"]}, ["materials"]),
            _ext_constant_materials_for_om_per_capacity_installed__wind_offshore(),
            xr.DataArray(0, {"materials": ["Aluminium mirrors"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cadmium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cement"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Chromium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Dy"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Electric electronic components"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["Evacuation lines"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Foam glass"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Galium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["gravel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Indium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Iron"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["KNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Asphalt"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Limestone"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lithium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Manganese"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Heavy equipment"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Concrete"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Molybdenum"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 synthetic"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Neodymium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Nickel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 15per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 5per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Paint"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lead"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Polypropylene"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock wool"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Site preparation"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Tin"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["soda ash"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["steel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["tellurium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium dioxide"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["vanadium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["wires"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["zinc"]}, ["materials"]),
        ]
    )


@cache.run
@subs(["materials"], _subscript_dict)
def materials_for_om_per_capacity_installed__wind_onshore():
    """
    Real Name: "materials for O&M per capacity installed - wind onshore"
    Original Eqn:
      0
        .
        .
        .
      0
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements for operation and maintenance per unit of new
        installed capacity of wind onshore.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"materials": ["Adhesive"]}, ["materials"]),
            _ext_constant_materials_for_om_per_capacity_installed__wind_onshore(),
            xr.DataArray(0, {"materials": ["Aluminium mirrors"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cadmium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cement"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Chromium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Dy"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Electric electronic components"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["Evacuation lines"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Foam glass"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Galium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["gravel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Indium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Iron"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["KNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Asphalt"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Limestone"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lithium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Manganese"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Heavy equipment"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Concrete"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Molybdenum"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 synthetic"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Neodymium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Nickel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 15per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 5per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Paint"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lead"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Polypropylene"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock wool"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Site preparation"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Tin"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["soda ash"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["steel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["tellurium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium dioxide"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["vanadium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["wires"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["zinc"]}, ["materials"]),
        ]
    )


@cache.run
@subs(["materials"], _subscript_dict)
def materials_for_om_per_capacity_installed__pv():
    """
    Real Name: "materials for O&M per capacity installed - PV"
    Original Eqn:
      0
        .
        .
        .
      0
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements for operation and maintenance per unit of new
        installed capacity of solar PV.
    """
    return xrmerge(
        [
            xr.DataArray(0, {"materials": ["Adhesive"]}, ["materials"]),
            _ext_constant_materials_for_om_per_capacity_installed__pv(),
            xr.DataArray(0, {"materials": ["Aluminium mirrors"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cadmium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Cement"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Chromium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Dy"]}, ["materials"]),
            xr.DataArray(
                0, {"materials": ["Electric electronic components"]}, ["materials"]
            ),
            xr.DataArray(0, {"materials": ["Evacuation lines"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Foam glass"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Galium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["gravel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Indium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Iron"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["KNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Asphalt"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Limestone"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lithium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Manganese"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Heavy equipment"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Concrete"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Molybdenum"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 mined"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["NaNO3 synthetic"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Neodymium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Nickel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 15per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Over grid 5per"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Paint"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Lead"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Polypropylene"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Rock wool"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Sand"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Site preparation"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["Tin"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["soda ash"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["steel"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["tellurium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["titanium dioxide"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["vanadium"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["wires"]}, ["materials"]),
            xr.DataArray(0, {"materials": ["zinc"]}, ["materials"]),
        ]
    )


@cache.run
@subs(["water0"], _subscript_dict)
def water_for_om__csp():
    """
    Real Name: "water for O&M - CSP"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'B114')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'B115')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['water0']


    """
    return _ext_constant_water_for_om__csp()


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_capacity_installed__pv_0():
    """
    Real Name: "materials per capacity installed - PV 0"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'C5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'C62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']


    """
    return _ext_constant_materials_per_capacity_installed__pv_0()


@cache.step
@subs(["materials"], _subscript_dict)
def cum_materials_requirements_for_res_elec():
    """
    Real Name: cum materials requirements for RES elec
    Original Eqn: INTEG ( Total materials required for RES elec Mt[materials], initial cumulated material requirements for RES elec 1995)
    Units: Mt
    Limits: (None, None)
    Type: component
    Subs: ['materials']

    Total cumulative materials requirements for the installation and O&M of
        RES for electricity generation.
    """
    return _integ_cum_materials_requirements_for_res_elec()


@cache.run
@to_float
def mj_per_ej():
    """
    Real Name: MJ per EJ
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G12')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_mj_per_ej()


@cache.run
@subs(["materials"], _subscript_dict)
def initial_energy_cons_per_unit_of_material_cons_virgin():
    """
    Real Name: "Initial energy cons per unit of material cons (virgin)"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'Y5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'Y62')
    Units: MJ/kg
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Energy consumption required to extract and use virgin materials per unit
        of material consumption.
    """
    return _ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin()


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_new_capacity_installed__csp():
    """
    Real Name: "materials per new capacity installed - CSP"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'B5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'B62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements per unit of new installed capacity of solar CSP.
    """
    return _ext_constant_materials_per_new_capacity_installed__csp()


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_new_capacity_installed__wind_offshore():
    """
    Real Name: "materials per new capacity installed - wind offshore"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'E5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'E62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements per unit of new installed capacity of wind offshore.
    """
    return _ext_constant_materials_per_new_capacity_installed__wind_offshore()


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_new_capacity_installed__wind_onshore():
    """
    Real Name: "materials per new capacity installed - wind onshore"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'D5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'D62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements per unit of new installed capacity of wind onshore.
    """
    return _ext_constant_materials_per_new_capacity_installed__wind_onshore()


@cache.run
@to_float
def initial_cumulated_material_requirements_for_res_elec_1995():
    """
    Real Name: initial cumulated material requirements for RES elec 1995
    Original Eqn: 0
    Units: Mt
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 0


@cache.run
@subs(["materials"], _subscript_dict)
def materials_per_new_capacity_installed__pv():
    """
    Real Name: "materials per new capacity installed - PV"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'C5')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Materials', 'C62')
    Units: kg/MW
    Limits: (None, None)
    Type: constant
    Subs: ['materials']

    Materials requirements per unit of new installed capacity of solar PV.
    """
    return _ext_constant_materials_per_new_capacity_installed__pv()


@cache.run
@to_float
def kg_per_mt():
    """
    Real Name: kg per Mt
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G9')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion factor from Mt to kg.
    """
    return _ext_constant_kg_per_mt()


@cache.run
@to_float
def m_per_t():
    """
    Real Name: M per T
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G8')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion factor from Tera (T, 1e12) to Mega (M, 1e6).
    """
    return _ext_constant_m_per_t()


@cache.step
@to_float
def elec_generation_variable_from_res_twh():
    """
    Real Name: Elec generation variable from RES TWh
    Original Eqn: FE Elec generation from solar PV TWh+FE Elec generation from CSP TWh+FE Elec generation from onshore wind TWh+FE Elec generation from offshore wind TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Variable electricity generation from RES.
    """
    return (
        fe_elec_generation_from_solar_pv_twh()
        + fe_elec_generation_from_csp_twh()
        + fe_elec_generation_from_onshore_wind_twh()
        + fe_elec_generation_from_offshore_wind_twh()
    )


@cache.step
@to_float
def total_gen_losses_demand_for_heat_plants_ej():
    """
    Real Name: Total gen losses demand for Heat plants EJ
    Original Eqn: PED gases for Heat plants EJ*(1-efficiency gases for heat plants)+PED oil for Heat plants EJ*(1-efficiency liquids for heat plants)+PED coal for Heat plants EJ*(1-efficiency coal for heat plants)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total generation losses associated to heat plants.
    """
    return (
        ped_gases_for_heat_plants_ej() * (1 - efficiency_gases_for_heat_plants())
        + ped_oil_for_heat_plants_ej() * (1 - efficiency_liquids_for_heat_plants())
        + ped_coal_for_heat_plants_ej() * (1 - efficiency_coal_for_heat_plants())
    )


@cache.step
@to_float
def total_gen_losses_demand_for_chp_plants_ej():
    """
    Real Name: Total gen losses demand for CHP plants EJ
    Original Eqn: PED gas for CHP plants EJ*(1-efficiency Elec gas CHP plants-efficiency Heat gas CHP plants)+PED oil for CHP plants EJ*(1-efficiency Elec oil CHP plants-efficiency Heat oil CHP plants)+PED coal for CHP plants EJ*(1-efficiency Heat coal CHP plants-efficiency Elec coal CHP plants)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total generation losses associated to CHP plants.
    """
    return (
        ped_gas_for_chp_plants_ej()
        * (1 - efficiency_elec_gas_chp_plants() - efficiency_heat_gas_chp_plants())
        + ped_oil_for_chp_plants_ej()
        * (1 - efficiency_elec_oil_chp_plants() - efficiency_heat_oil_chp_plants())
        + ped_coal_for_chp_plants_ej()
        * (1 - efficiency_heat_coal_chp_plants() - efficiency_elec_coal_chp_plants())
    )


@cache.step
@to_float
def new_required_capacity_nuclear():
    """
    Real Name: new required capacity nuclear
    Original Eqn: MAX(0, IF THEN ELSE(Time<2015, 0, IF THEN ELSE(Demand Elec NRE TWh=0, 0, installed capacity nuclear TW*P nuclear elec gen)))*effects shortage uranium*Cp limit nuclear
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    New required capacity of nuclear power plants.
    """
    return (
        np.maximum(
            0,
            if_then_else(
                time() < 2015,
                lambda: 0,
                lambda: if_then_else(
                    demand_elec_nre_twh() == 0,
                    lambda: 0,
                    lambda: installed_capacity_nuclear_tw() * p_nuclear_elec_gen(),
                ),
            ),
        )
        * effects_shortage_uranium()
        * cp_limit_nuclear()
    )


@cache.run
@subs(["RES heat"], _subscript_dict)
def replacement_res_for_heatcom():
    """
    Real Name: "replacement RES for heat-com"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D19')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    If =1, we asume that all the power that reaches the end of its lifetime is
        replaced.
    """
    return _ext_constant_replacement_res_for_heatcom()


@cache.run
@to_float
def losses_solar_for_heat():
    """
    Real Name: Losses solar for heat
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G42')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Losses (pipelina and storage) of solar for heat.
    """
    return _ext_constant_losses_solar_for_heat()


@cache.run
@subs(["RES heat"], _subscript_dict)
def cpini_res_for_heat():
    """
    Real Name: "Cp-ini RES for heat"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'F17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'F18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'F19')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']


    """
    return _ext_constant_cpini_res_for_heat()


@cache.run
@to_float
def efficiency_geothermal_for_heat():
    """
    Real Name: Efficiency geothermal for heat
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G43')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_efficiency_geothermal_for_heat()


@cache.run
@to_float
def f1_solar_panels_for_heat():
    """
    Real Name: f1 solar panels for heat
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'G41')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency solar panels for heat.
    """
    return _ext_constant_f1_solar_panels_for_heat()


@cache.run
@to_float
def p_geothermal_for_heat():
    """
    Real Name: P geothermal for heat
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C61')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_geothermal_for_heat()


@cache.run
@subs(["RES heat"], _subscript_dict)
def past_res_growth_for_heatcom():
    """
    Real Name: "past RES growth for heat-com"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C101')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C102')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C103')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Historic annual average growth.
    """
    return _ext_constant_past_res_growth_for_heatcom()


@cache.step
@subs(["RES heat"], _subscript_dict)
def installed_capacity_res_heatcom_tw():
    """
    Real Name: "installed capacity RES heat-com TW"
    Original Eqn: INTEG ( "new RES capacity for heat-com TW"[RES heat]+"replacement RES for heat-com TW"[RES heat]-"wear RES capacity for heat-com TW"[RES heat], "initial value RES for heat-com"[RES heat])
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Installed capacity of RES for commercial heat.
    """
    return _integ_installed_capacity_res_heatcom_tw()


@cache.run
@subs(["RES heat"], _subscript_dict)
def initial_value_res_for_heatcom():
    """
    Real Name: "initial value RES for heat-com"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H66')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H67')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H65')
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    RES supply by technology for commercial heat in the year 1995.
    """
    return _ext_constant_initial_value_res_for_heatcom()


@cache.run
@to_float
def p_solar_for_heat():
    """
    Real Name: P solar for heat
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C60')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in relation to the existing installed capacity.
    """
    return _ext_constant_p_solar_for_heat()


@cache.run
@subs(["RES heat"], _subscript_dict)
def life_time_res_for_heat():
    """
    Real Name: life time RES for heat
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C17')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C18')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C19')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES heat']

    Lifetime RES thermal technologies and plants.
    """
    return _ext_constant_life_time_res_for_heat()


@cache.step
@subs(["RES heat"], _subscript_dict)
def wear_res_capacity_for_heatcom_tw():
    """
    Real Name: "wear RES capacity for heat-com TW"
    Original Eqn: "installed capacity RES heat-com TW"[RES heat]/life time RES for heat[RES heat]
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES heat']

    Decommission of the capacity that reachs the end of its lifetime.
    """
    return installed_capacity_res_heatcom_tw() / life_time_res_for_heat()


@cache.step
@to_float
def potential_fe_gen_elec_fossil_fuel_chp_plants_ej():
    """
    Real Name: Potential FE gen Elec fossil fuel CHP plants EJ
    Original Eqn: (Potential FE gen Elec coal CHP plants EJ+Potential FE gen Elec gas CHP plants EJ+Potential FE gen Elec liquids CHP plants EJ)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Potential electricity generation from CHP plants burning fossil fuels.
    """
    return (
        potential_fe_gen_elec_coal_chp_plants_ej()
        + potential_fe_gen_elec_gas_chp_plants_ej()
        + potential_fe_gen_elec_liquids_chp_plants_ej()
    )


@cache.step
@to_float
def efficiency_heat_oil_chp_plants():
    """
    Real Name: efficiency Heat oil CHP plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B228')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of heat in oil CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_heat_oil_chp_plants(time())


@cache.step
@to_float
def fed_heat_liquids_chp_plants_ej():
    """
    Real Name: FED heat liquids CHP plants EJ
    Original Eqn: FED heat fossil fuels CHP plants EJ*share CHP plants oil
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of oil to produce heat in CHP plants.
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * share_chp_plants_oil()


@cache.step
@to_float
def potential_fe_gen_elec_liquids_chp_plants_ej():
    """
    Real Name: Potential FE gen Elec liquids CHP plants EJ
    Original Eqn: PED oil for CHP plants EJ*efficiency Elec oil CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential electricity generation from CHP plants burning oil liquids.
    """
    return ped_oil_for_chp_plants_ej() * efficiency_elec_oil_chp_plants()


@cache.step
@to_float
def efficiency_elec_coal_chp_plants():
    """
    Real Name: efficiency Elec coal CHP plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B224')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of elec in coal CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_elec_coal_chp_plants(time())


@cache.step
@to_float
def efficiency_elec_gas_chp_plants():
    """
    Real Name: efficiency Elec gas CHP plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B221')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of elec in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_elec_gas_chp_plants(time())


@cache.step
@to_float
def efficiency_elec_oil_chp_plants():
    """
    Real Name: efficiency Elec oil CHP plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B227')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of liquids in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_elec_oil_chp_plants(time())


@cache.step
@to_float
def potential_fe_gen_elec_coal_chp_plants_ej():
    """
    Real Name: Potential FE gen Elec coal CHP plants EJ
    Original Eqn: PED coal for CHP plants EJ*efficiency Elec coal CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential electricity generation from CHP plants burning coal.
    """
    return ped_coal_for_chp_plants_ej() * efficiency_elec_coal_chp_plants()


@cache.step
@to_float
def potential_fe_gen_elec_gas_chp_plants_ej():
    """
    Real Name: Potential FE gen Elec gas CHP plants EJ
    Original Eqn: PED gas for CHP plants EJ*efficiency Elec gas CHP plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Potential electricity generation from CHP plants burning natural gas.
    """
    return ped_gas_for_chp_plants_ej() * efficiency_elec_gas_chp_plants()


@cache.step
@to_float
def fed_heat_gas_chp_plants_ej():
    """
    Real Name: FED heat gas CHP plants EJ
    Original Eqn: FED heat fossil fuels CHP plants EJ*historic share CHP plants gas
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of gas to produce heat in CHP plants.
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * historic_share_chp_plants_gas()


@cache.step
@to_float
def efficiency_heat_gas_chp_plants():
    """
    Real Name: efficiency Heat gas CHP plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B222')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of heat in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_heat_gas_chp_plants(time())


@cache.step
@to_float
def ped_oil_for_chp_plants_ej():
    """
    Real Name: PED oil for CHP plants EJ
    Original Eqn: FED heat liquids CHP plants EJ/efficiency Heat oil CHP plants
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of oil (EJ) for CHP plants.
    """
    return fed_heat_liquids_chp_plants_ej() / efficiency_heat_oil_chp_plants()


@cache.step
@to_float
def share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation():
    """
    Real Name: "Share heat-com CHP plants NRE vs NRE tot heat-com generation"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H29')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Share of commercial heat produced in CHP plants from non-renewable
        energies vs. total commercial heat generation from NRE.
    """
    return _ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation(time())


@cache.step
@to_float
def efficiency_heat_coal_chp_plants():
    """
    Real Name: efficiency Heat coal CHP plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B225')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of heat in gas CHP plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_heat_coal_chp_plants(time())


@cache.step
@to_float
def fed_heat_coal_chp_plants_ej():
    """
    Real Name: FED heat coal CHP plants EJ
    Original Eqn: FED heat fossil fuels CHP plants EJ*share CHP plants coal
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of coal to produce heat in CHP plants.
    """
    return fed_heat_fossil_fuels_chp_plants_ej() * share_chp_plants_coal()


@cache.step
@to_float
def ped_gas_for_chp_plants_ej():
    """
    Real Name: PED gas for CHP plants EJ
    Original Eqn: FED heat gas CHP plants EJ/efficiency Heat gas CHP plants
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of gas (EJ) for CHP plants.
    """
    return fed_heat_gas_chp_plants_ej() / efficiency_heat_gas_chp_plants()


@cache.step
@to_float
def ped_coal_for_chp_plants_ej():
    """
    Real Name: PED coal for CHP plants EJ
    Original Eqn: FED heat coal CHP plants EJ/efficiency Heat coal CHP plants
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of coal (EJ) for CHP plants.
    """
    return fed_heat_coal_chp_plants_ej() / efficiency_heat_coal_chp_plants()


@cache.step
@to_float
def pe_csp_for_elec_generation_ej():
    """
    Real Name: PE CSP for Elec generation EJ
    Original Eqn: PE real generation RES elec[CSP]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["CSP"].reset_coords(drop=True)


@cache.step
@to_float
def invest_res_for_elec():
    """
    Real Name: Invest RES for Elec
    Original Eqn: MAX(invest bioW Tdolar+"invest geot-elec Tdolar"+invest hydro Tdolar+invest oceanic Tdolar+invest solar Tdolar+invest onshore wind Tdolar+invest offshore wind Tdolar+invest CSP Tdolar, 0)
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual investment for the installation of RES capacity for electricity .
    """
    return np.maximum(
        invest_biow_tdolar()
        + invest_geotelec_tdolar()
        + invest_hydro_tdolar()
        + invest_oceanic_tdolar()
        + invest_solar_tdolar()
        + invest_onshore_wind_tdolar()
        + invest_offshore_wind_tdolar()
        + invest_csp_tdolar(),
        0,
    )


@cache.step
@to_float
def fe_elec_generation_from_csp_twh():
    """
    Real Name: FE Elec generation from CSP TWh
    Original Eqn: real generation RES elec TWh[CSP]
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["CSP"].reset_coords(drop=True)


@cache.step
@to_float
def invest_csp_tdolar():
    """
    Real Name: invest CSP Tdolar
    Original Eqn: invest RES elec Tdolar[CSP]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["CSP"].reset_coords(drop=True)


@cache.step
@to_float
def cp_limit_nuclear():
    """
    Real Name: Cp limit nuclear
    Original Eqn: IF THEN ELSE(Cp nuclear>min Cp nuclear, 1, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(cp_nuclear() > min_cp_nuclear(), lambda: 1, lambda: 0)


@cache.step
@to_float
def invest_nuclear_tdolar():
    """
    Real Name: invest nuclear Tdolar
    Original Eqn: MAX(0, IF THEN ELSE(Nuclear capacity under construction<0,0,(Nuclear capacity under construction+replacement nuclear capacity)*invest cost nuclear/1000))
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return np.maximum(
        0,
        if_then_else(
            nuclear_capacity_under_construction() < 0,
            lambda: 0,
            lambda: (
                nuclear_capacity_under_construction() + replacement_nuclear_capacity()
            )
            * invest_cost_nuclear()
            / 1000,
        ),
    )


@cache.step
@to_float
def cp_nuclear():
    """
    Real Name: Cp nuclear
    Original Eqn: Cp nuclear initial*Cp exogenous RES elec dispatch reduction
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Capacity factor of nuclear power centrals.
    """
    return cp_nuclear_initial() * cp_exogenous_res_elec_dispatch_reduction()


@cache.step
@to_float
def installed_capacity_nuclear_tw():
    """
    Real Name: installed capacity nuclear TW
    Original Eqn: INTEG ( Nuclear capacity under construction-"nuclear capacity phase-out"-wear nuclear, initial capacity installed nuclear)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Annual installed capacity of nuclear power.
    """
    return _integ_installed_capacity_nuclear_tw()


@cache.step
@to_float
def nuclear_capacity_phaseout():
    """
    Real Name: "nuclear capacity phase-out"
    Original Eqn: IF THEN ELSE(selection of nuclear scenario=4, IF THEN ELSE(Time<"start year nuclear growth scen3-4", 0 , "P nuclear scen3-4"*installed capacity nuclear TW), 0)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Annual nuclear capacity phase-out (Scenario 4 for nuclear evolution).
    """
    return if_then_else(
        selection_of_nuclear_scenario() == 4,
        lambda: if_then_else(
            time() < start_year_nuclear_growth_scen34(),
            lambda: 0,
            lambda: p_nuclear_scen34() * installed_capacity_nuclear_tw(),
        ),
        lambda: 0,
    )


@cache.run
@to_float
def min_cp_nuclear():
    """
    Real Name: min Cp nuclear
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'V15')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Assumption of minimum Cp for nuclear given the high inertia of nuclear
        reactors.
    """
    return _ext_constant_min_cp_nuclear()


@cache.step
@to_float
def replacement_nuclear_capacity():
    """
    Real Name: replacement nuclear capacity
    Original Eqn: IF THEN ELSE(Time<2014,Nuclear capacity under construction, IF THEN ELSE(selection of nuclear scenario=2, 0, IF THEN ELSE(selection of nuclear scenario=4, 0, replacement rate nuclear*wear nuclear*(1-nuclear overcapacity))))*Cp limit nuclear
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    It is assumed that the step of planning of replaced infraestructure can be
        done while the infraestructure to be replaced is still under operation.
    """
    return (
        if_then_else(
            time() < 2014,
            lambda: nuclear_capacity_under_construction(),
            lambda: if_then_else(
                selection_of_nuclear_scenario() == 2,
                lambda: 0,
                lambda: if_then_else(
                    selection_of_nuclear_scenario() == 4,
                    lambda: 0,
                    lambda: replacement_rate_nuclear()
                    * wear_nuclear()
                    * (1 - nuclear_overcapacity()),
                ),
            ),
        )
        * cp_limit_nuclear()
    )


@cache.run
@subs(["RES elec"], _subscript_dict)
def min_cp_baseload_res():
    """
    Real Name: min Cp baseload RES
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'V13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'V16')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Assumption of minimum Cp for baseload RES plants.
    """
    return _ext_constant_min_cp_baseload_res()


@cache.step
@to_float
def nuclear_overcapacity():
    """
    Real Name: nuclear overcapacity
    Original Eqn: IF THEN ELSE(potential generation nuclear elec TWh=0,0, (potential generation nuclear elec TWh-FE nuclear Elec generation TWh)/potential generation nuclear elec TWh)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Overcapacity of nuclear power taking into account the installed capacity
        and the real generation.
    """
    return if_then_else(
        potential_generation_nuclear_elec_twh() == 0,
        lambda: 0,
        lambda: (
            potential_generation_nuclear_elec_twh() - fe_nuclear_elec_generation_twh()
        )
        / potential_generation_nuclear_elec_twh(),
    )


@cache.run
@to_float
def p_nuclear_scen34():
    """
    Real Name: "P nuclear scen3-4"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'F22')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual variation (growth or phase-out) of new nuclear power plants
        (scenarios 3 and 4 of nuclear evolution) from the year "start year nuclear
        growth scen3-4".
    """
    return _ext_constant_p_nuclear_scen34()


@cache.run
@to_float
def start_year_nuclear_growth_scen34():
    """
    Real Name: "start year nuclear growth scen3-4"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'H22')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Start year of increase/phase-out of nuclear power plants (Nuclear
        scenarios 3 and 4).
    """
    return _ext_constant_start_year_nuclear_growth_scen34()


@cache.step
@to_float
def p_nuclear_elec_gen():
    """
    Real Name: P nuclear elec gen
    Original Eqn: IF THEN ELSE(selection of nuclear scenario=1, 0, IF THEN ELSE(selection of nuclear scenario=2,0, IF THEN ELSE(selection of nuclear scenario=4,0, IF THEN ELSE(selection of nuclear scenario=3, IF THEN ELSE(Time<"start year nuclear growth scen3-4", 0 , "P nuclear scen3-4"), 0))))
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual increase of new planned nuclear capacity.
    """
    return if_then_else(
        selection_of_nuclear_scenario() == 1,
        lambda: 0,
        lambda: if_then_else(
            selection_of_nuclear_scenario() == 2,
            lambda: 0,
            lambda: if_then_else(
                selection_of_nuclear_scenario() == 4,
                lambda: 0,
                lambda: if_then_else(
                    selection_of_nuclear_scenario() == 3,
                    lambda: if_then_else(
                        time() < start_year_nuclear_growth_scen34(),
                        lambda: 0,
                        lambda: p_nuclear_scen34(),
                    ),
                    lambda: 0,
                ),
            ),
        ),
    )


@cache.step
@to_float
def required_capacity_nuclear_tw():
    """
    Real Name: required capacity nuclear TW
    Original Eqn: INTEG ( new required capacity nuclear-new nuclear capacity under planning, initial required capacity nuclear)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Required capacity of nuclear power plants.
    """
    return _integ_required_capacity_nuclear_tw()


@cache.run
@to_float
def time_planification_nuclear():
    """
    Real Name: time planification nuclear
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'S15')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Average planification time for nuclear power plants.
    """
    return _ext_constant_time_planification_nuclear()


@cache.run
@to_float
def time_construction_nuclear():
    """
    Real Name: time construction nuclear
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'T15')
    Units: Time
    Limits: (None, None)
    Type: constant
    Subs: None

    Average construction time for nuclear power plants.
    """
    return _ext_constant_time_construction_nuclear()


@cache.step
@to_float
def initial_capacity_installed_nuclear():
    """
    Real Name: initial capacity installed nuclear
    Original Eqn: initial gen nuclear*TWe per TWh/Cp nuclear initial
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Initial capacity installed of nuclear power.
    """
    return initial_gen_nuclear() * twe_per_twh() / cp_nuclear_initial()


@cache.step
@to_float
def nuclear_capacity_under_construction():
    """
    Real Name: Nuclear capacity under construction
    Original Eqn: IF THEN ELSE(Time<2014, (Historic nuclear generation TWh(INTEGER(Time+1))-Historic nuclear generation TWh(INTEGER(Time))) *TWe per TWh/Cp nuclear, Planned nuclear capacity TW/time construction nuclear)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Nuclear capacity under construction.
    """
    return if_then_else(
        time() < 2014,
        lambda: (
            historic_nuclear_generation_twh(int(time() + 1))
            - historic_nuclear_generation_twh(int(time()))
        )
        * twe_per_twh()
        / cp_nuclear(),
        lambda: planned_nuclear_capacity_tw() / time_construction_nuclear(),
    )


@cache.step
@to_float
def new_nuclear_capacity_under_planning():
    """
    Real Name: new nuclear capacity under planning
    Original Eqn: MAX(0,required capacity nuclear TW/time planification nuclear)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    New nuclear capacity under planning.
    """
    return np.maximum(0, required_capacity_nuclear_tw() / time_planification_nuclear())


@cache.run
@to_float
def selection_of_nuclear_scenario():
    """
    Real Name: selection of nuclear scenario
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D19')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    If = 1: Constant power capacity at current levels,        If = 2: No more nuclear installed, current capacity depreciates,        If = 3: Growth of nuclear power.
    """
    return _ext_constant_selection_of_nuclear_scenario()


@cache.run
@to_float
def initial_gen_nuclear():
    """
    Real Name: initial gen nuclear
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H69')
    Units: TWh
    Limits: (None, None)
    Type: constant
    Subs: None

    Electric generation from nuclear in the initial year 1995.
    """
    return _ext_constant_initial_gen_nuclear()


@cache.run
@to_float
def initial_capacity_in_construction_nuclear():
    """
    Real Name: initial capacity in construction nuclear
    Original Eqn: 0
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial capacity in construction of nuclear (year 1995).
    """
    return 0


@cache.run
@to_float
def initial_required_capacity_nuclear():
    """
    Real Name: initial required capacity nuclear
    Original Eqn: 0
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial required capacity of nuclear (year 1995).
    """
    return 0


@cache.step
@to_float
def planned_nuclear_capacity_tw():
    """
    Real Name: Planned nuclear capacity TW
    Original Eqn: INTEG ( new nuclear capacity under planning+replacement nuclear capacity-Nuclear capacity under construction , initial capacity in construction nuclear)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Planned nuclear capacity.
    """
    return _integ_planned_nuclear_capacity_tw()


@cache.step
@to_float
def wear_nuclear():
    """
    Real Name: wear nuclear
    Original Eqn: IF THEN ELSE(Time<2014, 0, installed capacity nuclear TW/life time nuclear)
    Units: TW
    Limits: (None, None)
    Type: component
    Subs: None

    Depreciation of nuclear power plants.
    """
    return if_then_else(
        time() < 2014,
        lambda: 0,
        lambda: installed_capacity_nuclear_tw() / life_time_nuclear(),
    )


@cache.step
@to_float
def tpes_intensity_ej_t():
    """
    Real Name: TPES intensity EJ T$
    Original Eqn: ZIDZ( TPES EJ , GDP EU )
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy intensity.
    """
    return zidz(tpes_ej(), gdp_eu())


@cache.step
@to_float
def real_ped_intensity_of_electricity():
    """
    Real Name: real PED intensity of Electricity
    Original Eqn: ZIDZ( (Total FE Elec demand EJ+Elec gen related losses EJ) , GDP EU )
    Units: EJ/Tdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand intensity of the electricity sector. Note that the
        parameter "'a' I-ELEC projection" refers to final energy while here we
        refer to primary energy. The "real PED intensity of electricity" may thus
        decrease with the penetration of RES in the electricity generation (see
        "share RES vs NRE electricity generation").
    """
    return zidz((total_fe_elec_demand_ej() + elec_gen_related_losses_ej()), gdp_eu())


@cache.step
@to_float
def annual_gdp_growth_rate_eu():
    """
    Real Name: Annual GDP growth rate EU
    Original Eqn: -1+ZIDZ( GDP EU , GDP delayed 1yr )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual GDP growth rate.
    """
    return -1 + zidz(gdp_eu(), gdp_delayed_1yr())


@cache.step
@to_float
def gdp_delayed_1yr():
    """
    Real Name: GDP delayed 1yr
    Original Eqn: DELAY FIXED ( GDP EU, 1, 8.6)
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    GDP projection delayed 1 year.
    """
    return _delayfixed_gdp_delayed_1yr()


@cache.step
@to_float
def share_tot_monet_invest_elec_res_vs_gdp():
    """
    Real Name: share tot monet invest Elec RES vs GDP
    Original Eqn: ZIDZ( Total monet invest RES for elec Tdolar , GDP EU )
    Units: 1/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual total monetary investment for RES for electricity as a share of the
        annual GDP.
    """
    return zidz(total_monet_invest_res_for_elec_tdolar(), gdp_eu())


@cache.step
@to_float
def gdppc():
    """
    Real Name: GDPpc
    Original Eqn: GDP EU*dollars to Tdollars/Population
    Units: $/people
    Limits: (None, None)
    Type: component
    Subs: None

    GDP per capita (1995T$ per capita).
    """
    return gdp_eu() * dollars_to_tdollars() / population()


@cache.run
@to_float
def unlimited_coal():
    """
    Real Name: "unlimited coal?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E99')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to consider if coal is unlimited (1), or if it is limited (0). If
        limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_coal()


@cache.step
@to_float
def real_tfec():
    """
    Real Name: Real TFEC
    Original Eqn: SUM(real FE consumption by fuel[final sources!])
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Real total final energy consumption (not including non-energy uses).
    """
    return sum(
        rearrange(real_fe_consumption_by_fuel(), ["final sources"], _subscript_dict),
        dim=("final sources",),
    )


@cache.run
@to_float
def unlimited_uranium():
    """
    Real Name: "unlimited uranium?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E104')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to consider if uranium is unlimited (1), or if it is limited (0).
        If limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_uranium()


@cache.run
@to_float
def urr_coal_unlimited():
    """
    Real Name: URR coal unlimited
    Original Eqn: 1e+09
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Arbitrary very high value.
    """
    return 1e09


@cache.run
@to_float
def urr_uranium_unlimited():
    """
    Real Name: URR uranium unlimited
    Original Eqn: 1e+09
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Arbitrary very high value.
    """
    return 1e09


@cache.run
@to_float
def urr_conv_gas_unlimited():
    """
    Real Name: URR conv gas unlimited
    Original Eqn: 1e+09
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Arbitrary very high value.
    """
    return 1e09


@cache.run
@to_float
def unlimited_gas():
    """
    Real Name: "unlimited gas?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E83')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to consider if gas is unlimited (1), or if it is limited (0). If
        limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_gas()


@cache.run
@to_float
def unlimited_oil():
    """
    Real Name: "unlimited oil?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'E67')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to consider if oil is unlimited (1), or if it is limited (0). If
        limited then the available depletion curves are considered.
    """
    return _ext_constant_unlimited_oil()


@cache.run
@to_float
def urr_conv_oil_unlimited():
    """
    Real Name: URR conv oil unlimited
    Original Eqn: 1e+09
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Arbitrary very high value.
    """
    return 1e09


@cache.run
@to_float
def activate_elf_by_scen():
    """
    Real Name: "activate ELF by scen?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C119')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Active/deactivate the energy loss function by scenario:        1: activate        0: not active
    """
    return _ext_constant_activate_elf_by_scen()


@cache.step
@to_float
def total_demand_liquids_mbd():
    """
    Real Name: "Total demand liquids mb/d"
    Original Eqn: PED liquids EJ*"Mb/d per EJ/year"
    Units: Mb/d
    Limits: (None, None)
    Type: component
    Subs: None

    Total demand of liquids.
    """
    return ped_liquids_ej() * mbd_per_ejyear()


@cache.step
@to_float
def ped_coal_without_ctl():
    """
    Real Name: PED coal without CTL
    Original Eqn: PED coal EJ-PED coal for CTL EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total demand of coal without CTL.
    """
    return ped_coal_ej() - ped_coal_for_ctl_ej()


@cache.step
@to_float
def grid_reinforcement_costs_tdollar():
    """
    Real Name: Grid reinforcement costs Tdollar
    Original Eqn: Grid reinforcement costs*new capacity installed onshore wind TW/G per T
    Units: Tdollar
    Limits: (None, None)
    Type: component
    Subs: None

    1995 US$.
    """
    return (
        grid_reinforcement_costs()
        * new_capacity_installed_onshore_wind_tw()
        / g_per_t()
    )


def historic_nonenergy_use(x):
    """
    Real Name: "Historic non-energy use"
    Original Eqn:
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '189', 'C191')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '189', 'C190')
      GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '189', 'C192')
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '189', 'C193'))
      ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '189', 'C193'))
    Units: EJ
    Limits: (None, None)
    Type: lookup
    Subs: ['final sources1']

    Historic data non-energy use by final fuel.
    """
    return _ext_lookup_historic_nonenergy_use(x)


@cache.run
@subs(["final sources1"], _subscript_dict)
def initial_nonenergy_use():
    """
    Real Name: "initial non-energy use"
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C190')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C191')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C192')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C193')
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C193')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: ['final sources1']

    Non-energy use consumption in the year 1995.
    """
    return _ext_constant_initial_nonenergy_use()


@cache.step
@to_float
def real_total_output():
    """
    Real Name: Real total output
    Original Eqn: SUM(Real total output by sector EU[sectors!])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Total output (1995$).
    """
    return sum(real_total_output_by_sector_eu(), dim=("sectors",))


@cache.step
@to_float
def pe_onshore_wind_for_elec_generation_ej():
    """
    Real Name: PE onshore wind for Elec generation EJ
    Original Eqn: PE real generation RES elec[wind onshore]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["wind onshore"].reset_coords(drop=True)


@cache.step
@to_float
def fe_elec_generation_from_solar_pv_twh():
    """
    Real Name: FE Elec generation from solar PV TWh
    Original Eqn: real generation RES elec TWh[solar PV]
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["solar PV"].reset_coords(drop=True)


@cache.step
@to_float
def pe_hydro_for_elec_generation_ej():
    """
    Real Name: PE hydro for Elec generation EJ
    Original Eqn: PE real generation RES elec[hydro]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["hydro"].reset_coords(drop=True)


@cache.step
@to_float
def invest_biow_tdolar():
    """
    Real Name: invest bioW Tdolar
    Original Eqn: invest RES elec Tdolar[solid bioE elec]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["solid bioE elec"].reset_coords(drop=True)


@cache.step
@to_float
def fe_elec_generation_from_hydro_twh():
    """
    Real Name: FE Elec generation from hydro TWh
    Original Eqn: real generation RES elec TWh[hydro]
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["hydro"].reset_coords(drop=True)


@cache.step
@to_float
def invest_geotelec_tdolar():
    """
    Real Name: "invest geot-elec Tdolar"
    Original Eqn: invest RES elec Tdolar[geot elec]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["geot elec"].reset_coords(drop=True)


@cache.step
@to_float
def invest_hydro_tdolar():
    """
    Real Name: invest hydro Tdolar
    Original Eqn: invest RES elec Tdolar[hydro]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["hydro"].reset_coords(drop=True)


@cache.step
@to_float
def fe_elec_generation_from_onshore_wind_twh():
    """
    Real Name: FE Elec generation from onshore wind TWh
    Original Eqn: real generation RES elec TWh[wind onshore]
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["wind onshore"].reset_coords(drop=True)


@cache.step
@to_float
def invest_oceanic_tdolar():
    """
    Real Name: invest oceanic Tdolar
    Original Eqn: invest RES elec Tdolar[oceanic]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["oceanic"].reset_coords(drop=True)


@cache.step
@to_float
def invest_onshore_wind_tdolar():
    """
    Real Name: invest onshore wind Tdolar
    Original Eqn: invest RES elec Tdolar[wind onshore]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["wind onshore"].reset_coords(drop=True)


@cache.step
@to_float
def invest_offshore_wind_tdolar():
    """
    Real Name: invest offshore wind Tdolar
    Original Eqn: invest RES elec Tdolar[wind offshore]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["wind offshore"].reset_coords(drop=True)


@cache.step
@to_float
def fe_elec_generation_from_geotelec_twh():
    """
    Real Name: "FE Elec generation from geot-elec TWh"
    Original Eqn: real generation RES elec TWh[geot elec]
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["geot elec"].reset_coords(drop=True)


@cache.step
@to_float
def pe_geotelec_for_elec_generation_ej():
    """
    Real Name: "PE geot-elec for Elec generation EJ"
    Original Eqn: PE real generation RES elec[geot elec]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["geot elec"].reset_coords(drop=True)


@cache.step
@to_float
def pe_solar_pv_for_elec_generation_ej():
    """
    Real Name: PE solar PV for Elec generation EJ
    Original Eqn: PE real generation RES elec[solar PV]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["solar PV"].reset_coords(drop=True)


@cache.step
@to_float
def fe_elec_generation_from_bioe_twh():
    """
    Real Name: FE Elec generation from bioE TWh
    Original Eqn: real generation RES elec TWh[solid bioE elec]
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["solid bioE elec"].reset_coords(drop=True)


@cache.step
@to_float
def pe_oceanic_for_elec_generation_ej():
    """
    Real Name: PE oceanic for Elec generation EJ
    Original Eqn: PE real generation RES elec[oceanic]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["oceanic"].reset_coords(drop=True)


@cache.step
@to_float
def pe_bioe_for_elec_generation_ej():
    """
    Real Name: PE bioE for Elec generation EJ
    Original Eqn: PE real generation RES elec[solid bioE elec]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["solid bioE elec"].reset_coords(drop=True)


@cache.step
@to_float
def fe_elec_generation_from_offshore_wind_twh():
    """
    Real Name: FE Elec generation from offshore wind TWh
    Original Eqn: real generation RES elec TWh[wind offshore]
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["wind offshore"].reset_coords(drop=True)


@cache.step
@to_float
def fe_elec_generation_from_oceanic_twh():
    """
    Real Name: FE Elec generation from oceanic TWh
    Original Eqn: real generation RES elec TWh[oceanic]
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual electricity generation.
    """
    return real_generation_res_elec_twh().loc["oceanic"].reset_coords(drop=True)


@cache.step
@to_float
def pe_offshore_wind_for_elec_generation_ej():
    """
    Real Name: PE offshore wind for Elec generation EJ
    Original Eqn: PE real generation RES elec[wind offshore]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return pe_real_generation_res_elec().loc["wind offshore"].reset_coords(drop=True)


@cache.step
@to_float
def invest_solar_tdolar():
    """
    Real Name: invest solar Tdolar
    Original Eqn: invest RES elec Tdolar[solar PV]
    Units: Tdollars/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Investment costs.
    """
    return invest_res_elec_tdolar().loc["solar PV"].reset_coords(drop=True)


@cache.step
@to_float
def initial_value_land_compet_biofuels_2gen_mha():
    """
    Real Name: initial value land compet biofuels 2gen Mha
    Original Eqn: initial value land compet biofuels 2gen ktoe*EJ per ktoe
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Initial value of land occupation by biofuels of second generation.
    """
    return initial_value_land_compet_biofuels_2gen_ktoe() * ej_per_ktoe()


@cache.run
@to_float
def initial_value_land_compet_biofuels_2gen_ktoe():
    """
    Real Name: initial value land compet biofuels 2gen ktoe
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H56')
    Units: EJ/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial value in 1995 derived from (BP 2016).
    """
    return _ext_constant_initial_value_land_compet_biofuels_2gen_ktoe()


@cache.step
@to_float
def efficiency_liquids_for_heat_plants():
    """
    Real Name: efficiency liquids for heat plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B226')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of liquids heat plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_liquids_for_heat_plants(time())


@cache.step
@to_float
def share_gascoalgas_for_heat_plants():
    """
    Real Name: "share gas/(coal+gas) for heat plants"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H72')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Share of natural gas for electricity in relation to the total fossil fuels
        for heat
    """
    return _ext_data_share_gascoalgas_for_heat_plants(time())


@cache.run
@to_float
def share_heat_distribution_losses():
    """
    Real Name: Share heat distribution losses
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C77')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Current share of heat transmission and distribution losses in relation to
        heat consumption. We define these losses at around 6.5% following
        historical data of IEA database.
    """
    return _ext_constant_share_heat_distribution_losses()


@cache.step
@to_float
def efficiency_coal_for_heat_plants():
    """
    Real Name: efficiency coal for heat plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B223')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of coal heat plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_coal_for_heat_plants(time())


@cache.step
@to_float
def efficiency_gases_for_heat_plants():
    """
    Real Name: efficiency gases for heat plants
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '219', 'B220')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Efficiency of gas heat plants. We assume constant last data IEA.
    """
    return _ext_data_efficiency_gases_for_heat_plants(time())


@cache.step
@to_float
def potential_tot_res_elec_after_intermitt():
    """
    Real Name: potential tot RES elec after intermitt
    Original Eqn: SUM(potential RES elec after intermitt TWh[RES elec!])
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Total potential of RES for electricity after accounting for the reduction
        of the maximal potential given the reduction of the Cp.
    """
    return sum(potential_res_elec_after_intermitt_twh(), dim=("RES elec",))


@cache.step
@subs(["RES elec"], _subscript_dict)
def invest_res_elec_tdolar():
    """
    Real Name: invest RES elec Tdolar
    Original Eqn: MAX(0, RES elec capacity under construction TW[RES elec]*invest cost RES elec[RES elec])
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']


    """
    return np.maximum(
        0, res_elec_capacity_under_construction_tw() * invest_cost_res_elec()
    )


@cache.step
@to_float
def pe_biow_for_elec_generation_mtoe():
    """
    Real Name: PE BioW for Elec generation Mtoe
    Original Eqn: PE real generation RES elec[solid bioE elec]*MToe per EJ
    Units: MToe/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual primary energy to generate electricity (Direct Equivalent Method).
    """
    return (
        pe_real_generation_res_elec().loc["solid bioE elec"].reset_coords(drop=True)
        * mtoe_per_ej()
    )


@cache.step
@to_float
def remaining_potential_tot_res_elec_after_intermitt():
    """
    Real Name: remaining potential tot RES elec after intermitt
    Original Eqn: IF THEN ELSE(potential tot RES elec after intermitt > FE real tot generation RES elec TWh, (potential tot RES elec after intermitt-FE real tot generation RES elec TWh)/potential tot RES elec after intermitt, 0)
    Units:
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return if_then_else(
        potential_tot_res_elec_after_intermitt()
        > fe_real_tot_generation_res_elec_twh(),
        lambda: (
            potential_tot_res_elec_after_intermitt()
            - fe_real_tot_generation_res_elec_twh()
        )
        / potential_tot_res_elec_after_intermitt(),
        lambda: 0,
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def invest_cost_res_elec():
    """
    Real Name: invest cost RES elec
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Parameters', '6', 'G14')
        .
        .
        .
      GET DIRECT DATA('?inputs_eu.xlsx', 'Parameters', '6', 'G16')
    Units: T$/TW
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RES elec']

    Input assumption on installation cost of new RES capacity for electricity.
    """
    return _ext_data_invest_cost_res_elec(time())


@cache.step
@subs(["RES elec"], _subscript_dict)
def time_95pc_ts_potential_res_elec():
    """
    Real Name: Time 95pc TS potential RES elec
    Original Eqn: IF THEN ELSE(remaining potential RES elec after intermitt[RES elec]>0.05, 0, Time)
    Units:
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Time when the remaining resource availability falls bellow 5% of the
        techno-ecological potential, i.e. when the 95% of the techno-ecological
        potential is reached.
    """
    return if_then_else(
        remaining_potential_res_elec_after_intermitt() > 0.05, lambda: 0, lambda: time()
    )


@cache.step
@to_float
def max_geotelec_twe():
    """
    Real Name: "max geot-elec TWe"
    Original Eqn: "max PE geot-elec TWth"*Efficiency conversion geot PE to Elec
    Units: TWe
    Limits: (None, None)
    Type: component
    Subs: None

    Techno-ecological potential of electric geothermal (1 TWe = 8760 TWh in
        one year). We assume that the global potential of 0.2 TWe.
    """
    return max_pe_geotelec_twth() * efficiency_conversion_geot_pe_to_elec()


@cache.run
@to_float
def max_pe_geotelec_twth():
    """
    Real Name: "max PE geot-elec TWth"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C25')
    Units: TWe
    Limits: (None, None)
    Type: constant
    Subs: None

    Primary energy of geothermal for electricity.
    """
    return _ext_constant_max_pe_geotelec_twth()


@cache.run
@to_float
def efficiency_conversion_geot_pe_to_elec():
    """
    Real Name: Efficiency conversion geot PE to Elec
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C42')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation from geothermal (primary energy) to
        electricity.
    """
    return _ext_constant_efficiency_conversion_geot_pe_to_elec()


@cache.step
@to_float
def geot_pe_potential_for_heat_ej():
    """
    Real Name: Geot PE potential for heat EJ
    Original Eqn: Geot PE potential for heat TWth*EJ per TWh/TWe per TWh
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Geothermal potential (primary energy) for producing heat.
    """
    return geot_pe_potential_for_heat_twth() * ej_per_twh() / twe_per_twh()


@cache.run
@subs(["RES elec"], _subscript_dict)
def initial_instal_cap_res_elec():
    """
    Real Name: initial instal cap RES elec
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H174')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H181')
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Installed capacity per RES elec by technology in the initial year 1995.
    """
    return _ext_constant_initial_instal_cap_res_elec()


@cache.step
@to_float
def abundance_res_elec2():
    """
    Real Name: abundance RES elec2
    Original Eqn: SQRT (abundance RES elec)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Adaptation of the parameter abundance for better behaviour of the model.
    """
    return np.sqrt(abundance_res_elec())


@cache.step
@to_float
def potential_tot_generation_res_elec_twh():
    """
    Real Name: potential tot generation RES elec TWh
    Original Eqn: SUM(potential generation RES elec TWh[RES elec!])
    Units: TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Total potential generation of electricity from RES given the installed
        capacity.
    """
    return sum(potential_generation_res_elec_twh(), dim=("RES elec",))


@cache.step
@to_float
def res_elec_tot_overcapacity():
    """
    Real Name: RES elec tot overcapacity
    Original Eqn: IF THEN ELSE(potential tot generation RES elec TWh=0,0, (potential tot generation RES elec TWh-FE real tot generation RES elec TWh)/potential tot generation RES elec TWh)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Overcapacity for each technology RES for electricity taking into account
        the installed capacity and the real generation.
    """
    return if_then_else(
        potential_tot_generation_res_elec_twh() == 0,
        lambda: 0,
        lambda: (
            potential_tot_generation_res_elec_twh()
            - fe_real_tot_generation_res_elec_twh()
        )
        / potential_tot_generation_res_elec_twh(),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def wear_res_elec():
    """
    Real Name: wear RES elec
    Original Eqn: IF THEN ELSE(Time<2015, 0, installed capacity RES elec TW[RES elec]/lifetime RES elec[RES elec])
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    Depreciation of RES infraestructures.
    """
    return if_then_else(
        time() < 2015,
        lambda: 0,
        lambda: installed_capacity_res_elec_tw() / lifetime_res_elec(),
    )


@cache.step
@subs(["RES elec"], _subscript_dict)
def cpini_res_elec():
    """
    Real Name: "Cp-ini RES elec"
    Original Eqn:
      GET DIRECT DATA('?inputs_eu.xlsx', 'Parameters', '6', 'G13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'F16')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: ['RES elec']

    Initial capacity factor (before accounting for the reduction of Cp of the
        base-load plants with the penetration of the intermittent RES (solar and
        wind) in the electricity generation mix).
    """
    return xrmerge(
        [
            _ext_data_cpini_res_elec(time()),
            _ext_constant_cpini_res_elec(),
        ]
    )


@cache.run
@to_float
def g_per_t():
    """
    Real Name: G per T
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G7')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_g_per_t()


@cache.run
@subs(["RES elec"], _subscript_dict)
def time_construction_res_elec():
    """
    Real Name: time construction RES elec
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'T13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'T16')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Average construction time for each RES generating electricity.        For replaced infraestructures, the construction time should be smaller
        than for new infaestructures, however we compensate for this assuming that
        the demantling time is included in onstruction time for replaced
        infrastructure.
    """
    return _ext_constant_time_construction_res_elec()


@cache.run
@subs(["RES elec"], _subscript_dict)
def time_planification_res_elec():
    """
    Real Name: time planification RES elec
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'S13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'S16')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Average planification time for each RES generating electricity.
    """
    return _ext_constant_time_planification_res_elec()


@cache.run
@subs(["RES elec"], _subscript_dict)
def initial_required_capacity_res_elec():
    """
    Real Name: initial required capacity RES elec
    Original Eqn: table hist capacity RES elec[RES elec](1996)-table hist capacity RES elec[RES elec](1995)
    Units: TW
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Initial required capacity of RES by technology (year 1995). We assume that
        it is the same than the additional installed capacity between 1995 and
        1996.
    """
    return table_hist_capacity_res_elec(1996) - table_hist_capacity_res_elec(1995)


@cache.step
@subs(["RES elec"], _subscript_dict)
def new_res_elec_capacity_under_planning():
    """
    Real Name: new RES elec capacity under planning
    Original Eqn: MAX(0, required capacity RES elec TW[RES elec]/MAX(time planification RES elec[RES elec],TIME STEP))
    Units: TW/Year
    Limits: (None, None)
    Type: component
    Subs: ['RES elec']

    New RES infraestructure for electricity generation capacity under planning.
    """
    return np.maximum(
        0,
        required_capacity_res_elec_tw()
        / np.maximum(time_planification_res_elec(), time_step()),
    )


@cache.run
@subs(["RES elec"], _subscript_dict)
def lifetime_res_elec():
    """
    Real Name: lifetime RES elec
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C13')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C16')
    Units: Years
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Lifetime of each RES technology for electricity generation.
    """
    return _ext_constant_lifetime_res_elec()


@cache.run
@subs(["RES elec"], _subscript_dict)
def past_res_elec_capacity_growth():
    """
    Real Name: past RES elec capacity growth
    Original Eqn:
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C85')
        .
        .
        .
      GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C92')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: ['RES elec']

    Current growth levels.
    """
    return _ext_constant_past_res_elec_capacity_growth()


@cache.step
@to_float
def afforestation_program_2020_gtco2():
    """
    Real Name: Afforestation program 2020 GtCO2
    Original Eqn: Afforestation program 2020*activate Affores program/(C per CO2*Mt per Gt)
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual emissions captured by the afforestation program.
    """
    return (
        afforestation_program_2020()
        * activate_affores_program()
        / (c_per_co2() * mt_per_gt())
    )


@cache.run
@to_float
def mt_per_gt():
    """
    Real Name: Mt per Gt
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G6')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion from Mega to Giga (1000 M = 1 G).
    """
    return _ext_constant_mt_per_gt()


@cache.run
@to_float
def gtl_efficiency():
    """
    Real Name: GTL efficiency
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C50')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of GTL plants. Source: IEA balances (see Technical Report).
    """
    return _ext_constant_gtl_efficiency()


@cache.run
@to_float
def ctl_efficiency():
    """
    Real Name: CTL efficiency
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C49')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of CTL plants. Source: IEA balances (see Technical Report).
    """
    return _ext_constant_ctl_efficiency()


@cache.step
@to_float
def ctlgtl_gb():
    """
    Real Name: "CTL+GTL Gb"
    Original Eqn: "FES CTL+GTL EJ"/Gboe per EJ
    Units: Gboe/Year
    Limits: (None, None)
    Type: component
    Subs: None

    CTL and GTL production.
    """
    return fes_ctlgtl_ej() / gboe_per_ej()


@cache.run
@to_float
def mbd_per_ejyear():
    """
    Real Name: "Mb/d per EJ/year"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C17')
    Units: Mb*Year/(EJ*d)
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion between Mb/d to EJ/year.
    """
    return _ext_constant_mbd_per_ejyear()


@cache.run
@to_float
def hist_growth_ctl():
    """
    Real Name: Hist growth CTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C82')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Historic growth of CTL 1990-2014 (IEA Balances).
    """
    return _ext_constant_hist_growth_ctl()


@cache.run
@to_float
def gboe_per_ej():
    """
    Real Name: Gboe per EJ
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'G10')
    Units: EJ/Gboe
    Limits: (None, None)
    Type: constant
    Subs: None

    Unit conversion (1 EJ = 5.582 Gb).
    """
    return _ext_constant_gboe_per_ej()


def table_max_extraction_uranium_user_defined(x):
    """
    Real Name: table max extraction uranium user defined
    Original Eqn: GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '156', 'E157')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_uranium_user_defined(x)


def userdefined_extraction_growth_unconv_gas(x):
    """
    Real Name: "User-defined extraction growth unconv gas"
    Original Eqn: ( GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '163', 'D164'))
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    User-defined annual extraction growth constraint path as a function of
        time for unconventional gas.
    """
    return _ext_lookup_userdefined_extraction_growth_unconv_gas(x)


def userdefined_extraction_growth_unconv_oil(x):
    """
    Real Name: "User-defined extraction growth unconv oil"
    Original Eqn: ( GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '161', 'D162') )
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    User-defined annual extraction growth constraint path as a function of
        time for unconventional oil.
    """
    return _ext_lookup_userdefined_extraction_growth_unconv_oil(x)


@cache.run
@to_float
def hist_growth_gtl():
    """
    Real Name: Hist growth GTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C83')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Historic growth of GTL 2000-2014 (IEA Balances).
    """
    return _ext_constant_hist_growth_gtl()


@cache.run
@to_float
def urr_uranium_user_defined():
    """
    Real Name: URR uranium User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C156')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_uranium_user_defined()


@cache.run
@to_float
def replacement_rate_nuclear():
    """
    Real Name: replacement rate nuclear
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'D15')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    If =1, we asume that all the power that reaches the end of its lifetime is
        replaced.
    """
    return _ext_constant_replacement_rate_nuclear()


@cache.step
@to_float
def demand_gas_for_oil_refinery_gains():
    """
    Real Name: demand gas for oil refinery gains
    Original Eqn: Oil refinery gains EJ*Efficiency gas for oil refinery gains
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of natural gas to be used as input in the refineries to obtain the
        so-called "oil refinery gains".
    """
    return oil_refinery_gains_ej() * efficiency_gas_for_oil_refinery_gains()


@cache.step
@to_float
def share_res_vs_tpes():
    """
    Real Name: share RES vs TPES
    Original Eqn: TPE from RES EJ/TPES EJ
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of primary energy from RES in the TPES.
    """
    return tpe_from_res_ej() / tpes_ej()


@cache.step
@to_float
def tpes_mtoe():
    """
    Real Name: TPES Mtoe
    Original Eqn: TPES EJ*MToe per EJ
    Units: MToe/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total Primary Energy Supply.
    """
    return tpes_ej() * mtoe_per_ej()


@cache.step
@to_float
def fe_elec_generation_from_nre_twh():
    """
    Real Name: FE Elec generation from NRE TWh
    Original Eqn: FE Elec generation from fossil fuels TWh+FE nuclear Elec generation TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity generation from non-renewable resources (fossil fuels and
        uranium).
    """
    return fe_elec_generation_from_fossil_fuels_twh() + fe_nuclear_elec_generation_twh()


@cache.step
@to_float
def pepc_consumption_people_depending_on_trad_biomass():
    """
    Real Name: PEpc consumption people depending on trad biomass
    Original Eqn: ZIDZ( PE consumption trad biomass ref , People relying trad biomass ref )
    Units: MToe/people
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy per capita consumption of people currently depending on
        trad biomass.
    """
    return zidz(pe_consumption_trad_biomass_ref(), people_relying_trad_biomass_ref())


@cache.step
@to_float
def share_gas_for_oil_refinery_gains():
    """
    Real Name: share gas for oil refinery gains
    Original Eqn: IF THEN ELSE("PED nat. gas without GTL">0, demand gas for oil refinery gains/"PED nat. gas without GTL", 0.5)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of gas to cover oil refinery gains. Condition to avoid error when
        the total demand of gas without GTL falls to zero (0.5 is an arbitrary
        value).
    """
    return if_then_else(
        ped_nat_gas_without_gtl() > 0,
        lambda: demand_gas_for_oil_refinery_gains() / ped_nat_gas_without_gtl(),
        lambda: 0.5,
    )


@cache.run
@to_float
def people_relying_trad_biomass_ref():
    """
    Real Name: People relying trad biomass ref
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C58')
    Units: people
    Limits: (None, None)
    Type: constant
    Subs: None

    People relying on traditional biomass in 2008. WEO 2010 reportad that in
        2008, 2.5 billion people consumed 724 Mtoe of traditional biomass.
    """
    return _ext_constant_people_relying_trad_biomass_ref()


@cache.run
@to_float
def pe_consumption_trad_biomass_ref():
    """
    Real Name: PE consumption trad biomass ref
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C57')
    Units: EJ/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Primary energy consumption of trad biomass. From IEA balances, 39.626 EJ
        were consumed as primary solids biofuels for TFC in 2008.
    """
    return _ext_constant_pe_consumption_trad_biomass_ref()


@cache.run
@to_float
def tpefpc_threshold_high_development():
    """
    Real Name: TPEFpc threshold high development
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Result comparison', 'C10')
    Units: GJ/people
    Limits: (None, None)
    Type: constant
    Subs: None

    Energy use threshold (in terms of total primary energy footprint) found by
        Arto et al., (2016) to reach high development (HDI>0.8).
    """
    return _ext_constant_tpefpc_threshold_high_development()


@cache.run
@to_float
def tpedpc_acceptable_standard_living():
    """
    Real Name: TPEDpc acceptable standard living
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Result comparison', 'C11')
    Units: GJ/people
    Limits: (None, None)
    Type: constant
    Subs: None

    Approximative energy use value to fulfill the aceptable standard of living
        (in terms of total primary energy use): 40 GJ/person. Source: (Goldemberg,
        2011; Rao et al, 2014, WBGU,2003) cited in Arto et al., (2016).
    """
    return _ext_constant_tpedpc_acceptable_standard_living()


@cache.step
@to_float
def pop_not_dependent_on_trad_biomass():
    """
    Real Name: Pop not dependent on trad biomass
    Original Eqn: Population-Population dependent on trad biomass
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Global population not dependent on traditional biomass.
    """
    return population() - population_dependent_on_trad_biomass()


@cache.step
@to_float
def carbon_footprint_tco2person():
    """
    Real Name: "Carbon footprint tCO2/person"
    Original Eqn: Total CO2 emissions GTCO2*t per Gt/Population
    Units: tCO2/person
    Limits: (None, None)
    Type: component
    Subs: None

    CO2 emissions per capita.
    """
    return total_co2_emissions_gtco2() * t_per_gt() / population()


@cache.step
@to_float
def average_tpespc_without_trad_biomass():
    """
    Real Name: "Average TPESpc (without trad biomass)"
    Original Eqn: "TPES (without trad biomass)"*GJ per EJ/Pop not dependent on trad biomass
    Units: GJ/people
    Limits: (None, None)
    Type: component
    Subs: None

    Average per capita TPES without accounting for the energy supplied by
        traditional biomass. The population considered for estimating the average
        is not the global population, but the share of the population not relying
        on traditional biomass for covering their energy uses.
    """
    return (
        tpes_without_trad_biomass() * gj_per_ej() / pop_not_dependent_on_trad_biomass()
    )


@cache.step
@to_float
def tpes_without_trad_biomass():
    """
    Real Name: "TPES (without trad biomass)"
    Original Eqn: TPES EJ-PE traditional biomass EJ delayed 1yr
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    TPES without accounting for traditional biomass.
    """
    return tpes_ej() - pe_traditional_biomass_ej_delayed_1yr()


@cache.step
@to_float
def max_npp_potential_bioe_residues_for_nonbiofuels():
    """
    Real Name: "Max NPP potential BioE residues for non-biofuels"
    Original Eqn: Max NPP potential bioE residues*(1-share cellulosic biofuels vs BioE residues)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Share of bioE for other uses than biofuels (heat, solids and electricity).
    """
    return max_npp_potential_bioe_residues() * (
        1 - share_cellulosic_biofuels_vs_bioe_residues()
    )


@cache.step
@to_float
def max_npp_potential_bioe_residues_for_cellulosic_biofuels():
    """
    Real Name: Max NPP potential BioE residues for cellulosic biofuels
    Original Eqn: Max NPP potential bioE residues*share cellulosic biofuels vs BioE residues
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Potential assigned to the cellulosic biofuels from bioE residues.
    """
    return (
        max_npp_potential_bioe_residues() * share_cellulosic_biofuels_vs_bioe_residues()
    )


@cache.step
@to_float
def total_cumulative_emissions_gtco2():
    """
    Real Name: Total cumulative emissions GtCO2
    Original Eqn: Total cumulative emissions GtC/C per CO2
    Units: GtCO2
    Limits: (None, None)
    Type: component
    Subs: None

    Total cumulative emissions.
    """
    return total_cumulative_emissions_gtc() / c_per_co2()


@cache.step
@to_float
def gtco2_historic_emissions_rcps():
    """
    Real Name: GtCO2 historic emissions RCPs
    Original Eqn: GtC historic emissions RCPs(Time)/C per CO2
    Units: GTCO2e
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return gtc_historic_emissions_rcps(time()) / c_per_co2()


@cache.step
@to_float
def carbon_emissions_gtc():
    """
    Real Name: Carbon emissions GtC
    Original Eqn: Total CO2 emissions GTCO2*C per CO2
    Units: GtC/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total anual carbon emissions.
    """
    return total_co2_emissions_gtco2() * c_per_co2()


@cache.step
@to_float
def historic_unconv_oil():
    """
    Real Name: Historic unconv oil
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25' , 'C34')
    Units: EJ/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic unconventional extraction from Mohr et al (2015).
    """
    return _ext_data_historic_unconv_oil(time())


@cache.run
@to_float
def gco2_per_mj_unconv_gas():
    """
    Real Name: gCO2 per MJ unconv gas
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C94')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    CO2 emission factor of unconventional gas.
    """
    return _ext_constant_gco2_per_mj_unconv_gas()


@cache.run
@to_float
def gco2_per_mj_unconv_oil():
    """
    Real Name: gCO2 per MJ unconv oil
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C95')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Emission factor unconventional oil (tar sands/extra heavy oil).
    """
    return _ext_constant_gco2_per_mj_unconv_oil()


@cache.run
@to_float
def gco2_per_mj_conv_gas():
    """
    Real Name: gCO2 per MJ conv gas
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C92')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    CO2 emission factor conventional natural gas.
    """
    return _ext_constant_gco2_per_mj_conv_gas()


@cache.run
@to_float
def gco2_per_mj_ctl():
    """
    Real Name: gCO2 per MJ CTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C89')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    CO2 emissions coefficient of CTL.
    """
    return _ext_constant_gco2_per_mj_ctl()


@cache.run
@to_float
def gco2_per_mj_gtl():
    """
    Real Name: gCO2 per MJ GTL
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C90')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    CO2 emissions coefficient of GTL.
    """
    return _ext_constant_gco2_per_mj_gtl()


@cache.step
@to_float
def historic_unconv_gas():
    """
    Real Name: Historic unconv gas
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25' , 'C35')
    Units: EJ/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historic unconventional extraction from Mohr et al (2015).
    """
    return _ext_data_historic_unconv_gas(time())


@cache.run
@to_float
def gco2_per_mj_coal():
    """
    Real Name: gCO2 per MJ coal
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C91')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    CO2 emission factor coal.
    """
    return _ext_constant_gco2_per_mj_coal()


@cache.run
@to_float
def gco2_per_mj_conv_oil():
    """
    Real Name: gCO2 per MJ conv oil
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C93')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    CO2 emission factor conventional oil.
    """
    return _ext_constant_gco2_per_mj_conv_oil()


@cache.run
@to_float
def gco2_per_mj_shale_oil():
    """
    Real Name: gCO2 per MJ shale oil
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C96')
    Units: gCO2/MJ
    Limits: (None, None)
    Type: constant
    Subs: None

    CO2 emission factor shale oil.
    """
    return _ext_constant_gco2_per_mj_shale_oil()


@cache.run
@to_float
def dollars_to_tdollars():
    """
    Real Name: dollars to Tdollars
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C15')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion from dollars to Tdollars (1 T$ = 1e12 $).
    """
    return _ext_constant_dollars_to_tdollars()


@cache.step
@to_float
def variation_historic_pop():
    """
    Real Name: variation historic pop
    Original Eqn: IF THEN ELSE(Time<2014, Historic pop(INTEGER(Time+1))-Historic pop(INTEGER(Time)), 0)
    Units: people/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Population historic variation.
    """
    return if_then_else(
        time() < 2014,
        lambda: historic_pop(int(time() + 1)) - historic_pop(int(time())),
        lambda: 0,
    )


def historic_pop(x):
    """
    Real Name: Historic pop
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H28'))
    Units: people
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic population (1995-2015). Ref: World bank.
    """
    return _ext_lookup_historic_pop(x)


@cache.step
@to_float
def land_compet_2gen_vs_total_land_compet():
    """
    Real Name: land compet 2gen vs total land compet
    Original Eqn: Land compet biofuels 2gen Mha/Land compet required dedicated crops for biofuels
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Land dedicated to 2nd generation biofuels vs total land competition for
        biofuels [to prevent stock "Land compet biofuels 2gen Mha" goes negative].
    """
    return (
        land_compet_biofuels_2gen_mha()
        / land_compet_required_dedicated_crops_for_biofuels()
    )


@cache.run
@to_float
def gj_per_ej():
    """
    Real Name: GJ per EJ
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C14')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion from GJ to EJ (1 EJ = 1e9 GJ).
    """
    return _ext_constant_gj_per_ej()


@cache.step
@to_float
def average_tpes_per_capita():
    """
    Real Name: Average TPES per capita
    Original Eqn: TPES EJ*GJ per EJ/Population
    Units: GJ/(Year*people)
    Limits: (None, None)
    Type: component
    Subs: None

    Average Total Primary Energy Supply per capita (GJ per capita).
    """
    return tpes_ej() * gj_per_ej() / population()


@cache.run
@to_float
def geot_pe_potential_for_heat_twth():
    """
    Real Name: Geot PE potential for heat TWth
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C56')
    Units: TWth
    Limits: (None, None)
    Type: constant
    Subs: None

    Geothermal primary energy potential for heat.
    """
    return _ext_constant_geot_pe_potential_for_heat_twth()


@cache.step
@to_float
def share_res_for_elec_vs_tpe_res():
    """
    Real Name: share RES for Elec vs TPE RES
    Original Eqn: PE Elec generation from RES EJ/("PE supply RES non-Elec EJ"+PE Elec generation from RES EJ)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of RES for electricity in relation to TPE RES.
    """
    return pe_elec_generation_from_res_ej() / (
        pe_supply_res_nonelec_ej() + pe_elec_generation_from_res_ej()
    )


@cache.step
@to_float
def tpes_de_castro_phd__scen_madcoal_ej():
    """
    Real Name: "TPES de Castro PhD - Scen 'madcoal' EJ"
    Original Eqn: "TPES de Castro PhD - Scen 'madcoal'"(Time)/MToe per EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return tpes_de_castro_phd__scen_madcoal(time()) / mtoe_per_ej()


@cache.step
@to_float
def extraction_coal_mtoe():
    """
    Real Name: extraction coal Mtoe
    Original Eqn: extraction coal EJ EU*MToe per EJ
    Units: MToe/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of coal.
    """
    return extraction_coal_ej_eu() * mtoe_per_ej()


@cache.step
@to_float
def max_extraction_coal_mtoe():
    """
    Real Name: max extraction coal Mtoe
    Original Eqn: max extraction coal EJ*MToe per EJ
    Units: MToe/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return max_extraction_coal_ej() * mtoe_per_ej()


@cache.step
@to_float
def tpe_from_res_ej():
    """
    Real Name: TPE from RES EJ
    Original Eqn: PE Elec generation from RES EJ+"PE supply RES non-Elec EJ"
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy supply from all RES.
    """
    return pe_elec_generation_from_res_ej() + pe_supply_res_nonelec_ej()


@cache.step
@to_float
def tpe_from_res_mtoe():
    """
    Real Name: TPE from RES Mtoe
    Original Eqn: TPE from RES EJ*MToe per EJ
    Units: MToe/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy supply from all RES.
    """
    return tpe_from_res_ej() * mtoe_per_ej()


@cache.step
@to_float
def tpes_de_castro_phd__scen_ii_ej():
    """
    Real Name: "TPES de Castro PhD - Scen II EJ"
    Original Eqn: "TPES de Castro PhD - Scen II"(Time)/MToe per EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    TPES. (Add "Energía perdida" to the net energy extraction in the original
        model).
    """
    return tpes_de_castro_phd__scen_ii(time()) / mtoe_per_ej()


@cache.step
@to_float
def electrical_distribution_losses_ej():
    """
    Real Name: Electrical distribution losses EJ
    Original Eqn: Electrical distribution losses TWh*EJ per TWh
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Electical distribution losses (EJ)
    """
    return electrical_distribution_losses_twh() * ej_per_twh()


@cache.run
@to_float
def efficiency_conversion_bioe_plants_to_heat():
    """
    Real Name: Efficiency conversion BioE plants to heat
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C43')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation from bioenergy to heat in heat and CHP
        plants (aggregated). Efficiency of the transformation from bioenergy to
        electricity (estimation for 2014 from the IEA balances.
    """
    return _ext_constant_efficiency_conversion_bioe_plants_to_heat()


@cache.run
@to_float
def efficiency_improvement_biofuels_3gen():
    """
    Real Name: Efficiency improvement biofuels 3gen
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C47')
    Units:
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency improvements of 3rd generation (cellulosic) in relation to 2nd
        generation biofuels.
    """
    return _ext_constant_efficiency_improvement_biofuels_3gen()


@cache.step
@to_float
def potential_peavail_biofuels_2gen_land_compet_ej():
    """
    Real Name: Potential PEavail biofuels 2gen land compet EJ
    Original Eqn: Land compet biofuels 2gen Mha*Land productivity biofuels 2gen EJ MHa
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Potential primary energy available of biofuels from dedicated crops (2nd
        generation).
    """
    return land_compet_biofuels_2gen_mha() * land_productivity_biofuels_2gen_ej_mha()


@cache.step
@to_float
def annual_additional_historic_land_use_biofuels_2gen():
    """
    Real Name: Annual additional historic land use biofuels 2gen
    Original Eqn: Annual additional historic product biofuels 2gen*EJ per ktoe/Land productivity biofuels 2gen EJ MHa
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        annual_additional_historic_product_biofuels_2gen()
        * ej_per_ktoe()
        / land_productivity_biofuels_2gen_ej_mha()
    )


@cache.run
@to_float
def max_npp_potential_bioe_residues():
    """
    Real Name: Max NPP potential bioE residues
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C41')
    Units: EJ/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Potencial following WBGU (2009).
    """
    return _ext_constant_max_npp_potential_bioe_residues()


@cache.run
@to_float
def grid_reinforcement_costs():
    """
    Real Name: Grid reinforcement costs
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C74')
    Units: dollars/kW
    Limits: (None, None)
    Type: constant
    Subs: None

    Grid reinforcement costs. We take the median from the study of Mills et al
        (2012) for wind: 300 $/kW (238.33 US1995$).
    """
    return _ext_constant_grid_reinforcement_costs()


@cache.step
@to_float
def balancing_costs():
    """
    Real Name: Balancing costs
    Original Eqn: (Balancing costs ref(Share variable RES elec generation vs total))/M per T
    Units: Tdollars/TWh
    Limits: (None, None)
    Type: component
    Subs: None

    Balancing costs (1995T$ / TWh produced).
    """
    return (
        balancing_costs_ref(share_variable_res_elec_generation_vs_total())
    ) / m_per_t()


@cache.step
@to_float
def historic_land_compet_available_for_biofuels_2gen():
    """
    Real Name: Historic land compet available for biofuels 2gen
    Original Eqn: 74847.7*EJ per ktoe/Land productivity biofuels 2gen EJ MHa
    Units: MHa/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Land occupied by biofuels in 2015. Biofuels production in 2015: 7,4847.7
        ktoe (BP 2016).
    """
    return 74847.7 * ej_per_ktoe() / land_productivity_biofuels_2gen_ej_mha()


@cache.run
@to_float
def land_productivity_biofuels_2gen_ej_mha():
    """
    Real Name: Land productivity biofuels 2gen EJ MHa
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C59')
    Units: EJ/MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Energy output per area of biofuels 2nd generation (final energy). Source:
        de Castro et al (2014): 0.155 W/m2.
    """
    return _ext_constant_land_productivity_biofuels_2gen_ej_mha()


@cache.step
@to_float
def max_peavail_potential_biofuels_land_compet():
    """
    Real Name: Max PEavail potential biofuels land compet
    Original Eqn: IF THEN ELSE(Time<start year 3gen cellulosic biofuels, Max land compet biofuels 2gen*Land productivity biofuels 2gen EJ MHa, Max land compet biofuels 2gen*Land productivity biofuels 2gen EJ MHa*(1+Efficiency improvement biofuels 3gen))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual biofuels potential (primary energy) available from land competition.
    """
    return if_then_else(
        time() < start_year_3gen_cellulosic_biofuels(),
        lambda: max_land_compet_biofuels_2gen()
        * land_productivity_biofuels_2gen_ej_mha(),
        lambda: max_land_compet_biofuels_2gen()
        * land_productivity_biofuels_2gen_ej_mha()
        * (1 + efficiency_improvement_biofuels_3gen()),
    )


def balancing_costs_ref(x):
    """
    Real Name: Balancing costs ref
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Parameters', '24' , 'B25'))
    Units: dollars/MWh
    Limits: (None, None)
    Type: lookup
    Subs: None

    Balancing costs adapting data from Holttinen et al (2011).
    """
    return _ext_lookup_balancing_costs_ref(x)


@cache.run
@to_float
def efficiency_conversion_bioe_to_elec():
    """
    Real Name: efficiency conversion bioE to Elec
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C44')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of the transformation from bioenergy to electricity in both
        electricity plants and CHPs (estimation for 2014 from the IEA balances).
    """
    return _ext_constant_efficiency_conversion_bioe_to_elec()


@cache.step
@to_float
def potential_peavail_biofuels_prod_3gen_ej():
    """
    Real Name: Potential PEavail biofuels prod 3gen EJ
    Original Eqn: Land compet biofuels 3gen Mha*Land productivity biofuels 2gen EJ MHa*(1+Efficiency improvement biofuels 3gen)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Potential Final Energy production (EJ) of biofuels from dedicated crops
        (3rd generation).
    """
    return (
        land_compet_biofuels_3gen_mha()
        * land_productivity_biofuels_2gen_ej_mha()
        * (1 + efficiency_improvement_biofuels_3gen())
    )


@cache.step
@to_float
def max_peavail_potential_bioe_residues_for_cellulosic_biofuels():
    """
    Real Name: Max PEavail potential bioE residues for cellulosic biofuels
    Original Eqn: Max NPP potential BioE residues for cellulosic biofuels*Efficiency bioE residues to cellulosic liquids
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        max_npp_potential_bioe_residues_for_cellulosic_biofuels()
        * efficiency_bioe_residues_to_cellulosic_liquids()
    )


@cache.run
@to_float
def p_biofuels_3gen_land_compet():
    """
    Real Name: P biofuels 3gen land compet
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C47')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in energy output demand depending on the policy of the
        scenario.
    """
    return _ext_constant_p_biofuels_3gen_land_compet()


@cache.step
@to_float
def constrain_gas_exogenous_growth_delayed_1yr():
    """
    Real Name: "constrain gas exogenous growth? delayed 1yr"
    Original Eqn: DELAY FIXED ( "constrain gas exogenous growth?", 1, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_constrain_gas_exogenous_growth_delayed_1yr()


@cache.step
@to_float
def constrain_gas_exogenous_growth():
    """
    Real Name: "constrain gas exogenous growth?"
    Original Eqn: IF THEN ELSE(check gases>-0.01 ,1 ,check gases)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    If negative, there is oversupply of gas. This variable is used to
        constrain the exogenous growth of exogenously-driven policies.
    """
    return if_then_else(check_gases() > -0.01, lambda: 1, lambda: check_gases())


@cache.step
@to_float
def constrain_liquids_exogenous_growth_delayed_1yr():
    """
    Real Name: "constrain liquids exogenous growth? delayed 1yr"
    Original Eqn: DELAY FIXED ( "constrain liquids exogenous growth?", 1, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_constrain_liquids_exogenous_growth_delayed_1yr()


@cache.step
@to_float
def check_liquids_delayed_1yr():
    """
    Real Name: check liquids delayed 1yr
    Original Eqn: DELAY FIXED ( check liquids, 1, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variable to avoid energy oversupply caused by exogenously driven policies.
    """
    return _delayfixed_check_liquids_delayed_1yr()


@cache.step
@to_float
def check_gas_delayed_1yr():
    """
    Real Name: check gas delayed 1yr
    Original Eqn: DELAY FIXED ( check gases, 1, 1)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Variable to avoid energy oversupply caused by exogenously driven policies.
    """
    return _delayfixed_check_gas_delayed_1yr()


@cache.step
@to_float
def constrain_liquids_exogenous_growth():
    """
    Real Name: "constrain liquids exogenous growth?"
    Original Eqn: IF THEN ELSE(check liquids>0 ,1 ,check liquids)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    If negative, there is oversupply of liquids. This variable is used to
        constrain the exogenous growth of exogenously-driven policies.
    """
    return if_then_else(check_liquids() > 0, lambda: 1, lambda: check_liquids())


@cache.step
@to_float
def share_variable_res_elec_vs_total_generation_delayed_1yr():
    """
    Real Name: Share variable RES elec vs total generation delayed 1yr
    Original Eqn: DELAY FIXED ( Share variable RES elec generation vs total, 1, 0.0071)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    "Share variable RES elec generation vs total" delayed 1 year.
    """
    return _delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr()


@cache.step
@to_float
def overcapacity_vs_intermittent_res_penetration_0():
    """
    Real Name: "overcapacity vs. intermittent RES penetration 0"
    Original Eqn: MAX(1, 0.9599*EXP(0.8938*Share variable RES elec vs total generation delayed 1yr))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Total overcapacity vs. intermittent RES penetration in electricity
        generation.
    """
    return np.maximum(
        1,
        0.9599
        * np.exp(0.8938 * share_variable_res_elec_vs_total_generation_delayed_1yr()),
    )


@cache.step
@to_float
def total_electrical_losses_ej():
    """
    Real Name: Total electrical losses EJ
    Original Eqn: Elec gen related losses EJ+Electrical distribution losses EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total losses from electricity generation (generation + distribution).
    """
    return elec_gen_related_losses_ej() + electrical_distribution_losses_ej()


@cache.step
@to_float
def gen_losses_vs_pe_for_elec():
    """
    Real Name: Gen losses vs PE for elec
    Original Eqn: Elec gen related losses EJ/Total PE for electricity consumption EJ
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Generation losses as a share of the total PE for electricity.
    """
    return elec_gen_related_losses_ej() / total_pe_for_electricity_consumption_ej()


@cache.run
@to_float
def initial_gtl_production():
    """
    Real Name: initial GTL production
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H37')
    Units: EJ/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    GTL production in the initial year 1995 (IEA balances).
    """
    return _ext_constant_initial_gtl_production()


@cache.step
@to_float
def variation_ctl():
    """
    Real Name: variation CTL
    Original Eqn: IF THEN ELSE(Time<2013, Historic CTL production(INTEGER(Time+1))-Historic CTL production(INTEGER(Time)), IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?"*CTL potential production, CTL potential production*real growth CTL))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New annual CTL production.
    """
    return if_then_else(
        time() < 2013,
        lambda: historic_ctl_production(int(time() + 1))
        - historic_ctl_production(int(time())),
        lambda: if_then_else(
            check_liquids() < 0,
            lambda: constrain_liquids_exogenous_growth() * ctl_potential_production(),
            lambda: ctl_potential_production() * real_growth_ctl(),
        ),
    )


@cache.step
@to_float
def variation_gtl():
    """
    Real Name: variation GTL
    Original Eqn: IF THEN ELSE(Time<2013, Historic GTL production(INTEGER(Time+1))-Historic GTL production(INTEGER(Time)), IF THEN ELSE(check liquids<0, "constrain liquids exogenous growth?" *GTL potential production, GTL potential production*real growth GTL))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    New annual GTL production.
    """
    return if_then_else(
        time() < 2013,
        lambda: historic_gtl_production(int(time() + 1))
        - historic_gtl_production(int(time())),
        lambda: if_then_else(
            check_liquids() < 0,
            lambda: constrain_liquids_exogenous_growth() * gtl_potential_production(),
            lambda: gtl_potential_production() * real_growth_gtl(),
        ),
    )


def historic_gtl_production(x):
    """
    Real Name: Historic GTL production
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25' , 'C37')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic generation of GTL 1990-2014 (IEA Balances).
    """
    return _ext_lookup_historic_gtl_production(x)


@cache.run
@to_float
def initial_ctl_production():
    """
    Real Name: initial CTL production
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H36')
    Units: EJ/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    CTL production in the initial year 1995 (IEA balances).
    """
    return _ext_constant_initial_ctl_production()


def historic_ctl_production(x):
    """
    Real Name: Historic CTL production
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25' , 'C36')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic generation of CTL 1990-2014 (IEA Balances).
    """
    return _ext_lookup_historic_ctl_production(x)


@cache.step
@to_float
def improvement_efficiency_gas_for_electricity():
    """
    Real Name: improvement efficiency gas for electricity
    Original Eqn: IF THEN ELSE(Time<2013, (Historic efficiency gas for electricity(INTEGER(Time+1))-Historic efficiency gas for electricity(INTEGER(Time)))*percent to share, efficiency gas for electricity*remaining efficiency improv gas for electricity*Efficiency improv gas for electricity)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Annual efficiency improvement of the gas power centrals.
    """
    return if_then_else(
        time() < 2013,
        lambda: (
            historic_efficiency_gas_for_electricity(int(time() + 1))
            - historic_efficiency_gas_for_electricity(int(time()))
        )
        * percent_to_share(),
        lambda: efficiency_gas_for_electricity()
        * remaining_efficiency_improv_gas_for_electricity()
        * efficiency_improv_gas_for_electricity(),
    )


@cache.step
@to_float
def pe_demand_gas_elec_plants_ej():
    """
    Real Name: PE demand gas Elec plants EJ
    Original Eqn: (FE demand gas Elec plants TWh/efficiency gas for electricity)*EJ per TWh
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of natural gas (EJ) for electricity consumption
        (including generation losses).
    """
    return (
        fe_demand_gas_elec_plants_twh() / efficiency_gas_for_electricity()
    ) * ej_per_twh()


@cache.step
@to_float
def pe_demand_coal_elec_plants_ej():
    """
    Real Name: PE demand coal Elec plants EJ
    Original Eqn: (FE demand coal Elec plants TWh/efficiency coal for electricity)*EJ per TWh
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of coal (EJ) for electricity consumption (including
        generation losses).
    """
    return (
        fe_demand_coal_elec_plants_twh() / efficiency_coal_for_electricity()
    ) * ej_per_twh()


@cache.run
@to_float
def max_efficiency_gas_power_plants():
    """
    Real Name: Max efficiency gas power plants
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C48')
    Units: Dnml
    Limits: (None, None)
    Type: constant
    Subs: None

    Assumed maximum efficiency level for gas power centrals.
    """
    return _ext_constant_max_efficiency_gas_power_plants()


@cache.step
@to_float
def total_pe_for_electricity_consumption_ej():
    """
    Real Name: Total PE for electricity consumption EJ
    Original Eqn: Total FE Elec demand EJ+Elec gen related losses EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total primary energy for electricity consumption (EJ).
    """
    return total_fe_elec_demand_ej() + elec_gen_related_losses_ej()


@cache.run
@to_float
def initial_efficiency_gas_for_electricity():
    """
    Real Name: initial efficiency gas for electricity
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H70')
    Units: percent
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of gas power centrals in the initial year 1995 (IEA balances).
    """
    return _ext_constant_initial_efficiency_gas_for_electricity()


@cache.step
@to_float
def remaining_efficiency_improv_gas_for_electricity():
    """
    Real Name: remaining efficiency improv gas for electricity
    Original Eqn: (Max efficiency gas power plants-efficiency gas for electricity)/Max efficiency gas power plants
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining efficiency improvement for gas power centrals.
    """
    return (
        max_efficiency_gas_power_plants() - efficiency_gas_for_electricity()
    ) / max_efficiency_gas_power_plants()


@cache.run
@to_float
def efficiency_improv_gas_for_electricity():
    """
    Real Name: Efficiency improv gas for electricity
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C52')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual efficiency improvement in percentage of the gas power centrals for
        electricity production.
    """
    return _ext_constant_efficiency_improv_gas_for_electricity()


@cache.step
@to_float
def efficiency_gas_for_electricity():
    """
    Real Name: efficiency gas for electricity
    Original Eqn: INTEG ( improvement efficiency gas for electricity, initial efficiency gas for electricity*percent to share)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Efficiency of the gas power centrals.
    """
    return _integ_efficiency_gas_for_electricity()


@cache.run
@to_float
def percent_to_share():
    """
    Real Name: percent to share
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C12')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion of percent to share.
    """
    return _ext_constant_percent_to_share()


@cache.step
@to_float
def additional_pe_production_of_ctlgtl_for_liquids():
    """
    Real Name: "Additional PE production of CTL+GTL for liquids"
    Original Eqn: PED coal for CTL EJ+"PED nat. gas for GTL EJ"-"FES CTL+GTL EJ"
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Additional primary energy production of CTL and GTL for liquids. We need
        to account for this difference since the oil replaced by CTL liquids is
        accounted for primary energy in WoLiM, while there are additional losses
        to process coal to obtain CTL (required to balance the TPES with the TPED).
    """
    return ped_coal_for_ctl_ej() + ped_nat_gas_for_gtl_ej() - fes_ctlgtl_ej()


@cache.step
@to_float
def annual_additional_historic_product_biofuels_2gen():
    """
    Real Name: Annual additional historic product biofuels 2gen
    Original Eqn: IF THEN ELSE(Time<2015, Historic produc biofuels 2gen(INTEGER(Time+1))-Historic produc biofuels 2gen(INTEGER(Time)), 0)
    Units: ktoe/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual additional historic production of liquids from biofuels ethanol and
        biodiesel, ktoe/Year (1990-2015). Ref: BP 2016.
    """
    return if_then_else(
        time() < 2015,
        lambda: historic_produc_biofuels_2gen(int(time() + 1))
        - historic_produc_biofuels_2gen(int(time())),
        lambda: 0,
    )


def historic_produc_biofuels_2gen(x):
    """
    Real Name: Historic produc biofuels 2gen
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'C56'))
    Units: ktoe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic production of biofuels 2nd generation (1990-2015).
    """
    return _ext_lookup_historic_produc_biofuels_2gen(x)


@cache.run
@to_float
def cumulative_emissions_to_1995():
    """
    Real Name: Cumulative emissions to 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C108')
    Units: GtC
    Limits: (None, None)
    Type: constant
    Subs: None

    Cumulative emissions 1751-1995 due to carbon emissions from fossil fuel
        consumption, cement production and land-use changes. Data from CDIAC and
        World Resources Institute.
    """
    return _ext_constant_cumulative_emissions_to_1995()


@cache.run
@to_float
def start_year_bioe_residues_for_nonbiofuels():
    """
    Real Name: "start year BioE residues for non-biofuels"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C48')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    First year when the technology is available.
    """
    return _ext_constant_start_year_bioe_residues_for_nonbiofuels()


@cache.step
@to_float
def co2_fossil_fuel_emissions():
    """
    Real Name: CO2 fossil fuel emissions
    Original Eqn: CO2 emissions conv gas without GTL+CO2 emissions unconv gas+CO2 emissions GTL+CO2 emissions conv oil+CO2 emissions unconv oil+CO2 emissions coal without CTL+CO2 emissions CTL
    Units: GtCO2/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total CO2 emissions from fossil fuels.
    """
    return (
        co2_emissions_conv_gas_without_gtl()
        + co2_emissions_unconv_gas()
        + co2_emissions_gtl()
        + co2_emissions_conv_oil()
        + co2_emissions_unconv_oil()
        + co2_emissions_coal_without_ctl()
        + co2_emissions_ctl()
    )


@cache.run
@to_float
def t_per_gt():
    """
    Real Name: t per Gt
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C13')
    Units: TonC/GtC
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion from tones to Gigatonnes of carbon.
    """
    return _ext_constant_t_per_gt()


@cache.step
@to_float
def share_land_compet_biofuels():
    """
    Real Name: Share land compet biofuels
    Original Eqn: Land compet required dedicated crops for biofuels/Agricultural land 2015
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Share of global arable land required by dedicated crops for biofuels (in
        land competition).
    """
    return (
        land_compet_required_dedicated_crops_for_biofuels() / agricultural_land_2015()
    )


@cache.step
@to_float
def share_land_total_res_vs_arable():
    """
    Real Name: share land total RES vs arable
    Original Eqn: Total land requirements renew Mha/Agricultural land 2015
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land requirements for all RES as a share of the global arable land.
    """
    return total_land_requirements_renew_mha() / agricultural_land_2015()


@cache.step
@to_float
def year_scarcity_oil():
    """
    Real Name: Year scarcity oil
    Original Eqn: IF THEN ELSE(abundance total oil EU>0.95, 0, Time)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_total_oil_eu() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def cumulated_conv_gas_extraction():
    """
    Real Name: cumulated conv gas extraction
    Original Eqn: INTEG ( extraction conv gas EJ, cumulated conv gas extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated conventional gas extraction.
    """
    return _integ_cumulated_conv_gas_extraction()


@cache.run
@to_float
def cumulated_conv_gas_extraction_to_1995():
    """
    Real Name: cumulated conv gas extraction to 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C96')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Cumulated conventional gas extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_conv_gas_extraction_to_1995()


@cache.step
@to_float
def cumulated_unconv_gas_extraction():
    """
    Real Name: Cumulated unconv gas extraction
    Original Eqn: INTEG ( extraction unconv gas EJ, cumulated unconv gas extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated unconventional gas extraction.
    """
    return _integ_cumulated_unconv_gas_extraction()


@cache.run
@to_float
def cumulated_unconv_gas_extraction_to_1995():
    """
    Real Name: cumulated unconv gas extraction to 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C97')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Cumulated unconventional gas extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_unconv_gas_extraction_to_1995()


@cache.step
@to_float
def rurr_uranium():
    """
    Real Name: RURR uranium
    Original Eqn: INTEG ( -extraction uranium EJ EU, URR uranium-cumulated uranium extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR uranium. 720 EJ extracted before 1990.
    """
    return _integ_rurr_uranium()


@cache.run
@to_float
def cumulated_uranium_extraction_to_1995():
    """
    Real Name: cumulated uranium extraction to 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C99')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Cumulated coal extraction to 1995 (EWG 2006).
    """
    return _ext_constant_cumulated_uranium_extraction_to_1995()


@cache.step
@to_float
def cumulated_conv_oil_extraction():
    """
    Real Name: cumulated conv oil extraction
    Original Eqn: INTEG ( extraction conv oil EJ, cumulated conv oil extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated conventional oil extraction.
    """
    return _integ_cumulated_conv_oil_extraction()


@cache.run
@to_float
def cumulated_conv_oil_extraction_to_1995():
    """
    Real Name: cumulated conv oil extraction to 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C94')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Cumulated conventional oil extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_conv_oil_extraction_to_1995()


@cache.step
@to_float
def cumulated_unconv_oil_extraction():
    """
    Real Name: cumulated unconv oil extraction
    Original Eqn: INTEG ( extraction unconv oil EJ, cumulated unconv oil extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated unconventional oil extracted.
    """
    return _integ_cumulated_unconv_oil_extraction()


@cache.step
@to_float
def cumulated_coal_extraction():
    """
    Real Name: Cumulated coal extraction
    Original Eqn: INTEG ( extraction coal EJ EU, cumulated coal extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated coal extraction.
    """
    return _integ_cumulated_coal_extraction()


@cache.run
@to_float
def cumulated_coal_extraction_to_1995():
    """
    Real Name: cumulated coal extraction to 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C98')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Cumulated coal extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_coal_extraction_to_1995()


@cache.run
@to_float
def cumulated_unconv_oil_extraction_to_1995():
    """
    Real Name: cumulated unconv oil extraction to 1995
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C95')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Cumulated unconventional oil extraction to 1995 (Mohr et al., 2015).
    """
    return _ext_constant_cumulated_unconv_oil_extraction_to_1995()


@cache.step
@to_float
def cumulated_uranium_extraction():
    """
    Real Name: Cumulated uranium extraction
    Original Eqn: INTEG ( extraction uranium EJ EU, cumulated uranium extraction to 1995)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated uranium extraction.
    """
    return _integ_cumulated_uranium_extraction()


@cache.step
@to_float
def oil_refinery_gains_ej():
    """
    Real Name: Oil refinery gains EJ
    Original Eqn: Oil refinery gains share*PES oil EJ delayed
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Oil refinery gains.
    """
    return oil_refinery_gains_share() * pes_oil_ej_delayed()


@cache.run
@to_float
def oil_refinery_gains_share():
    """
    Real Name: Oil refinery gains share
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C75')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    We assume these energy gains are reached by applying natural gas as energy
        input. Historically, their share has been growing in the last decades
        (1.9% in 1980). WEO (2010) gives a 2.8% for the year 2009 and BP (2007)
        2.6%. The value 2.7% is taken.
    """
    return _ext_constant_oil_refinery_gains_share()


@cache.run
@to_float
def efficiency_gas_for_oil_refinery_gains():
    """
    Real Name: Efficiency gas for oil refinery gains
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C51')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    We assume a 100% efficiency as first approximation.
    """
    return _ext_constant_efficiency_gas_for_oil_refinery_gains()


@cache.run
@to_float
def one_year():
    """
    Real Name: one year
    Original Eqn: 1
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 1


@cache.step
@to_float
def land_compet_required_dedicated_crops_for_biofuels():
    """
    Real Name: Land compet required dedicated crops for biofuels
    Original Eqn: Land compet biofuels 2gen Mha+Land compet biofuels 3gen Mha
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Land requirements for crops for biofuels 2nd and 3rd generation (in land
        competing with other uses).
    """
    return land_compet_biofuels_2gen_mha() + land_compet_biofuels_3gen_mha()


@cache.run
@to_float
def annual_shift_from_2gen_to_3gen():
    """
    Real Name: Annual shift from 2gen to 3gen
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C64')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Share of the land dedicated for biofuels from the 2nd generation shifted
        to 3rd generation in the next year.
    """
    return _ext_constant_annual_shift_from_2gen_to_3gen()


@cache.run
@to_float
def p_bioe_residues():
    """
    Real Name: P bioE residues
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C50')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in energy output demand depending on the policy of the
        scenario.
    """
    return _ext_constant_p_bioe_residues()


@cache.step
@to_float
def cellulosic_biofuels_available():
    """
    Real Name: Cellulosic biofuels available
    Original Eqn: ZIDZ( (Max NPP potential BioE residues for cellulosic biofuels-Potential PE cellulosic biofuel EJ) , Max NPP potential BioE residues for cellulosic biofuels )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available as given as a fraction of unity.
    """
    return zidz(
        (
            max_npp_potential_bioe_residues_for_cellulosic_biofuels()
            - potential_pe_cellulosic_biofuel_ej()
        ),
        max_npp_potential_bioe_residues_for_cellulosic_biofuels(),
    )


@cache.step
@to_float
def bioe_residues_for_nonbiofuels_available():
    """
    Real Name: "BioE residues for non-biofuels available"
    Original Eqn: ZIDZ( ("Max NPP potential BioE residues for non-biofuels"-"PE bioE residues non-biofuels EJ") , "Max NPP potential BioE residues for non-biofuels" )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential available of bioenergy residues for other uses than
        biofuels (heat, electricity and solids) as given as a fraction of unity.
    """
    return zidz(
        (
            max_npp_potential_bioe_residues_for_nonbiofuels()
            - pe_bioe_residues_nonbiofuels_ej()
        ),
        max_npp_potential_bioe_residues_for_nonbiofuels(),
    )


@cache.step
@to_float
def pe_bioe_residues_nonbiofuels_ej():
    """
    Real Name: "PE bioE residues non-biofuels EJ"
    Original Eqn: INTEG ( "new BioE residues for non-biofuels", 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total annual bioE residues production for other final uses than biofuels.
    """
    return _integ_pe_bioe_residues_nonbiofuels_ej()


@cache.run
@to_float
def share_cellulosic_biofuels_vs_bioe_residues():
    """
    Real Name: share cellulosic biofuels vs BioE residues
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C49')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Share bioenergy residues potential allocated to cellulosic biofuels
        production.
    """
    return _ext_constant_share_cellulosic_biofuels_vs_bioe_residues()


@cache.step
@to_float
def share_land_total_res_vs_urban_surface():
    """
    Real Name: share land total RES vs urban surface
    Original Eqn: Total land requirements renew Mha/urban surface 2015
    Units:
    Limits: (None, None)
    Type: component
    Subs: None

    Land requirements for all RES as a share of the global urban land.
    """
    return total_land_requirements_renew_mha() / urban_surface_2015()


@cache.step
@to_float
def max_land_compet_biofuels_2gen():
    """
    Real Name: Max land compet biofuels 2gen
    Original Eqn: Additional land compet available for biofuels+Historic land compet available for biofuels 2gen
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Annual potential of biofuels (final energy) 2nd generation competing with
        other land uses.
    """
    return (
        additional_land_compet_available_for_biofuels()
        + historic_land_compet_available_for_biofuels_2gen()
    )


@cache.run
@to_float
def p_biofuels_2gen_land_compet():
    """
    Real Name: P biofuels 2gen land compet
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C45')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in energy output demand depending on the policy of the
        scenario.
    """
    return _ext_constant_p_biofuels_2gen_land_compet()


@cache.run
@to_float
def past_biofuels_2gen():
    """
    Real Name: past biofuels 2gen
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C81')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Current growth patterns (1990-2015).
    """
    return _ext_constant_past_biofuels_2gen()


@cache.run
@to_float
def ej_per_ktoe():
    """
    Real Name: EJ per ktoe
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C16')
    Units: EJ/ktoe
    Limits: (None, None)
    Type: constant
    Subs: None

    1 ktoe = 0.000041868 EJ.
    """
    return _ext_constant_ej_per_ktoe()


@cache.step
@to_float
def abundance_total_oil_eu():
    """
    Real Name: abundance total oil EU
    Original Eqn: IF THEN ELSE(PED total oil EJ<PES total oil EJ EU, 1, 1-ZIDZ( (PED total oil EJ-PES total oil EJ EU) , PED total oil EJ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        ped_total_oil_ej() < pes_total_oil_ej_eu(),
        lambda: 1,
        lambda: 1
        - zidz((ped_total_oil_ej() - pes_total_oil_ej_eu()), ped_total_oil_ej()),
    )


@cache.run
@to_float
def cp_nuclear_initial():
    """
    Real Name: Cp nuclear initial
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'F15')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Capacity factor of nuclear taking historic data as reference: in 2011,
        there were 374 GW of nuclear capacity operating that generated 2,507 TWh.
    """
    return _ext_constant_cp_nuclear_initial()


@cache.step
@to_float
def extraction_coal_without_ctl_ej():
    """
    Real Name: extraction coal without CTL EJ
    Original Eqn: MAX(extraction coal EJ EU-extraction coal for CTL EJ, 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of conventional gas excepting the resource used to produce GTL.
    """
    return np.maximum(extraction_coal_ej_eu() - extraction_coal_for_ctl_ej(), 0)


@cache.step
@to_float
def extraction_coal_for_ctl_ej():
    """
    Real Name: extraction coal for CTL EJ
    Original Eqn: PED coal for CTL EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of coal for CTL. CTL demand is given priority over other uses
        since it is an exogenous assumption depending on the scenario.
    """
    return ped_coal_for_ctl_ej()


@cache.step
@to_float
def other_liquids_supply_ej():
    """
    Real Name: Other liquids supply EJ
    Original Eqn: Oil refinery gains EJ+"FES CTL+GTL EJ"+FES total biofuels production EJ
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Other liquids refer to: refinery gains, CTL, GTL and biofuels.
    """
    return (
        oil_refinery_gains_ej() + fes_ctlgtl_ej() + fes_total_biofuels_production_ej()
    )


@cache.run
@to_float
def max_offshore_wind_twe():
    """
    Real Name: max offshore wind TWe
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C29')
    Units: TWe
    Limits: (None, None)
    Type: constant
    Subs: None

    Techno-ecological potential of offshore wind (1 TWe = 8760 TWh in one
        year).
    """
    return _ext_constant_max_offshore_wind_twe()


@cache.run
@to_float
def urr_unconv_oil_high_mohr15():
    """
    Real Name: URR unconv oil High Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C136')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_oil_high_mohr15()


@cache.run
@to_float
def urr_unconv_oil_low_mohr15():
    """
    Real Name: URR unconv oil Low Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C132')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_oil_low_mohr15()


@cache.run
@to_float
def urr_unconv_oil_user_defined():
    """
    Real Name: URR unconv oil User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C141')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_oil_user_defined()


@cache.run
@to_float
def urr_conv_oil_mohr15_high():
    """
    Real Name: URR conv oil Mohr15 High
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C130')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_oil_mohr15_high()


@cache.run
@to_float
def urr_conv_oil_mohr15_low():
    """
    Real Name: URR conv oil Mohr15 Low
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C126')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_oil_mohr15_low()


def table_max_extraction_mohr15_high_conv_oil_ej(x):
    """
    Real Name: table max extraction Mohr15 High conv oil EJ
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '130' , 'E131'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej(x)


def table_max_extraction_mohr15_low_conv_oil_ej(x):
    """
    Real Name: table max extraction Mohr15 Low conv oil EJ
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '126' , 'E127')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej(x)


def table_max_extraction_mohr15_bg_conv_oil_ej(x):
    """
    Real Name: table max extraction Mohr15 BG conv oil EJ
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '128' , 'E129'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej(x)


@cache.run
@to_float
def separate_conv_and_unconv_gas():
    """
    Real Name: "separate conv and unconv gas?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C83')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to disaggregate between conventional and unconventional fuel: "1" =
        disaggregation, "0" = conv+unconv aggregated (all the gas flows then
        through the right side of this view, i.e. the "conventional gas" modelling
        side).
    """
    return _ext_constant_separate_conv_and_unconv_gas()


def table_max_extraction_unconv_oil_user_defined(x):
    """
    Real Name: table max extraction unconv oil User defined
    Original Eqn: ( GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '141', 'E142'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_oil_user_defined(x)


@cache.run
@to_float
def urr_tot_agg_oil_user_defined():
    """
    Real Name: URR tot agg oil User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C143')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_tot_agg_oil_user_defined()


@cache.run
@to_float
def choose_extraction_curve_tot_agg_oil():
    """
    Real Name: choose extraction curve tot agg oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D76')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1-Laherrère12        2-User defined
    """
    return _ext_constant_choose_extraction_curve_tot_agg_oil()


@cache.run
@to_float
def urr_conv_oil_mohr15_bg():
    """
    Real Name: URR conv oil Mohr15 BG
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C128')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_oil_mohr15_bg()


@cache.run
@to_float
def urr_conv_oil_user_defined():
    """
    Real Name: URR conv oil User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C139')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_oil_user_defined()


@cache.run
@to_float
def choose_extraction_tot_agg_gas_curve():
    """
    Real Name: choose extraction tot agg gas curve
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D92')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1- Laherrère10        2- BG Mohr12        3- User defined
    """
    return _ext_constant_choose_extraction_tot_agg_gas_curve()


def table_max_extraction_unconv_oil_low_mohr15(x):
    """
    Real Name: table max extraction unconv oil Low Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '132' , 'E133'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_oil_low_mohr15(x)


@cache.run
@to_float
def urr_unconv_oil_bg_mohr15():
    """
    Real Name: URR unconv oil BG Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C134')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_oil_bg_mohr15()


def table_max_extraction_unconv_oil_high_mohr15(x):
    """
    Real Name: table max extraction unconv oil High Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '136' , 'E137'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_oil_high_mohr15(x)


def table_max_extraction_tot_agg_oil_user_defined(x):
    """
    Real Name: table max extraction tot agg oil User defined
    Original Eqn: GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '143', 'E144')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_tot_agg_oil_user_defined(x)


def table_max_conv_oil_extraction_user_defined(x):
    """
    Real Name: table max conv oil extraction User defined
    Original Eqn: ( GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '139', 'E140'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_conv_oil_extraction_user_defined(x)


@cache.run
@to_float
def separate_conv_and_unconv_oil():
    """
    Real Name: "separate conv and unconv oil?"
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C67')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Switch to disaggregate between conventional and unconventional fuel: "1" =
        disaggregation, "0" = conv+unconv aggregated (all the oil flows then
        through the right side of this view, i.e. the "conventional oil" modelling
        side).
    """
    return _ext_constant_separate_conv_and_unconv_oil()


@cache.run
@to_float
def kt_uranium_per_ej():
    """
    Real Name: kt uranium per EJ
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C10')
    Units: Kt/EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Unit conversion (1 EJ thermal = 2.3866). See EWG (2006).
    """
    return _ext_constant_kt_uranium_per_ej()


@cache.run
@to_float
def life_time_nuclear():
    """
    Real Name: life time nuclear
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C15')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Lifetime of nuclear.
    """
    return _ext_constant_life_time_nuclear()


@cache.step
@to_float
def hist_share_oilff_elec():
    """
    Real Name: "Hist share oil/FF Elec"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H39')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Historica share of oil for electricity vs total electricity generation
        from fossil fuels.
    """
    return _ext_data_hist_share_oilff_elec(time())


@cache.step
@to_float
def cumulated_uranium_extraction_kt():
    """
    Real Name: Cumulated uranium extraction kt
    Original Eqn: Cumulated uranium extraction*kt uranium per EJ
    Units: Kt
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated uranium extraction (kt).
    """
    return cumulated_uranium_extraction() * kt_uranium_per_ej()


@cache.step
@to_float
def extraction_uranium_kt():
    """
    Real Name: extraction uranium kt
    Original Eqn: extraction uranium EJ EU*kt uranium per EJ
    Units: Kt/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Extracción of uranium in kt.
    """
    return extraction_uranium_ej_eu() * kt_uranium_per_ej()


@cache.run
@to_float
def efficiency_uranium_for_electricity():
    """
    Real Name: efficiency uranium for electricity
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C41')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of uranium in nuclear power centrals. [IEA Balances].
    """
    return _ext_constant_efficiency_uranium_for_electricity()


@cache.step
@to_float
def hist_share_gascoal_gas_elec():
    """
    Real Name: "Hist share gas/(coal +gas) Elec"
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Constants', '25', 'H40')
    Units: Dmnl
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Share of natural gas for electricity in relation to the total gas+coal.
    """
    return _ext_data_hist_share_gascoal_gas_elec(time())


def historic_nuclear_generation_twh(x):
    """
    Real Name: Historic nuclear generation TWh
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'C69'))
    Units: TWh/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historic data of annual production from nuclear energy in TWh.
    """
    return _ext_lookup_historic_nuclear_generation_twh(x)


@cache.step
@to_float
def invest_cost_nuclear():
    """
    Real Name: invest cost nuclear
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Parameters', '6', 'G15')
    Units: Tdollars/TWe
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Investment cost of nuclear power considering that future reactors would
        require the same investment as the recent Hinkley Point C nuclear power
        station in UK of 8,000 US$/kW (5536.71 1995US$/kW).
    """
    return _ext_data_invest_cost_nuclear(time())


@cache.run
@to_float
def kwh_per_twh():
    """
    Real Name: kWh per TWh
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C9')
    Units: kWh/TWh
    Limits: (None, None)
    Type: constant
    Subs: None

    Conversion between kWh and TWh (1 TWh=1e9 kWh).
    """
    return _ext_constant_kwh_per_twh()


@cache.step
@to_float
def total_fe_elec_demand_ej():
    """
    Real Name: Total FE Elec demand EJ
    Original Eqn: Total FE Elec demand TWh*EJ per TWh
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity demand generation (final energy, includes distribution losses).
    """
    return total_fe_elec_demand_twh() * ej_per_twh()


@cache.run
@to_float
def gco2e_per_kwh_biomass():
    """
    Real Name: gCO2e per KWh biomass
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'E8')
    Units: gCO2e/kWh
    Limits: (None, None)
    Type: constant
    Subs: None

    No data.
    """
    return _ext_constant_gco2e_per_kwh_biomass()


@cache.run
@to_float
def mtoe_per_ej():
    """
    Real Name: MToe per EJ
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C6')
    Units: MToe/EJ
    Limits: (None, None)
    Type: constant
    Subs: None

    Unit conversion (1000 Mtoe=41.868 EJ)
    """
    return _ext_constant_mtoe_per_ej()


@cache.run
@to_float
def share_transmdistr_elec_losses_initial():
    """
    Real Name: "share transm&distr elec losses initial"
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C54')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Current share of electrical transmission and distribution losses in
        relation to electricity consumption. We define these losses at around 9.5%
        following historical data.
    """
    return _ext_constant_share_transmdistr_elec_losses_initial()


@cache.run
@to_float
def ej_per_twh():
    """
    Real Name: EJ per TWh
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C5')
    Units: EJ/TWh
    Limits: (None, None)
    Type: constant
    Subs: None

    Unit conversion (3.6 EJ=1000 TWh)
    """
    return _ext_constant_ej_per_twh()


@cache.run
@to_float
def twe_per_twh():
    """
    Real Name: TWe per TWh
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C7')
    Units: TWe/(TWh/Year)
    Limits: (None, None)
    Type: constant
    Subs: None

    Unit conversion (1 TWe=8760 TWh per year)
    """
    return _ext_constant_twe_per_twh()


@cache.run
@to_float
def initial_population():
    """
    Real Name: initial population
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'H28')
    Units: people
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial value from WorldBank in 1995.
    """
    return _ext_constant_initial_population()


@cache.step
@to_float
def population():
    """
    Real Name: Population
    Original Eqn: INTEG ( pop variation, initial population)
    Units: people
    Limits: (None, None)
    Type: component
    Subs: None

    Population projection.
    """
    return _integ_population()


@cache.run
@to_float
def ve_objetive_ue2020_extrap():
    """
    Real Name: VE objetive UE2020 extrap
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 1


@cache.run
@to_float
def ve_objetive_ue2020():
    """
    Real Name: VE objetive UE2020
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 1


@cache.run
@to_float
def choose_extraction_uranium_curve():
    """
    Real Name: Choose extraction uranium curve
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D105')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1-EWG13        2-Other
    """
    return _ext_constant_choose_extraction_uranium_curve()


@cache.step
@to_float
def year_scarcity_tpe():
    """
    Real Name: Year scarcity TPE
    Original Eqn: IF THEN ELSE(abundance TPE>0.95, 0, Time)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_tpe() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def year_scarcity_uranium():
    """
    Real Name: Year scarcity uranium
    Original Eqn: IF THEN ELSE(abundance uranium>0.95, 0, Time)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_uranium() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def year_scarcity_coal():
    """
    Real Name: Year scarcity coal
    Original Eqn: IF THEN ELSE(abundance coal EU>0.95, 0, Time)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_coal_eu() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def year_scarcity_liquids():
    """
    Real Name: Year scarcity liquids
    Original Eqn: IF THEN ELSE(abundance liquids>0.95, 0, Time)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_liquids() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def effects_shortage_gas():
    """
    Real Name: effects shortage gas
    Original Eqn: IF THEN ELSE(abundance gases>0.8, ((abundance gases-0.8)*5)^2, 0)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The eventual scarcity of gas would likely constrain the development of
        NGVs/GTLs. The proposed relationship avoids an abrupt limitation by
        introducing a range (1;0.8) in the gas abundance that constrains the
        development of NGVs/GTLs.
    """
    return if_then_else(
        abundance_gases() > 0.8, lambda: ((abundance_gases() - 0.8) * 5) ** 2, lambda: 0
    )


@cache.step
@to_float
def year_scarcity_gases():
    """
    Real Name: Year scarcity gases
    Original Eqn: IF THEN ELSE(abundance gases>0.95, 0, Time)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_gases() > 0.95, lambda: 0, lambda: time())


@cache.run
@to_float
def max_percent_of_change():
    """
    Real Name: max percent of change
    Original Eqn: 0.448
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 0.448


@cache.run
@to_float
def choose_extraction_coal_curve():
    """
    Real Name: choose extraction coal curve
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D100')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1= Mohr15 Low        2= Mohr15 BG        3= Mohr15 High        4= User defined
    """
    return _ext_constant_choose_extraction_coal_curve()


@cache.run
@to_float
def selection_constraint_extraction_unconv_gas():
    """
    Real Name: Selection constraint extraction unconv gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D96')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Selection of type of constraint to annual growth extraction of unconventional gas:
        3?        1= Constraint annual growth (%)        2= User defined as a function of time
    """
    return _ext_constant_selection_constraint_extraction_unconv_gas()


@cache.step
@to_float
def year_scarcity_elec():
    """
    Real Name: Year scarcity Elec
    Original Eqn: IF THEN ELSE(Abundance electricity>0.95, 0, Time)
    Units: Year
    Limits: (None, None)
    Type: component
    Subs: None

    Year when the parameter abundance falls below 0.95, i.e. year when
        scarcity starts.
    """
    return if_then_else(abundance_electricity() > 0.95, lambda: 0, lambda: time())


@cache.step
@to_float
def extraction_unconv_gas_delayed():
    """
    Real Name: extraction unconv gas delayed
    Original Eqn: DELAY FIXED ( extraction unconv gas EJ, TIME STEP, 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return _delayfixed_extraction_unconv_gas_delayed()


@cache.step
@to_float
def max_unconv_gas_growth_extraction_ej():
    """
    Real Name: max unconv gas growth extraction EJ
    Original Eqn: IF THEN ELSE(check gas delayed 1yr<-0.01, (1+"constrain gas exogenous growth? delayed 1yr")*extraction unconv gas delayed, extraction unconv gas delayed*max unconv gas growth extraction)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Constrained unconventional gas extraction growth (EJ/Year), i.e. maximum
        annual growth compatible with the constraint selected in the scenario.
    """
    return if_then_else(
        check_gas_delayed_1yr() < -0.01,
        lambda: (1 + constrain_gas_exogenous_growth_delayed_1yr())
        * extraction_unconv_gas_delayed(),
        lambda: extraction_unconv_gas_delayed() * max_unconv_gas_growth_extraction(),
    )


@cache.run
@to_float
def p_constraint_growth_extraction_unconv_gas():
    """
    Real Name: P constraint growth extraction unconv gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C96')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Constant constraint to annual extraction of unconventional gas.
    """
    return _ext_constant_p_constraint_growth_extraction_unconv_gas()


@cache.run
@to_float
def choose_extraction_curve_unconv_gas():
    """
    Real Name: choose extraction curve unconv gas
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D88')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1= Mohr15 Low        2= Mohr15 BG        3= Mohr15 High        4= User defined
    """
    return _ext_constant_choose_extraction_curve_unconv_gas()


@cache.run
@to_float
def choose_extraction_curve_unconv_oil():
    """
    Real Name: choose extraction curve unconv oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D72')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1= Mohr15 Low        2= Mohr15 BG        3= Mohr15 High        4= User defined
    """
    return _ext_constant_choose_extraction_curve_unconv_oil()


@cache.step
@to_float
def biofuels_land_compet_available():
    """
    Real Name: Biofuels land compet available
    Original Eqn: (Max land compet biofuels 2gen-Land compet biofuels 2gen Mha-Land compet biofuels 3gen Mha)/Max land compet biofuels 2gen
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Remaining potential land available as given as a fraction of unity.
    """
    return (
        max_land_compet_biofuels_2gen()
        - land_compet_biofuels_2gen_mha()
        - land_compet_biofuels_3gen_mha()
    ) / max_land_compet_biofuels_2gen()


@cache.run
@to_float
def urr_oil_aspo():
    """
    Real Name: URR oil ASPO
    Original Eqn: 12800
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 12800


@cache.run
@to_float
def urr_gas_mohr_high2013():
    """
    Real Name: URR gas Mohr High2013
    Original Eqn: 28500
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 28500


@cache.run
@to_float
def urr_gas_leherrere2010():
    """
    Real Name: URR gas Leherrere2010
    Original Eqn: 13600
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 13600


@cache.run
@to_float
def urr_gas_mohr_bg2012():
    """
    Real Name: URR gas Mohr BG2012
    Original Eqn: 19900
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 19900


@cache.run
@to_float
def res_to_fossil_accounting():
    """
    Real Name: RES to fossil accounting
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    There are different methods to report primary energy. If=1, it corresponds
        with the direct equivalent method which counts one unit of secondary
        energy provided from non-combustible sources as one unit of primary
        energy, that is, 1 kWh of (useful) electricity or heat is accounted for as
        1 kWh = 3.6 MJ of primary energy. For more information see Annex II of
        (IPCC, 2011).
    """
    return 1


@cache.step
@to_float
def new_c_gtc():
    """
    Real Name: new C GtC
    Original Eqn: Carbon emissions GtC
    Units: GtC/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual carbon emissions.
    """
    return carbon_emissions_gtc()


@cache.run
@to_float
def year_adjust():
    """
    Real Name: year adjust
    Original Eqn: 1
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return 1


def tpes_de_castro_phd__scen_madcoal(x):
    """
    Real Name: "TPES de Castro PhD - Scen 'madcoal'"
    Original Eqn: ( [(0,0)-(10,10)],(1985,7727.25),(1986,7904.71),(1987,8090.31),(1988,8272.83),(1989,8453.11),(1990,8632.09),(1991,8810.72),(1992,8989.94),(1993,9170.63),(1994,9353.55),(1995,9539.38),(1996,9728.58),(1997,9921.49),(1998,10118.2),(1999,10318.7),(2000,10522.5),(2001,10729.3),(2002,10938.4),(2003,11148.8),(2004,11359.5),(2005,11569.5),(2006,11786.3),(2007,11999.6),(2008,12211.4),(2009,12420.8),(2010,12626.9),(2011,12829.2),(2012,13027.3),(2013,13221),(2014,13410.5),(2015,13596.1),(2016,13774),(2017,13924.7),(2018,14047.6),(2019,14141.5),(2020,14208.3),(2021,14251.8),(2022,14277.8),(2023,14292.7),(2024,14303.7),(2025,14317.3),(2026,14343.2),(2027,14382.9),(2028,14441.4),(2029,14521.6),(2030,14625.6),(2031,14754.7),(2032,14909.2),(2033,15089.5),(2034,15295.1),(2035,15525.7),(2036,15768.7),(2037,16021.4),(2038,16282.5),(2039,16551.3),(2040,16827.5),(2041,17111.3),(2042,17402.7),(2043,17701.8),(2044,18008.4),(2045,18322.2),(2046,18642.6),(2047,18968.8),(2048,19299.8),(2049,19634.2),(2050,19970.7),(2051,20218.4),(2052,20503.9),(2053,20792.3),(2054,21082),(2055,21370.6),(2056,21655.5),(2057,21933.9),(2058,22202.8),(2059,22459.9),(2060,22702.5),(2061,22928.4),(2062,23135.7),(2063,23322.3),(2064,23486.7),(2065,23627.4),(2066,23743.2),(2067,23833.1),(2068,23896.3),(2069,23932.3),(2070,23940.6),(2071,23921.3),(2072,23874.3),(2073,23810.4),(2074,23774.2),(2075,23753),(2076,23746.1),(2077,23752.7),(2078,23771.8),(2079,23802.3),(2080,23843.3),(2081,23893.7),(2082,23952.6),(2083,24018.9),(2084,24091.6),(2085,24169.7),(2086,24252.2),(2087,24338.1),(2088,24426.4),(2089,24516.1),(2090,24606.1),(2091,24695.4),(2092,24783),(2093,24868),(2094,24949.3),(2095,25026),(2096,25097.2),(2097,25162),(2098,25219.5),(2099,25268.9),(2100,25309.5))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Total primary energy extraction (Add "Energía perdida" to the net energy
        extraction in the original model).
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            7727.25,
            7904.71,
            8090.31,
            8272.83,
            8453.11,
            8632.09,
            8810.72,
            8989.94,
            9170.63,
            9353.55,
            9539.38,
            9728.58,
            9921.49,
            10118.2,
            10318.7,
            10522.5,
            10729.3,
            10938.4,
            11148.8,
            11359.5,
            11569.5,
            11786.3,
            11999.6,
            12211.4,
            12420.8,
            12626.9,
            12829.2,
            13027.3,
            13221,
            13410.5,
            13596.1,
            13774,
            13924.7,
            14047.6,
            14141.5,
            14208.3,
            14251.8,
            14277.8,
            14292.7,
            14303.7,
            14317.3,
            14343.2,
            14382.9,
            14441.4,
            14521.6,
            14625.6,
            14754.7,
            14909.2,
            15089.5,
            15295.1,
            15525.7,
            15768.7,
            16021.4,
            16282.5,
            16551.3,
            16827.5,
            17111.3,
            17402.7,
            17701.8,
            18008.4,
            18322.2,
            18642.6,
            18968.8,
            19299.8,
            19634.2,
            19970.7,
            20218.4,
            20503.9,
            20792.3,
            21082,
            21370.6,
            21655.5,
            21933.9,
            22202.8,
            22459.9,
            22702.5,
            22928.4,
            23135.7,
            23322.3,
            23486.7,
            23627.4,
            23743.2,
            23833.1,
            23896.3,
            23932.3,
            23940.6,
            23921.3,
            23874.3,
            23810.4,
            23774.2,
            23753,
            23746.1,
            23752.7,
            23771.8,
            23802.3,
            23843.3,
            23893.7,
            23952.6,
            24018.9,
            24091.6,
            24169.7,
            24252.2,
            24338.1,
            24426.4,
            24516.1,
            24606.1,
            24695.4,
            24783,
            24868,
            24949.3,
            25026,
            25097.2,
            25162,
            25219.5,
            25268.9,
            25309.5,
        ],
    )


@cache.run
@to_float
def urban_surface_2015():
    """
    Real Name: urban surface 2015
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'AB27')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Area currently occupied by human settlement and infraestructures.
    """
    return _ext_constant_urban_surface_2015()


@cache.run
@to_float
def c_per_co2():
    """
    Real Name: C per CO2
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C20')
    Units: GtC/GTCO2e
    Limits: (None, None)
    Type: constant
    Subs: None

    1 kg of CO2 contains 3/11 of carbon.
    """
    return _ext_constant_c_per_co2()


def gtc_historic_emissions_rcps(x):
    """
    Real Name: GtC historic emissions RCPs
    Original Eqn: ( [(0,0)-(10,10)],(1990,6.144),(1995,6.4395),(2000,6.735),(2005,7.971))
    Units: GtC
    Limits: (None, None)
    Type: lookup
    Subs: None

    RCP database:
        http://tntcat.iiasa.ac.at:8787/RcpDb/dsd?Action=htmlpage&page=welcome
    """
    return lookup(x, [1990, 1995, 2000, 2005], [6.144, 6.4395, 6.735, 7.971])


@cache.run
@to_float
def activate_affores_program():
    """
    Real Name: activate Affores program
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'B65')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1. Activated.        2. No.
    """
    return _ext_constant_activate_affores_program()


@cache.step
@to_float
def afforestation_program_2020():
    """
    Real Name: Afforestation program 2020
    Original Eqn: GET DIRECT DATA('?inputs_eu.xlsx', 'Parameters', '125', 'C126')
    Units: MtC/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Afforestation program from 2020 following [Nilsson 1995] (time to inverse
        the deforestation trend).
    """
    return _ext_data_afforestation_program_2020(time())


@cache.run
@to_float
def agricultural_land_2015():
    """
    Real Name: Agricultural land 2015
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Land', 'AB23')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_agricultural_land_2015()


@cache.run
@to_float
def choose_extraction_curve_conv_oil():
    """
    Real Name: choose extraction curve conv oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D68')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1= Mohr15 Low        2= Mohr15 BG        3= Mohr15 High        4= User defined
    """
    return _ext_constant_choose_extraction_curve_conv_oil()


@cache.run
@to_float
def choose_extraction_conv_gas_curve():
    """
    Real Name: choose extraction conv gas curve
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D84')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    1= Mohr15 Low        2= Mohr15 BG        3= Mohr15 High        4= User defined
    """
    return _ext_constant_choose_extraction_conv_gas_curve()


@cache.step
@to_float
def cumulated_total_monet_invest_res_for_elec():
    """
    Real Name: Cumulated total monet invest RES for Elec
    Original Eqn: INTEG ( Total monet invest RES for elec Tdolar, 0)
    Units: Tdollars
    Limits: (None, None)
    Type: component
    Subs: None

    Cumulated total monetary investment in RES for electricity generation from
        1995 (1995 US$).
    """
    return _integ_cumulated_total_monet_invest_res_for_elec()


@cache.run
@to_float
def efficiency_coal_for_electricity():
    """
    Real Name: efficiency coal for electricity
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C46')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of coal gas power centrals. Stable trend between 1971 and 2014
        (IEA Balances), average of the period.
    """
    return _ext_constant_efficiency_coal_for_electricity()


def historic_efficiency_gas_for_electricity(x):
    """
    Real Name: Historic efficiency gas for electricity
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '25', 'H70'))
    Units: percent
    Limits: (None, None)
    Type: lookup
    Subs: None

    Historical evolution of efficiency of natural gas power centrals 1995-2013
        (IEA Balances).
    """
    return _ext_lookup_historic_efficiency_gas_for_electricity(x)


@cache.run
@to_float
def efficiency_liquids_for_electricity():
    """
    Real Name: efficiency liquids for electricity
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Parameters', 'C45')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Efficiency of oil in electricity power centrals. Stable trend between 1971
        and 2014 (IEA Balances), average of the period.
    """
    return _ext_constant_efficiency_liquids_for_electricity()


@cache.run
@to_float
def additional_land_compet_available_for_biofuels():
    """
    Real Name: Additional land compet available for biofuels
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C42')
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Available land for biofuels in competition with other uses depending on
        the scenario.
    """
    return _ext_constant_additional_land_compet_available_for_biofuels()


@cache.run
@to_float
def max_hydro_twe():
    """
    Real Name: max hydro TWe
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C24')
    Units: TWe
    Limits: (None, None)
    Type: constant
    Subs: None

    Techno-ecological potential of hydro (1 TWe = 8760 TWh in one year).
    """
    return _ext_constant_max_hydro_twe()


@cache.run
@to_float
def max_oceanic_twe():
    """
    Real Name: max oceanic TWe
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C27')
    Units: TWe
    Limits: (None, None)
    Type: constant
    Subs: None

    Techno-ecological potential of oceanic (1 TWe = 8760 TWh in one year).
    """
    return _ext_constant_max_oceanic_twe()


@cache.run
@to_float
def max_onshore_wind_twe():
    """
    Real Name: max onshore wind TWe
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C28')
    Units: TWe
    Limits: (None, None)
    Type: constant
    Subs: None

    Techno-ecological potential of onshore wind (1 TWe = 8760 TWh in one year).
    """
    return _ext_constant_max_onshore_wind_twe()


@cache.step
@to_float
def p_timeseries_pop_growth_rate():
    """
    Real Name: P timeseries pop growth rate
    Original Eqn: GET DIRECT DATA('?../../scenarios/scen_eu.xlsx', 'User scenario', '12', 'E13')
    Units: 1/Year
    Limits: (None, None)
    Type: component_ext_data
    Subs: None

    Annual population growth from timeseries. UN projections in their medium
        scenario (Medium fertility variant)
    """
    return _ext_data_p_timeseries_pop_growth_rate(time())


@cache.run
@to_float
def p_ctl():
    """
    Real Name: P CTL
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C110')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in energy output demand depending on the policy of the
        scenario.
    """
    return _ext_constant_p_ctl()


@cache.run
@to_float
def p_gtl():
    """
    Real Name: P GTL
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C112')
    Units: 1/Year
    Limits: (None, None)
    Type: constant
    Subs: None

    Annual growth in energy output demand depending on the policy of the
        scenario.
    """
    return _ext_constant_p_gtl()


@cache.run
@to_float
def start_year_3gen_cellulosic_biofuels():
    """
    Real Name: start year 3gen cellulosic biofuels
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C46')
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    First year when 3rd generation biofuels are available.
    """
    return _ext_constant_start_year_3gen_cellulosic_biofuels()


def time_dmnl(x):
    """
    Real Name: Time dmnl
    Original Eqn: ( [(1990,1990)-(2100,2100)],(1990,1990),(1991,1991),(1992,1992),(1993,1993),(1994,1994),(1995,1995),(1996,1996),(1997,1997),(1998,1998),(1999,1999),(2000,2000),(2001,2001),(2002,2002),(2003,2003),(2004,2004),(2005,2005),(2006,2006),(2007,2007),(2008,2008),(2009,2009),(2010,2010),(2011,2011),(2012,2012),(2013,2013),(2014,2014),(2015,2015),(2016,2016),(2017,2017),(2018,2018),(2019,2019),(2020,2020),(2021,2021),(2022,2022),(2023,2023),(2024,2024),(2025,2025),(2026,2026),(2027,2027),(2028,2028),(2029,2029),(2030,2030),(2031,2031),(2032,2032),(2033,2033),(2034,2034),(2035,2035),(2036,2036),(2037,2037),(2038,2038),(2039,2039),(2040,2040),(2041,2041),(2042,2042),(2043,2043),(2044,2044),(2045,2045),(2046,2046),(2047,2047),(2048,2048),(2049,2049),(2050,2050),(2051,2051),(2052,2052),(2053,2053),(2054,2054),(2055,2055),(2056,2056),(2057,2057),(2058,2058),(2059,2059),(2060,2060),(2061,2061),(2062,2062),(2063,2063),(2064,2064),(2065,2065),(2066,2066),(2067,2067),(2068,2068),(2069,2069),(2070,2070),(2071,2071),(2072,2072),(2073,2073),(2074,2074),(2075,2075),(2076,2076),(2077,2077),(2078,2078),(2079,2079),(2080,2080),(2081,2081),(2082,2082),(2083,2083),(2084,2084),(2085,2085),(2086,2086),(2087,2087),(2088,2088),(2089,2089),(2090,2090),(2091,2091),(2092,2092),(2093,2093),(2094,2094),(2095,2095),(2096,2096),(2097,2097),(2098,2098),(2099,2099),(2100,2100))
    Units: Dmnl
    Limits: (None, None)
    Type: lookup
    Subs: None

    Vector that assigns for every year the number of that same year.
    """
    return lookup(
        x,
        [
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
    )


@cache.step
@to_float
def share_variable_res_elec_generation_vs_total():
    """
    Real Name: Share variable RES elec generation vs total
    Original Eqn: IF THEN ELSE((FE Elec generation from NRE TWh+Elec generation variable from RES TWh+Elec generation dispatch from RES TWh)>0, Elec generation variable from RES TWh/(FE Elec generation from NRE TWh+Elec generation variable from RES TWh+Elec generation dispatch from RES TWh), 0.5)
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of variable vs. total electricity generation. Condition to avoid
        error when the denominator is zero (0.5 is an arbitrary value).
    """
    return if_then_else(
        (
            fe_elec_generation_from_nre_twh()
            + elec_generation_variable_from_res_twh()
            + elec_generation_dispatch_from_res_twh()
        )
        > 0,
        lambda: elec_generation_variable_from_res_twh()
        / (
            fe_elec_generation_from_nre_twh()
            + elec_generation_variable_from_res_twh()
            + elec_generation_dispatch_from_res_twh()
        ),
        lambda: 0.5,
    )


def table_max_extraction_aspo_oil_ej(x):
    """
    Real Name: table max extraction ASPO oil EJ
    Original Eqn: ( [(0,0)-(13200,200)],(0,0),(600,29.9783),(1200,46.7403),(1800,59.4953),(2400,71.3603),(3000,84.9357),(3600,96.0997),(4200,107.465),(4800,118.46),(5400,127.537),(6000,137.018),(6600,145.888),(7200,152.005),(7800,156.288),(8400,162.47),(9000,166.659),(9600,171.044),(10200,171.044),(10800,171.044),(11400,171.044),(12000,171.044),(12600,171.044),(13200,171.044))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva ASPO de extracción de oil hasta 2050. Unidades: EJ. Para los puntos a partir
        del 2050 se ha realizado una exponencial negativa hasta anular las
        reservas en 2100.        /*Considera crude y unconvencional oil, así que una vez separado no vale
        esta tabla*/
    """
    return lookup(
        x,
        [
            0,
            600,
            1200,
            1800,
            2400,
            3000,
            3600,
            4200,
            4800,
            5400,
            6000,
            6600,
            7200,
            7800,
            8400,
            9000,
            9600,
            10200,
            10800,
            11400,
            12000,
            12600,
            13200,
        ],
        [
            0,
            29.9783,
            46.7403,
            59.4953,
            71.3603,
            84.9357,
            96.0997,
            107.465,
            118.46,
            127.537,
            137.018,
            145.888,
            152.005,
            156.288,
            162.47,
            166.659,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
            171.044,
        ],
    )


def table_max_extraction_gas_laherrere2010(x):
    """
    Real Name: table max extraction gas Laherrere2010
    Original Eqn: ( [(0,0)-(13000,175)],(0,0),(500,23.8621),(1000,44.631),(1500,62.3067),(2000,77.7729),(2500,93.8891),(3000,107.821),(3500,119.752),(4000,129.033),(4500,137.87),(5000,144.16),(5500,148.917),(6000,151.78),(6500,152.895),(7000,152.895),(7500,152.895),(8000,152.895),(8500,152.895),(9000,152.895),(9500,152.895),(10000,152.895),(10500,152.895),(11000,152.895),(11500,152.895),(12000,152.895),(12500,152.895),(13000,152.895))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva Laherrere2010 de extracción de gas hasta 2100. Unidades: EJ. Para
        los puntos a partir del 2100 se ha realizado una exponencial negativa
        hasta anular las reservas en 2120.
    """
    return lookup(
        x,
        [
            0,
            500,
            1000,
            1500,
            2000,
            2500,
            3000,
            3500,
            4000,
            4500,
            5000,
            5500,
            6000,
            6500,
            7000,
            7500,
            8000,
            8500,
            9000,
            9500,
            10000,
            10500,
            11000,
            11500,
            12000,
            12500,
            13000,
        ],
        [
            0,
            23.8621,
            44.631,
            62.3067,
            77.7729,
            93.8891,
            107.821,
            119.752,
            129.033,
            137.87,
            144.16,
            148.917,
            151.78,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
            152.895,
        ],
    )


def table_max_extraction_gas_mohr_high2012(x):
    """
    Real Name: table max extraction gas Mohr High2012
    Original Eqn: ( [(0,0)-(30000,200)],(0,0),(1500,36.4477),(3000,58.3656),(4500,72.8198),(6000,98.5),(7500,130.439),(9000,159.979),(10500,177.268),(12000,190.383),(13500,194.052),(15000,194.197),(16500,194.197),(18000,194.197),(19500,194.197),(21000,194.197),(22500,194.197),(24000,194.197),(25500,194.197),(27000,194.197),(28500,194.197))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva Mohr High case 2013 de extracción de gas hasta 2100. Unidades: EJ.
    """
    return lookup(
        x,
        [
            0,
            1500,
            3000,
            4500,
            6000,
            7500,
            9000,
            10500,
            12000,
            13500,
            15000,
            16500,
            18000,
            19500,
            21000,
            22500,
            24000,
            25500,
            27000,
            28500,
        ],
        [
            0,
            36.4477,
            58.3656,
            72.8198,
            98.5,
            130.439,
            159.979,
            177.268,
            190.383,
            194.052,
            194.197,
            194.197,
            194.197,
            194.197,
            194.197,
            194.197,
            194.197,
            194.197,
            194.197,
            194.197,
        ],
    )


def table_max_extraction_gas_mohr_bg2012(x):
    """
    Real Name: table max extraction gas Mohr BG2012
    Original Eqn: ( [(0,0)-(20000,200)],(0,0),(1000,27.4739),(2000,42.1041),(3000,51.2745),(4000,58.1215),(5000,69.3726),(6000,79.5334),(7000,99.1636),(8000,115.575),(9000,128.798),(10000,138.387),(11000,147.465),(12000,150.753),(13000,157.008),(14000,159.247),(15000,159.247),(16000,159.247),(17000,159.247),(18000,159.247),(19000,159.247),(20000,159.247))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Curva MohrBG2012 de extracción de gas hasta 2100. Unidades: EJ.
    """
    return lookup(
        x,
        [
            0,
            1000,
            2000,
            3000,
            4000,
            5000,
            6000,
            7000,
            8000,
            9000,
            10000,
            11000,
            12000,
            13000,
            14000,
            15000,
            16000,
            17000,
            18000,
            19000,
            20000,
        ],
        [
            0,
            27.4739,
            42.1041,
            51.2745,
            58.1215,
            69.3726,
            79.5334,
            99.1636,
            115.575,
            128.798,
            138.387,
            147.465,
            150.753,
            157.008,
            159.247,
            159.247,
            159.247,
            159.247,
            159.247,
            159.247,
            159.247,
        ],
    )


@cache.step
@to_float
def total_cumulative_emissions_gtc():
    """
    Real Name: Total cumulative emissions GtC
    Original Eqn: INTEG ( new C GtC, Cumulative emissions to 1995)
    Units: GtC
    Limits: (None, None)
    Type: component
    Subs: None

    Total cumulative emissions.
    """
    return _integ_total_cumulative_emissions_gtc()


def tnes_de_castro_phd__scen_i(x):
    """
    Real Name: "TNES de Castro PhD - Scen I"
    Original Eqn: ( [(0,0)-(10,10)],(1985,7173.13),(1986,7368.39),(1987,7560.95),(1988,7750.95),(1989,7938.54),(1990,8123.85),(1991,8306.94),(1992,8487.87),(1993,8666.6),(1994,8843.01),(1995,9016.91),(1996,9188),(1997,9355.9),(1998,9520.11),(1999,9680.06),(2000,9835.12),(2001,9984.57),(2002,10127.7),(2003,10263.7),(2004,10391.9),(2005,10511.6),(2006,10622.1),(2007,10723.1),(2008,10814.1),(2009,10894.8),(2010,10965.4),(2011,11025.8),(2012,11076.5),(2013,11117.8),(2014,11150.3),(2015,11174.8),(2016,11187.2),(2017,11171.3),(2018,11125.6),(2019,11048.7),(2020,10941.3),(2021,10806.3),(2022,10648.5),(2023,10473.6),(2024,10288),(2025,10098.3),(2026,9914.3),(2027,9737.27),(2028,9572.49),(2029,9422.99),(2030,9290.79),(2031,9176.91),(2032,9081.61),(2033,9004.54),(2034,8944.92),(2035,8901.71),(2036,8868.15),(2037,8842.36),(2038,8822.52),(2039,8807.44),(2040,8796.45),(2041,8789.34),(2042,8786.33),(2043,8787.93),(2044,8794.91),(2045,8800.9),(2046,8805.38),(2047,8813.47),(2048,8826.89),(2049,8847.13),(2050,8844.22),(2051,8829.3),(2052,8822.62),(2053,8829.47),(2054,8853.12),(2055,8895.31),(2056,8956.7),(2057,9037.27),(2058,9136.56),(2059,9253.94),(2060,9388.68),(2061,9540.13),(2062,9707.65),(2063,9890.73),(2064,10089),(2065,10302),(2066,10529.6),(2067,10771.5),(2068,11027.7),(2069,11298),(2070,11582.2),(2071,11880.5),(2072,12192.5),(2073,12518.4),(2074,12857.9),(2075,13211),(2076,13577.5),(2077,13957.4),(2078,14350.4),(2079,14756.5),(2080,15175.4),(2081,15606.9),(2082,16051),(2083,16507.3),(2084,16975.7),(2085,17456),(2086,17947.9),(2087,18451.3),(2088,18965.9),(2089,19491.6),(2090,20028),(2091,20575.1),(2092,21132.7),(2093,21700.6),(2094,22278.8),(2095,22867.1),(2096,23465.6),(2097,24074.2),(2098,24693.1),(2099,25322.3),(2100,25962.1))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Total net energy supply scenario I.
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            7173.13,
            7368.39,
            7560.95,
            7750.95,
            7938.54,
            8123.85,
            8306.94,
            8487.87,
            8666.6,
            8843.01,
            9016.91,
            9188,
            9355.9,
            9520.11,
            9680.06,
            9835.12,
            9984.57,
            10127.7,
            10263.7,
            10391.9,
            10511.6,
            10622.1,
            10723.1,
            10814.1,
            10894.8,
            10965.4,
            11025.8,
            11076.5,
            11117.8,
            11150.3,
            11174.8,
            11187.2,
            11171.3,
            11125.6,
            11048.7,
            10941.3,
            10806.3,
            10648.5,
            10473.6,
            10288,
            10098.3,
            9914.3,
            9737.27,
            9572.49,
            9422.99,
            9290.79,
            9176.91,
            9081.61,
            9004.54,
            8944.92,
            8901.71,
            8868.15,
            8842.36,
            8822.52,
            8807.44,
            8796.45,
            8789.34,
            8786.33,
            8787.93,
            8794.91,
            8800.9,
            8805.38,
            8813.47,
            8826.89,
            8847.13,
            8844.22,
            8829.3,
            8822.62,
            8829.47,
            8853.12,
            8895.31,
            8956.7,
            9037.27,
            9136.56,
            9253.94,
            9388.68,
            9540.13,
            9707.65,
            9890.73,
            10089,
            10302,
            10529.6,
            10771.5,
            11027.7,
            11298,
            11582.2,
            11880.5,
            12192.5,
            12518.4,
            12857.9,
            13211,
            13577.5,
            13957.4,
            14350.4,
            14756.5,
            15175.4,
            15606.9,
            16051,
            16507.3,
            16975.7,
            17456,
            17947.9,
            18451.3,
            18965.9,
            19491.6,
            20028,
            20575.1,
            21132.7,
            21700.6,
            22278.8,
            22867.1,
            23465.6,
            24074.2,
            24693.1,
            25322.3,
            25962.1,
        ],
    )


def net_oil_extraction_de_castro_phd__scen_i(x):
    """
    Real Name: "Net oil extraction de Castro PhD - Scen I"
    Original Eqn: ( [(0,0)-(10,10)],(1985,2586.21),(1986,2657.24),(1987,2727.03),(1988,2795.64),(1989,2863.08),(1990,2929.39),(1991,2994.56),(1992,3058.58),(1993,3121.38),(1994,3182.87),(1995,3242.92),(1996,3301.35),(1997,3357.93),(1998,3412.41),(1999,3464.47),(2000,3513.79),(2001,3559.99),(2002,3602.72),(2003,3641.58),(2004,3676.21),(2005,3706.25),(2006,3731.41),(2007,3751.42),(2008,3766.07),(2009,3775.24),(2010,3778.86),(2011,3776.96),(2012,3769.61),(2013,3756.99),(2014,3739.31),(2015,3716.84),(2016,3688.03),(2017,3646.76),(2018,3592.8),(2019,3525.96),(2020,3446.96),(2021,3357.36),(2022,3259.3),(2023,3155.32),(2024,3048.04),(2025,2940),(2026,2833.9),(2027,2731.45),(2028,2633.99),(2029,2542.41),(2030,2457.18),(2031,2378.41),(2032,2305.92),(2033,2239.3),(2034,2178.03),(2035,2121.51),(2036,2067.41),(2037,2015.01),(2038,1963.69),(2039,1913.01),(2040,1862.72),(2041,1812.75),(2042,1763.12),(2043,1713.95),(2044,1665.41),(2045,1617.7),(2046,1569.24),(2047,1521.33),(2048,1474.43),(2049,1428.88),(2050,1378.91),(2051,1326.44),(2052,1276.28),(2053,1229.49),(2054,1186.64),(2055,1147.86),(2056,1113.07),(2057,1082.06),(2058,1054.53),(2059,1030.2),(2060,1008.79),(2061,990.086),(2062,973.882),(2063,960.031),(2064,948.419),(2065,938.964),(2066,931.608),(2067,926.306),(2068,923.025),(2069,921.731),(2070,922.385),(2071,924.939),(2072,929.328),(2073,935.469),(2074,943.259),(2075,952.569),(2076,963.248),(2077,975.123),(2078,987.996),(2079,1001.65),(2080,1015.86),(2081,1030.38),(2082,1044.96),(2083,1059.33),(2084,1073.23),(2085,1086.43),(2086,1098.65),(2087,1109.67),(2088,1119.27),(2089,1127.24),(2090,1133.4),(2091,1137.59),(2092,1139.68),(2093,1139.56),(2094,1137.17),(2095,1132.46),(2096,1125.41),(2097,1116.04),(2098,1104.39),(2099,1090.55),(2100,1074.6))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            2586.21,
            2657.24,
            2727.03,
            2795.64,
            2863.08,
            2929.39,
            2994.56,
            3058.58,
            3121.38,
            3182.87,
            3242.92,
            3301.35,
            3357.93,
            3412.41,
            3464.47,
            3513.79,
            3559.99,
            3602.72,
            3641.58,
            3676.21,
            3706.25,
            3731.41,
            3751.42,
            3766.07,
            3775.24,
            3778.86,
            3776.96,
            3769.61,
            3756.99,
            3739.31,
            3716.84,
            3688.03,
            3646.76,
            3592.8,
            3525.96,
            3446.96,
            3357.36,
            3259.3,
            3155.32,
            3048.04,
            2940,
            2833.9,
            2731.45,
            2633.99,
            2542.41,
            2457.18,
            2378.41,
            2305.92,
            2239.3,
            2178.03,
            2121.51,
            2067.41,
            2015.01,
            1963.69,
            1913.01,
            1862.72,
            1812.75,
            1763.12,
            1713.95,
            1665.41,
            1617.7,
            1569.24,
            1521.33,
            1474.43,
            1428.88,
            1378.91,
            1326.44,
            1276.28,
            1229.49,
            1186.64,
            1147.86,
            1113.07,
            1082.06,
            1054.53,
            1030.2,
            1008.79,
            990.086,
            973.882,
            960.031,
            948.419,
            938.964,
            931.608,
            926.306,
            923.025,
            921.731,
            922.385,
            924.939,
            929.328,
            935.469,
            943.259,
            952.569,
            963.248,
            975.123,
            987.996,
            1001.65,
            1015.86,
            1030.38,
            1044.96,
            1059.33,
            1073.23,
            1086.43,
            1098.65,
            1109.67,
            1119.27,
            1127.24,
            1133.4,
            1137.59,
            1139.68,
            1139.56,
            1137.17,
            1132.46,
            1125.41,
            1116.04,
            1104.39,
            1090.55,
            1074.6,
        ],
    )


def pe_oil_extraction_de_castro_phd__scen_ii(x):
    """
    Real Name: "PE oil extraction de Castro PhD - Scen II"
    Original Eqn: ( [(0,0)-(10,10)],(1985,2853.6),(1986,2932.69),(1987,3010.55),(1988,3087.22),(1989,3162.74),(1990,3237.16),(1991,3310.47),(1992,3382.67),(1993,3453.7),(1994,3523.47),(1995,3591.83),(1996,3658.6),(1997,3723.55),(1998,3786.39),(1999,3846.79),(2000,3904.4),(2001,3958.81),(2002,4009.62),(2003,4056.42),(2004,4098.78),(2005,4136.27),(2006,4169.57),(2007,4198.24),(2008,4222.15),(2009,4241.19),(2010,4255.33),(2011,4264.62),(2012,4269.17),(2013,4269.15),(2014,4264.78),(2015,4256.34),(2016,4242.11),(2017,4215.12),(2018,4174.81),(2019,4120.76),(2020,4053.66),(2021,3975.16),(2022,3887.67),(2023,3794.08),(2024,3697.45),(2025,3600.71),(2026,3506.78),(2027,3417.66),(2028,3334.64),(2029,3258.44),(2030,3189.17),(2031,3126.44),(2032,3069.5),(2033,3017.29),(2034,2968.65),(2035,2922.37),(2036,2873.74),(2037,2821.48),(2038,2764.72),(2039,2703.17),(2040,2637.04),(2041,2566.93),(2042,2493.69),(2043,2418.33),(2044,2341.94),(2045,2265.58),(2046,2190.28),(2047,2116.99),(2048,2046.54),(2049,1979.65),(2050,1909.2),(2051,1839.5),(2052,1776.01),(2053,1719.36),(2054,1669.55),(2055,1626.19),(2056,1588.74),(2057,1556.59),(2058,1529.08),(2059,1505.57),(2060,1485.41),(2061,1467.99),(2062,1452.74),(2063,1439.12),(2064,1426.63),(2065,1414.83),(2066,1403.34),(2067,1391.81),(2068,1379.96),(2069,1367.57),(2070,1354.44),(2071,1340.44),(2072,1325.47),(2073,1309.44),(2074,1293.54),(2075,1278.69),(2076,1264.85),(2077,1251.89),(2078,1239.63),(2079,1227.89),(2080,1216.49),(2081,1205.3),(2082,1194.17),(2083,1182.97),(2084,1171.6),(2085,1159.95),(2086,1147.95),(2087,1135.52),(2088,1122.6),(2089,1109.14),(2090,1095.1),(2091,1080.45),(2092,1065.16),(2093,1049.24),(2094,1032.67),(2095,1015.47),(2096,997.651),(2097,979.238),(2098,960.264),(2099,940.765),(2100,920.786))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Primary energy (Add "Energía perdida" to the net energy extraction in the
        original model).
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            2853.6,
            2932.69,
            3010.55,
            3087.22,
            3162.74,
            3237.16,
            3310.47,
            3382.67,
            3453.7,
            3523.47,
            3591.83,
            3658.6,
            3723.55,
            3786.39,
            3846.79,
            3904.4,
            3958.81,
            4009.62,
            4056.42,
            4098.78,
            4136.27,
            4169.57,
            4198.24,
            4222.15,
            4241.19,
            4255.33,
            4264.62,
            4269.17,
            4269.15,
            4264.78,
            4256.34,
            4242.11,
            4215.12,
            4174.81,
            4120.76,
            4053.66,
            3975.16,
            3887.67,
            3794.08,
            3697.45,
            3600.71,
            3506.78,
            3417.66,
            3334.64,
            3258.44,
            3189.17,
            3126.44,
            3069.5,
            3017.29,
            2968.65,
            2922.37,
            2873.74,
            2821.48,
            2764.72,
            2703.17,
            2637.04,
            2566.93,
            2493.69,
            2418.33,
            2341.94,
            2265.58,
            2190.28,
            2116.99,
            2046.54,
            1979.65,
            1909.2,
            1839.5,
            1776.01,
            1719.36,
            1669.55,
            1626.19,
            1588.74,
            1556.59,
            1529.08,
            1505.57,
            1485.41,
            1467.99,
            1452.74,
            1439.12,
            1426.63,
            1414.83,
            1403.34,
            1391.81,
            1379.96,
            1367.57,
            1354.44,
            1340.44,
            1325.47,
            1309.44,
            1293.54,
            1278.69,
            1264.85,
            1251.89,
            1239.63,
            1227.89,
            1216.49,
            1205.3,
            1194.17,
            1182.97,
            1171.6,
            1159.95,
            1147.95,
            1135.52,
            1122.6,
            1109.14,
            1095.1,
            1080.45,
            1065.16,
            1049.24,
            1032.67,
            1015.47,
            997.651,
            979.238,
            960.264,
            940.765,
            920.786,
        ],
    )


def net_oil_extraction_de_castro_phd__scen_iii(x):
    """
    Real Name: "Net oil extraction de Castro PhD - Scen III"
    Original Eqn: ( [(0,0)-(10,10)],(1985,2586.21),(1986,2657.24),(1987,2727.03),(1988,2795.64),(1989,2863.08),(1990,2929.39),(1991,2994.56),(1992,3058.58),(1993,3121.38),(1994,3182.87),(1995,3242.92),(1996,3301.35),(1997,3357.93),(1998,3412.41),(1999,3464.47),(2000,3513.79),(2001,3559.99),(2002,3602.72),(2003,3641.58),(2004,3676.21),(2005,3706.25),(2006,3731.41),(2007,3751.42),(2008,3766.07),(2009,3775.24),(2010,3778.86),(2011,3776.96),(2012,3769.56),(2013,3756.02),(2014,3735.73),(2015,3708.45),(2016,3672.29),(2017,3621.03),(2018,3554.53),(2019,3472.85),(2020,3377.15),(2021,3269.46),(2022,3152.43),(2023,3029.07),(2024,2902.39),(2025,2775.22),(2026,2649.98),(2027,2528.6),(2028,2412.5),(2029,2302.57),(2030,2199.24),(2031,2102.59),(2032,2012.4),(2033,1928.26),(2034,1849.64),(2035,1775.94),(2036,1705.9),(2037,1639),(2038,1574.79),(2039,1512.89),(2040,1453.04),(2041,1395.04),(2042,1338.77),(2043,1284.12),(2044,1231.05),(2045,1179.51),(2046,1129.49),(2047,1080.95),(2048,1033.89),(2049,988.283),(2050,939.916),(2051,888.983),(2052,838.921),(2053,790.425),(2054,743.889),(2055,699.498),(2056,657.297),(2057,617.242),(2058,579.24),(2059,543.177),(2060,508.93),(2061,476.381),(2062,445.423),(2063,415.961),(2064,387.915),(2065,361.216),(2066,335.808),(2067,311.643),(2068,288.683),(2069,266.895),(2070,246.251),(2071,226.726),(2072,208.297),(2073,190.943),(2074,174.638),(2075,159.36),(2076,145.082),(2077,131.775),(2078,119.409),(2079,107.95),(2080,97.3636),(2081,87.6112),(2082,78.6537),(2083,70.4503),(2084,62.9592),(2085,56.1382),(2086,49.9448),(2087,44.3368),(2088,39.2727),(2089,34.7122),(2090,30.6158),(2091,26.9459),(2092,23.6663),(2093,20.743),(2094,18.1435),(2095,15.8376),(2096,13.797),(2097,11.9953),(2098,10.4082),(2099,9.01332),(2100,7.79015))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            2586.21,
            2657.24,
            2727.03,
            2795.64,
            2863.08,
            2929.39,
            2994.56,
            3058.58,
            3121.38,
            3182.87,
            3242.92,
            3301.35,
            3357.93,
            3412.41,
            3464.47,
            3513.79,
            3559.99,
            3602.72,
            3641.58,
            3676.21,
            3706.25,
            3731.41,
            3751.42,
            3766.07,
            3775.24,
            3778.86,
            3776.96,
            3769.56,
            3756.02,
            3735.73,
            3708.45,
            3672.29,
            3621.03,
            3554.53,
            3472.85,
            3377.15,
            3269.46,
            3152.43,
            3029.07,
            2902.39,
            2775.22,
            2649.98,
            2528.6,
            2412.5,
            2302.57,
            2199.24,
            2102.59,
            2012.4,
            1928.26,
            1849.64,
            1775.94,
            1705.9,
            1639,
            1574.79,
            1512.89,
            1453.04,
            1395.04,
            1338.77,
            1284.12,
            1231.05,
            1179.51,
            1129.49,
            1080.95,
            1033.89,
            988.283,
            939.916,
            888.983,
            838.921,
            790.425,
            743.889,
            699.498,
            657.297,
            617.242,
            579.24,
            543.177,
            508.93,
            476.381,
            445.423,
            415.961,
            387.915,
            361.216,
            335.808,
            311.643,
            288.683,
            266.895,
            246.251,
            226.726,
            208.297,
            190.943,
            174.638,
            159.36,
            145.082,
            131.775,
            119.409,
            107.95,
            97.3636,
            87.6112,
            78.6537,
            70.4503,
            62.9592,
            56.1382,
            49.9448,
            44.3368,
            39.2727,
            34.7122,
            30.6158,
            26.9459,
            23.6663,
            20.743,
            18.1435,
            15.8376,
            13.797,
            11.9953,
            10.4082,
            9.01332,
            7.79015,
        ],
    )


def pe_coal_extraction_de_castro_phd__scen_ii(x):
    """
    Real Name: "PE coal extraction de Castro PhD - Scen II"
    Original Eqn: ( [(0,0)-(10,10)],(1985,2081.44),(1986,2135.51),(1987,2188.27),(1988,2239.78),(1989,2290.12),(1990,2339.37),(1991,2387.58),(1992,2434.81),(1993,2481.08),(1994,2526.43),(1995,2570.82),(1996,2614.21),(1997,2656.54),(1998,2697.73),(1999,2737.64),(2000,2776.16),(2001,2813.12),(2002,2848.39),(2003,2881.79),(2004,2913.19),(2005,2942.43),(2006,2970.14),(2007,2996.14),(2008,3020.47),(2009,3043.2),(2010,3064.45),(2011,3084.36),(2012,3103.16),(2013,3121.08),(2014,3138.41),(2015,3155.49),(2016,3171.11),(2017,3180.04),(2018,3181.73),(2019,3175.59),(2020,3161.8),(2021,3141.21),(2022,3115.28),(2023,3085.91),(2024,3055.2),(2025,3025.33),(2026,2998.72),(2027,2977.04),(2028,2961.66),(2029,2953.52),(2030,2953.18),(2031,2960.78),(2032,2976.17),(2033,2998.94),(2034,3028.5),(2035,3064.18),(2036,3101.34),(2037,3138.56),(2038,3174.51),(2039,3208.26),(2040,3239.24),(2041,3267.14),(2042,3291.87),(2043,3313.47),(2044,3332.03),(2045,3347.68),(2046,3360.5),(2047,3370.53),(2048,3377.77),(2049,3382.15),(2050,3369.61),(2051,3346.49),(2052,3321.23),(2053,3294.99),(2054,3268.1),(2055,3240.42),(2056,3211.63),(2057,3181.37),(2058,3149.3),(2059,3115.17),(2060,3078.78),(2061,3040.04),(2062,2998.94),(2063,2955.52),(2064,2909.85),(2065,2862.1),(2066,2812.42),(2067,2761.01),(2068,2708.07),(2069,2653.84),(2070,2598.53),(2071,2542.37),(2072,2485.58),(2073,2428.5),(2074,2374.08),(2075,2323.46),(2076,2276.45),(2077,2232.72),(2078,2191.9),(2079,2153.67),(2080,2117.71),(2081,2083.74),(2082,2051.52),(2083,2020.82),(2084,1991.45),(2085,1963.21),(2086,1935.96),(2087,1909.56),(2088,1883.85),(2089,1858.74),(2090,1834.13),(2091,1809.91),(2092,1786.01),(2093,1762.35),(2094,1738.88),(2095,1715.54),(2096,1692.29),(2097,1669.09),(2098,1645.91),(2099,1622.73),(2100,1599.53))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Primary energy (Add "Energía perdida" to the net energy extraction in the
        original model).
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            2081.44,
            2135.51,
            2188.27,
            2239.78,
            2290.12,
            2339.37,
            2387.58,
            2434.81,
            2481.08,
            2526.43,
            2570.82,
            2614.21,
            2656.54,
            2697.73,
            2737.64,
            2776.16,
            2813.12,
            2848.39,
            2881.79,
            2913.19,
            2942.43,
            2970.14,
            2996.14,
            3020.47,
            3043.2,
            3064.45,
            3084.36,
            3103.16,
            3121.08,
            3138.41,
            3155.49,
            3171.11,
            3180.04,
            3181.73,
            3175.59,
            3161.8,
            3141.21,
            3115.28,
            3085.91,
            3055.2,
            3025.33,
            2998.72,
            2977.04,
            2961.66,
            2953.52,
            2953.18,
            2960.78,
            2976.17,
            2998.94,
            3028.5,
            3064.18,
            3101.34,
            3138.56,
            3174.51,
            3208.26,
            3239.24,
            3267.14,
            3291.87,
            3313.47,
            3332.03,
            3347.68,
            3360.5,
            3370.53,
            3377.77,
            3382.15,
            3369.61,
            3346.49,
            3321.23,
            3294.99,
            3268.1,
            3240.42,
            3211.63,
            3181.37,
            3149.3,
            3115.17,
            3078.78,
            3040.04,
            2998.94,
            2955.52,
            2909.85,
            2862.1,
            2812.42,
            2761.01,
            2708.07,
            2653.84,
            2598.53,
            2542.37,
            2485.58,
            2428.5,
            2374.08,
            2323.46,
            2276.45,
            2232.72,
            2191.9,
            2153.67,
            2117.71,
            2083.74,
            2051.52,
            2020.82,
            1991.45,
            1963.21,
            1935.96,
            1909.56,
            1883.85,
            1858.74,
            1834.13,
            1809.91,
            1786.01,
            1762.35,
            1738.88,
            1715.54,
            1692.29,
            1669.09,
            1645.91,
            1622.73,
            1599.53,
        ],
    )


def net_gas_extraction_de_castro_phd__scen_i(x):
    """
    Real Name: "Net gas extraction de Castro PhD - Scen I"
    Original Eqn: ( [(0,0)-(10,10)],(1985,1378.15),(1986,1422.43),(1987,1466.37),(1988,1509.97),(1989,1553.27),(1990,1596.27),(1991,1639),(1992,1681.45),(1993,1723.6),(1994,1765.43),(1995,1806.88),(1996,1847.87),(1997,1888.31),(1998,1928.08),(1999,1967.04),(2000,2005.02),(2001,2041.85),(2002,2077.35),(2003,2111.34),(2004,2143.61),(2005,2174.01),(2006,2202.36),(2007,2228.55),(2008,2252.45),(2009,2274),(2010,2293.18),(2011,2310),(2012,2324.5),(2013,2336.78),(2014,2346.97),(2015,2355.23),(2016,2360.56),(2017,2358.93),(2018,2349.91),(2019,2333.02),(2020,2308.36),(2021,2276.56),(2022,2238.66),(2023,2196.02),(2024,2150.19),(2025,2102.72),(2026,2055.42),(2027,2009.48),(2028,1965.96),(2029,1925.6),(2030,1888.94),(2031,1856.22),(2032,1827.53),(2033,1802.76),(2034,1781.69),(2035,1764.05),(2036,1748.05),(2037,1733.15),(2038,1718.83),(2039,1704.69),(2040,1690.47),(2041,1676.02),(2042,1661.3),(2043,1646.32),(2044,1631.17),(2045,1615.96),(2046,1598.98),(2047,1581.36),(2048,1563.41),(2049,1545.42),(2050,1521.06),(2051,1491.54),(2052,1462.02),(2053,1433.79),(2054,1407.58),(2055,1383.71),(2056,1362.23),(2057,1342.98),(2058,1325.69),(2059,1310.03),(2060,1295.68),(2061,1282.28),(2062,1269.52),(2063,1257.12),(2064,1244.82),(2065,1232.39),(2066,1219.62),(2067,1206.36),(2068,1192.45),(2069,1177.78),(2070,1162.23),(2071,1145.74),(2072,1128.25),(2073,1109.71),(2074,1090.12),(2075,1069.47),(2076,1047.78),(2077,1025.09),(2078,1001.45),(2079,976.929),(2080,951.611),(2081,925.587),(2082,898.96),(2083,871.837),(2084,844.332),(2085,816.56),(2086,788.637),(2087,760.675),(2088,732.784),(2089,705.067),(2090,677.624),(2091,650.543),(2092,623.906),(2093,597.787),(2094,572.25),(2095,547.351),(2096,523.135),(2097,499.642),(2098,476.902),(2099,454.936),(2100,433.76))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            1378.15,
            1422.43,
            1466.37,
            1509.97,
            1553.27,
            1596.27,
            1639,
            1681.45,
            1723.6,
            1765.43,
            1806.88,
            1847.87,
            1888.31,
            1928.08,
            1967.04,
            2005.02,
            2041.85,
            2077.35,
            2111.34,
            2143.61,
            2174.01,
            2202.36,
            2228.55,
            2252.45,
            2274,
            2293.18,
            2310,
            2324.5,
            2336.78,
            2346.97,
            2355.23,
            2360.56,
            2358.93,
            2349.91,
            2333.02,
            2308.36,
            2276.56,
            2238.66,
            2196.02,
            2150.19,
            2102.72,
            2055.42,
            2009.48,
            1965.96,
            1925.6,
            1888.94,
            1856.22,
            1827.53,
            1802.76,
            1781.69,
            1764.05,
            1748.05,
            1733.15,
            1718.83,
            1704.69,
            1690.47,
            1676.02,
            1661.3,
            1646.32,
            1631.17,
            1615.96,
            1598.98,
            1581.36,
            1563.41,
            1545.42,
            1521.06,
            1491.54,
            1462.02,
            1433.79,
            1407.58,
            1383.71,
            1362.23,
            1342.98,
            1325.69,
            1310.03,
            1295.68,
            1282.28,
            1269.52,
            1257.12,
            1244.82,
            1232.39,
            1219.62,
            1206.36,
            1192.45,
            1177.78,
            1162.23,
            1145.74,
            1128.25,
            1109.71,
            1090.12,
            1069.47,
            1047.78,
            1025.09,
            1001.45,
            976.929,
            951.611,
            925.587,
            898.96,
            871.837,
            844.332,
            816.56,
            788.637,
            760.675,
            732.784,
            705.067,
            677.624,
            650.543,
            623.906,
            597.787,
            572.25,
            547.351,
            523.135,
            499.642,
            476.902,
            454.936,
            433.76,
        ],
    )


def pe_gas_extraction_de_castro_phd__scen_ii(x):
    """
    Real Name: "PE gas extraction de Castro PhD - Scen II"
    Original Eqn: ( [(0,0)-(10,10)],(1985,1511.25),(1986,1560.28),(1987,1609),(1988,1657.46),(1989,1705.67),(1990,1753.67),(1991,1801.48),(1992,1849.09),(1993,1896.51),(1994,1943.7),(1995,1990.62),(1996,2037.18),(1997,2083.29),(1998,2128.84),(1999,2173.66),(2000,2217.6),(2001,2260.46),(2002,2302.05),(2003,2342.18),(2004,2380.64),(2005,2417.18),(2006,2452.25),(2007,2485.65),(2008,2517.3),(2009,2547.21),(2010,2575.39),(2011,2601.9),(2012,2626.83),(2013,2650.34),(2014,2672.6),(2015,2693.85),(2016,2713.04),(2017,2725.69),(2018,2731.16),(2019,2728.82),(2020,2718.75),(2021,2701.64),(2022,2678.7),(2023,2651.58),(2024,2622.12),(2025,2592.25),(2026,2564.02),(2027,2538.98),(2028,2518.29),(2029,2502.75),(2030,2492.79),(2031,2488.48),(2032,2489.57),(2033,2495.59),(2034,2505.9),(2035,2519.76),(2036,2533.25),(2037,2544.98),(2038,2553.75),(2039,2558.7),(2040,2559.31),(2041,2555.33),(2042,2546.69),(2043,2533.45),(2044,2515.76),(2045,2493.79),(2046,2467.71),(2047,2437.67),(2048,2403.82),(2049,2366.26),(2050,2315.78),(2051,2256.66),(2052,2195.62),(2053,2133.79),(2054,2071.61),(2055,2009.2),(2056,1946.54),(2057,1883.58),(2058,1820.32),(2059,1756.81),(2060,1693.17),(2061,1629.56),(2062,1566.17),(2063,1503.21),(2064,1440.92),(2065,1379.52),(2066,1319.21),(2067,1260.2),(2068,1202.66),(2069,1146.75),(2070,1092.58),(2071,1040.26),(2072,989.855),(2073,941.438),(2074,895.994),(2075,853.858),(2076,814.762),(2077,778.406),(2078,744.501),(2079,712.786),(2080,683.028),(2081,655.029),(2082,628.61),(2083,603.618),(2084,579.92),(2085,557.398),(2086,535.948),(2087,515.482),(2088,495.919),(2089,477.189),(2090,459.233),(2091,441.995),(2092,425.428),(2093,409.491),(2094,394.147),(2095,379.364),(2096,365.113),(2097,351.369),(2098,338.109),(2099,325.314),(2100,312.966))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Primary energy (Add "Energía perdida" to the net energy extraction in the
        original model).
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            1511.25,
            1560.28,
            1609,
            1657.46,
            1705.67,
            1753.67,
            1801.48,
            1849.09,
            1896.51,
            1943.7,
            1990.62,
            2037.18,
            2083.29,
            2128.84,
            2173.66,
            2217.6,
            2260.46,
            2302.05,
            2342.18,
            2380.64,
            2417.18,
            2452.25,
            2485.65,
            2517.3,
            2547.21,
            2575.39,
            2601.9,
            2626.83,
            2650.34,
            2672.6,
            2693.85,
            2713.04,
            2725.69,
            2731.16,
            2728.82,
            2718.75,
            2701.64,
            2678.7,
            2651.58,
            2622.12,
            2592.25,
            2564.02,
            2538.98,
            2518.29,
            2502.75,
            2492.79,
            2488.48,
            2489.57,
            2495.59,
            2505.9,
            2519.76,
            2533.25,
            2544.98,
            2553.75,
            2558.7,
            2559.31,
            2555.33,
            2546.69,
            2533.45,
            2515.76,
            2493.79,
            2467.71,
            2437.67,
            2403.82,
            2366.26,
            2315.78,
            2256.66,
            2195.62,
            2133.79,
            2071.61,
            2009.2,
            1946.54,
            1883.58,
            1820.32,
            1756.81,
            1693.17,
            1629.56,
            1566.17,
            1503.21,
            1440.92,
            1379.52,
            1319.21,
            1260.2,
            1202.66,
            1146.75,
            1092.58,
            1040.26,
            989.855,
            941.438,
            895.994,
            853.858,
            814.762,
            778.406,
            744.501,
            712.786,
            683.028,
            655.029,
            628.61,
            603.618,
            579.92,
            557.398,
            535.948,
            515.482,
            495.919,
            477.189,
            459.233,
            441.995,
            425.428,
            409.491,
            394.147,
            379.364,
            365.113,
            351.369,
            338.109,
            325.314,
            312.966,
        ],
    )


def net_gas_extraction_de_castro_phd__scen_iii(x):
    """
    Real Name: "Net gas extraction de Castro PhD - Scen III"
    Original Eqn: ( [(0,0)-(10,10)],(1985,1378.15),(1986,1422.43),(1987,1466.37),(1988,1509.97),(1989,1553.27),(1990,1596.27),(1991,1639),(1992,1681.45),(1993,1723.6),(1994,1765.43),(1995,1806.88),(1996,1847.87),(1997,1888.31),(1998,1928.08),(1999,1967.04),(2000,2005.02),(2001,2041.85),(2002,2077.35),(2003,2111.34),(2004,2143.61),(2005,2174.01),(2006,2202.36),(2007,2228.55),(2008,2252.45),(2009,2274),(2010,2293.18),(2011,2310),(2012,2324.47),(2013,2336.18),(2014,2344.72),(2015,2349.88),(2016,2350.38),(2017,2342.04),(2018,2324.36),(2019,2296.96),(2020,2260.1),(2021,2214.64),(2022,2161.88),(2023,2103.47),(2024,2041.17),(2025,1976.72),(2026,1911.72),(2027,1847.53),(2028,1785.2),(2029,1725.49),(2030,1668.87),(2031,1615.53),(2032,1565.49),(2033,1518.59),(2034,1474.56),(2035,1433.08),(2036,1393.24),(2037,1354.7),(2038,1317.14),(2039,1280.29),(2040,1243.98),(2041,1208.07),(2042,1172.48),(2043,1137.16),(2044,1102.09),(2045,1067.27),(2046,1032.71),(2047,998.441),(2048,964.476),(2049,930.845),(2050,893.625),(2051,852.817),(2052,811.701),(2053,771.01),(2054,731.211),(2055,692.579),(2056,655.254),(2057,619.284),(2058,584.664),(2059,551.358),(2060,519.318),(2061,488.491),(2062,458.831),(2063,430.297),(2064,402.855),(2065,376.484),(2066,351.166),(2067,326.892),(2068,303.655),(2069,281.454),(2070,260.289),(2071,240.158),(2072,221.061),(2073,202.995),(2074,185.952),(2075,169.922),(2076,154.893),(2077,140.845),(2078,127.756),(2079,115.6),(2080,104.347),(2081,93.9612),(2082,84.4072),(2083,75.6455),(2084,67.6349),(2085,60.3331),(2086,53.697),(2087,47.6834),(2088,42.2492),(2089,37.3523),(2090,32.9516),(2091,29.0072),(2092,25.481),(2093,22.3367),(2094,19.5399),(2095,17.0583),(2096,14.8618),(2097,12.922),(2098,11.2131),(2099,9.71091),(2100,8.39349))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            1378.15,
            1422.43,
            1466.37,
            1509.97,
            1553.27,
            1596.27,
            1639,
            1681.45,
            1723.6,
            1765.43,
            1806.88,
            1847.87,
            1888.31,
            1928.08,
            1967.04,
            2005.02,
            2041.85,
            2077.35,
            2111.34,
            2143.61,
            2174.01,
            2202.36,
            2228.55,
            2252.45,
            2274,
            2293.18,
            2310,
            2324.47,
            2336.18,
            2344.72,
            2349.88,
            2350.38,
            2342.04,
            2324.36,
            2296.96,
            2260.1,
            2214.64,
            2161.88,
            2103.47,
            2041.17,
            1976.72,
            1911.72,
            1847.53,
            1785.2,
            1725.49,
            1668.87,
            1615.53,
            1565.49,
            1518.59,
            1474.56,
            1433.08,
            1393.24,
            1354.7,
            1317.14,
            1280.29,
            1243.98,
            1208.07,
            1172.48,
            1137.16,
            1102.09,
            1067.27,
            1032.71,
            998.441,
            964.476,
            930.845,
            893.625,
            852.817,
            811.701,
            771.01,
            731.211,
            692.579,
            655.254,
            619.284,
            584.664,
            551.358,
            519.318,
            488.491,
            458.831,
            430.297,
            402.855,
            376.484,
            351.166,
            326.892,
            303.655,
            281.454,
            260.289,
            240.158,
            221.061,
            202.995,
            185.952,
            169.922,
            154.893,
            140.845,
            127.756,
            115.6,
            104.347,
            93.9612,
            84.4072,
            75.6455,
            67.6349,
            60.3331,
            53.697,
            47.6834,
            42.2492,
            37.3523,
            32.9516,
            29.0072,
            25.481,
            22.3367,
            19.5399,
            17.0583,
            14.8618,
            12.922,
            11.2131,
            9.71091,
            8.39349,
        ],
    )


def net_coal_extraction_de_castro_phd__scen_iii(x):
    """
    Real Name: "Net coal extraction de Castro PhD - Scen III"
    Original Eqn: ( [(0,0)-(10,10)],(1985,1945.63),(1986,1995.96),(1987,2045.03),(1988,2092.89),(1989,2139.62),(1990,2185.28),(1991,2229.93),(1992,2273.61),(1993,2316.36),(1994,2358.19),(1995,2399.06),(1996,2438.96),(1997,2477.8),(1998,2515.5),(1999,2551.95),(2000,2587.03),(2001,2620.58),(2002,2652.48),(2003,2682.56),(2004,2710.7),(2005,2736.76),(2006,2760.66),(2007,2782.31),(2008,2801.7),(2009,2818.82),(2010,2833.73),(2011,2846.52),(2012,2857.31),(2013,2865.65),(2014,2871.1),(2015,2873.47),(2016,2871.23),(2017,2859.31),(2018,2837.16),(2019,2804.26),(2020,2760.86),(2021,2707.91),(2022,2646.88),(2023,2579.6),(2024,2508.07),(2025,2434.29),(2026,2360.07),(2027,2286.98),(2028,2216.23),(2029,2148.71),(2030,2084.94),(2031,2025.17),(2032,1969.39),(2033,1917.4),(2034,1868.88),(2035,1823.41),(2036,1779.85),(2037,1737.75),(2038,1696.69),(2039,1656.32),(2040,1616.38),(2041,1576.69),(2042,1537.11),(2043,1497.56),(2044,1458),(2045,1418.41),(2046,1378.78),(2047,1339.14),(2048,1299.51),(2049,1259.91),(2050,1215.03),(2051,1164.71),(2052,1113.39),(2053,1062.05),(2054,1011.37),(2055,961.747),(2056,913.409),(2057,866.46),(2058,820.93),(2059,776.805),(2060,734.051),(2061,692.63),(2062,652.506),(2063,613.653),(2064,576.054),(2065,539.706),(2066,504.611),(2067,470.782),(2068,438.236),(2069,406.994),(2070,377.077),(2071,348.507),(2072,321.3),(2073,295.471),(2074,271.027),(2075,247.969),(2076,226.292),(2077,205.981),(2078,187.015),(2079,169.365),(2080,152.995),(2081,137.864),(2082,123.924),(2083,111.123),(2084,99.4056),(2085,88.714),(2086,78.9881),(2087,70.1672),(2088,62.1905),(2089,54.9978),(2090,48.5302),(2091,42.7303),(2092,37.5432),(2093,32.916),(2094,28.7988),(2095,25.1446),(2096,21.9093),(2097,19.0516),(2098,16.5334),(2099,14.3195),(2100,12.3777))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            1945.63,
            1995.96,
            2045.03,
            2092.89,
            2139.62,
            2185.28,
            2229.93,
            2273.61,
            2316.36,
            2358.19,
            2399.06,
            2438.96,
            2477.8,
            2515.5,
            2551.95,
            2587.03,
            2620.58,
            2652.48,
            2682.56,
            2710.7,
            2736.76,
            2760.66,
            2782.31,
            2801.7,
            2818.82,
            2833.73,
            2846.52,
            2857.31,
            2865.65,
            2871.1,
            2873.47,
            2871.23,
            2859.31,
            2837.16,
            2804.26,
            2760.86,
            2707.91,
            2646.88,
            2579.6,
            2508.07,
            2434.29,
            2360.07,
            2286.98,
            2216.23,
            2148.71,
            2084.94,
            2025.17,
            1969.39,
            1917.4,
            1868.88,
            1823.41,
            1779.85,
            1737.75,
            1696.69,
            1656.32,
            1616.38,
            1576.69,
            1537.11,
            1497.56,
            1458,
            1418.41,
            1378.78,
            1339.14,
            1299.51,
            1259.91,
            1215.03,
            1164.71,
            1113.39,
            1062.05,
            1011.37,
            961.747,
            913.409,
            866.46,
            820.93,
            776.805,
            734.051,
            692.63,
            652.506,
            613.653,
            576.054,
            539.706,
            504.611,
            470.782,
            438.236,
            406.994,
            377.077,
            348.507,
            321.3,
            295.471,
            271.027,
            247.969,
            226.292,
            205.981,
            187.015,
            169.365,
            152.995,
            137.864,
            123.924,
            111.123,
            99.4056,
            88.714,
            78.9881,
            70.1672,
            62.1905,
            54.9978,
            48.5302,
            42.7303,
            37.5432,
            32.916,
            28.7988,
            25.1446,
            21.9093,
            19.0516,
            16.5334,
            14.3195,
            12.3777,
        ],
    )


def net_coal_extraction_de_castro_phd__scen_i(x):
    """
    Real Name: "Net coal extraction de Castro PhD - Scen I"
    Original Eqn: ( [(0,0)-(10,10)],(1985,1378.15),(1986,1422.43),(1987,1466.37),(1988,1509.97),(1989,1553.27),(1990,1596.27),(1991,1639),(1992,1681.45),(1993,1723.6),(1994,1765.43),(1995,1806.88),(1996,1847.87),(1997,1888.31),(1998,1928.08),(1999,1967.04),(2000,2005.02),(2001,2041.85),(2002,2077.35),(2003,2111.34),(2004,2143.61),(2005,2174.01),(2006,2202.36),(2007,2228.55),(2008,2252.45),(2009,2274),(2010,2293.18),(2011,2310),(2012,2324.5),(2013,2336.78),(2014,2346.97),(2015,2355.23),(2016,2360.56),(2017,2358.93),(2018,2349.91),(2019,2333.02),(2020,2308.36),(2021,2276.56),(2022,2238.66),(2023,2196.02),(2024,2150.19),(2025,2102.72),(2026,2055.42),(2027,2009.48),(2028,1965.96),(2029,1925.6),(2030,1888.94),(2031,1856.22),(2032,1827.53),(2033,1802.76),(2034,1781.69),(2035,1764.05),(2036,1748.05),(2037,1733.15),(2038,1718.83),(2039,1704.69),(2040,1690.47),(2041,1676.02),(2042,1661.3),(2043,1646.32),(2044,1631.17),(2045,1615.96),(2046,1598.98),(2047,1581.36),(2048,1563.41),(2049,1545.42),(2050,1521.06),(2051,1491.54),(2052,1462.02),(2053,1433.79),(2054,1407.58),(2055,1383.71),(2056,1362.23),(2057,1342.98),(2058,1325.69),(2059,1310.03),(2060,1295.68),(2061,1282.28),(2062,1269.52),(2063,1257.12),(2064,1244.82),(2065,1232.39),(2066,1219.62),(2067,1206.36),(2068,1192.45),(2069,1177.78),(2070,1162.23),(2071,1145.74),(2072,1128.25),(2073,1109.71),(2074,1090.12),(2075,1069.47),(2076,1047.78),(2077,1025.09),(2078,1001.45),(2079,976.929),(2080,951.611),(2081,925.587),(2082,898.96),(2083,871.837),(2084,844.332),(2085,816.56),(2086,788.637),(2087,760.675),(2088,732.784),(2089,705.067),(2090,677.624),(2091,650.543),(2092,623.906),(2093,597.787),(2094,572.25),(2095,547.351),(2096,523.135),(2097,499.642),(2098,476.902),(2099,454.936),(2100,433.76))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            1378.15,
            1422.43,
            1466.37,
            1509.97,
            1553.27,
            1596.27,
            1639,
            1681.45,
            1723.6,
            1765.43,
            1806.88,
            1847.87,
            1888.31,
            1928.08,
            1967.04,
            2005.02,
            2041.85,
            2077.35,
            2111.34,
            2143.61,
            2174.01,
            2202.36,
            2228.55,
            2252.45,
            2274,
            2293.18,
            2310,
            2324.5,
            2336.78,
            2346.97,
            2355.23,
            2360.56,
            2358.93,
            2349.91,
            2333.02,
            2308.36,
            2276.56,
            2238.66,
            2196.02,
            2150.19,
            2102.72,
            2055.42,
            2009.48,
            1965.96,
            1925.6,
            1888.94,
            1856.22,
            1827.53,
            1802.76,
            1781.69,
            1764.05,
            1748.05,
            1733.15,
            1718.83,
            1704.69,
            1690.47,
            1676.02,
            1661.3,
            1646.32,
            1631.17,
            1615.96,
            1598.98,
            1581.36,
            1563.41,
            1545.42,
            1521.06,
            1491.54,
            1462.02,
            1433.79,
            1407.58,
            1383.71,
            1362.23,
            1342.98,
            1325.69,
            1310.03,
            1295.68,
            1282.28,
            1269.52,
            1257.12,
            1244.82,
            1232.39,
            1219.62,
            1206.36,
            1192.45,
            1177.78,
            1162.23,
            1145.74,
            1128.25,
            1109.71,
            1090.12,
            1069.47,
            1047.78,
            1025.09,
            1001.45,
            976.929,
            951.611,
            925.587,
            898.96,
            871.837,
            844.332,
            816.56,
            788.637,
            760.675,
            732.784,
            705.067,
            677.624,
            650.543,
            623.906,
            597.787,
            572.25,
            547.351,
            523.135,
            499.642,
            476.902,
            454.936,
            433.76,
        ],
    )


def tnes_de_castro_phd__scen_iii(x):
    """
    Real Name: "TNES de Castro PhD - Scen III"
    Original Eqn: ( [(0,0)-(10,10)],(1985,7173.13),(1986,7368.39),(1987,7560.95),(1988,7750.95),(1989,7938.54),(1990,8123.85),(1991,8306.94),(1992,8487.87),(1993,8666.6),(1994,8843.01),(1995,9016.91),(1996,9188),(1997,9355.9),(1998,9520.11),(1999,9680.06),(2000,9835.12),(2001,9984.57),(2002,10127.7),(2003,10263.7),(2004,10391.9),(2005,10511.6),(2006,10622.1),(2007,10723.1),(2008,10814.1),(2009,10894.8),(2010,10965.4),(2011,11025.8),(2012,11075),(2013,11109.9),(2014,11131.5),(2015,11139.1),(2016,11127.4),(2017,11079.5),(2018,10993.9),(2019,10869.3),(2020,10707.1),(2021,10511.3),(2022,10287.5),(2023,10042.6),(2024,9783.87),(2025,9518.5),(2026,9252.88),(2027,8992.4),(2028,8741.21),(2029,8502.22),(2030,8277.14),(2031,8066.69),(2032,7870.72),(2033,7688.5),(2034,7518.87),(2035,7360.42),(2036,7209.45),(2037,7064.52),(2038,6924.25),(2039,6787.58),(2040,6653.67),(2041,6521.96),(2042,6392.02),(2043,6263.61),(2044,6136.56),(2045,6010.8),(2046,5886.31),(2047,5763.1),(2048,5641.19),(2049,5520.62),(2050,5379.15),(2051,5222.66),(2052,5064.42),(2053,4907.35),(2054,4753.31),(2055,4603.4),(2056,4458.15),(2057,4317.76),(2058,4182.18),(2059,4051.27),(2060,3924.82),(2061,3802.6),(2062,3684.43),(2063,3570.15),(2064,3459.62),(2065,3352.78),(2066,3249.57),(2067,3149.98),(2068,3054.03),(2069,2961.73),(2070,2873.14),(2071,2788.3),(2072,2707.25),(2073,2630.04),(2074,2556.68),(2075,2487.21),(2076,2421.6),(2077,2359.84),(2078,2301.9),(2079,2247.7),(2080,2197.16),(2081,2150.2),(2082,2106.69),(2083,2066.5),(2084,2029.49),(2085,1995.52),(2086,1964.42),(2087,1936.03),(2088,1910.19),(2089,1886.73),(2090,1865.5),(2091,1846.32),(2092,1829.04),(2093,1813.51),(2094,1799.59),(2095,1787.14),(2096,1776.03),(2097,1766.14),(2098,1757.35),(2099,1749.56),(2100,1742.67))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Total net energy supply scenario III.
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            7173.13,
            7368.39,
            7560.95,
            7750.95,
            7938.54,
            8123.85,
            8306.94,
            8487.87,
            8666.6,
            8843.01,
            9016.91,
            9188,
            9355.9,
            9520.11,
            9680.06,
            9835.12,
            9984.57,
            10127.7,
            10263.7,
            10391.9,
            10511.6,
            10622.1,
            10723.1,
            10814.1,
            10894.8,
            10965.4,
            11025.8,
            11075,
            11109.9,
            11131.5,
            11139.1,
            11127.4,
            11079.5,
            10993.9,
            10869.3,
            10707.1,
            10511.3,
            10287.5,
            10042.6,
            9783.87,
            9518.5,
            9252.88,
            8992.4,
            8741.21,
            8502.22,
            8277.14,
            8066.69,
            7870.72,
            7688.5,
            7518.87,
            7360.42,
            7209.45,
            7064.52,
            6924.25,
            6787.58,
            6653.67,
            6521.96,
            6392.02,
            6263.61,
            6136.56,
            6010.8,
            5886.31,
            5763.1,
            5641.19,
            5520.62,
            5379.15,
            5222.66,
            5064.42,
            4907.35,
            4753.31,
            4603.4,
            4458.15,
            4317.76,
            4182.18,
            4051.27,
            3924.82,
            3802.6,
            3684.43,
            3570.15,
            3459.62,
            3352.78,
            3249.57,
            3149.98,
            3054.03,
            2961.73,
            2873.14,
            2788.3,
            2707.25,
            2630.04,
            2556.68,
            2487.21,
            2421.6,
            2359.84,
            2301.9,
            2247.7,
            2197.16,
            2150.2,
            2106.69,
            2066.5,
            2029.49,
            1995.52,
            1964.42,
            1936.03,
            1910.19,
            1886.73,
            1865.5,
            1846.32,
            1829.04,
            1813.51,
            1799.59,
            1787.14,
            1776.03,
            1766.14,
            1757.35,
            1749.56,
            1742.67,
        ],
    )


def primary_coal_extraction_de_castro_phd__scen_madcoal(x):
    """
    Real Name: "Primary coal extraction de Castro PhD - Scen 'madcoal'"
    Original Eqn: ( [(0,0)-(10,10)],(1985,2058.92),(1986,2092.27),(1987,2125.72),(1988,2159.47),(1989,2193.76),(1990,2228.81),(1991,2264.86),(1992,2302.13),(1993,2340.84),(1994,2381.18),(1995,2423.34),(1996,2467.47),(1997,2513.71),(1998,2562.15),(1999,2612.87),(2000,2665.92),(2001,2721.31),(2002,2779.03),(2003,2839.06),(2004,2901.33),(2005,2965.74),(2006,3032.57),(2007,3101.67),(2008,3172.97),(2009,3246.4),(2010,3321.9),(2011,3399.43),(2012,3478.96),(2013,3560.51),(2014,3644.12),(2015,3729.86),(2016,3816.11),(2017,3897.75),(2018,3974.81),(2019,4046.62),(2020,4112.97),(2021,4174.06),(2022,4230.44),(2023,4282.94),(2024,4332.57),(2025,4380.4),(2026,4427.69),(2027,4475.38),(2028,4524.25),(2029,4574.94),(2030,4627.89),(2031,4683.41),(2032,4741.63),(2033,4802.57),(2034,4866.15),(2035,4932.23),(2036,4997.04),(2037,5059.9),(2038,5120.05),(2039,5176.96),(2040,5230.21),(2041,5279.47),(2042,5324.46),(2043,5364.9),(2044,5400.52),(2045,5431.05),(2046,5456.18),(2047,5475.61),(2048,5489.04),(2049,5496.15),(2050,5485.53),(2051,5462.41),(2052,5433),(2053,5397.99),(2054,5357.58),(2055,5311.76),(2056,5260.45),(2057,5203.57),(2058,5141.1),(2059,5073.11),(2060,4999.72),(2061,4921.11),(2062,4837.56),(2063,4749.39),(2064,4656.95),(2065,4560.64),(2066,4460.9),(2067,4358.16),(2068,4252.9),(2069,4145.55),(2070,4036.59),(2071,3926.47),(2072,3815.6),(2073,3704.47),(2074,3595.32),(2075,3489.22),(2076,3386.16),(2077,3286.01),(2078,3188.63),(2079,3093.87),(2080,3001.58),(2081,2911.63),(2082,2823.91),(2083,2738.31),(2084,2654.74),(2085,2573.11),(2086,2493.35),(2087,2415.41),(2088,2339.22),(2089,2264.73),(2090,2191.92),(2091,2120.74),(2092,2051.16),(2093,1983.17),(2094,1916.73),(2095,1851.84),(2096,1788.49),(2097,1726.66),(2098,1666.35),(2099,1607.54),(2100,1550.24))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    Primary energy (Add "Energía perdida" to the net energy extraction in the
        original model).
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            2058.92,
            2092.27,
            2125.72,
            2159.47,
            2193.76,
            2228.81,
            2264.86,
            2302.13,
            2340.84,
            2381.18,
            2423.34,
            2467.47,
            2513.71,
            2562.15,
            2612.87,
            2665.92,
            2721.31,
            2779.03,
            2839.06,
            2901.33,
            2965.74,
            3032.57,
            3101.67,
            3172.97,
            3246.4,
            3321.9,
            3399.43,
            3478.96,
            3560.51,
            3644.12,
            3729.86,
            3816.11,
            3897.75,
            3974.81,
            4046.62,
            4112.97,
            4174.06,
            4230.44,
            4282.94,
            4332.57,
            4380.4,
            4427.69,
            4475.38,
            4524.25,
            4574.94,
            4627.89,
            4683.41,
            4741.63,
            4802.57,
            4866.15,
            4932.23,
            4997.04,
            5059.9,
            5120.05,
            5176.96,
            5230.21,
            5279.47,
            5324.46,
            5364.9,
            5400.52,
            5431.05,
            5456.18,
            5475.61,
            5489.04,
            5496.15,
            5485.53,
            5462.41,
            5433,
            5397.99,
            5357.58,
            5311.76,
            5260.45,
            5203.57,
            5141.1,
            5073.11,
            4999.72,
            4921.11,
            4837.56,
            4749.39,
            4656.95,
            4560.64,
            4460.9,
            4358.16,
            4252.9,
            4145.55,
            4036.59,
            3926.47,
            3815.6,
            3704.47,
            3595.32,
            3489.22,
            3386.16,
            3286.01,
            3188.63,
            3093.87,
            3001.58,
            2911.63,
            2823.91,
            2738.31,
            2654.74,
            2573.11,
            2493.35,
            2415.41,
            2339.22,
            2264.73,
            2191.92,
            2120.74,
            2051.16,
            1983.17,
            1916.73,
            1851.84,
            1788.49,
            1726.66,
            1666.35,
            1607.54,
            1550.24,
        ],
    )


def tpes_de_castro_phd__scen_ii(x):
    """
    Real Name: "TPES de Castro PhD - Scen II"
    Original Eqn: ( [(0,0)-(10,10)],(1985,7749.13),(1986,7949.4),(1987,8160.47),(1988,8369.05),(1989,8575.33),(1990,8779.44),(1991,8981.51),(1992,9181.61),(1993,9379.72),(1994,9575.75),(1995,9769.52),(1996,9960.74),(1997,10149),(1998,10333.8),(1999,10514.5),(2000,10690.6),(2001,10861.1),(2002,11025.4),(2003,11182.6),(2004,11331.9),(2005,11472.6),(2006,11613.1),(2007,11744),(2008,11868.2),(2009,11985.7),(2010,12096.8),(2011,12202),(2012,12302.1),(2013,12398),(2014,12490.6),(2015,12581.3),(2016,12667.2),(2017,12730),(2018,12767.9),(2019,12779.1),(2020,12764.7),(2021,12728.4),(2022,12676),(2023,12615),(2024,12553.4),(2025,12499.7),(2026,12465.2),(2027,12453.3),(2028,12470.3),(2029,12519.7),(2030,12603.9),(2031,12723.6),(2032,12878.5),(2033,13067.2),(2034,13287.8),(2035,13538.2),(2036,13805),(2037,14082.5),(2038,14367),(2039,14656.3),(2040,14949),(2041,15244.7),(2042,15543.8),(2043,15846.7),(2044,16154.3),(2045,16467.1),(2046,16785.7),(2047,17110),(2048,17439.8),(2049,17774.5),(2050,18113.2),(2051,18354.1),(2052,18638.3),(2053,18929.8),(2054,19227.6),(2055,19529.3),(2056,19832.1),(2057,20132.6),(2058,20427.7),(2059,20714.2),(2060,20989.2),(2061,21250.3),(2062,21494.8),(2063,21720.8),(2064,21926.3),(2065,22109.7),(2066,22269.4),(2067,22404.4),(2068,22513.5),(2069,22596.2),(2070,22651.7),(2071,22679.9),(2072,22680.6),(2073,22664.5),(2074,22677.2),(2075,22706.2),(2076,22750.8),(2077,22809.7),(2078,22881.7),(2079,22965.5),(2080,23059.8),(2081,23163.4),(2082,23275.1),(2083,23393.7),(2084,23518),(2085,23647),(2086,23779.6),(2087,23914.5),(2088,24050.7),(2089,24187.2),(2090,24322.8),(2091,24456.4),(2092,24587),(2093,24713.6),(2094,24835.1),(2095,24950.6),(2096,25059.1),(2097,25159.7),(2098,25251.6),(2099,25333.9),(2100,25405.8))
    Units: MToe/Year
    Limits: (None, None)
    Type: lookup
    Subs: None

    TPES. (Add "Energía perdida" to the net energy extraction in the original
        model).
    """
    return lookup(
        x,
        [
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2025,
            2026,
            2027,
            2028,
            2029,
            2030,
            2031,
            2032,
            2033,
            2034,
            2035,
            2036,
            2037,
            2038,
            2039,
            2040,
            2041,
            2042,
            2043,
            2044,
            2045,
            2046,
            2047,
            2048,
            2049,
            2050,
            2051,
            2052,
            2053,
            2054,
            2055,
            2056,
            2057,
            2058,
            2059,
            2060,
            2061,
            2062,
            2063,
            2064,
            2065,
            2066,
            2067,
            2068,
            2069,
            2070,
            2071,
            2072,
            2073,
            2074,
            2075,
            2076,
            2077,
            2078,
            2079,
            2080,
            2081,
            2082,
            2083,
            2084,
            2085,
            2086,
            2087,
            2088,
            2089,
            2090,
            2091,
            2092,
            2093,
            2094,
            2095,
            2096,
            2097,
            2098,
            2099,
            2100,
        ],
        [
            7749.13,
            7949.4,
            8160.47,
            8369.05,
            8575.33,
            8779.44,
            8981.51,
            9181.61,
            9379.72,
            9575.75,
            9769.52,
            9960.74,
            10149,
            10333.8,
            10514.5,
            10690.6,
            10861.1,
            11025.4,
            11182.6,
            11331.9,
            11472.6,
            11613.1,
            11744,
            11868.2,
            11985.7,
            12096.8,
            12202,
            12302.1,
            12398,
            12490.6,
            12581.3,
            12667.2,
            12730,
            12767.9,
            12779.1,
            12764.7,
            12728.4,
            12676,
            12615,
            12553.4,
            12499.7,
            12465.2,
            12453.3,
            12470.3,
            12519.7,
            12603.9,
            12723.6,
            12878.5,
            13067.2,
            13287.8,
            13538.2,
            13805,
            14082.5,
            14367,
            14656.3,
            14949,
            15244.7,
            15543.8,
            15846.7,
            16154.3,
            16467.1,
            16785.7,
            17110,
            17439.8,
            17774.5,
            18113.2,
            18354.1,
            18638.3,
            18929.8,
            19227.6,
            19529.3,
            19832.1,
            20132.6,
            20427.7,
            20714.2,
            20989.2,
            21250.3,
            21494.8,
            21720.8,
            21926.3,
            22109.7,
            22269.4,
            22404.4,
            22513.5,
            22596.2,
            22651.7,
            22679.9,
            22680.6,
            22664.5,
            22677.2,
            22706.2,
            22750.8,
            22809.7,
            22881.7,
            22965.5,
            23059.8,
            23163.4,
            23275.1,
            23393.7,
            23518,
            23647,
            23779.6,
            23914.5,
            24050.7,
            24187.2,
            24322.8,
            24456.4,
            24587,
            24713.6,
            24835.1,
            24950.6,
            25059.1,
            25159.7,
            25251.6,
            25333.9,
            25405.8,
        ],
    )


@cache.run
@to_float
def p_nuclear_scen_1():
    """
    Real Name: P nuclear scen 1
    Original Eqn: 0
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Si P_nuclear_1 = 0 --> escenario 1.
        P_nuclear_1 = 1 --> permito los escenarios 2 y 3 (PLEX)
    """
    return 0


@cache.run
@to_float
def p_nuclear_23():
    """
    Real Name: "P nuclear 2-3"
    Original Eqn: 1
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Si P_nuclear = 0 --> escenario 2.
        P_nuclear = 1 --> escenario 3 (PLEX)
    """
    return 1


@cache.run
@to_float
def gco2e_per_gtco2e_4():
    """
    Real Name: gCO2e per GTCO2e 4
    Original Eqn: 1/1000
    Units: GTCO2e/gCO2e
    Limits: (None, None)
    Type: constant
    Subs: None

    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@cache.run
@to_float
def gco2e_per_gtco2e_3():
    """
    Real Name: gCO2e per GTCO2e 3
    Original Eqn: 1/1000
    Units: GTCO2e/gCO2e
    Limits: (None, None)
    Type: constant
    Subs: None

    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@cache.run
@to_float
def gco2e_per_gtco2e_0():
    """
    Real Name: gCO2e per GTCO2e 0
    Original Eqn: 1/1000
    Units: GTCO2e/gCO2e
    Limits: (None, None)
    Type: constant
    Subs: None

    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@cache.run
@to_float
def gco2e_per_gtco2e_1():
    """
    Real Name: gCO2e per GTCO2e 1
    Original Eqn: 1/1000
    Units: GTCO2e/gCO2e
    Limits: (None, None)
    Type: constant
    Subs: None

    /* Comprobar esta relación de unidades */
    """
    return 1 / 1000


@cache.run
@to_float
def twh_per_gco2e_0():
    """
    Real Name: TWh per gCO2e 0
    Original Eqn: 0.02
    Units: gCO2e/TWh
    Limits: (None, None)
    Type: constant
    Subs: None

    17-22 gCO2e/KWh [Arvesen 2011] /*Comprobar esta relación*/
    """
    return 0.02


@cache.step
@to_float
def other_liquids_required_ej():
    """
    Real Name: Other liquids required EJ
    Original Eqn: Energy distr losses FF EJ[liquids]+Transformation FF losses EJ[liquids]+"Non-energy use demand by final fuel EJ"[liquids]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None


    """
    return (
        energy_distr_losses_ff_ej().loc["liquids"].reset_coords(drop=True)
        + transformation_ff_losses_ej().loc["liquids"].reset_coords(drop=True)
        + nonenergy_use_demand_by_final_fuel_ej().loc["liquids"].reset_coords(drop=True)
    )


@cache.step
@to_float
def agricultural_land():
    """
    Real Name: Agricultural land
    Original Eqn: INTEG ( Deforestation rate+Forest loss to sustain agriculture+increase agricultural land-compet land for biofuels rate-urban land rate, initial agricultural area)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Agricultural land includes both categories from FAOSTAT: "Arable land and
        Permanent crops" and "Permanent pastures".
    """
    return _integ_agricultural_land()


@cache.step
@to_float
def compet_agricultural_land_for_biofuels():
    """
    Real Name: Compet agricultural land for biofuels
    Original Eqn: INTEG ( compet land for biofuels rate, initial value land compet biofuels 2gen Mha)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Biofuels plantation on land subject to competition with other agricultural
        uses.
    """
    return _integ_compet_agricultural_land_for_biofuels()


@cache.step
@to_float
def marginal_land_for_biofuels():
    """
    Real Name: Marginal land for biofuels
    Original Eqn: INTEG ( Marginal land for biofuels rate, initial marginal land occupied by biofuels)
    Units: MHa
    Limits: (None, None)
    Type: component
    Subs: None

    Marginal land dedicated to biofuels
    """
    return _integ_marginal_land_for_biofuels()


@cache.step
@subs(["sectors"], _subscript_dict)
def real_gfcf_by_sector():
    """
    Real Name: Real GFCF by sector
    Original Eqn: Real final demand by sector EU[sectors]*(1-Government expenditure and changes in inventories shares[sectors])*"share GFCF vs GFCF+HD+Exp" [sectors]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Real Gross Fixed Capital Formation after energy feedback
    """
    return (
        real_final_demand_by_sector_eu()
        * (1 - government_expenditure_and_changes_in_inventories_shares())
        * share_gfcf_vs_gfcfhdexp()
    )


@cache.step
@to_float
def urr_coal():
    """
    Real Name: URR coal
    Original Eqn: IF THEN ELSE("unlimited NRE?"=1,URR coal unlimited, IF THEN ELSE("unlimited coal?"=1,URR coal unlimited, IF THEN ELSE(choose extraction coal curve=1, URR coal User defined EJ, IF THEN ELSE(choose extraction coal curve=2, URR coal Low Mohr15, IF THEN ELSE(choose extraction coal curve=3, URR coal BG Mohr15, IF THEN ELSE(choose extraction coal curve=4, URR coal High15, URR coal User defined EJ))))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Ultimately Recoverable Resources (URR) associated to the selected
        depletion curve.
    """
    return if_then_else(
        unlimited_nre() == 1,
        lambda: urr_coal_unlimited(),
        lambda: if_then_else(
            unlimited_coal() == 1,
            lambda: urr_coal_unlimited(),
            lambda: if_then_else(
                choose_extraction_coal_curve() == 1,
                lambda: urr_coal_user_defined_ej(),
                lambda: if_then_else(
                    choose_extraction_coal_curve() == 2,
                    lambda: urr_coal_low_mohr15(),
                    lambda: if_then_else(
                        choose_extraction_coal_curve() == 3,
                        lambda: urr_coal_bg_mohr15(),
                        lambda: if_then_else(
                            choose_extraction_coal_curve() == 4,
                            lambda: urr_coal_high15(),
                            lambda: urr_coal_user_defined_ej(),
                        ),
                    ),
                ),
            ),
        ),
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def real_demand_by_sector_delayed_eu():
    """
    Real Name: Real demand by sector delayed EU
    Original Eqn: DELAY FIXED ( Real final demand by sector EU[sectors], 1, 10)
    Units: $
    Limits: (None, None)
    Type: component
    Subs: ['sectors']


    """
    return _delayfixed_real_demand_by_sector_delayed_eu()


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def real_final_energy_by_sector_and_fuel_eu():
    """
    Real Name: Real final energy by sector and fuel EU
    Original Eqn: Required final energy by sector and fuel EU[final sources,sectors]*Energy scarcity feedback shortage coeff EU[final sources]*CC impacts feedback shortage coeff
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Real final energy to be used by economic sectors and fuel after accounting
        for energy scarcity and CC impacts.
    """
    return (
        required_final_energy_by_sector_and_fuel_eu()
        * energy_scarcity_feedback_shortage_coeff_eu()
        * cc_impacts_feedback_shortage_coeff()
    )


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def required_final_energy_by_sector_and_fuel_eu():
    """
    Real Name: Required final energy by sector and fuel EU
    Original Eqn: Total output required by sector[sectors]*Final energy intensity by sector and fuel EU[final sources ,sectors]/1e+06
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Required final energy by sector and fuel (35 WIOD sectors & 5 final
        sources).
    """
    return (
        total_output_required_by_sector()
        * final_energy_intensity_by_sector_and_fuel_eu()
        / 1e06
    )


@cache.step
@subs(["final sources", "sectors"], _subscript_dict)
def real_total_output_by_fuel_and_sector():
    """
    Real Name: Real total output by fuel and sector
    Original Eqn: XIDZ(Real final energy by sector and fuel EU[final sources,sectors], Final energy intensity by sector and fuel EU[final sources,sectors], Total output required by sector[sectors]/1e+06)*1e+06
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['final sources', 'sectors']

    Real total output by sector (35 WIOD sectors). US$1995
    """
    return (
        xidz(
            real_final_energy_by_sector_and_fuel_eu(),
            final_energy_intensity_by_sector_and_fuel_eu(),
            total_output_required_by_sector() / 1e06,
        )
        * 1e06
    )


@cache.step
@to_float
def fe_demand_elec_consum_twh():
    """
    Real Name: FE demand Elec consum TWh
    Original Eqn: Required FED by fuel[electricity]/EJ per TWh
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Electricity consumption (TWh)
    """
    return (
        required_fed_by_fuel().loc["electricity"].reset_coords(drop=True) / ej_per_twh()
    )


@cache.step
@to_float
def fed_heatcom_ej():
    """
    Real Name: "FED Heat-com EJ"
    Original Eqn: Required FED by fuel before heat correction[heat]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand heat commercial.
    """
    return (
        required_fed_by_fuel_before_heat_correction()
        .loc["heat"]
        .reset_coords(drop=True)
    )


@cache.run
@to_float
def initial_marginal_land_occupied_by_biofuels():
    """
    Real Name: initial marginal land occupied by biofuels
    Original Eqn: 0
    Units: MHa
    Limits: (None, None)
    Type: constant
    Subs: None

    Initial value of marginal land occupied by biofuels.
    """
    return 0


@cache.step
@to_float
def ped_oil_for_heat_plants_ej():
    """
    Real Name: PED oil for Heat plants EJ
    Original Eqn: FED Heat liquids plants EJ/efficiency liquids for heat plants
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of oil (EJ) for heat consumption (including
        generation losses).
    """
    return fed_heat_liquids_plants_ej() / efficiency_liquids_for_heat_plants()


@cache.step
@to_float
def total_fe_elec_demand_twh():
    """
    Real Name: Total FE Elec demand TWh
    Original Eqn: (FE demand Elec consum TWh)*(1+"share transm&distr elec losses" )
    Units: TWh/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Total final energy electricity demand (TWh). It includes new electric uses
        (e.g. EV & HEV) and electrical transmission and distribution losses.
    """
    return (fe_demand_elec_consum_twh()) * (1 + share_transmdistr_elec_losses())


@cache.step
@subs(["sectors"], _subscript_dict)
def real_domestic_demand_by_sector_eu():
    """
    Real Name: Real domestic demand by sector EU
    Original Eqn: MAX(0,IA Matrix [sectors,Agriculture Hunting Forestry and Fishing]*Real total output by sector EU[Agriculture Hunting Forestry and Fishing ] + IA Matrix [sectors, Mining and Quarrying]*Real total output by sector EU[Mining and Quarrying]+ IA Matrix [ sectors , Food Beverages and Tobacco]*Real total output by sector EU[Food Beverages and Tobacco]+IA Matrix [sectors, Textiles and Textile Products ]*Real total output by sector EU[Textiles and Textile Products]+ IA Matrix [sectors,Leather Leather and Footwear ]*Real total output by sector EU[Leather Leather and Footwear] + IA Matrix [sectors, Wood and Products of Woood and Cork]*Real total output by sector EU[Wood and Products of Woood and Cork ] + IA Matrix [sectors, Pulp Paper Printing and Publishing]*Real total output by sector EU[Pulp Paper Printing and Publishing ]+ IA Matrix [sectors, Coke Refined Petroleum and Nuclear Fuel]*Real total output by sector EU[Coke Refined Petroleum and Nuclear Fuel ]+ IA Matrix [sectors, Chemicals and Chemical products]*Real total output by sector EU[Chemicals and Chemical products ]+ IA Matrix [sectors, Rubber and Plastics]*Real total output by sector EU[Rubber and Plastics]+ IA Matrix [sectors , Other Non Metalic Mineral]*Real total output by sector EU[Other Non Metalic Mineral]+ IA Matrix [sectors, Basic Metals and Fabricated Metal]*Real total output by sector EU[Basic Metals and Fabricated Metal]+ IA Matrix [sectors, Machinery Nec]*Real total output by sector EU[Machinery Nec]+ IA Matrix [sectors, Electrical and Optical Equipment ]*Real total output by sector EU[Electrical and Optical Equipment]+ IA Matrix [sectors, Transport Equipment]*Real total output by sector EU [Transport Equipment]+ IA Matrix [sectors, Manufacturing Nec Recycling]*Real total output by sector EU[ Manufacturing Nec Recycling] + IA Matrix [sectors, Electricity Gas and Water Supply]*Real total output by sector EU[ Electricity Gas and Water Supply] + IA Matrix [sectors, Construction]*Real total output by sector EU[Construction ]+ IA Matrix [sectors, Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel ]*Real total output by sector EU[Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel ]+ IA Matrix [sectors, Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles]*Real total output by sector EU[ Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles] + IA Matrix [sectors, Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]*Real total output by sector EU [Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]+ IA Matrix[sectors, Hotels and Restaurants ]*Real total output by sector EU[Hotels and Restaurants]+ IA Matrix [sectors, Inland Transport]*Real total output by sector EU [Inland Transport]+ IA Matrix [sectors, Water Transport]*Real total output by sector EU[Water Transport ]+ IA Matrix [sectors, Air Transport]*Real total output by sector EU[Air Transport]+ IA Matrix [sectors, Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies ]*Real total output by sector EU[Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies ]+ IA Matrix [sectors,Post and Telecommunications]*Real total output by sector EU[Post and Telecommunications]+ IA Matrix [sectors , Financial Intermedation]*Real total output by sector EU[Financial Intermedation]+ IA Matrix [sectors, Real Estate Activities ]*Real total output by sector EU[Real Estate Activities]+IA Matrix [sectors, Renting od MEq and Other Business Activities ]*Real total output by sector EU[Renting od MEq and Other Business Activities]+ IA Matrix[sectors, Public Admin and Defence Compulsory Social Security ]*Real total output by sector EU[Public Admin and Defence Compulsory Social Security]+ IA Matrix [sectors, Education ] *Real total output by sector EU[Education]+ IA Matrix [sectors, Health and Social Work]*Real total output by sector EU [Health and Social Work] + IA Matrix [sectors, Other Community Social and Persona Services]*Real total output by sector EU [Other Community Social and Persona Services] + IA Matrix [sectors, Private Households with Employed Persons] * Real total output by sector EU[Private Households with Employed Persons])
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Total real domestic (without exports) final demand of EU28 products (after
        energy-economy feedback).
    """
    return np.maximum(
        0,
        rearrange(
            ia_matrix()
            .loc[:, "Agriculture Hunting Forestry and Fishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Mining and Quarrying"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Mining and Quarrying"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Food Beverages and Tobacco"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Textiles and Textile Products"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Textiles and Textile Products"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Leather Leather and Footwear"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Wood and Products of Woood and Cork"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Pulp Paper Printing and Publishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Chemicals and Chemical products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Rubber and Plastics"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Rubber and Plastics"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Other Non Metalic Mineral"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Basic Metals and Fabricated Metal"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Machinery Nec"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu().loc["Machinery Nec"].reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Electrical and Optical Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Transport Equipment"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Transport Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Manufacturing Nec Recycling"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Electricity Gas and Water Supply"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Construction"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu().loc["Construction"].reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[
                :,
                "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc[
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[
                :,
                "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc[
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[
                :,
                "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc[
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Hotels and Restaurants"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Hotels and Restaurants"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Inland Transport"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Inland Transport"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Water Transport"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Water Transport"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Air Transport"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu().loc["Air Transport"].reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[
                :,
                "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc[
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Post and Telecommunications"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Post and Telecommunications"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Financial Intermedation"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Financial Intermedation"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Real Estate Activities"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Real Estate Activities"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Renting od MEq and Other Business Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Public Admin and Defence Compulsory Social Security"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Education"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu().loc["Education"].reset_coords(drop=True)
        + rearrange(
            ia_matrix().loc[:, "Health and Social Work"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Health and Social Work"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Other Community Social and Persona Services"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + rearrange(
            ia_matrix()
            .loc[:, "Private Households with Employed Persons"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * real_total_output_by_sector_eu()
        .loc["Private Households with Employed Persons"]
        .reset_coords(drop=True),
    )


@cache.step
@subs(["sectors"], _subscript_dict)
def total_domestic_output_required_by_sector():
    """
    Real Name: Total domestic output required by sector
    Original Eqn: Leontief Matrix domestic [sectors,Agriculture Hunting Forestry and Fishing]*Domestic demand by sector[Agriculture Hunting Forestry and Fishing ]+ Leontief Matrix domestic [sectors, Mining and Quarrying]*Domestic demand by sector[Mining and Quarrying]+ Leontief Matrix domestic [ sectors , Food Beverages and Tobacco]*Domestic demand by sector[Food Beverages and Tobacco]+Leontief Matrix domestic [sectors, Textiles and Textile Products ]*Domestic demand by sector[Textiles and Textile Products]+ Leontief Matrix domestic[sectors, Leather Leather and Footwear]*Domestic demand by sector [Leather Leather and Footwear]+ Leontief Matrix domestic [sectors, Wood and Products of Woood and Cork]*Domestic demand by sector [Wood and Products of Woood and Cork]+ Leontief Matrix domestic [sectors, Pulp Paper Printing and Publishing]*Domestic demand by sector [Pulp Paper Printing and Publishing]+ Leontief Matrix domestic [sectors, Coke Refined Petroleum and Nuclear Fuel]*Domestic demand by sector [Coke Refined Petroleum and Nuclear Fuel]+ Leontief Matrix domestic [sectors, Chemicals and Chemical products]*Domestic demand by sector [Chemicals and Chemical products]+ Leontief Matrix domestic [sectors, Rubber and Plastics]*Domestic demand by sector[ Rubber and Plastics ] + Leontief Matrix domestic [sectors, Other Non Metalic Mineral]*Domestic demand by sector[Other Non Metalic Mineral]+ Leontief Matrix domestic [sectors, Basic Metals and Fabricated Metal]*Domestic demand by sector[Basic Metals and Fabricated Metal]+ Leontief Matrix domestic [sectors, Machinery Nec]*Domestic demand by sector[Machinery Nec]+ Leontief Matrix domestic[sectors, Electrical and Optical Equipment ]*Domestic demand by sector[Electrical and Optical Equipment]+ Leontief Matrix domestic[sectors, Transport Equipment]*Domestic demand by sector [Transport Equipment]+ Leontief Matrix domestic [sectors, Manufacturing Nec Recycling]*Domestic demand by sector[Manufacturing Nec Recycling ] + Leontief Matrix domestic [sectors, Electricity Gas and Water Supply]*Domestic demand by sector[Electricity Gas and Water Supply ] + Leontief Matrix domestic [sectors, Construction]*Domestic demand by sector[Construction]+ Leontief Matrix domestic [sectors, Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel ]*Domestic demand by sector[Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel]+ Leontief Matrix domestic [sectors, Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles]*Domestic demand by sector[Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles ]+ Leontief Matrix domestic [sectors, Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]*Domestic demand by sector [Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods]+ Leontief Matrix domestic[sectors, Hotels and Restaurants ]*Domestic demand by sector[Hotels and Restaurants]+ Leontief Matrix domestic [sectors, Inland Transport]*Domestic demand by sector[ Inland Transport]+ Leontief Matrix domestic [sectors, Water Transport]*Domestic demand by sector[Water Transport]+ Leontief Matrix domestic [sectors, Air Transport]*Domestic demand by sector[Air Transport]+ Leontief Matrix domestic[sectors, Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies ]*Domestic demand by sector[Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies]+ Leontief Matrix domestic [sectors,Post and Telecommunications]*Domestic demand by sector[Post and Telecommunications]+ Leontief Matrix domestic [sectors , Financial Intermedation]*Domestic demand by sector[Financial Intermedation]+ Leontief Matrix domestic[sectors, Real Estate Activities ]*Domestic demand by sector[Real Estate Activities]+Leontief Matrix domestic [sectors, Renting od MEq and Other Business Activities ]*Domestic demand by sector[Renting od MEq and Other Business Activities]+ Leontief Matrix domestic[sectors, Public Admin and Defence Compulsory Social Security ]*Domestic demand by sector[Public Admin and Defence Compulsory Social Security]+ Leontief Matrix domestic[sectors, Education ] *Domestic demand by sector[Education]+ Leontief Matrix domestic [sectors, Health and Social Work]*Domestic demand by sector[Health and Social Work ] + Leontief Matrix domestic [sectors, Other Community Social and Persona Services]*Domestic demand by sector[Other Community Social and Persona Services ]+ Leontief Matrix domestic [sectors, Private Households with Employed Persons]*Domestic demand by sector[Private Households with Employed Persons ]
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Required total EU28 output by sector (35 WIOD sectors). US$1995
    """
    return (
        rearrange(
            leontief_matrix_domestic()
            .loc[:, "Agriculture Hunting Forestry and Fishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Agriculture Hunting Forestry and Fishing"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Mining and Quarrying"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Mining and Quarrying"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Food Beverages and Tobacco"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Food Beverages and Tobacco"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Textiles and Textile Products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Textiles and Textile Products"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Leather Leather and Footwear"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Leather Leather and Footwear"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Wood and Products of Woood and Cork"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Wood and Products of Woood and Cork"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Pulp Paper Printing and Publishing"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Pulp Paper Printing and Publishing"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Coke Refined Petroleum and Nuclear Fuel"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Coke Refined Petroleum and Nuclear Fuel"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Chemicals and Chemical products"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Chemicals and Chemical products"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Rubber and Plastics"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Rubber and Plastics"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Other Non Metalic Mineral"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Other Non Metalic Mineral"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Basic Metals and Fabricated Metal"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Basic Metals and Fabricated Metal"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic().loc[:, "Machinery Nec"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Machinery Nec"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Electrical and Optical Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Electrical and Optical Equipment"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Transport Equipment"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Transport Equipment"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Manufacturing Nec Recycling"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Manufacturing Nec Recycling"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Electricity Gas and Water Supply"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Electricity Gas and Water Supply"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic().loc[:, "Construction"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Construction"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[
                :,
                "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc[
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[
                :,
                "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc[
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[
                :,
                "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc[
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Hotels and Restaurants"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Hotels and Restaurants"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Inland Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Inland Transport"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Water Transport"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Water Transport"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic().loc[:, "Air Transport"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Air Transport"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[
                :,
                "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            ]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc[
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Post and Telecommunications"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Post and Telecommunications"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Financial Intermedation"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Financial Intermedation"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Real Estate Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Real Estate Activities"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Renting od MEq and Other Business Activities"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Renting od MEq and Other Business Activities"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Public Admin and Defence Compulsory Social Security"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Public Admin and Defence Compulsory Social Security"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic().loc[:, "Education"].reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector().loc["Education"].reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Health and Social Work"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Health and Social Work"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Other Community Social and Persona Services"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Other Community Social and Persona Services"]
        .reset_coords(drop=True)
        + rearrange(
            leontief_matrix_domestic()
            .loc[:, "Private Households with Employed Persons"]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        )
        * domestic_demand_by_sector()
        .loc["Private Households with Employed Persons"]
        .reset_coords(drop=True)
    )


@cache.step
@to_float
def rurr_unconv_oil_ej():
    """
    Real Name: RURR unconv oil EJ
    Original Eqn: INTEG ( -extraction unconv oil EJ-Flow unconv oil left in ground, URR unconv oil-cumulated unconv oil extraction to 1995*"separate conv and unconv oil?")
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR unconventional oil.
    """
    return _integ_rurr_unconv_oil_ej()


@cache.step
@to_float
def share_liquids_for_final_energy():
    """
    Real Name: share liquids for final energy
    Original Eqn: ZIDZ( Required FED by liquids EJ , (PED liquids EJ-Other liquids required EJ) )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Share of final energy vs primary energy for liquids.
    """
    return zidz(
        required_fed_by_liquids_ej(), (ped_liquids_ej() - other_liquids_required_ej())
    )


@cache.step
@to_float
def ped_liquids_ej():
    """
    Real Name: PED liquids EJ
    Original Eqn: MAX(0,Required FED by liquids EJ+Other liquids required EJ+PE demand oil Elec plants EJ+PED oil for Heat plants EJ+PED oil for CHP plants EJ+"PED liquids Heat-nc")
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of total liquids.
    """
    return np.maximum(
        0,
        required_fed_by_liquids_ej()
        + other_liquids_required_ej()
        + pe_demand_oil_elec_plants_ej()
        + ped_oil_for_heat_plants_ej()
        + ped_oil_for_chp_plants_ej()
        + ped_liquids_heatnc(),
    )


@cache.step
@to_float
def fed_heat_liquids_plants_ej():
    """
    Real Name: FED Heat liquids plants EJ
    Original Eqn: "FED Heat-com plants fossil fuels EJ"*share liquids for heat plants
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of liquids to produce heat.
    """
    return fed_heatcom_plants_fossil_fuels_ej() * share_liquids_for_heat_plants()


@cache.run
@subs(["vehicleT"], _subscript_dict)
def hist_var_inlandt():
    """
    Real Name: hist var inlandT
    Original Eqn: 0
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: ['vehicleT']

    Historical growth of alternative percentages of transport vehicles. For
        inland transport vehicles the initial percentages of vehicles are
        neglictible in 2015.
    """
    return xr.DataArray(
        0, {dim: _subscript_dict[dim] for dim in ["vehicleT"]}, ["vehicleT"]
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def inland_transport_variation_intensity():
    """
    Real Name: inland transport variation intensity
    Original Eqn:
      var I inland Elec
      0
      var I inlandT liq
      0
      var I inlandT Gas
    Units: EJ/TS/yr
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Variation of the energy intensity of inland transport
    """
    return xrmerge(
        [
            rearrange(
                var_i_inland_elec(),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            xr.DataArray(0, {"final sources1": ["heat"]}, ["final sources1"]),
            rearrange(
                var_i_inlandt_liq(), ["final sources1"], {"final sources1": ["liquids"]}
            ),
            xr.DataArray(0, {"final sources1": ["solids"]}, ["final sources1"]),
            rearrange(
                var_i_inlandt_gas(), ["final sources1"], {"final sources1": ["gases"]}
            ),
        ]
    )


@cache.step
@to_float
def max_unconv_oil_growth_extraction():
    """
    Real Name: max unconv oil growth extraction
    Original Eqn: MAX(0, 1+(IF THEN ELSE(Selection constraint extraction unconv oil=1,(P constraint growth extraction unconv oil)*TIME STEP*scarcity conv oil stock,("User-defined extraction growth unconv oil"(Time)*TIME STEP)))*abundance unconv oil2 )
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    Constraint to maximum annual unconventional gas extraction (%). This
        constraint is affected by the relative scarcity of conventional vs
        unconventional resource (priority to conventional resource to cover the
        demand while the maximum extraction level of energy/time is not reached).
    """
    return np.maximum(
        0,
        1
        + (
            if_then_else(
                selection_constraint_extraction_unconv_oil() == 1,
                lambda: (p_constraint_growth_extraction_unconv_oil())
                * time_step()
                * scarcity_conv_oil_stock(),
                lambda: (
                    userdefined_extraction_growth_unconv_oil(time()) * time_step()
                ),
            )
        )
        * abundance_unconv_oil2(),
    )


@cache.step
@to_float
def fed_heatcom_nre_ej():
    """
    Real Name: "FED Heat-com NRE EJ"
    Original Eqn: MAX("FED Heat-com after priorities EJ"-"Total FE real supply RES for heat-com EJ",0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of non renewable energy to produce commercial Heat (final energy).
        We give priority to RES.
    """
    return np.maximum(
        fed_heatcom_after_priorities_ej() - total_fe_real_supply_res_for_heatcom_ej(), 0
    )


@cache.step
@subs(["final sources1"], _subscript_dict)
def real_fe_consumption_by_fuel():
    """
    Real Name: real FE consumption by fuel
    Original Eqn:
      Total FE Elec consumption EJ
      Total FE Heat consumption EJ
      real FE consumption liquids EJ
      real FE consumption solids EJ
      real FE consumption gases EJ
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: ['final sources1']

    Real final energy consumption by fuel after accounting for energy availability.        test2+0*Total FE Elec consumption EJ
    """
    return xrmerge(
        [
            rearrange(
                total_fe_elec_consumption_ej(),
                ["final sources1"],
                {"final sources1": ["electricity"]},
            ),
            rearrange(
                total_fe_heat_consumption_ej(),
                ["final sources1"],
                {"final sources1": ["heat"]},
            ),
            rearrange(
                real_fe_consumption_liquids_ej(),
                ["final sources1"],
                {"final sources1": ["liquids"]},
            ),
            rearrange(
                real_fe_consumption_solids_ej(),
                ["final sources1"],
                {"final sources1": ["solids"]},
            ),
            rearrange(
                real_fe_consumption_gases_ej(),
                ["final sources1"],
                {"final sources1": ["gases"]},
            ),
        ]
    )


@cache.step
@to_float
def required_fed_by_liquids_ej():
    """
    Real Name: Required FED by liquids EJ
    Original Eqn: Required FED by fuel[liquids]
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Required final energy demand by liquids.
    """
    return required_fed_by_fuel().loc["liquids"].reset_coords(drop=True)


@cache.step
@to_float
def extraction_unconv_oil_ej():
    """
    Real Name: extraction unconv oil EJ
    Original Eqn: MIN(IF THEN ELSE(RURR unconv oil EJ<0,0, IF THEN ELSE(Time>2012, IF THEN ELSE("separate conv and unconv oil?"=1, MIN(max extraction unconv oil, max unconv oil growth extraction EJ ),0), Historic unconv oil)),PED total oil EJ)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Annual extraction of unconventional oil.        MIN(IF THEN ELSE(RURR unconv oil EJ<0,0,        IF THEN ELSE(Time<=2013, Historic unconv oil,        IF THEN ELSE("separate conv and unconv oil?"=1, MIN(max extraction unconv oil, max
        unconv oil growth extraction EJ        ),0))),PED total oil EJ)
    """
    return np.minimum(
        if_then_else(
            rurr_unconv_oil_ej() < 0,
            lambda: 0,
            lambda: if_then_else(
                time() > 2012,
                lambda: if_then_else(
                    separate_conv_and_unconv_oil() == 1,
                    lambda: np.minimum(
                        max_extraction_unconv_oil(),
                        max_unconv_oil_growth_extraction_ej(),
                    ),
                    lambda: 0,
                ),
                lambda: historic_unconv_oil(),
            ),
        ),
        ped_total_oil_ej(),
    )


@cache.step
@to_float
def demand_conv_oil_ej():
    """
    Real Name: Demand conv oil EJ
    Original Eqn: MAX(PED total oil EJ-extraction unconv oil EJ, 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Demand of conventional oil. It is assumed that conventional oil covers the
        rest of the liquids demand after accounting for the contributions from
        other liquids and unconventional oil.
    """
    return np.maximum(ped_total_oil_ej() - extraction_unconv_oil_ej(), 0)


@cache.step
@to_float
def max_unconv_oil_growth_extraction_ej():
    """
    Real Name: max unconv oil growth extraction EJ
    Original Eqn: IF THEN ELSE(check liquids delayed 1yr<0, (1+"constrain liquids exogenous growth? delayed 1yr")*extraction unconv oil delayed,extraction unconv oil delayed*max unconv oil growth extraction)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Constrained unconventional oil extraction growth (EJ/Year), i.e. maximum
        annual growth compatible with the constraint selected in the scenario.
    """
    return if_then_else(
        check_liquids_delayed_1yr() < 0,
        lambda: (1 + constrain_liquids_exogenous_growth_delayed_1yr())
        * extraction_unconv_oil_delayed(),
        lambda: extraction_unconv_oil_delayed() * max_unconv_oil_growth_extraction(),
    )


@cache.step
@to_float
def total_fed_heatcom_ej():
    """
    Real Name: "Total FED Heat-com EJ"
    Original Eqn: "FED Heat-com EJ"*(1+Share heat distribution losses)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Total commercial heat demand including distribution losses.
    """
    return fed_heatcom_ej() * (1 + share_heat_distribution_losses())


@cache.step
@to_float
def urr_unconv_oil():
    """
    Real Name: URR unconv oil
    Original Eqn: IF THEN ELSE("separate conv and unconv oil?"=1, IF THEN ELSE(choose extraction curve unconv oil=1, URR unconv oil BG Mohr15, IF THEN ELSE(choose extraction curve unconv oil=2, URR unconv oil Low Mohr15, IF THEN ELSE(choose extraction curve unconv oil=3, URR unconv oil High Mohr15, URR unconv oil User defined))), 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    URR unconventional oil.
    """
    return if_then_else(
        separate_conv_and_unconv_oil() == 1,
        lambda: if_then_else(
            choose_extraction_curve_unconv_oil() == 1,
            lambda: urr_unconv_oil_bg_mohr15(),
            lambda: if_then_else(
                choose_extraction_curve_unconv_oil() == 2,
                lambda: urr_unconv_oil_low_mohr15(),
                lambda: if_then_else(
                    choose_extraction_curve_unconv_oil() == 3,
                    lambda: urr_unconv_oil_high_mohr15(),
                    lambda: urr_unconv_oil_user_defined(),
                ),
            ),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def max_extraction_unconv_gas():
    """
    Real Name: max extraction unconv gas
    Original Eqn: IF THEN ELSE(choose extraction curve unconv gas=1, table max extraction unconv gas BG Mohr15(Tot RURR unconv gas), IF THEN ELSE(choose extraction curve unconv gas=2, table max extraction unconv gas Low Mohr15(Tot RURR unconv gas), IF THEN ELSE(choose extraction curve unconv gas=3, table max extraction unconv gas High Mohr15 (Tot RURR unconv gas), table max extraction unconv gas User defined(Tot RURR unconv gas))))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_curve_unconv_gas() == 1,
        lambda: table_max_extraction_unconv_gas_bg_mohr15(tot_rurr_unconv_gas()),
        lambda: if_then_else(
            choose_extraction_curve_unconv_gas() == 2,
            lambda: table_max_extraction_unconv_gas_low_mohr15(tot_rurr_unconv_gas()),
            lambda: if_then_else(
                choose_extraction_curve_unconv_gas() == 3,
                lambda: table_max_extraction_unconv_gas_high_mohr15(
                    tot_rurr_unconv_gas()
                ),
                lambda: table_max_extraction_unconv_gas_user_defined(
                    tot_rurr_unconv_gas()
                ),
            ),
        ),
    )


@cache.step
@to_float
def max_extraction_unconv_oil():
    """
    Real Name: max extraction unconv oil
    Original Eqn: IF THEN ELSE(choose extraction curve unconv oil=1, table max extraction unconv oil Low Mohr15(Tot RURR unconv oil), IF THEN ELSE(choose extraction curve unconv oil=2, table max extraction unconv oil BG Mohr15(Tot RURR unconv oil), IF THEN ELSE(choose extraction curve unconv oil=3, table max extraction unconv oil High Mohr15(Tot RURR unconv oil), table max extraction unconv oil User defined(Tot RURR unconv oil)) ))
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_curve_unconv_oil() == 1,
        lambda: table_max_extraction_unconv_oil_low_mohr15(tot_rurr_unconv_oil()),
        lambda: if_then_else(
            choose_extraction_curve_unconv_oil() == 2,
            lambda: table_max_extraction_unconv_oil_bg_mohr15(tot_rurr_unconv_oil()),
            lambda: if_then_else(
                choose_extraction_curve_unconv_oil() == 3,
                lambda: table_max_extraction_unconv_oil_high_mohr15(
                    tot_rurr_unconv_oil()
                ),
                lambda: table_max_extraction_unconv_oil_user_defined(
                    tot_rurr_unconv_oil()
                ),
            ),
        ),
    )


@cache.step
@to_float
def max_extraction_coal_ej():
    """
    Real Name: max extraction coal EJ
    Original Eqn: IF THEN ELSE(choose extraction coal curve=1, table max extraction coal User defined(Tot RURR coal), IF THEN ELSE(choose extraction coal curve=2, table max extraction coal Low Mohr15(Tot RURR coal), IF THEN ELSE(choose extraction coal curve=3, table max extraction coal BG Mohr15(Tot RURR coal), IF THEN ELSE(choose extraction coal curve=4, table max extraction coal High Mohr15(Tot RURR coal), table max extraction coal User defined(Tot RURR coal)))))
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        choose_extraction_coal_curve() == 1,
        lambda: table_max_extraction_coal_user_defined(tot_rurr_coal()),
        lambda: if_then_else(
            choose_extraction_coal_curve() == 2,
            lambda: table_max_extraction_coal_low_mohr15(tot_rurr_coal()),
            lambda: if_then_else(
                choose_extraction_coal_curve() == 3,
                lambda: table_max_extraction_coal_bg_mohr15(tot_rurr_coal()),
                lambda: if_then_else(
                    choose_extraction_coal_curve() == 4,
                    lambda: table_max_extraction_coal_high_mohr15(tot_rurr_coal()),
                    lambda: table_max_extraction_coal_user_defined(tot_rurr_coal()),
                ),
            ),
        ),
    )


@cache.step
@to_float
def max_extraction_conv_gas_ej():
    """
    Real Name: max extraction conv gas EJ
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1, IF THEN ELSE(choose extraction conv gas curve=1, table max extraction conv gas BG Mohr15(Tot RURR conv gas), IF THEN ELSE(choose extraction conv gas curve=2, table max extraction conv gas Low Mohr15(Tot RURR conv gas), IF THEN ELSE(choose extraction conv gas curve=3, table max extraction conv gas High Mohr15(Tot RURR conv gas), table max extraction conv gas User defined(Tot RURR conv gas)))), 0)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Maximum extraction curve selected for the simulations.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: if_then_else(
            choose_extraction_conv_gas_curve() == 1,
            lambda: table_max_extraction_conv_gas_bg_mohr15(tot_rurr_conv_gas()),
            lambda: if_then_else(
                choose_extraction_conv_gas_curve() == 2,
                lambda: table_max_extraction_conv_gas_low_mohr15(tot_rurr_conv_gas()),
                lambda: if_then_else(
                    choose_extraction_conv_gas_curve() == 3,
                    lambda: table_max_extraction_conv_gas_high_mohr15(
                        tot_rurr_conv_gas()
                    ),
                    lambda: table_max_extraction_conv_gas_user_defined(
                        tot_rurr_conv_gas()
                    ),
                ),
            ),
        ),
        lambda: 0,
    )


@cache.step
@to_float
def fed_heat_gas_plants_ej():
    """
    Real Name: FED Heat gas plants EJ
    Original Eqn: "FED Heat gas+coal EJ"*"share gas/(coal+gas) for heat plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of gas to produce heat.
    """
    return fed_heat_gascoal_ej() * share_gascoalgas_for_heat_plants()


@cache.step
@to_float
def fed_heat_coal_plants_ej():
    """
    Real Name: FED Heat coal plants EJ
    Original Eqn: "FED Heat gas+coal EJ"*"share coal(coal+gas) for heat plants"
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Final energy demand of coal to produce heat.
    """
    return fed_heat_gascoal_ej() * share_coalcoalgas_for_heat_plants()


@cache.step
@to_float
def urr_conv_gas():
    """
    Real Name: URR conv gas
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1, IF THEN ELSE("unlimited NRE?"=1,URR conv gas unlimited, IF THEN ELSE("unlimited gas?"=1,URR conv gas unlimited, IF THEN ELSE(choose extraction conv gas curve=1, URR conv gas Low Mohr15, IF THEN ELSE(choose extraction conv gas curve=2, URR conv gas BG Mohr15, IF THEN ELSE(choose extraction conv gas curve=3, URR conv gas High Mohr15, URR conv gas User defined))))) , 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    Ultimately Recoverable Resources (URR) associated to the selected
        depletion curve.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: if_then_else(
            unlimited_nre() == 1,
            lambda: urr_conv_gas_unlimited(),
            lambda: if_then_else(
                unlimited_gas() == 1,
                lambda: urr_conv_gas_unlimited(),
                lambda: if_then_else(
                    choose_extraction_conv_gas_curve() == 1,
                    lambda: urr_conv_gas_low_mohr15(),
                    lambda: if_then_else(
                        choose_extraction_conv_gas_curve() == 2,
                        lambda: urr_conv_gas_bg_mohr15(),
                        lambda: if_then_else(
                            choose_extraction_conv_gas_curve() == 3,
                            lambda: urr_conv_gas_high_mohr15(),
                            lambda: urr_conv_gas_user_defined(),
                        ),
                    ),
                ),
            ),
        ),
        lambda: 0,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def required_final_energy_other_transport():
    """
    Real Name: Required final energy other transport
    Original Eqn: Required final energy by sector and fuel EU[final sources,Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Other Supporting and Auxiliary Transport Activities Activities of Travel
        Agencies Final Energy
    """
    return rearrange(
        required_final_energy_by_sector_and_fuel_eu()
        .loc[
            :,
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
        ]
        .reset_coords(drop=True),
        ["final sources"],
        _subscript_dict,
    )


@cache.step
@to_float
def ped_gases_for_heat_plants_ej():
    """
    Real Name: PED gases for Heat plants EJ
    Original Eqn: FED Heat gas plants EJ/efficiency gases for heat plants
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of gas (EJ) for heat consumption (including
        generation losses).
    """
    return fed_heat_gas_plants_ej() / efficiency_gases_for_heat_plants()


@cache.step
@to_float
def ped_coal_for_heat_plants_ej():
    """
    Real Name: PED coal for Heat plants EJ
    Original Eqn: FED Heat coal plants EJ/efficiency coal for heat plants
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Primary energy demand of coal (EJ) for heat consumption (including
        generation losses).
    """
    return fed_heat_coal_plants_ej() / efficiency_coal_for_heat_plants()


@cache.step
@subs(["sectors"], _subscript_dict)
def real_total_output_by_sector_eu():
    """
    Real Name: Real total output by sector EU
    Original Eqn: MIN(Real total output by fuel and sector[electricity,sectors], MIN(Real total output by fuel and sector[heat,sectors], MIN(Real total output by fuel and sector[liquids,sectors], MIN(Real total output by fuel and sector[gases,sectors], Real total output by fuel and sector[solids,sectors]))))
    Units: Mdollars
    Limits: (None, None)
    Type: component
    Subs: ['sectors']

    Real total output by sector (35 WIOD sectors). US$1995. We assume the most
        limiting resources.
    """
    return np.minimum(
        rearrange(
            real_total_output_by_fuel_and_sector()
            .loc["electricity", :]
            .reset_coords(drop=True),
            ["sectors"],
            _subscript_dict,
        ),
        np.minimum(
            rearrange(
                real_total_output_by_fuel_and_sector()
                .loc["heat", :]
                .reset_coords(drop=True),
                ["sectors"],
                _subscript_dict,
            ),
            np.minimum(
                rearrange(
                    real_total_output_by_fuel_and_sector()
                    .loc["liquids", :]
                    .reset_coords(drop=True),
                    ["sectors"],
                    _subscript_dict,
                ),
                np.minimum(
                    rearrange(
                        real_total_output_by_fuel_and_sector()
                        .loc["gases", :]
                        .reset_coords(drop=True),
                        ["sectors"],
                        _subscript_dict,
                    ),
                    rearrange(
                        real_total_output_by_fuel_and_sector()
                        .loc["solids", :]
                        .reset_coords(drop=True),
                        ["sectors"],
                        _subscript_dict,
                    ),
                ),
            ),
        ),
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def required_final_energy_air_transport():
    """
    Real Name: Required final energy air transport
    Original Eqn: Required final energy by sector and fuel EU[final sources,Air Transport]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Air transport final Energy EJ
    """
    return rearrange(
        required_final_energy_by_sector_and_fuel_eu()
        .loc[:, "Air Transport"]
        .reset_coords(drop=True),
        ["final sources"],
        _subscript_dict,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def required_final_energy_inland_transport():
    """
    Real Name: Required final energy inland transport
    Original Eqn: Required final energy by sector and fuel EU[final sources,Inland Transport]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Inland transport final energy
    """
    return rearrange(
        required_final_energy_by_sector_and_fuel_eu()
        .loc[:, "Inland Transport"]
        .reset_coords(drop=True),
        ["final sources"],
        _subscript_dict,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def required_final_energy_water_transport():
    """
    Real Name: Required final energy water transport
    Original Eqn: Required final energy by sector and fuel EU[final sources,Water Transport]
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: ['final sources']

    Water transport final energy EJ
    """
    return rearrange(
        required_final_energy_by_sector_and_fuel_eu()
        .loc[:, "Water Transport"]
        .reset_coords(drop=True),
        ["final sources"],
        _subscript_dict,
    )


def table_max_extraction_conv_gas_low_mohr15(x):
    """
    Real Name: table max extraction conv gas Low Mohr15
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '141' , 'E142')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_conv_gas_low_mohr15(x)


def table_max_extraction_conv_gas_user_defined(x):
    """
    Real Name: table max extraction conv gas User defined
    Original Eqn: ( GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '146', 'E147'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_conv_gas_user_defined(x)


def table_max_extraction_total_gas_user_defined(x):
    """
    Real Name: table max extraction total gas User defined
    Original Eqn: GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '150', 'E151')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_total_gas_user_defined(x)


def table_max_extraction_unconv_gas_bg_mohr15(x):
    """
    Real Name: table max extraction unconv gas BG Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '149' , 'E150'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_gas_bg_mohr15(x)


def table_max_extraction_unconv_gas_high_mohr15(x):
    """
    Real Name: table max extraction unconv gas High Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '151' , 'E152'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_gas_high_mohr15(x)


def table_max_extraction_unconv_gas_low_mohr15(x):
    """
    Real Name: table max extraction unconv gas Low Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '147' , 'E148'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_gas_low_mohr15(x)


def table_max_extraction_unconv_gas_user_defined(x):
    """
    Real Name: table max extraction unconv gas User defined
    Original Eqn: ( GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '148', 'E149'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_gas_user_defined(x)


def table_max_extraction_coal_bg_mohr15(x):
    """
    Real Name: table max extraction coal BG Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '162' , 'E163'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_coal_bg_mohr15(x)


def table_max_extraction_coal_high_mohr15(x):
    """
    Real Name: table max extraction coal High Mohr15
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '164' , 'E165')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_coal_high_mohr15(x)


@cache.run
@to_float
def urr_coal_bg_mohr15():
    """
    Real Name: URR coal BG Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C162')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_coal_bg_mohr15()


@cache.run
@to_float
def urr_coal_user_defined_ej():
    """
    Real Name: URR coal User defined EJ
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C153')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_coal_user_defined_ej()


@cache.run
@to_float
def urr_conv_gas_bg_mohr15():
    """
    Real Name: URR conv gas BG Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C143')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_gas_bg_mohr15()


@cache.run
@to_float
def urr_conv_gas_high_mohr15():
    """
    Real Name: URR conv gas High Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C145')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_gas_high_mohr15()


@cache.run
@to_float
def urr_conv_gas_low_mohr15():
    """
    Real Name: URR conv gas Low Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C141')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_gas_low_mohr15()


@cache.run
@to_float
def urr_conv_gas_user_defined():
    """
    Real Name: URR conv gas User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C146')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_conv_gas_user_defined()


@cache.run
@to_float
def urr_total_gas_user_defined():
    """
    Real Name: URR total gas User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C150')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_total_gas_user_defined()


@cache.step
@to_float
def urr_unconv_gas():
    """
    Real Name: URR unconv gas
    Original Eqn: IF THEN ELSE("separate conv and unconv gas?"=1, IF THEN ELSE(choose extraction curve unconv gas=1, URR unconv gas Low Mohr15, IF THEN ELSE(choose extraction curve unconv gas=2, URR unconv gas BG Mohr15, IF THEN ELSE(choose extraction curve unconv gas=3, URR unconv gas High Mohr15, URR unconv gas User defined) )), 0)
    Units: EJ
    Limits: (None, None)
    Type: component
    Subs: None

    RURR unconventional gas.
    """
    return if_then_else(
        separate_conv_and_unconv_gas() == 1,
        lambda: if_then_else(
            choose_extraction_curve_unconv_gas() == 1,
            lambda: urr_unconv_gas_low_mohr15(),
            lambda: if_then_else(
                choose_extraction_curve_unconv_gas() == 2,
                lambda: urr_unconv_gas_bg_mohr15(),
                lambda: if_then_else(
                    choose_extraction_curve_unconv_gas() == 3,
                    lambda: urr_unconv_gas_high_mohr15(),
                    lambda: urr_unconv_gas_user_defined(),
                ),
            ),
        ),
        lambda: 0,
    )


@cache.run
@to_float
def urr_unconv_gas_bg_mohr15():
    """
    Real Name: URR unconv gas BG Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C149')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_gas_bg_mohr15()


def table_max_extraction_coal_low_mohr15(x):
    """
    Real Name: table max extraction coal Low Mohr15
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '160' , 'E161')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_coal_low_mohr15(x)


def table_max_extraction_coal_user_defined(x):
    """
    Real Name: table max extraction coal User defined
    Original Eqn: ( GET DIRECT LOOKUPS('?../../scenarios/scen_eu.xlsx', 'User parameters', '153', 'E154'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_coal_user_defined(x)


def table_max_extraction_conv_gas_bg_mohr15(x):
    """
    Real Name: table max extraction conv gas BG Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '143' , 'E144'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_conv_gas_bg_mohr15(x)


def table_max_extraction_conv_gas_high_mohr15(x):
    """
    Real Name: table max extraction conv gas High Mohr15
    Original Eqn: GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '145' , 'E146')
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_conv_gas_high_mohr15(x)


@cache.run
@to_float
def urr_unconv_gas_low_mohr15():
    """
    Real Name: URR unconv gas Low Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C147')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_gas_low_mohr15()


@cache.run
@to_float
def urr_coal_high15():
    """
    Real Name: URR coal High15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C164')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_coal_high15()


@cache.run
@to_float
def urr_coal_low_mohr15():
    """
    Real Name: URR coal Low Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C160')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_coal_low_mohr15()


@cache.run
@to_float
def urr_unconv_gas_high_mohr15():
    """
    Real Name: URR unconv gas High Mohr15
    Original Eqn: GET DIRECT CONSTANTS('?inputs_eu.xlsx', 'Constants', 'C151')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_gas_high_mohr15()


@cache.run
@to_float
def urr_unconv_gas_user_defined():
    """
    Real Name: URR unconv gas User defined
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User parameters', 'C148')
    Units: EJ
    Limits: (None, None)
    Type: constant
    Subs: None


    """
    return _ext_constant_urr_unconv_gas_user_defined()


def table_max_extraction_unconv_oil_bg_mohr15(x):
    """
    Real Name: table max extraction unconv oil BG Mohr15
    Original Eqn: ( GET DIRECT LOOKUPS('?inputs_eu.xlsx', 'Constants', '134' , 'E135'))
    Units: EJ/Year
    Limits: (None, None)
    Type: lookup
    Subs: None


    """
    return _ext_lookup_table_max_extraction_unconv_oil_bg_mohr15(x)


@cache.run
@to_float
def selection_constraint_extraction_unconv_oil():
    """
    Real Name: Selection constraint extraction unconv oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'D80')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Selection of type of constraint to annual growth extraction of unconventional oil:        1= Constraint annual growth (%)        2= User defined as a function of time
    """
    return _ext_constant_selection_constraint_extraction_unconv_oil()


@cache.step
@to_float
def abundance_electricity():
    """
    Real Name: Abundance electricity
    Original Eqn: IF THEN ELSE(Total FE Elec generation TWh EU>Total FE Elec demand TWh, 1, 1-ZIDZ( Total FE Elec demand TWh-Total FE Elec generation TWh EU, Total FE Elec demand TWh ))
    Units: Dmnl
    Limits: (None, None)
    Type: component
    Subs: None

    The parameter abundance varies between (1;0). Abundance=1 while the supply
        covers the demand; the closest to 0 indicates a higher divergence between
        supply and demand.
    """
    return if_then_else(
        total_fe_elec_generation_twh_eu() > total_fe_elec_demand_twh(),
        lambda: 1,
        lambda: 1
        - zidz(
            total_fe_elec_demand_twh() - total_fe_elec_generation_twh_eu(),
            total_fe_elec_demand_twh(),
        ),
    )


@cache.run
@to_float
def p_constraint_growth_extraction_unconv_oil():
    """
    Real Name: P constraint growth extraction unconv oil
    Original Eqn: GET DIRECT CONSTANTS('?../../scenarios/scen_eu.xlsx', 'User scenario', 'C80')
    Units: Dmnl
    Limits: (None, None)
    Type: constant
    Subs: None

    Constant constraint to annual extraction of unconventional oil.
    """
    return _ext_constant_p_constraint_growth_extraction_unconv_oil()


@cache.step
@to_float
def extraction_unconv_oil_delayed():
    """
    Real Name: extraction unconv oil delayed
    Original Eqn: DELAY FIXED ( extraction unconv oil EJ, TIME STEP, 1.09)
    Units: EJ/Year
    Limits: (None, None)
    Type: component
    Subs: None

    Extraction of unconventional oil delayed 1 year. Data from Mohr et al
        (2015) for 1989.
    """
    return _delayfixed_extraction_unconv_oil_delayed()


@cache.run
@to_float
def final_time():
    """
    Real Name: FINAL TIME
    Original Eqn: 2050
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    The final time for the simulation.
    """
    return 2050


@cache.run
@to_float
def initial_time():
    """
    Real Name: INITIAL TIME
    Original Eqn: 1995
    Units: Year
    Limits: (None, None)
    Type: constant
    Subs: None

    The initial time for the simulation.
    """
    return 1995


@cache.run
@to_float
def saveper():
    """
    Real Name: SAVEPER
    Original Eqn: 1
    Units: Year
    Limits: (0.0, None)
    Type: constant
    Subs: None

    The frequency with which output is stored.
    """
    return 1


@cache.run
@to_float
def time_step():
    """
    Real Name: TIME STEP
    Original Eqn: 0.03125
    Units: Year
    Limits: (0.0, None)
    Type: constant
    Subs: None

    The time step for the simulation.
    """
    return 0.03125


_ext_constant_share_gascoalgas_for_elec_in_2014 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "AA40",
    {},
    _root,
    "_ext_constant_share_gascoalgas_for_elec_in_2014",
)


_integ_future_share_gascoalgas_for_elec = Integ(
    lambda: increase_share_gas_for_elec() - decrease_share_gas_for_elec(),
    lambda: share_gascoalgas_for_elec_in_2014(),
    "_integ_future_share_gascoalgas_for_elec",
)


_integ_future_share_oilff_for_elec = Integ(
    lambda: increase_share_oil_for_elec() - decrease_share_oil_for_elec(),
    lambda: share_oilff_for_elec_in_2015(),
    "_integ_future_share_oilff_for_elec",
)


_ext_constant_share_oilff_for_elec_in_2015 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "AB39",
    {},
    _root,
    "_ext_constant_share_oilff_for_elec_in_2015",
)


@subs(["primary sources"], _subscript_dict)
def _init_perception_in_primary_sources_scarcity():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for perception_in_primary_sources_scarcity
    Limits: None
    Type: setup
    Subs: ['primary sources']

    Provides initial conditions for perception_in_primary_sources_scarcity function
    """
    return 0


@cache.step
@subs(["primary sources"], _subscript_dict)
def _dperception_in_primary_sources_scarcity_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for perception_in_primary_sources_scarcity
    Limits: None
    Type: component
    Subs: ['primary sources']

    Provides derivative for perception_in_primary_sources_scarcity function
    """
    return increase_in_perception_ps_scarcity() - reduction_in_perception_ps_scarcity()


_integ_perception_in_primary_sources_scarcity = Integ(
    _dperception_in_primary_sources_scarcity_dt,
    _init_perception_in_primary_sources_scarcity,
    "_integ_perception_in_primary_sources_scarcity",
)


_ext_constant_sensitivity_to_scarcity_option = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C257",
    {},
    _root,
    "_ext_constant_sensitivity_to_scarcity_option",
)


@subs(["final sources"], _subscript_dict)
def _init_perception_of_final_energy_scarcity():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for perception_of_final_energy_scarcity
    Limits: None
    Type: setup
    Subs: ['final sources']

    Provides initial conditions for perception_of_final_energy_scarcity function
    """
    return 0


@cache.step
@subs(["final sources"], _subscript_dict)
def _dperception_of_final_energy_scarcity_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for perception_of_final_energy_scarcity
    Limits: None
    Type: component
    Subs: ['final sources']

    Provides derivative for perception_of_final_energy_scarcity function
    """
    return increase_in_perception_fe_scarcity() - reduction_in_perception_fe_scarcity()


_integ_perception_of_final_energy_scarcity = Integ(
    _dperception_of_final_energy_scarcity_dt,
    _init_perception_of_final_energy_scarcity,
    "_integ_perception_of_final_energy_scarcity",
)


_ext_constant_sensitivity_to_energy_scarcity_medium = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "O47",
    {},
    _root,
    "_ext_constant_sensitivity_to_energy_scarcity_medium",
)


_ext_constant_sensitivity_to_energy_scarcity_high = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "O46",
    {},
    _root,
    "_ext_constant_sensitivity_to_energy_scarcity_high",
)


_ext_constant_sensitivity_to_energy_scarcity_low = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "O48",
    {},
    _root,
    "_ext_constant_sensitivity_to_energy_scarcity_low",
)


_ext_constant_sensitivity_to_scarcity_option_h = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F257",
    {},
    _root,
    "_ext_constant_sensitivity_to_scarcity_option_h",
)


_ext_constant_energy_scarcity_forgetting_time_h = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F260",
    {},
    _root,
    "_ext_constant_energy_scarcity_forgetting_time_h",
)


_ext_constant_energy_scarcity_forgetting_time = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C260",
    {},
    _root,
    "_ext_constant_energy_scarcity_forgetting_time",
)


@subs(["final sources"], _subscript_dict)
def _init_perception_of_final_energy_scarcity_h():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for perception_of_final_energy_scarcity_h
    Limits: None
    Type: setup
    Subs: ['final sources']

    Provides initial conditions for perception_of_final_energy_scarcity_h function
    """
    return 0


@cache.step
@subs(["final sources"], _subscript_dict)
def _dperception_of_final_energy_scarcity_h_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for perception_of_final_energy_scarcity_h
    Limits: None
    Type: component
    Subs: ['final sources']

    Provides derivative for perception_of_final_energy_scarcity_h function
    """
    return (
        increase_in_perception_fe_scarcity_h() - reduction_in_perception_fe_scarcity_h()
    )


_integ_perception_of_final_energy_scarcity_h = Integ(
    _dperception_of_final_energy_scarcity_h_dt,
    _init_perception_of_final_energy_scarcity_h,
    "_integ_perception_of_final_energy_scarcity_h",
)


_ext_constant_year_to_finish_energy_intensity_policies_h = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C205",
    {},
    _root,
    "_ext_constant_year_to_finish_energy_intensity_policies_h",
)


_ext_constant_minimum_fraction_h = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "FU856",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_minimum_fraction_h",
)


_ext_constant_final_year_target_h = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B243",
    {},
    _root,
    "_ext_constant_final_year_target_h",
)


_ext_constant_historical_mean_rate_energy_intensity_h = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "GM48",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_historical_mean_rate_energy_intensity_h",
)


_delayfixed_aux19_0 = DelayFixed(
    lambda: final_energy_intensity_2020_h(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux19_0",
)


_ext_constant_choose_energy_intensity_target_method = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C241",
    {},
    _root,
    "_ext_constant_choose_energy_intensity_target_method",
)


_ext_constant_activate_scarcity_feedback_final_fuel_replacement = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B256",
    {},
    _root,
    "_ext_constant_activate_scarcity_feedback_final_fuel_replacement",
)


_ext_constant_activate_transport_h_bottom_up_method = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FY207",
    {},
    _root,
    "_ext_constant_activate_transport_h_bottom_up_method",
)


_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0 = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C200",
    {},
    _root,
    "_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities_0",
)


_ext_constant_efficiency_rate_of_substitution_h_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FU216",
    {
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_efficiency_rate_of_substitution_h_by_sector",
)


_ext_constant_efficiency_rate_of_substitution_h_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G233",
    {
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_efficiency_rate_of_substitution_h_sectoruniform",
)


_ext_constant_year_policy_change_energy_h_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G230",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_year_policy_change_energy_h_sectoruniform",
)


_ext_constant_max_yearly_change_h = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "FU857",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_max_yearly_change_h",
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct_h = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "FU854",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct_h",
)


_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G227",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_year_policy_to_improve_efficiency_h_sectoruniform",
)


_ext_constant_min_energy_intensity_vs_intial_h = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C199",
    {},
    _root,
    "_ext_constant_min_energy_intensity_vs_intial_h",
)


_ext_constant_energy_intensity_target_h = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FU247",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_energy_intensity_target_h",
)


_ext_constant_year_policy_change_energy_h_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FU213",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_year_policy_change_energy_h_by_sector",
)


_ext_constant_choose_policies_of_intensities_global_or_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B203",
    {},
    _root,
    "_ext_constant_choose_policies_of_intensities_global_or_by_sector",
)


_ext_constant_initial_energy_intensity_1995_h = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "GM49",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_initial_energy_intensity_1995_h",
)


_ext_constant_policy_to_improve_efficiency_speed_h_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FU211",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_policy_to_improve_efficiency_speed_h_by_sector",
)


_ext_constant_year_policy_to_improve_efficiency_h_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FU210",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_year_policy_to_improve_efficiency_h_by_sector",
)


_ext_lookup_historic_final_energy_intensity_h = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "47",
    "C83",
    {"final sources1": ["electricity"]},
    _root,
    "_ext_lookup_historic_final_energy_intensity_h",
)


_ext_lookup_historic_final_energy_intensity_h.add(
    "?inputs_eu.xlsx", "Economy", "47", "C119", {"final sources1": ["heat"]}
)


_ext_lookup_historic_final_energy_intensity_h.add(
    "?inputs_eu.xlsx", "Economy", "47", "C155", {"final sources1": ["liquids"]}
)


_ext_lookup_historic_final_energy_intensity_h.add(
    "?inputs_eu.xlsx", "Economy", "47", "C227", {"final sources1": ["solids"]}
)


_ext_lookup_historic_final_energy_intensity_h.add(
    "?inputs_eu.xlsx", "Economy", "47", "C191", {"final sources1": ["gases"]}
)


_ext_constant_policy_change_energy_speed_h_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G231",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_policy_change_energy_speed_h_sectoruniform",
)


_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G228",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_policy_to_improve_efficiency_speed_h_sectoruniform",
)


_ext_constant_pct_change_energy_intensity_target = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C250",
    {},
    _root,
    "_ext_constant_pct_change_energy_intensity_target",
)


_ext_constant_policy_change_energy_speed_h_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FU214",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_policy_change_energy_speed_h_by_sector",
)


_ext_constant_initial_global_energy_intensity_2009_h = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "AK230",
    {},
    _root,
    "_ext_constant_initial_global_energy_intensity_2009_h",
)


@subs(["final sources"], _subscript_dict)
def _init_evol_final_energy_intensity_h():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for evol_final_energy_intensity_h
    Limits: None
    Type: setup
    Subs: ['final sources']

    Provides initial conditions for evol_final_energy_intensity_h function
    """
    return initial_energy_intensity_1995_h()


@cache.step
@subs(["final sources"], _subscript_dict)
def _devol_final_energy_intensity_h_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for evol_final_energy_intensity_h
    Limits: None
    Type: component
    Subs: ['final sources']

    Provides derivative for evol_final_energy_intensity_h function
    """
    return (
        increase_of_intensity_due_to_change_energy_technology_h_top_down()
        + inertial_rate_energy_intensity_h_top_down()
        - decrease_of_intensity_due_to_change_energy_technology_h_top_down()
    )


_integ_evol_final_energy_intensity_h = Integ(
    _devol_final_energy_intensity_h_dt,
    _init_evol_final_energy_intensity_h,
    "_integ_evol_final_energy_intensity_h",
)


_ext_constant_final_year_target = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B243",
    {},
    _root,
    "_ext_constant_final_year_target",
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B854",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct",
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "G854",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "L854",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "Q854",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "V854",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AA854",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AF854",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AK854",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AP854",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AU854",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AZ854",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BE854",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BJ854",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BO854",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BT854",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BY854",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CD854",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CI854",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CN854",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CS854",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CX854",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DC854",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DH854",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DM854",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DR854",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DW854",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EB854",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EG854",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EL854",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EQ854",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EV854",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FA854",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FF854",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FK854",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_maximum_yearly_aceleration_of_intensity_improvement_pct.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FP854",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_change_pct_energy_intensity_target = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C249",
    {},
    _root,
    "_ext_constant_year_change_pct_energy_intensity_target",
)


_delayfixed_aux20_0 = DelayFixed(
    lambda: final_energy_intensity_2020(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux20_0",
)


_ext_constant_policy_change_energy_speed_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B214",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_policy_change_energy_speed_by_sector",
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G214",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L214",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q214",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V214",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA214",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF214",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK214",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP214",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU214",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ214",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE214",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ214",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO214",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT214",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY214",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD214",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI214",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN214",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS214",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX214",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC214",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH214",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM214",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR214",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW214",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB214",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG214",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL214",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ214",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV214",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA214",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF214",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK214",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_change_energy_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP214",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B211",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_policy_to_improve_efficiency_speed_by_sector",
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G211",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L211",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q211",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V211",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA211",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF211",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK211",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP211",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU211",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ211",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE211",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ211",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO211",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT211",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY211",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD211",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI211",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN211",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS211",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX211",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC211",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH211",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM211",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR211",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW211",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB211",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG211",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL211",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ211",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV211",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA211",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF211",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK211",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP211",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C200",
    {},
    _root,
    "_ext_constant_percentage_of_change_over_the_historic_maximun_variation_of_energy_intensities",
)


_ext_constant_max_yearly_change_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B857",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_max_yearly_change_0",
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "G857",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "L857",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "Q857",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "V857",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AA857",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AF857",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AK857",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AP857",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AU857",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AZ857",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BE857",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BJ857",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BO857",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BT857",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BY857",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CD857",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CI857",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CN857",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CS857",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CX857",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DC857",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DH857",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DM857",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DR857",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DW857",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EB857",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EG857",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EL857",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EQ857",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EV857",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FA857",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FF857",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FK857",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FP857",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B216",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_efficiency_rate_of_substitution_by_sector",
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G216",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L216",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q216",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V216",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA216",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF216",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK216",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP216",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU216",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ216",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE216",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ216",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO216",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT216",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY216",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD216",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI216",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN216",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS216",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX216",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC216",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH216",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM216",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR216",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW216",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB216",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG216",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL216",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ216",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV216",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA216",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF216",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK216",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP216",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_efficiency_rate_of_substitution_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B233",
    {
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
        "final sources1": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_efficiency_rate_of_substitution_sectoruniform",
)


_ext_constant_year_policy_change_energy_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B230",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_year_policy_change_energy_sectoruniform",
)


_ext_constant_min_energy_intensity_vs_intial = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C199",
    {},
    _root,
    "_ext_constant_min_energy_intensity_vs_intial",
)


_ext_constant_minimum_fraction_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B856",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_minimum_fraction_0",
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "G856",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "L856",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "Q856",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "V856",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AA856",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AF856",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AK856",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AP856",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AU856",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AZ856",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BE856",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BJ856",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BO856",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BT856",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BY856",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CD856",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CI856",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CN856",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CS856",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CX856",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DC856",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DH856",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DM856",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DR856",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DW856",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EB856",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EG856",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EL856",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EQ856",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EV856",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FA856",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FF856",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FK856",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction_0.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FP856",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "T49",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995",
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "Y49",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AD49",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AI49",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AN49",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AS49",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AX49",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BC49",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BH49",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BM49",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BR49",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BW49",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CB49",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CG49",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CL49",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CQ49",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CV49",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DA49",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DF49",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DK49",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DP49",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DU49",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DZ49",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EE49",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EJ49",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EO49",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "ET49",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EY49",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FD49",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FI49",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FN49",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FS49",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FX49",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "GC49",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_initial_energy_intensity_by_fuel_and_sector_1995.add(
    "?inputs_eu.xlsx",
    "Economy",
    "GH49",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B247",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_energy_intensity_target_by_sector_and_fuel",
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G247",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L247",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q247",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V247",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA247",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF247",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK247",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP247",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU247",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ247",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE247",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ247",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO247",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT247",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY247",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD247",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI247",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN247",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS247",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX247",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC247",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH247",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM247",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR247",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW247",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB247",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG247",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL247",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ247",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV247",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA247",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF247",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK247",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_energy_intensity_target_by_sector_and_fuel.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP247",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "T48",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_historical_mean_rate_energy_intensity",
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "Y48",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AD48",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AI48",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AN48",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AS48",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "AX48",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BC48",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BH48",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BM48",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BR48",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "BW48",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CB48",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CG48",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CL48",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CQ48",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "CV48",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DA48",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DF48",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DK48",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DP48",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DU48",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "DZ48",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EE48",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EJ48",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EO48",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "ET48",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "EY48",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FD48",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FI48",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FN48",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FS48",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "FX48",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "GC48",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_historical_mean_rate_energy_intensity.add(
    "?inputs_eu.xlsx",
    "Economy",
    "GH48",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_policy_to_improve_efficiency_speed_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B228",
    {},
    _root,
    "_ext_constant_policy_to_improve_efficiency_speed_sectoruniform",
)


_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0 = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B256",
    {},
    _root,
    "_ext_constant_activate_scarcity_feedback_final_fuel_replacement_0",
)


_ext_constant_initial_global_energy_intensity_by_sector_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B230",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_initial_global_energy_intensity_by_sector_2009",
)


_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "47",
    "C48",
    {
        "final sources1": ["electricity"],
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel",
)


_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "?inputs_eu.xlsx",
    "Economy",
    "47",
    "C84",
    {
        "final sources1": ["heat"],
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
)


_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "?inputs_eu.xlsx",
    "Economy",
    "47",
    "C120",
    {
        "final sources1": ["liquids"],
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
)


_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "?inputs_eu.xlsx",
    "Economy",
    "47",
    "C156",
    {
        "final sources1": ["gases"],
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
)


_ext_lookup_historic_final_energy_intensity_by_sector_and_fuel.add(
    "?inputs_eu.xlsx",
    "Economy",
    "47",
    "C192",
    {
        "final sources1": ["solids"],
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
)


_ext_constant_year_policy_to_improve_efficiency_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B227",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_year_policy_to_improve_efficiency_sectoruniform",
)


@subs(["sectors", "final sources"], _subscript_dict)
def _init_evol_final_energy_intensity_by_sector_and_fuel():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for evol_final_energy_intensity_by_sector_and_fuel
    Limits: None
    Type: setup
    Subs: ['sectors', 'final sources']

    Provides initial conditions for evol_final_energy_intensity_by_sector_and_fuel function
    """
    return rearrange(
        initial_energy_intensity_by_fuel_and_sector_1995(),
        ["sectors", "final sources"],
        _subscript_dict,
    )


@cache.step
@subs(["sectors", "final sources"], _subscript_dict)
def _devol_final_energy_intensity_by_sector_and_fuel_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for evol_final_energy_intensity_by_sector_and_fuel
    Limits: None
    Type: component
    Subs: ['sectors', 'final sources']

    Provides derivative for evol_final_energy_intensity_by_sector_and_fuel function
    """
    return (
        increase_of_intensity_due_to_energy_a_technology_change_top_down()
        + inertial_rate_energy_intensity_top_down()
        + rearrange(
            rate_change_intensity_bottom_up(),
            ["sectors", "final sources"],
            _subscript_dict,
        )
        - decrease_of_intensity_due_to_energy_a_technology_change_top_down()
    )


_integ_evol_final_energy_intensity_by_sector_and_fuel = Integ(
    _devol_final_energy_intensity_by_sector_and_fuel_dt,
    _init_evol_final_energy_intensity_by_sector_and_fuel,
    "_integ_evol_final_energy_intensity_by_sector_and_fuel",
)


_ext_constant_year_to_finish_energy_intensity_policies = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C204",
    {},
    _root,
    "_ext_constant_year_to_finish_energy_intensity_policies",
)


_ext_constant_choose_final_sectoral_energy_intensities_evolution_method = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C195",
    {},
    _root,
    "_ext_constant_choose_final_sectoral_energy_intensities_evolution_method",
)


_ext_constant_policy_change_energy_speed_sectoruniform = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B231",
    {"final sources": ["electricity", "heat", "liquids", "gases", "solids"]},
    _root,
    "_ext_constant_policy_change_energy_speed_sectoruniform",
)


_ext_constant_year_policy_to_improve_efficiency_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B210",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_year_policy_to_improve_efficiency_by_sector",
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G210",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L210",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q210",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V210",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA210",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF210",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK210",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP210",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU210",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ210",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE210",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ210",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO210",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT210",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY210",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD210",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI210",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN210",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS210",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX210",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC210",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH210",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM210",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR210",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW210",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB210",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG210",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL210",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ210",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV210",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA210",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF210",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK210",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_to_improve_efficiency_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP210",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B213",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_year_policy_change_energy_by_sector",
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G213",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L213",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q213",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V213",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA213",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF213",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK213",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP213",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU213",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ213",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE213",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ213",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO213",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT213",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY213",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD213",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI213",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN213",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS213",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX213",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC213",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH213",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM213",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR213",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW213",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB213",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG213",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL213",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ213",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV213",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA213",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF213",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK213",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_year_policy_change_energy_by_sector.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP213",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_activate_bottom_up_method = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DL207",
    {"sectors1": ["Inland Transport"]},
    _root,
    "_ext_constant_activate_bottom_up_method",
)


_delayfixed_aux19 = DelayFixed(
    lambda: historic_share_coal_domestic_ue_extraction_until_2016(),
    lambda: time_step(),
    lambda: 0.75,
    time_step,
    "_delayfixed_aux19",
)


_ext_constant_max_share_import_coal_ue = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F327",
    {},
    _root,
    "_ext_constant_max_share_import_coal_ue",
)


_ext_constant_limited_coal_imports_from_row = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D325",
    {},
    _root,
    "_ext_constant_limited_coal_imports_from_row",
)


_ext_constant_limited_nat_gas_imports_from_row = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D321",
    {},
    _root,
    "_ext_constant_limited_nat_gas_imports_from_row",
)


_delayfixed_aux21 = DelayFixed(
    lambda: historic_share_unconv_nat_gas_domestric_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux21",
)


_ext_constant_max_share_imports_nat_gas_ue = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F323",
    {},
    _root,
    "_ext_constant_max_share_imports_nat_gas_ue",
)


_ext_constant_max_share_imports_oil_ue = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F319",
    {},
    _root,
    "_ext_constant_max_share_imports_oil_ue",
)


_ext_constant_limited_oil_imports_from_row = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D317",
    {},
    _root,
    "_ext_constant_limited_oil_imports_from_row",
)


_delayfixed_aux24 = DelayFixed(
    lambda: historic_share_unconv_oil_domestric_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux24",
)


_delayfixed_aux23 = DelayFixed(
    lambda: historic_share_conv_oil_domestic_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux23",
)


_delayfixed_aux18_0 = DelayFixed(
    lambda: share_pipeline_transport_fecgl_in_2015(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux18_0",
)


_ext_lookup_historic_pipeline_transport = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "242",
    "C244",
    {},
    _root,
    "_ext_lookup_historic_pipeline_transport",
)


_ext_lookup_historic_energy_industry_ownuse = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "242",
    "C243",
    {},
    _root,
    "_ext_lookup_historic_energy_industry_ownuse",
)


_delayfixed_aux1_1_1 = DelayFixed(
    lambda: share_e_industry_ownuse_vs_tfec_in_2015(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux1_1_1",
)


_ext_constant_tonnes_per_kt = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G22", {}, _root, "_ext_constant_tonnes_per_kt"
)


_smooth_smooth_desired_gdppc = Smooth(
    lambda: desired_variation_gdppc_per_scen(),
    lambda: 2,
    lambda: desired_variation_gdppc_per_scen(),
    lambda: 2,
    "_smooth_smooth_desired_gdppc",
)


_smooth_smooth_pop = Smooth(
    lambda: pop_variation_by_scen(),
    lambda: 4,
    lambda: pop_variation_by_scen(),
    lambda: 2,
    "_smooth_smooth_pop",
)


_delayfixed_aux1_1_0 = DelayFixed(
    lambda: gdppc_until_p_customized_year_gdppc_evolution(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux1_1_0",
)


_delayfixed_pop_variation_delay_5_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 4,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_5_step",
)


_delayfixed_pop_variation_delay_6_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 5,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_6_step",
)


_ext_constant_p_gdppc_asymptote = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "G8", {}, _root, "_ext_constant_p_gdppc_asymptote"
)


_ext_constant_target_year_gdppc_asymptote = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "I8",
    {},
    _root,
    "_ext_constant_target_year_gdppc_asymptote",
)


_delayfixed_pop_variation_delay_4_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 3,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_4_step",
)


_delayfixed_pop_variation_delay_1_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 0.5,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_1_step",
)


_delayfixed_pop_variation_delay_2_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 1,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_2_step",
)


_delayfixed_pop_variation_delay_3_step = DelayFixed(
    lambda: pop_variation_by_scen(),
    lambda: 2,
    lambda: pop_variation_by_scen(),
    time_step,
    "_delayfixed_pop_variation_delay_3_step",
)


_ext_constant_p_pop_asymptote_millions = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G15",
    {},
    _root,
    "_ext_constant_p_pop_asymptote_millions",
)


_delayfixed_aux1_1 = DelayFixed(
    lambda: pop_until_p_customized_year_pop_evolution(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux1_1",
)


_ext_constant_target_year_pop_asymptote = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "I15",
    {},
    _root,
    "_ext_constant_target_year_pop_asymptote",
)


_ext_constant_beta_0_con = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "AL330", {}, _root, "_ext_constant_beta_0_con"
)


_ext_constant_beta_1_cons = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "AN330", {}, _root, "_ext_constant_beta_1_cons"
)


_ext_constant_beta_3_cons = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "AR330", {}, _root, "_ext_constant_beta_3_cons"
)


_ext_constant_beta_2_cons = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "AP330", {}, _root, "_ext_constant_beta_2_cons"
)


_ext_lookup_historic_real_interest_rate_for_corporations = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "343",
    "B345",
    {},
    _root,
    "_ext_lookup_historic_real_interest_rate_for_corporations",
)


_ext_lookup_historic_real_interest_rate_for_house_purchases = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "343",
    "B346",
    {},
    _root,
    "_ext_lookup_historic_real_interest_rate_for_house_purchases",
)


_ext_lookup_historic_real_long_term_interest_rate = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "343",
    "B347",
    {},
    _root,
    "_ext_lookup_historic_real_long_term_interest_rate",
)


_integ_lc = Integ(
    lambda: variation_lc() - lc_not_covered(), lambda: initial_lc_total(), "_integ_lc"
)


_integ_real_long_term_interest_rate = Integ(
    lambda: variation_real_long_term_interest_rate(),
    lambda: 2.616,
    "_integ_real_long_term_interest_rate",
)


_ext_constant_beta_4_exp = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "I329", {}, _root, "_ext_constant_beta_4_exp"
)


_integ_real_interest_rate_for_house_purchases = Integ(
    lambda: variation_real_interest_rate_for_house_purchases(),
    lambda: 6.49,
    "_integ_real_interest_rate_for_house_purchases",
)


_integ_real_interest_rate_for_corporations = Integ(
    lambda: variation_real_interest_rate_for_corporations(),
    lambda: 5.58,
    "_integ_real_interest_rate_for_corporations",
)


_delayfixed_urban_land_density_t1 = DelayFixed(
    lambda: urban_land_density(),
    lambda: 1,
    lambda: 108.5,
    time_step,
    "_delayfixed_urban_land_density_t1",
)


_ext_constant_p_variation_primary_forest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C271",
    {},
    _root,
    "_ext_constant_p_variation_primary_forest",
)


_integ_primary_forests_area = Integ(
    lambda: available_to_primary_forest_rate(),
    lambda: initial_primary_forest_area(),
    "_integ_primary_forests_area",
)


_integ_available_forest_area = Integ(
    lambda: -deforestation_rate()
    - forest_loss_to_sustain_agriculture()
    - available_to_primary_forest_rate(),
    lambda: initial_available_forest_area(),
    "_integ_available_forest_area",
)


_ext_constant_start_year_p_variation_primary_forest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "E271",
    {},
    _root,
    "_ext_constant_start_year_p_variation_primary_forest",
)


_ext_constant_mha_to_m2 = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G21", {}, _root, "_ext_constant_mha_to_m2"
)


_ext_constant_start_year_p_urban_land_density = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C275",
    {},
    _root,
    "_ext_constant_start_year_p_urban_land_density",
)


_ext_constant_target_year_p_urban_land_density = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C276",
    {},
    _root,
    "_ext_constant_target_year_p_urban_land_density",
)


_ext_constant_historic_av_variation_primary_forests_area = ExtConstant(
    "?inputs_eu.xlsx",
    "Land",
    "AD24",
    {},
    _root,
    "_ext_constant_historic_av_variation_primary_forests_area",
)


_ext_constant_initial_agricultural_area = ExtConstant(
    "?inputs_eu.xlsx",
    "Land",
    "H23",
    {},
    _root,
    "_ext_constant_initial_agricultural_area",
)


_ext_constant_nvs_1_to_m = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G20", {}, _root, "_ext_constant_nvs_1_to_m"
)


_ext_constant_growing_stock_forest_per_ha = ExtConstant(
    "?inputs_eu.xlsx",
    "Land",
    "C5",
    {},
    _root,
    "_ext_constant_growing_stock_forest_per_ha",
)


_ext_constant_liq_2w = ExtConstant(
    "?inputs_eu.xlsx", "Transportation", "B59", {}, _root, "_ext_constant_liq_2w"
)


_delayfixed_aux25 = DelayFixed(
    lambda: historic_share_net_imports_oil_until_2016(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux25",
)


_delayfixed_aux22 = DelayFixed(
    lambda: historic_share_net_imports_nat_gas_until_2016(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux22",
)


_delayfixed_aux20 = DelayFixed(
    lambda: historic_share_conv_nat_gas_domestic_eu_extraction_until_2016(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux20",
)


_delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr = DelayFixed(
    lambda: desired_annual_total_demand_growth_rate(),
    lambda: 1,
    lambda: 0,
    time_step,
    "_delayfixed_desired_annual_total_demand_growth_rate_delayed_1_yr",
)


@subs(["vehicleT"], _subscript_dict)
def _init_percent_t_vehicles():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for percent_t_vehicles
    Limits: None
    Type: setup
    Subs: ['vehicleT']

    Provides initial conditions for percent_t_vehicles function
    """
    return percent_tveh_1995()


@cache.step
@subs(["vehicleT"], _subscript_dict)
def _dpercent_t_vehicles_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for percent_t_vehicles
    Limits: None
    Type: component
    Subs: ['vehicleT']

    Provides derivative for percent_t_vehicles function
    """
    return var_percent_t_vehicles()


_integ_percent_t_vehicles = Integ(
    _dpercent_t_vehicles_dt, _init_percent_t_vehicles, "_integ_percent_t_vehicles"
)


_delayfixed_aaux_tveh_t = DelayFixed(
    lambda: aaux_tveh_ini(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aaux_tveh_t",
)


_integ_available_land = Integ(
    lambda: -land_for_res_elec_rate()
    - increase_agricultural_land()
    - marginal_land_for_biofuels_rate(),
    lambda: initial_available_land(),
    "_integ_available_land",
)


_integ_permanent_snowsglaciers_area = Integ(
    lambda: 0,
    lambda: initial_permanent_snowsglaciers_area(),
    "_integ_permanent_snowsglaciers_area",
)


_ext_constant_initial_permanent_snowsglaciers_area = ExtConstant(
    "?inputs_eu.xlsx",
    "Land",
    "H28",
    {},
    _root,
    "_ext_constant_initial_permanent_snowsglaciers_area",
)


_ext_constant_total_eu_land = ExtConstant(
    "?inputs_eu.xlsx", "Land", "C9", {}, _root, "_ext_constant_total_eu_land"
)


_delayfixed_land_requirements_res_elec_compet_uses_t1 = DelayFixed(
    lambda: land_requirements_res_elec_compet_uses(),
    lambda: 1,
    lambda: 0.9115,
    time_step,
    "_delayfixed_land_requirements_res_elec_compet_uses_t1",
)


_ext_constant_initial_available_land = ExtConstant(
    "?inputs_eu.xlsx", "Land", "C8", {}, _root, "_ext_constant_initial_available_land"
)


_integ_land_for_solar_and_hydro_res = Integ(
    lambda: land_for_res_elec_rate(), lambda: 0.9, "_integ_land_for_solar_and_hydro_res"
)


_delayfixed_aux16 = DelayFixed(
    lambda: agricultural_land_until_2015(),
    lambda: time_step(),
    lambda: initial_agricultural_area(),
    time_step,
    "_delayfixed_aux16",
)


_ext_constant_p_urban_land_density = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C274",
    {},
    _root,
    "_ext_constant_p_urban_land_density",
)


_ext_lookup_historic_urban_land = ExtLookup(
    "?inputs_eu.xlsx", "Land", "20", "H27", {}, _root, "_ext_lookup_historic_urban_land"
)


_ext_constant_percent_h_vehicles_initial = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B26",
    {"Households vehicles": ["liq 4wheels"]},
    _root,
    "_ext_constant_percent_h_vehicles_initial",
)


_ext_constant_percent_h_vehicles_initial.add(
    "?inputs_eu.xlsx",
    "Transportation",
    "B27",
    {"Households vehicles": ["elec 4wheels"]},
)


_ext_constant_percent_h_vehicles_initial.add(
    "?inputs_eu.xlsx", "Transportation", "B28", {"Households vehicles": ["hib 4wheels"]}
)


_ext_constant_percent_h_vehicles_initial.add(
    "?inputs_eu.xlsx", "Transportation", "B29", {"Households vehicles": ["gas 4wheels"]}
)


_ext_constant_percent_h_vehicles_initial.add(
    "?inputs_eu.xlsx", "Transportation", "B30", {"Households vehicles": ["liq 2wheels"]}
)


_ext_constant_percent_h_vehicles_initial.add(
    "?inputs_eu.xlsx",
    "Transportation",
    "B31",
    {"Households vehicles": ["elec 2wheels"]},
)


_delayfixed_aaux_hveh_t = DelayFixed(
    lambda: aaux_hveh_ini(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aaux_hveh_t",
)


_ext_constant_p_labour_share = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C3", {}, _root, "_ext_constant_p_labour_share"
)


_ext_data_historic_labour_share_growth = ExtData(
    "?inputs_eu.xlsx",
    "Economy",
    "324",
    "B326",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_labour_share_growth",
)


_ext_constant_beta_1_gfcf = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B331",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_beta_1_gfcf",
)


_ext_constant_beta_1_exp = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B337",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_beta_1_exp",
)


_ext_constant_beta_2_gfcf = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "E329", {}, _root, "_ext_constant_beta_2_gfcf"
)


_ext_constant_beta_2_hh = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "E332", {}, _root, "_ext_constant_beta_2_hh"
)


_ext_constant_beta_3_gfcf = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "G329", {}, _root, "_ext_constant_beta_3_gfcf"
)


_ext_constant_beta_3_exp = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "G335", {}, _root, "_ext_constant_beta_3_exp"
)


_ext_lookup_historic_real_exchange = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "343",
    "B344",
    {},
    _root,
    "_ext_lookup_historic_real_exchange",
)


_ext_constant_select_gdppc_evolution_input = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B4",
    {},
    _root,
    "_ext_constant_select_gdppc_evolution_input",
)


@subs(["sectors"], _subscript_dict)
def _init_gross_fixed_capital_formation():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for gross_fixed_capital_formation
    Limits: None
    Type: setup
    Subs: ['sectors']

    Provides initial conditions for gross_fixed_capital_formation function
    """
    return initial_gfcf()


@cache.step
@subs(["sectors"], _subscript_dict)
def _dgross_fixed_capital_formation_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for gross_fixed_capital_formation
    Limits: None
    Type: component
    Subs: ['sectors']

    Provides derivative for gross_fixed_capital_formation function
    """
    return (
        rearrange(variation_gfcf(), ["sectors"], _subscript_dict) - gfcf_not_covered()
    )


_integ_gross_fixed_capital_formation = Integ(
    _dgross_fixed_capital_formation_dt,
    _init_gross_fixed_capital_formation,
    "_integ_gross_fixed_capital_formation",
)


_ext_constant_initial_exports_demand = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B342",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_initial_exports_demand",
)


_integ_capital_share = Integ(
    lambda: variation_capital_share(), lambda: 0.413596, "_integ_capital_share"
)


_ext_constant_initial_gfcf = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B340",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_initial_gfcf",
)


_ext_lookup_historic_exports_demand = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "348",
    "B349",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_lookup_historic_exports_demand",
)


_ext_lookup_historic_gdppc = ExtLookup(
    "?inputs_eu.xlsx", "Economy", "324", "B328", {}, _root, "_ext_lookup_historic_gdppc"
)


_ext_constant_bet_0_hh = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "C332", {}, _root, "_ext_constant_bet_0_hh"
)


_ext_constant_beta_0_gfcf = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "C329", {}, _root, "_ext_constant_beta_0_gfcf"
)


_ext_constant_beta_0_exp = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "C335", {}, _root, "_ext_constant_beta_0_exp"
)


_ext_lookup_historic_hd = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "475",
    "B476",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_lookup_historic_hd",
)


_ext_constant_beta_1_hh = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B334",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_beta_1_hh",
)


_ext_constant_beta_2_exp = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "E335", {}, _root, "_ext_constant_beta_2_exp"
)


_ext_constant_p_capital_share = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "F3", {}, _root, "_ext_constant_p_capital_share"
)


_ext_data_historic_capital_share_growth = ExtData(
    "?inputs_eu.xlsx",
    "Economy",
    "324",
    "B325",
    None,
    {},
    _root,
    "_ext_data_historic_capital_share_growth",
)


_ext_data_p_timeseries_gdppc_growth_rate = ExtData(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "5",
    "E6",
    "interpolate",
    {},
    _root,
    "_ext_data_p_timeseries_gdppc_growth_rate",
)


_ext_constant_p_customized_cte_gdppc_variation = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G7",
    {},
    _root,
    "_ext_constant_p_customized_cte_gdppc_variation",
)


_delayfixed_desired_gdp_delayed_1yr = DelayFixed(
    lambda: desired_gdp(),
    lambda: 1,
    lambda: 8.6,
    time_step,
    "_delayfixed_desired_gdp_delayed_1yr",
)


_integ_desired_gdppc = Integ(
    lambda: desired_variation_gdppc(),
    lambda: gdppc_initial_year(),
    "_integ_desired_gdppc",
)


_ext_constant_initial_household_demand = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B339",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_initial_household_demand",
)


_ext_constant_gdppc_initial_year = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "B328", {}, _root, "_ext_constant_gdppc_initial_year"
)


_delayfixed_cc_total_delayed = DelayFixed(
    lambda: cc_total(), lambda: 1, lambda: 0, time_step, "_delayfixed_cc_total_delayed"
)


_integ_real_exchange = Integ(
    lambda: variation_real_exchange(), lambda: 1, "_integ_real_exchange"
)


_ext_lookup_historic_gfcf = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "514",
    "B515",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_lookup_historic_gfcf",
)


@subs(["sectors"], _subscript_dict)
def _init_exports_demand():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for exports_demand
    Limits: None
    Type: setup
    Subs: ['sectors']

    Provides initial conditions for exports_demand function
    """
    return initial_exports_demand()


@cache.step
@subs(["sectors"], _subscript_dict)
def _dexports_demand_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for exports_demand
    Limits: None
    Type: component
    Subs: ['sectors']

    Provides derivative for exports_demand function
    """
    return variation_exports_demand() - exports_demand_not_covered()


_integ_exports_demand = Integ(
    _dexports_demand_dt, _init_exports_demand, "_integ_exports_demand"
)


_ext_constant_p_customized_year_gdppc_evolution = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "E7",
    {},
    _root,
    "_ext_constant_p_customized_year_gdppc_evolution",
)


@subs(["sectors"], _subscript_dict)
def _init_household_demand():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for household_demand
    Limits: None
    Type: setup
    Subs: ['sectors']

    Provides initial conditions for household_demand function
    """
    return initial_household_demand()


@cache.step
@subs(["sectors"], _subscript_dict)
def _dhousehold_demand_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for household_demand
    Limits: None
    Type: component
    Subs: ['sectors']

    Provides derivative for household_demand function
    """
    return variation_household_demand() - household_demand_not_covered()


_integ_household_demand = Integ(
    _dhousehold_demand_dt, _init_household_demand, "_integ_household_demand"
)


_ext_constant_beta_3_hh = ExtConstant(
    "?inputs_eu.xlsx", "Economy", "G332", {}, _root, "_ext_constant_beta_3_hh"
)


_integ_cc_total = Integ(
    lambda: variation_cc() - cc_total_not_covered(),
    lambda: initial_cc_total(),
    "_integ_cc_total",
)


_integ_labour_share = Integ(
    lambda: variation_labour_share(), lambda: 0.481186, "_integ_labour_share"
)


_ext_lookup_gdppc_annual_growth_ssp2 = ExtLookup(
    "?inputs_eu.xlsx",
    "Result comparison",
    "33",
    "C35",
    {},
    _root,
    "_ext_lookup_gdppc_annual_growth_ssp2",
)


_ext_constant_initial_planted_forests = ExtConstant(
    "?inputs_eu.xlsx", "Land", "H26", {}, _root, "_ext_constant_initial_planted_forests"
)


_ext_constant_initial_urban_land = ExtConstant(
    "?inputs_eu.xlsx", "Land", "H27", {}, _root, "_ext_constant_initial_urban_land"
)


_ext_lookup_historic_primary_forest = ExtLookup(
    "?inputs_eu.xlsx",
    "Land",
    "20",
    "H24",
    {},
    _root,
    "_ext_lookup_historic_primary_forest",
)


_ext_constant_initial_other_naturally_regen_forest = ExtConstant(
    "?inputs_eu.xlsx",
    "Land",
    "H25",
    {},
    _root,
    "_ext_constant_initial_other_naturally_regen_forest",
)


_ext_constant_initial_primary_forest_area = ExtConstant(
    "?inputs_eu.xlsx",
    "Land",
    "H24",
    {},
    _root,
    "_ext_constant_initial_primary_forest_area",
)


_integ_urban_land = Integ(
    lambda: urban_land_rate(), lambda: initial_urban_land(), "_integ_urban_land"
)


_ext_data_historic_conv_oil_domestic_eu_extracted_ej = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "112",
    "H114",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_conv_oil_domestic_eu_extracted_ej",
)


_ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "112",
    "H117",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_unconv_nat_gas_domestic_eu_extracted_ej",
)


_ext_data_historic_unconv_oil_domestic_eu_extracted_ej = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "112",
    "H115",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_unconv_oil_domestic_eu_extracted_ej",
)


_ext_data_historic_uranium_domestic_eu_extracted_t = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "112",
    "H119",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_uranium_domestic_eu_extracted_t",
)


_ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "112",
    "H116",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_conv_nat_gas_domestic_eu_extracted_ej",
)


_ext_constant_av_past_eu_domestic_uranium_extraction = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "AE119",
    {},
    _root,
    "_ext_constant_av_past_eu_domestic_uranium_extraction",
)


_ext_constant_choose_gwp_time_frame = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "J116",
    {},
    _root,
    "_ext_constant_choose_gwp_time_frame",
)


_ext_constant_gwp_20_year = ExtConstant(
    "?inputs_eu.xlsx",
    "Climate",
    "B5",
    {"GHGs": ["CH4"]},
    _root,
    "_ext_constant_gwp_20_year",
)


_ext_constant_gwp_20_year.add("?inputs_eu.xlsx", "Climate", "B6", {"GHGs": ["N2O"]})


_ext_constant_gwp_20_year.add("?inputs_eu.xlsx", "Climate", "B7", {"GHGs": ["PFCs"]})


_ext_constant_gwp_20_year.add("?inputs_eu.xlsx", "Climate", "B8", {"GHGs": ["SF6"]})


_ext_constant_gwp_20_year.add("?inputs_eu.xlsx", "Climate", "B9", {"GHGs": ["HFC134a"]})


_ext_constant_gwp_20_year.add("?inputs_eu.xlsx", "Climate", "B10", {"GHGs": ["HFC23"]})


_ext_constant_gwp_20_year.add("?inputs_eu.xlsx", "Climate", "B11", {"GHGs": ["HFC32"]})


_ext_constant_gwp_20_year.add("?inputs_eu.xlsx", "Climate", "B12", {"GHGs": ["HFC125"]})


_ext_constant_gwp_20_year.add(
    "?inputs_eu.xlsx", "Climate", "B13", {"GHGs": ["HFC143a"]}
)


_ext_constant_gwp_20_year.add(
    "?inputs_eu.xlsx", "Climate", "B14", {"GHGs": ["HFC152a"]}
)


_ext_constant_gwp_20_year.add(
    "?inputs_eu.xlsx", "Climate", "B15", {"GHGs": ["HFC227ea"]}
)


_ext_constant_gwp_20_year.add(
    "?inputs_eu.xlsx", "Climate", "B16", {"GHGs": ["HFC245ca"]}
)


_ext_constant_gwp_20_year.add(
    "?inputs_eu.xlsx", "Climate", "B17", {"GHGs": ["HFC4310mee"]}
)


_ext_constant_gwp_100_year = ExtConstant(
    "?inputs_eu.xlsx",
    "Climate",
    "C5",
    {"GHGs": ["CH4"]},
    _root,
    "_ext_constant_gwp_100_year",
)


_ext_constant_gwp_100_year.add("?inputs_eu.xlsx", "Climate", "C6", {"GHGs": ["N2O"]})


_ext_constant_gwp_100_year.add("?inputs_eu.xlsx", "Climate", "C7", {"GHGs": ["PFCs"]})


_ext_constant_gwp_100_year.add("?inputs_eu.xlsx", "Climate", "C8", {"GHGs": ["SF6"]})


_ext_constant_gwp_100_year.add(
    "?inputs_eu.xlsx", "Climate", "C9", {"GHGs": ["HFC134a"]}
)


_ext_constant_gwp_100_year.add("?inputs_eu.xlsx", "Climate", "C10", {"GHGs": ["HFC23"]})


_ext_constant_gwp_100_year.add("?inputs_eu.xlsx", "Climate", "C11", {"GHGs": ["HFC32"]})


_ext_constant_gwp_100_year.add(
    "?inputs_eu.xlsx", "Climate", "C12", {"GHGs": ["HFC125"]}
)


_ext_constant_gwp_100_year.add(
    "?inputs_eu.xlsx", "Climate", "C13", {"GHGs": ["HFC143a"]}
)


_ext_constant_gwp_100_year.add(
    "?inputs_eu.xlsx", "Climate", "C14", {"GHGs": ["HFC152a"]}
)


_ext_constant_gwp_100_year.add(
    "?inputs_eu.xlsx", "Climate", "C15", {"GHGs": ["HFC227ea"]}
)


_ext_constant_gwp_100_year.add(
    "?inputs_eu.xlsx", "Climate", "C16", {"GHGs": ["HFC245ca"]}
)


_ext_constant_gwp_100_year.add(
    "?inputs_eu.xlsx", "Climate", "C17", {"GHGs": ["HFC4310mee"]}
)


_ext_constant_nvs_1_to_g = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G19", {}, _root, "_ext_constant_nvs_1_to_g"
)


_delayfixed_aux18 = DelayFixed(
    lambda: historic_share_net_imports_coal_eu_until_2016(),
    lambda: time_step(),
    lambda: 0.04,
    time_step,
    "_delayfixed_aux18",
)


_ext_data_historic_coal_domestic_eu_extracted_ej = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "112",
    "H118",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_coal_domestic_eu_extracted_ej",
)


_ext_constant_current_mineral_reserves_mt = ExtConstant(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_current_mineral_reserves_mt",
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV6", {"materials": ["Aluminium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV7",
    {"materials": ["Aluminium mirrors"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV8", {"materials": ["Cadmium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV9", {"materials": ["Carbon fiber"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV10", {"materials": ["Cement"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV11", {"materials": ["Chromium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV12", {"materials": ["Copper"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV13", {"materials": ["diesel"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV14", {"materials": ["Dy"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV16",
    {"materials": ["Evacuation lines"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV17", {"materials": ["Fiberglass"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV18", {"materials": ["Foam glass"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV19", {"materials": ["Galium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV20", {"materials": ["Glass"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV21",
    {"materials": ["Glass reinforcing plastic"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV22", {"materials": ["gravel"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV23", {"materials": ["Indium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV24", {"materials": ["Iron"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV25", {"materials": ["KNO3 mined"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV26", {"materials": ["Asphalt"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV27", {"materials": ["Lime"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV28", {"materials": ["Limestone"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV29", {"materials": ["Lithium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV30", {"materials": ["Lubricant"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV31", {"materials": ["Magnesium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV32", {"materials": ["Manganese"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV33",
    {"materials": ["Heavy equipment"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV34", {"materials": ["Concrete"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV35", {"materials": ["Molybdenum"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV37",
    {"materials": ["NaNO3 synthetic"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV38", {"materials": ["Neodymium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV39", {"materials": ["Nickel"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV40",
    {"materials": ["Over grid 15per"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV41",
    {"materials": ["Over grid 5per"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV42", {"materials": ["Paint"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV43", {"materials": ["Lead"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV44", {"materials": ["Plastics"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV45",
    {"materials": ["Polypropylene"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV46", {"materials": ["Rock"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV47", {"materials": ["Rock wool"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV48", {"materials": ["Sand"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV49", {"materials": ["Silicon sand"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV50",
    {"materials": ["Silicon wafer modules"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV51", {"materials": ["Silver"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV52",
    {"materials": ["Site preparation"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV53", {"materials": ["Tin"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV54", {"materials": ["soda ash"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV55", {"materials": ["steel"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV56",
    {"materials": ["synthetic oil"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV57", {"materials": ["tellurium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV58", {"materials": ["titanium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AV59",
    {"materials": ["titanium dioxide"]},
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV60", {"materials": ["vanadium"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV61", {"materials": ["wires"]}
)


_ext_constant_current_mineral_reserves_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AV62", {"materials": ["zinc"]}
)


_ext_constant_current_mineral_resources_mt = ExtConstant(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_current_mineral_resources_mt",
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY6", {"materials": ["Aluminium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY7",
    {"materials": ["Aluminium mirrors"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY8", {"materials": ["Cadmium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY9", {"materials": ["Carbon fiber"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY10", {"materials": ["Cement"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY11", {"materials": ["Chromium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY12", {"materials": ["Copper"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY13", {"materials": ["diesel"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY14", {"materials": ["Dy"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY16",
    {"materials": ["Evacuation lines"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY17", {"materials": ["Fiberglass"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY18", {"materials": ["Foam glass"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY19", {"materials": ["Galium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY20", {"materials": ["Glass"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY21",
    {"materials": ["Glass reinforcing plastic"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY22", {"materials": ["gravel"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY23", {"materials": ["Indium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY24", {"materials": ["Iron"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY25", {"materials": ["KNO3 mined"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY26", {"materials": ["Asphalt"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY27", {"materials": ["Lime"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY28", {"materials": ["Limestone"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY29", {"materials": ["Lithium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY30", {"materials": ["Lubricant"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY31", {"materials": ["Magnesium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY32", {"materials": ["Manganese"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY33",
    {"materials": ["Heavy equipment"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY34", {"materials": ["Concrete"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY35", {"materials": ["Molybdenum"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY37",
    {"materials": ["NaNO3 synthetic"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY38", {"materials": ["Neodymium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY39", {"materials": ["Nickel"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY40",
    {"materials": ["Over grid 15per"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY41",
    {"materials": ["Over grid 5per"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY42", {"materials": ["Paint"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY43", {"materials": ["Lead"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY44", {"materials": ["Plastics"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY45",
    {"materials": ["Polypropylene"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY46", {"materials": ["Rock"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY47", {"materials": ["Rock wool"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY48", {"materials": ["Sand"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY49", {"materials": ["Silicon sand"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY50",
    {"materials": ["Silicon wafer modules"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY51", {"materials": ["Silver"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY52",
    {"materials": ["Site preparation"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY53", {"materials": ["Tin"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY54", {"materials": ["soda ash"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY55", {"materials": ["steel"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY56",
    {"materials": ["synthetic oil"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY57", {"materials": ["tellurium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY58", {"materials": ["titanium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx",
    "Materials",
    "AY59",
    {"materials": ["titanium dioxide"]},
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY60", {"materials": ["vanadium"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY61", {"materials": ["wires"]}
)


_ext_constant_current_mineral_resources_mt.add(
    "?../pymedeas_w/inputs_w.xlsx", "Materials", "AY62", {"materials": ["zinc"]}
)


_ext_constant_current_annual_extraction_materials_mtyr = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "BY5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_current_annual_extraction_materials_mtyr",
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY6", {"materials": ["Aluminium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY8", {"materials": ["Cadmium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY9", {"materials": ["Carbon fiber"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY10", {"materials": ["Cement"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY11", {"materials": ["Chromium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY12", {"materials": ["Copper"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY13", {"materials": ["diesel"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY14", {"materials": ["Dy"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx",
    "Materials",
    "BY15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY16", {"materials": ["Evacuation lines"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY17", {"materials": ["Fiberglass"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY18", {"materials": ["Foam glass"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY19", {"materials": ["Galium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY20", {"materials": ["Glass"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY22", {"materials": ["gravel"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY23", {"materials": ["Indium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY24", {"materials": ["Iron"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY25", {"materials": ["KNO3 mined"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY26", {"materials": ["Asphalt"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY27", {"materials": ["Lime"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY28", {"materials": ["Limestone"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY29", {"materials": ["Lithium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY30", {"materials": ["Lubricant"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY31", {"materials": ["Magnesium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY32", {"materials": ["Manganese"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY33", {"materials": ["Heavy equipment"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY34", {"materials": ["Concrete"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY35", {"materials": ["Molybdenum"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY38", {"materials": ["Neodymium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY39", {"materials": ["Nickel"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY40", {"materials": ["Over grid 15per"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY41", {"materials": ["Over grid 5per"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY42", {"materials": ["Paint"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY43", {"materials": ["Lead"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY44", {"materials": ["Plastics"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY45", {"materials": ["Polypropylene"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY46", {"materials": ["Rock"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY47", {"materials": ["Rock wool"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY48", {"materials": ["Sand"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY49", {"materials": ["Silicon sand"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY51", {"materials": ["Silver"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY52", {"materials": ["Site preparation"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY53", {"materials": ["Tin"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY54", {"materials": ["soda ash"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY55", {"materials": ["steel"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY56", {"materials": ["synthetic oil"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY57", {"materials": ["tellurium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY58", {"materials": ["titanium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY59", {"materials": ["titanium dioxide"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY60", {"materials": ["vanadium"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY61", {"materials": ["wires"]}
)


_ext_constant_current_annual_extraction_materials_mtyr.add(
    "?inputs_eu.xlsx", "Materials", "BY62", {"materials": ["zinc"]}
)


_ext_constant_share_available_roof_for_solar_thermal = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G30",
    {},
    _root,
    "_ext_constant_share_available_roof_for_solar_thermal",
)


_ext_constant_leontief_matrix_eu_imports_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "RW203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2009",
)


_ext_constant_leontief_matrix_eu_imports_2001 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "HC203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2001",
)


_ext_constant_leontief_matrix_eu_imports_1996 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "AJ203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_1996",
)


_ext_constant_leontief_matrix_eu_imports_1997 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "BS203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_1997",
)


_ext_constant_leontief_matrix_eu_imports_1998 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "DB203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_1998",
)


_ext_constant_leontief_matrix_eu_imports_1999 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "EK203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_1999",
)


_ext_constant_leontief_matrix_eu_imports_2000 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "FT203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2000",
)


_ext_constant_leontief_matrix_eu_imports_2005 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "MM203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2005",
)


_ext_constant_leontief_matrix_eu_imports_2002 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "IL203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2002",
)


_ext_constant_leontief_matrix_eu_imports_2003 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "JU203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2003",
)


_ext_constant_leontief_matrix_eu_imports_2004 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "LD203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2004",
)


_ext_constant_leontief_matrix_eu_imports_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "A203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_1995",
)


_ext_constant_leontief_matrix_eu_imports_2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "NV203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2006",
)


_ext_constant_leontief_matrix_eu_imports_2007 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "PE203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2007",
)


_ext_constant_leontief_matrix_eu_imports_2008 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "QN203",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_imports_2008",
)


_ext_constant_a_matrix_eu_exports_2000 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "FT121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2000",
)


_ext_constant_a_matrix_eu_exports_2002 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "IL121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2002",
)


_ext_constant_a_matrix_eu_exports_2003 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "JU121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2003",
)


_ext_constant_a_matrix_eu_exports_2004 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "LD121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2004",
)


_ext_constant_a_matrix_eu_exports_2005 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "MM121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2005",
)


_ext_constant_a_matrix_eu_exports_2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "NV121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2006",
)


_ext_constant_a_matrix_eu_exports_2007 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "PE121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2007",
)


_ext_constant_a_matrix_eu_imports_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "A161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_1995",
)


_ext_constant_a_matrix_eu_imports_1996 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "AJ161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_1996",
)


_ext_constant_a_matrix_eu_imports_1997 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "BS161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_1997",
)


_ext_constant_a_matrix_eu_imports_1998 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "DB161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_1998",
)


_ext_constant_a_matrix_eu_imports_1999 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "EK161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_1999",
)


_ext_constant_a_matrix_eu_imports_2000 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "FT161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2000",
)


_ext_constant_a_matrix_eu_imports_2001 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "HC161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2001",
)


_ext_constant_a_matrix_eu_imports_2002 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "IL161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2002",
)


_ext_constant_a_matrix_eu_imports_2003 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "JU161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2003",
)


_ext_constant_a_matrix_eu_imports_2004 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "LD161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2004",
)


_ext_constant_a_matrix_eu_imports_2005 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "MM161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2005",
)


_ext_constant_a_matrix_eu_imports_2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "NV161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2006",
)


_ext_constant_a_matrix_eu_imports_2007 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "PE161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2007",
)


_ext_constant_a_matrix_eu_imports_2008 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "QN161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2008",
)


_ext_constant_a_matrix_eu_exports_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "A121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_1995",
)


_ext_constant_a_matrix_eu_exports_1996 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "AJ121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_1996",
)


_ext_constant_a_matrix_eu_exports_1997 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "BS121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_1997",
)


_ext_constant_a_matrix_eu_exports_1998 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "DB121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_1998",
)


_ext_constant_a_matrix_eu_exports_1999 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "EK121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_1999",
)


_ext_constant_a_matrix_eu_exports_2001 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "HC121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2001",
)


_ext_constant_a_matrix_eu_exports_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "RW121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2009",
)


_smooth_real_demand_delayed_1yr = Smooth(
    lambda: real_demand_tdollars(),
    lambda: 1,
    lambda: 8.6,
    lambda: 12,
    "_smooth_real_demand_delayed_1yr",
)


_ext_constant_a_matrix_eu_imports_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "RW161",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_imports_2009",
)


_ext_constant_a_matrix_eu_exports_2008 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "QN121",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_a_matrix_eu_exports_2008",
)


_ext_constant_ia_matrix_eu_exports_2005 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "MM81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2005",
)


_ext_constant_ia_matrix_eu_exports_2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "NV81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2006",
)


_ext_constant_ia_matrix_eu_exports_2007 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "PE81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2007",
)


_ext_constant_ia_matrix_eu_exports_2008 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "QN81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2008",
)


_ext_constant_ia_matrix_eu_exports_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "RW81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2009",
)


_ext_constant_ia_matrix_eu_exports_1999 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "EK81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_1999",
)


_ext_constant_ia_matrix_eu_exports_2000 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "FT81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2000",
)


_ext_constant_ia_matrix_eu_exports_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "A81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_1995",
)


_ext_constant_ia_matrix_eu_exports_1996 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "AJ81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_1996",
)


_ext_constant_ia_matrix_eu_exports_1997 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "BS81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_1997",
)


_ext_constant_ia_matrix_eu_exports_1998 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "DB81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_1998",
)


_ext_constant_ia_matrix_eu_exports_2004 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "LD81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2004",
)


_ext_constant_ia_matrix_eu_exports_2003 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "JU81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2003",
)


_ext_constant_ia_matrix_eu_exports_2002 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "IL81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2002",
)


_ext_constant_ia_matrix_eu_exports_2001 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "HC81",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_eu_exports_2001",
)


_ext_constant_leontief_matrix_eu_exports_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "A42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_1995",
)


_ext_constant_leontief_matrix_eu_exports_1996 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "AJ42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_1996",
)


_ext_constant_leontief_matrix_eu_exports_1997 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "BS42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_1997",
)


_ext_constant_leontief_matrix_eu_exports_1998 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "DB42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_1998",
)


_ext_constant_leontief_matrix_eu_exports_1999 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "EK42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_1999",
)


_ext_constant_leontief_matrix_eu_exports_2000 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "FT42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2000",
)


_ext_constant_leontief_matrix_eu_exports_2002 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "IL42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2002",
)


_ext_constant_leontief_matrix_eu_exports_2005 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "MM42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2005",
)


_ext_constant_leontief_matrix_eu_exports_2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "NV42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2006",
)


_ext_constant_leontief_matrix_eu_exports_2007 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "PE42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2007",
)


_ext_constant_leontief_matrix_eu_exports_2008 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "QN42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2008",
)


_ext_constant_leontief_matrix_eu_exports_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "RW42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2009",
)


_ext_constant_leontief_matrix_eu_exports_2004 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "LD42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2004",
)


_ext_constant_leontief_matrix_eu_exports_2001 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "HC42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2001",
)


_ext_constant_leontief_matrix_eu_exports_2003 = ExtConstant(
    "?inputs_eu.xlsx",
    "RoW",
    "JU42",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_eu_exports_2003",
)


_ext_lookup_historic_demand_by_sector_row = ExtLookup(
    "?inputs_eu.xlsx",
    "RoW",
    "2",
    "B3",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_lookup_historic_demand_by_sector_row",
)


_integ_land_compet_biofuels_3gen_mha = Integ(
    lambda: land_shifted_to_biofuels_3gen() - land_compet_biofuels_3gen_abandonned(),
    lambda: 0,
    "_integ_land_compet_biofuels_3gen_mha",
)


_integ_potential_pe_cellulosic_biofuel_ej = Integ(
    lambda: new_cellulosic_biofuels() - potential_pe_cellulosic_biofuel_abanndoned(),
    lambda: 0,
    "_integ_potential_pe_cellulosic_biofuel_ej",
)


_integ_land_compet_biofuels_2gen_mha = Integ(
    lambda: new_biofuels_2gen_land_compet()
    - land_compet_biofuels_2gen_abandonned()
    - land_shifted_to_biofuels_3gen(),
    lambda: initial_value_land_compet_biofuels_2gen_mha()
    * land_productivity_biofuels_2gen_ej_mha(),
    "_integ_land_compet_biofuels_2gen_mha",
)


_integ_potential_peavail_biofuels_land_marg_ej = Integ(
    lambda: new_biofuels_land_marg()
    - potential_peavail_biofuels_land_marg_abandonned(),
    lambda: 0,
    "_integ_potential_peavail_biofuels_land_marg_ej",
)


_ext_constant_p_share_installed_pv_urban_vs_tot_pv = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F35",
    {},
    _root,
    "_ext_constant_p_share_installed_pv_urban_vs_tot_pv",
)


_ext_data_historic_share_installed_pv_urban_vs_tot_pv = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H77",
    None,
    {},
    _root,
    "_ext_data_historic_share_installed_pv_urban_vs_tot_pv",
)


_delayfixed_aux1_0 = DelayFixed(
    lambda: potential_elec_gen_from_solar_pv_urban_twh(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux1_0",
)


_ext_constant_f1_pv_solar_in_target_year = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G24",
    {},
    _root,
    "_ext_constant_f1_pv_solar_in_target_year",
)


_ext_data_power_density_initial_res_elec_twemha = ExtData(
    "?inputs_eu.xlsx",
    "Parameters",
    "6",
    "G20",
    "interpolate",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_data_power_density_initial_res_elec_twemha",
)


_ext_constant_power_density_initial_res_elec_twemha = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "B7",
    {"RES elec": ["geot elec"]},
    _root,
    "_ext_constant_power_density_initial_res_elec_twemha",
)


_ext_constant_power_density_initial_res_elec_twemha.add(
    "?inputs_eu.xlsx", "Parameters", "B10", {"RES elec": ["wind onshore"]}
)


_ext_constant_power_density_initial_res_elec_twemha.add(
    "?inputs_eu.xlsx", "Parameters", "B12", {"RES elec": ["wind offshore"]}
)


_ext_constant_power_density_initial_res_elec_twemha.add(
    "?inputs_eu.xlsx", "Parameters", "B16", {"RES elec": ["CSP"]}
)


_ext_constant_f2_pf_solar_pv = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "K37", {}, _root, "_ext_constant_f2_pf_solar_pv"
)


_ext_constant_f3_solar_pv_on_land = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "K38",
    {},
    _root,
    "_ext_constant_f3_solar_pv_on_land",
)


_ext_constant_av_solar_i = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "K24", {}, _root, "_ext_constant_av_solar_i"
)


_ext_constant_twhmha_per_wem2 = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C19", {}, _root, "_ext_constant_twhmha_per_wem2"
)


_ext_constant_share_available_roof = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G28",
    {},
    _root,
    "_ext_constant_share_available_roof",
)


_ext_constant_share_available_roof_for_rooftop_pv = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G29",
    {},
    _root,
    "_ext_constant_share_available_roof_for_rooftop_pv",
)


_ext_constant_start_year_p_f1_solar_pv = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G25",
    {},
    _root,
    "_ext_constant_start_year_p_f1_solar_pv",
)


_ext_constant_target_year_f1_solar_pv = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G26",
    {},
    _root,
    "_ext_constant_target_year_f1_solar_pv",
)


_ext_constant_f1ini_solar_pv = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "K39", {}, _root, "_ext_constant_f1ini_solar_pv"
)


_integ_rurr_tot_agg_oil = Integ(
    lambda: -extraction_tot_agg_oil_ej() - flow_tot_agg_oil_left_in_ground(),
    lambda: if_then_else(
        separate_conv_and_unconv_oil() == 0,
        lambda: urr_tot_agg_oil() - cumulated_tot_agg_extraction_to_1995(),
        lambda: 0,
    ),
    "_integ_rurr_tot_agg_oil",
)


_integ_rurr_tot_agg_gas = Integ(
    lambda: -extraction_tot_agg_gas_ej() - flow_tot_agg_gas_left_in_ground(),
    lambda: if_then_else(
        separate_conv_and_unconv_gas() == 0,
        lambda: urr_tot_agg_gas() - cumulated_tot_agg_gas_extraction_to_1995(),
        lambda: 0,
    ),
    "_integ_rurr_tot_agg_gas",
)


_ext_constant_minimum_eroi_brandt_2017 = ExtConstant(
    "?inputs_eu.xlsx",
    "Result comparison",
    "C52",
    {},
    _root,
    "_ext_constant_minimum_eroi_brandt_2017",
)


_ext_constant_minimum_eroi_hall_et_al_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "Result comparison",
    "C53",
    {},
    _root,
    "_ext_constant_minimum_eroi_hall_et_al_2009",
)


_ext_constant_potential_marginal_lands_mha = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C43",
    {},
    _root,
    "_ext_constant_potential_marginal_lands_mha",
)


_ext_constant_p_biofuels_marg_lands = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F46",
    {},
    _root,
    "_ext_constant_p_biofuels_marg_lands",
)


_ext_constant_start_year_p_growth_res_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C58",
    {},
    _root,
    "_ext_constant_start_year_p_growth_res_heat",
)


_ext_constant_start_year_p_growth_res_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F32",
    {},
    _root,
    "_ext_constant_start_year_p_growth_res_elec",
)


_ext_constant_land_productivity_biofuels_marg_ej_mha = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C63",
    {},
    _root,
    "_ext_constant_land_productivity_biofuels_marg_ej_mha",
)


_ext_constant_share_in_target_year_oil_for_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "I167",
    {},
    _root,
    "_ext_constant_share_in_target_year_oil_for_elec",
)


_ext_constant_share_in_target_year_oil_for_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "I168",
    {},
    _root,
    "_ext_constant_share_in_target_year_oil_for_heat",
)


_ext_constant_start_year_policy_phaseout_oil_for_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "E167",
    {},
    _root,
    "_ext_constant_start_year_policy_phaseout_oil_for_elec",
)


_ext_constant_target_year_policy_phaseout_oil_for_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G167",
    {},
    _root,
    "_ext_constant_target_year_policy_phaseout_oil_for_elec",
)


_ext_constant_target_year_policy_phaseout_oil_for_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G168",
    {},
    _root,
    "_ext_constant_target_year_policy_phaseout_oil_for_heat",
)


_ext_constant_start_year_policy_phaseout_oil_for_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "E168",
    {},
    _root,
    "_ext_constant_start_year_policy_phaseout_oil_for_heat",
)


@subs(["materials"], _subscript_dict)
def _init_scarcity_resources_counter():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for scarcity_resources_counter
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for scarcity_resources_counter function
    """
    return 0


@cache.step
@subs(["materials"], _subscript_dict)
def _dscarcity_resources_counter_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for scarcity_resources_counter
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for scarcity_resources_counter function
    """
    return if_then_else(materials_availability_resources() == 0, lambda: 1, lambda: 0)


_integ_scarcity_resources_counter = Integ(
    _dscarcity_resources_counter_dt,
    _init_scarcity_resources_counter,
    "_integ_scarcity_resources_counter",
)


@subs(["final sources"], _subscript_dict)
def _init_year_init_scarcity_final_fuels():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for year_init_scarcity_final_fuels
    Limits: None
    Type: setup
    Subs: ['final sources']

    Provides initial conditions for year_init_scarcity_final_fuels function
    """
    return 0


@cache.step
@subs(["final sources"], _subscript_dict)
def _dyear_init_scarcity_final_fuels_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for year_init_scarcity_final_fuels
    Limits: None
    Type: component
    Subs: ['final sources']

    Provides derivative for year_init_scarcity_final_fuels function
    """
    return if_then_else(
        scarcity_final_fuels_flags() == 1,
        lambda: (
            if_then_else(
                scarcity_final_fuels_counter() == 1,
                lambda: (time() * 1 / time_step()) - 20,
                lambda: 0,
            )
        ),
        lambda: 0,
    )


_integ_year_init_scarcity_final_fuels = Integ(
    _dyear_init_scarcity_final_fuels_dt,
    _init_year_init_scarcity_final_fuels,
    "_integ_year_init_scarcity_final_fuels",
)


@subs(["materials"], _subscript_dict)
def _init_year_init_scarcity_reserves():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for year_init_scarcity_reserves
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for year_init_scarcity_reserves function
    """
    return 0


@cache.step
@subs(["materials"], _subscript_dict)
def _dyear_init_scarcity_reserves_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for year_init_scarcity_reserves
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for year_init_scarcity_reserves function
    """
    return if_then_else(
        materials_availability_reserves() == 0,
        lambda: (
            if_then_else(
                scarcity_reserves_counter() == 1,
                lambda: (time() * 1 / time_step()),
                lambda: 0,
            )
        ),
        lambda: 0,
    )


_integ_year_init_scarcity_reserves = Integ(
    _dyear_init_scarcity_reserves_dt,
    _init_year_init_scarcity_reserves,
    "_integ_year_init_scarcity_reserves",
)


@subs(["final sources"], _subscript_dict)
def _init_scarcity_final_fuels_counter():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for scarcity_final_fuels_counter
    Limits: None
    Type: setup
    Subs: ['final sources']

    Provides initial conditions for scarcity_final_fuels_counter function
    """
    return 0


@cache.step
@subs(["final sources"], _subscript_dict)
def _dscarcity_final_fuels_counter_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for scarcity_final_fuels_counter
    Limits: None
    Type: component
    Subs: ['final sources']

    Provides derivative for scarcity_final_fuels_counter function
    """
    return if_then_else(scarcity_final_fuels_flags() == 1, lambda: 1, lambda: 0)


_integ_scarcity_final_fuels_counter = Integ(
    _dscarcity_final_fuels_counter_dt,
    _init_scarcity_final_fuels_counter,
    "_integ_scarcity_final_fuels_counter",
)


@subs(["materials"], _subscript_dict)
def _init_scarcity_reserves_counter():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for scarcity_reserves_counter
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for scarcity_reserves_counter function
    """
    return 0


@cache.step
@subs(["materials"], _subscript_dict)
def _dscarcity_reserves_counter_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for scarcity_reserves_counter
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for scarcity_reserves_counter function
    """
    return if_then_else(materials_availability_reserves() == 0, lambda: 1, lambda: 0)


_integ_scarcity_reserves_counter = Integ(
    _dscarcity_reserves_counter_dt,
    _init_scarcity_reserves_counter,
    "_integ_scarcity_reserves_counter",
)


@subs(["materials"], _subscript_dict)
def _init_year_init_scarcity_resources():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for year_init_scarcity_resources
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for year_init_scarcity_resources function
    """
    return 0


@cache.step
@subs(["materials"], _subscript_dict)
def _dyear_init_scarcity_resources_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for year_init_scarcity_resources
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for year_init_scarcity_resources function
    """
    return if_then_else(
        materials_availability_resources() == 0,
        lambda: (
            if_then_else(
                scarcity_resources_counter() == 1,
                lambda: (time() * 1 / time_step()),
                lambda: 0,
            )
        ),
        lambda: 0,
    )


_integ_year_init_scarcity_resources = Integ(
    _dyear_init_scarcity_resources_dt,
    _init_year_init_scarcity_resources,
    "_integ_year_init_scarcity_resources",
)


_ext_constant_ar_water = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G76", {}, _root, "_ext_constant_ar_water"
)


_ext_constant_renewable_water_resources = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G75",
    {},
    _root,
    "_ext_constant_renewable_water_resources",
)


_ext_constant_dam3_per_km3 = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G16", {}, _root, "_ext_constant_dam3_per_km3"
)


_delayfixed_shortage_bioe_non_trad_delayed_1yr = DelayFixed(
    lambda: shortage_bioe_non_trad(),
    lambda: 1,
    lambda: 1,
    time_step,
    "_delayfixed_shortage_bioe_non_trad_delayed_1yr",
)


_ext_constant_p_rr_ti_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E303", {}, _root, "_ext_constant_p_rr_ti_rest"
)


_ext_constant_p_rr_li_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E294", {}, _root, "_ext_constant_p_rr_li_rest"
)


_ext_constant_p_rr_v_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E304", {}, _root, "_ext_constant_p_rr_v_rest"
)


_ext_constant_p_rr_mg_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E295", {}, _root, "_ext_constant_p_rr_mg_rest"
)


_ext_constant_p_rr_zn_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E305", {}, _root, "_ext_constant_p_rr_zn_rest"
)


_ext_constant_p_rr_cd_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E288", {}, _root, "_ext_constant_p_rr_cd_rest"
)


_delayfixed_by_mineral_rr_rest_1yr = DelayFixed(
    lambda: by_mineral_rr_rest(),
    lambda: 1,
    lambda: current_recycling_rates_minerals_alt_techn(),
    time_step,
    "_delayfixed_by_mineral_rr_rest_1yr",
)


_ext_constant_p_rr_cu_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E290", {}, _root, "_ext_constant_p_rr_cu_rest"
)


_ext_constant_start_year_p_rr_minerals_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B286",
    {},
    _root,
    "_ext_constant_start_year_p_rr_minerals_rest",
)


_ext_constant_p_rr_in_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E292", {}, _root, "_ext_constant_p_rr_in_rest"
)


_ext_constant_p_rr_te_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E302", {}, _root, "_ext_constant_p_rr_te_rest"
)


_ext_constant_p_rr_mo_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E297", {}, _root, "_ext_constant_p_rr_mo_rest"
)


_ext_constant_p_rr_ag_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E300", {}, _root, "_ext_constant_p_rr_ag_rest"
)


_ext_constant_p_rr_mn_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E296", {}, _root, "_ext_constant_p_rr_mn_rest"
)


_ext_constant_p_rr_al_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E287", {}, _root, "_ext_constant_p_rr_al_rest"
)


_ext_constant_target_year_p_rr_minerals_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B285",
    {},
    _root,
    "_ext_constant_target_year_p_rr_minerals_rest",
)


_ext_constant_p_rr_ga_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E291", {}, _root, "_ext_constant_p_rr_ga_rest"
)


_ext_constant_p_rr_sn_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E301", {}, _root, "_ext_constant_p_rr_sn_rest"
)


_ext_constant_p_rr_pb_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E299", {}, _root, "_ext_constant_p_rr_pb_rest"
)


_ext_constant_p_rr_cr_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E289", {}, _root, "_ext_constant_p_rr_cr_rest"
)


_ext_constant_p_rr_ni_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E298", {}, _root, "_ext_constant_p_rr_ni_rest"
)


_ext_constant_p_rr_fe_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E293", {}, _root, "_ext_constant_p_rr_fe_rest"
)


_ext_constant_p_rr_mg_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D295",
    {},
    _root,
    "_ext_constant_p_rr_mg_alt_techn",
)


_ext_constant_p_rr_mn_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D296",
    {},
    _root,
    "_ext_constant_p_rr_mn_alt_techn",
)


_ext_constant_p_rr_mo_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D297",
    {},
    _root,
    "_ext_constant_p_rr_mo_alt_techn",
)


_ext_constant_p_rr_ni_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D298",
    {},
    _root,
    "_ext_constant_p_rr_ni_alt_techn",
)


_ext_constant_p_rr_pb_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D299",
    {},
    _root,
    "_ext_constant_p_rr_pb_alt_techn",
)


_delayfixed_by_mineral_rr_alt_techn_1yr = DelayFixed(
    lambda: by_mineral_rr_alt_techn(),
    lambda: 1,
    lambda: current_recycling_rates_minerals_alt_techn(),
    time_step,
    "_delayfixed_by_mineral_rr_alt_techn_1yr",
)


_ext_constant_p_rr_al_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D287",
    {},
    _root,
    "_ext_constant_p_rr_al_alt_techn",
)


_ext_constant_p_rr_cd_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D288",
    {},
    _root,
    "_ext_constant_p_rr_cd_alt_techn",
)


_ext_constant_p_rr_cu_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D290",
    {},
    _root,
    "_ext_constant_p_rr_cu_alt_techn",
)


_ext_constant_p_rr_fe_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D293",
    {},
    _root,
    "_ext_constant_p_rr_fe_alt_techn",
)


_ext_constant_p_rr_ga_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D291",
    {},
    _root,
    "_ext_constant_p_rr_ga_alt_techn",
)


_ext_constant_p_rr_in_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D292",
    {},
    _root,
    "_ext_constant_p_rr_in_alt_techn",
)


_ext_constant_p_rr_li_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D294",
    {},
    _root,
    "_ext_constant_p_rr_li_alt_techn",
)


@subs(["materials"], _subscript_dict)
def _init_recycling_rates_minerals_alt_techn():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for recycling_rates_minerals_alt_techn
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for recycling_rates_minerals_alt_techn function
    """
    return current_recycling_rates_minerals_alt_techn() * all_minerals_virgin()


@cache.step
@subs(["materials"], _subscript_dict)
def _drecycling_rates_minerals_alt_techn_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for recycling_rates_minerals_alt_techn
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for recycling_rates_minerals_alt_techn function
    """
    return improvement_recycling_rates_minerals_alt_techn()


_integ_recycling_rates_minerals_alt_techn = Integ(
    _drecycling_rates_minerals_alt_techn_dt,
    _init_recycling_rates_minerals_alt_techn,
    "_integ_recycling_rates_minerals_alt_techn",
)


_ext_constant_p_rr_v_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D304",
    {},
    _root,
    "_ext_constant_p_rr_v_alt_techn",
)


_ext_constant_p_rr_zn_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D305",
    {},
    _root,
    "_ext_constant_p_rr_zn_alt_techn",
)


_ext_constant_p_rr_ti_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D303",
    {},
    _root,
    "_ext_constant_p_rr_ti_alt_techn",
)


_ext_constant_p_rr_cr_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D289",
    {},
    _root,
    "_ext_constant_p_rr_cr_alt_techn",
)


_ext_constant_p_rr_ag_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D300",
    {},
    _root,
    "_ext_constant_p_rr_ag_alt_techn",
)


_ext_constant_p_rr_sn_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D301",
    {},
    _root,
    "_ext_constant_p_rr_sn_alt_techn",
)


_ext_constant_p_rr_te_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D302",
    {},
    _root,
    "_ext_constant_p_rr_te_alt_techn",
)


_ext_constant_start_year_p_rr_minerals_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B286",
    {},
    _root,
    "_ext_constant_start_year_p_rr_minerals_alt_techn",
)


_ext_constant_target_year_p_rr_minerals_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B285",
    {},
    _root,
    "_ext_constant_target_year_p_rr_minerals_alt_techn",
)


_ext_data_sf6_emissions_rcp = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J63",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    "_ext_data_sf6_emissions_rcp",
)


_ext_data_sf6_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J64",
    "interpolate",
    {"RCP Scenario": ["RCP45"]},
)


_ext_data_sf6_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J65",
    "interpolate",
    {"RCP Scenario": ["RCP60"]},
)


_ext_data_sf6_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J66",
    "interpolate",
    {"RCP Scenario": ["RCP85"]},
)


_ext_constant_choose_rcp = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "G116", {}, _root, "_ext_constant_choose_rcp"
)


_ext_data_ch4_anthro_emissions_rcp = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J51",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    "_ext_data_ch4_anthro_emissions_rcp",
)


_ext_data_ch4_anthro_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J52",
    "interpolate",
    {"RCP Scenario": ["RCP45"]},
)


_ext_data_ch4_anthro_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J53",
    "interpolate",
    {"RCP Scenario": ["RCP60"]},
)


_ext_data_ch4_anthro_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J54",
    "interpolate",
    {"RCP Scenario": ["RCP85"]},
)


_ext_data_hfc_emissions_rcp_26 = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J68",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    "_ext_data_hfc_emissions_rcp_26",
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx", "Climate", "50", "J72", "interpolate", {"HFC type": ["HFC23"]}
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx", "Climate", "50", "J76", "interpolate", {"HFC type": ["HFC32"]}
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx", "Climate", "50", "J80", "interpolate", {"HFC type": ["HFC125"]}
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx", "Climate", "50", "J84", "interpolate", {"HFC type": ["HFC143a"]}
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx", "Climate", "50", "J88", "interpolate", {"HFC type": ["HFC152a"]}
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx", "Climate", "50", "J92", "interpolate", {"HFC type": ["HFC227ea"]}
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx", "Climate", "50", "J96", "interpolate", {"HFC type": ["HFC245ca"]}
)


_ext_data_hfc_emissions_rcp_26.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J100",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


_ext_data_hfc_emissions_rcp_45 = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J69",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    "_ext_data_hfc_emissions_rcp_45",
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx", "Climate", "50", "J73", "interpolate", {"HFC type": ["HFC23"]}
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx", "Climate", "50", "J77", "interpolate", {"HFC type": ["HFC32"]}
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx", "Climate", "50", "J81", "interpolate", {"HFC type": ["HFC125"]}
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx", "Climate", "50", "J85", "interpolate", {"HFC type": ["HFC143a"]}
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx", "Climate", "50", "J89", "interpolate", {"HFC type": ["HFC152a"]}
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx", "Climate", "50", "J93", "interpolate", {"HFC type": ["HFC227ea"]}
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx", "Climate", "50", "J97", "interpolate", {"HFC type": ["HFC245ca"]}
)


_ext_data_hfc_emissions_rcp_45.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J101",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


_ext_data_hfc_emissions_rcp_60 = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J70",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    "_ext_data_hfc_emissions_rcp_60",
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx", "Climate", "50", "J74", "interpolate", {"HFC type": ["HFC23"]}
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx", "Climate", "50", "J78", "interpolate", {"HFC type": ["HFC32"]}
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx", "Climate", "50", "J82", "interpolate", {"HFC type": ["HFC125"]}
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx", "Climate", "50", "J86", "interpolate", {"HFC type": ["HFC143a"]}
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx", "Climate", "50", "J90", "interpolate", {"HFC type": ["HFC152a"]}
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx", "Climate", "50", "J94", "interpolate", {"HFC type": ["HFC227ea"]}
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx", "Climate", "50", "J98", "interpolate", {"HFC type": ["HFC245ca"]}
)


_ext_data_hfc_emissions_rcp_60.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J102",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


_ext_data_pfc_emissions_rcp = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J59",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    "_ext_data_pfc_emissions_rcp",
)


_ext_data_pfc_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J60",
    "interpolate",
    {"RCP Scenario": ["RCP45"]},
)


_ext_data_pfc_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J61",
    "interpolate",
    {"RCP Scenario": ["RCP60"]},
)


_ext_data_pfc_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J62",
    "interpolate",
    {"RCP Scenario": ["RCP85"]},
)


_ext_data_n2o_anthro_emissions_rcp = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J55",
    "interpolate",
    {"RCP Scenario": ["RCP26"]},
    _root,
    "_ext_data_n2o_anthro_emissions_rcp",
)


_ext_data_n2o_anthro_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J56",
    "interpolate",
    {"RCP Scenario": ["RCP45"]},
)


_ext_data_n2o_anthro_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J57",
    "interpolate",
    {"RCP Scenario": ["RCP60"]},
)


_ext_data_n2o_anthro_emissions_rcp.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J58",
    "interpolate",
    {"RCP Scenario": ["RCP85"]},
)


_ext_data_hfc_emissions_rcp_85 = ExtData(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J71",
    "interpolate",
    {"HFC type": ["HFC134a"]},
    _root,
    "_ext_data_hfc_emissions_rcp_85",
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx", "Climate", "50", "J75", "interpolate", {"HFC type": ["HFC23"]}
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx", "Climate", "50", "J79", "interpolate", {"HFC type": ["HFC32"]}
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx", "Climate", "50", "J83", "interpolate", {"HFC type": ["HFC125"]}
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx", "Climate", "50", "J87", "interpolate", {"HFC type": ["HFC143a"]}
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx", "Climate", "50", "J91", "interpolate", {"HFC type": ["HFC152a"]}
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx", "Climate", "50", "J95", "interpolate", {"HFC type": ["HFC227ea"]}
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx", "Climate", "50", "J99", "interpolate", {"HFC type": ["HFC245ca"]}
)


_ext_data_hfc_emissions_rcp_85.add(
    "?inputs_eu.xlsx",
    "Climate",
    "50",
    "J103",
    "interpolate",
    {"HFC type": ["HFC4310mee"]},
)


_ext_constant_choose_targets_mineral_recycling_rates = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D283",
    {},
    _root,
    "_ext_constant_choose_targets_mineral_recycling_rates",
)


_delayfixed_historic_water_intensities_by_sector_delayed_1yr = DelayFixed(
    lambda: historic_water_by_type_intensities_by_sector(),
    lambda: 1,
    lambda: initial_water_intensity_by_sector(),
    time_step,
    "_delayfixed_historic_water_intensities_by_sector_delayed_1yr",
)


_delayfixed_historic_water_intensities_for_households_delayed_1yr = DelayFixed(
    lambda: historic_water_by_type_intensities_for_households(),
    lambda: 1,
    lambda: initial_water_intensity_for_households(),
    time_step,
    "_delayfixed_historic_water_intensities_for_households_delayed_1yr",
)


@subs(["water"], _subscript_dict)
def _init_water_intensity_for_households():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for water_intensity_for_households
    Limits: None
    Type: setup
    Subs: ['water']

    Provides initial conditions for water_intensity_for_households function
    """
    return initial_water_intensity_for_households()


@cache.step
@subs(["water"], _subscript_dict)
def _dwater_intensity_for_households_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for water_intensity_for_households
    Limits: None
    Type: component
    Subs: ['water']

    Provides derivative for water_intensity_for_households function
    """
    return variation_water_intensity_households()


_integ_water_intensity_for_households = Integ(
    _dwater_intensity_for_households_dt,
    _init_water_intensity_for_households,
    "_integ_water_intensity_for_households",
)


_ext_constant_p_minimum_forest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C270",
    {},
    _root,
    "_ext_constant_p_minimum_forest",
)


_ext_constant_forest_extraction_per_ha = ExtConstant(
    "?inputs_eu.xlsx", "Land", "C3", {}, _root, "_ext_constant_forest_extraction_per_ha"
)


_ext_constant_demand_forest_wood_products_pc = ExtConstant(
    "?inputs_eu.xlsx",
    "Land",
    "C2",
    {},
    _root,
    "_ext_constant_demand_forest_wood_products_pc",
)


_ext_data_past_trends_co2_lucf = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H44",
    "interpolate",
    {},
    _root,
    "_ext_data_past_trends_co2_lucf",
)


_ext_constant_wood_energy_density = ExtConstant(
    "?inputs_eu.xlsx", "Land", "C4", {}, _root, "_ext_constant_wood_energy_density"
)


_ext_lookup_historic_water_use_by_type_sectors = ExtLookup(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B2",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["blue water"]},
    _root,
    "_ext_lookup_historic_water_use_by_type_sectors",
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B3",
    {"sectors1": ["Mining and Quarrying"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B4",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B5",
    {"sectors1": ["Textiles and Textile Products"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B6",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B7",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B8",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B9",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B10",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B11",
    {"sectors1": ["Rubber and Plastics"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B12",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B13",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B14",
    {"sectors1": ["Machinery Nec"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B15",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B16",
    {"sectors1": ["Transport Equipment"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B17",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B18",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B19",
    {"sectors1": ["Construction"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B20",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["blue water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B21",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["blue water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B22",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["blue water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B23",
    {"sectors1": ["Hotels and Restaurants"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B24",
    {"sectors1": ["Inland Transport"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B25",
    {"sectors1": ["Water Transport"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B26",
    {"sectors1": ["Air Transport"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B27",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["blue water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B28",
    {"sectors1": ["Post and Telecommunications"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B29",
    {"sectors1": ["Financial Intermedation"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B30",
    {"sectors1": ["Real Estate Activities"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B31",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["blue water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B32",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["blue water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B33",
    {"sectors1": ["Education"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B34",
    {"sectors1": ["Health and Social Work"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B35",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["blue water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B36",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["blue water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B40",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B41",
    {"sectors1": ["Mining and Quarrying"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B42",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B43",
    {"sectors1": ["Textiles and Textile Products"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B44",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B45",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B46",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B47",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B48",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B49",
    {"sectors1": ["Rubber and Plastics"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B50",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B51",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B52",
    {"sectors1": ["Machinery Nec"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B53",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B54",
    {"sectors1": ["Transport Equipment"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B55",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B56",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B57",
    {"sectors1": ["Construction"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B58",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B59",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B60",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B61",
    {"sectors1": ["Hotels and Restaurants"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B62",
    {"sectors1": ["Inland Transport"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B63",
    {"sectors1": ["Water Transport"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B64",
    {"sectors1": ["Air Transport"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B65",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B66",
    {"sectors1": ["Post and Telecommunications"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B67",
    {"sectors1": ["Financial Intermedation"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B68",
    {"sectors1": ["Real Estate Activities"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B69",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B70",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B71",
    {"sectors1": ["Education"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B72",
    {"sectors1": ["Health and Social Work"], "water": ["green water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B73",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B74",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "water": ["green water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B78",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B79",
    {"sectors1": ["Mining and Quarrying"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B80",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B81",
    {"sectors1": ["Textiles and Textile Products"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B82",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B83",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B84",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B85",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B86",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B87",
    {"sectors1": ["Rubber and Plastics"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B88",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B89",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B90",
    {"sectors1": ["Machinery Nec"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B91",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B92",
    {"sectors1": ["Transport Equipment"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B93",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B94",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B95",
    {"sectors1": ["Construction"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B96",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["gray water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B97",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["gray water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B98",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["gray water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B99",
    {"sectors1": ["Hotels and Restaurants"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B100",
    {"sectors1": ["Inland Transport"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B101",
    {"sectors1": ["Water Transport"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B102",
    {"sectors1": ["Air Transport"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B103",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["gray water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B104",
    {"sectors1": ["Post and Telecommunications"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B105",
    {"sectors1": ["Financial Intermedation"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B106",
    {"sectors1": ["Real Estate Activities"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B107",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["gray water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B108",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["gray water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B109",
    {"sectors1": ["Education"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B110",
    {"sectors1": ["Health and Social Work"], "water": ["gray water"]},
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B111",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["gray water"],
    },
)


_ext_lookup_historic_water_use_by_type_sectors.add(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B112",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["gray water"]},
)


@subs(["sectors", "water"], _subscript_dict)
def _init_water_intensity_by_sector():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for water_intensity_by_sector
    Limits: None
    Type: setup
    Subs: ['sectors', 'water']

    Provides initial conditions for water_intensity_by_sector function
    """
    return initial_water_intensity_by_sector()


@cache.step
@subs(["sectors", "water"], _subscript_dict)
def _dwater_intensity_by_sector_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for water_intensity_by_sector
    Limits: None
    Type: component
    Subs: ['sectors', 'water']

    Provides derivative for water_intensity_by_sector function
    """
    return variation_water_intensity_by_sector()


_integ_water_intensity_by_sector = Integ(
    _dwater_intensity_by_sector_dt,
    _init_water_intensity_by_sector,
    "_integ_water_intensity_by_sector",
)


_delayfixed_pe_traditional_biomass_ej_delayed_1yr = DelayFixed(
    lambda: pe_traditional_biomass_consum_ej(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_pe_traditional_biomass_ej_delayed_1yr",
)


_ext_constant_mt_to_dam3 = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G17", {}, _root, "_ext_constant_mt_to_dam3"
)


_ext_lookup_historic_water_use_by_type_for_households = ExtLookup(
    "?inputs_eu.xlsx",
    "Water",
    "1",
    "B37",
    {"water": ["blue water"]},
    _root,
    "_ext_lookup_historic_water_use_by_type_for_households",
)


_ext_lookup_historic_water_use_by_type_for_households.add(
    "?inputs_eu.xlsx", "Water", "1", "B75", {"water": ["green water"]}
)


_ext_lookup_historic_water_use_by_type_for_households.add(
    "?inputs_eu.xlsx", "Water", "1", "B113", {"water": ["gray water"]}
)


_ext_constant_initial_water_use_by_households = ExtConstant(
    "?inputs_eu.xlsx",
    "Water",
    "B37",
    {"water": ["blue water"]},
    _root,
    "_ext_constant_initial_water_use_by_households",
)


_ext_constant_initial_water_use_by_households.add(
    "?inputs_eu.xlsx", "Water", "B75", {"water": ["green water"]}
)


_ext_constant_initial_water_use_by_households.add(
    "?inputs_eu.xlsx", "Water", "B113", {"water": ["gray water"]}
)


_ext_constant_initial_water_use_by_sector = ExtConstant(
    "?inputs_eu.xlsx",
    "Water",
    "B2",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["blue water"]},
    _root,
    "_ext_constant_initial_water_use_by_sector",
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B3",
    {"sectors1": ["Mining and Quarrying"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B4",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B5",
    {"sectors1": ["Textiles and Textile Products"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B6",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B7",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B8",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B9",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B10",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B11",
    {"sectors1": ["Rubber and Plastics"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B12",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B13",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B14",
    {"sectors1": ["Machinery Nec"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B15",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B16",
    {"sectors1": ["Transport Equipment"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B17",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B18",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B19",
    {"sectors1": ["Construction"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B20",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["blue water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B21",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["blue water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B22",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["blue water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B23",
    {"sectors1": ["Hotels and Restaurants"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B24",
    {"sectors1": ["Inland Transport"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B25",
    {"sectors1": ["Water Transport"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B26",
    {"sectors1": ["Air Transport"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B27",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["blue water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B28",
    {"sectors1": ["Post and Telecommunications"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B29",
    {"sectors1": ["Financial Intermedation"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B30",
    {"sectors1": ["Real Estate Activities"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B31",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["blue water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B32",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["blue water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B33",
    {"sectors1": ["Education"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B34",
    {"sectors1": ["Health and Social Work"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B35",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["blue water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B36",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["blue water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B40",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B41",
    {"sectors1": ["Mining and Quarrying"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B42",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B43",
    {"sectors1": ["Textiles and Textile Products"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B44",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B45",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B46",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B47",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B48",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B49",
    {"sectors1": ["Rubber and Plastics"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B50",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B51",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B52",
    {"sectors1": ["Machinery Nec"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B53",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B54",
    {"sectors1": ["Transport Equipment"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B55",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B56",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B57",
    {"sectors1": ["Construction"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B58",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B59",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B60",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B61",
    {"sectors1": ["Hotels and Restaurants"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B62",
    {"sectors1": ["Inland Transport"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B63",
    {"sectors1": ["Water Transport"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B64",
    {"sectors1": ["Air Transport"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B65",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B66",
    {"sectors1": ["Post and Telecommunications"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B67",
    {"sectors1": ["Financial Intermedation"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B68",
    {"sectors1": ["Real Estate Activities"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B69",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B70",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B71",
    {"sectors1": ["Education"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B72",
    {"sectors1": ["Health and Social Work"], "water": ["green water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B73",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B74",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "water": ["green water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B78",
    {"sectors1": ["Agriculture Hunting Forestry and Fishing"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B79",
    {"sectors1": ["Mining and Quarrying"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B80",
    {"sectors1": ["Food Beverages and Tobacco"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B81",
    {"sectors1": ["Textiles and Textile Products"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B82",
    {"sectors1": ["Leather Leather and Footwear"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B83",
    {"sectors1": ["Wood and Products of Woood and Cork"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B84",
    {"sectors1": ["Pulp Paper Printing and Publishing"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B85",
    {"sectors1": ["Coke Refined Petroleum and Nuclear Fuel"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B86",
    {"sectors1": ["Chemicals and Chemical products"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B87",
    {"sectors1": ["Rubber and Plastics"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B88",
    {"sectors1": ["Other Non Metalic Mineral"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B89",
    {"sectors1": ["Basic Metals and Fabricated Metal"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B90",
    {"sectors1": ["Machinery Nec"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B91",
    {"sectors1": ["Electrical and Optical Equipment"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B92",
    {"sectors1": ["Transport Equipment"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B93",
    {"sectors1": ["Manufacturing Nec Recycling"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B94",
    {"sectors1": ["Electricity Gas and Water Supply"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B95",
    {"sectors1": ["Construction"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B96",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "water": ["gray water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B97",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "water": ["gray water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B98",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "water": ["gray water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B99",
    {"sectors1": ["Hotels and Restaurants"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B100",
    {"sectors1": ["Inland Transport"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B101",
    {"sectors1": ["Water Transport"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B102",
    {"sectors1": ["Air Transport"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B103",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "water": ["gray water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B104",
    {"sectors1": ["Post and Telecommunications"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B105",
    {"sectors1": ["Financial Intermedation"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B106",
    {"sectors1": ["Real Estate Activities"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B107",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "water": ["gray water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B108",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "water": ["gray water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B109",
    {"sectors1": ["Education"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B110",
    {"sectors1": ["Health and Social Work"], "water": ["gray water"]},
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B111",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "water": ["gray water"],
    },
)


_ext_constant_initial_water_use_by_sector.add(
    "?inputs_eu.xlsx",
    "Water",
    "B112",
    {"sectors1": ["Private Households with Employed Persons"], "water": ["gray water"]},
)


_ext_constant_p_forest_overexplotation = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C268",
    {},
    _root,
    "_ext_constant_p_forest_overexplotation",
)


_delayfixed_aux4 = DelayFixed(
    lambda: eroist_system_until_2015(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux4",
)


_delayfixed_eroist_system_delayed = DelayFixed(
    lambda: eroist_system(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_eroist_system_delayed",
)


_delayfixed_eroist_system_delayed_1yr = DelayFixed(
    lambda: eroist_system(),
    lambda: 1,
    lambda: 0,
    time_step,
    "_delayfixed_eroist_system_delayed_1yr",
)


_ext_constant_ia_matrix_2002 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "IL609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2002",
)


_ext_constant_ia_matrix_2003 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "JU609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2003",
)


_ext_constant_ia_matrix_2004 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "LD609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2004",
)


_ext_constant_ia_matrix_2005 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "MM609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2005",
)


_ext_constant_ia_matrix_2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "NV609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2006",
)


_ext_constant_ia_matrix_2007 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "PE609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2007",
)


_ext_constant_ia_matrix_2008 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "QN609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2008",
)


_ext_constant_ia_matrix_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "A609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_1995",
)


_ext_constant_ia_matrix_1996 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "AJ609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_1996",
)


_ext_constant_ia_matrix_1997 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "BS609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_1997",
)


_ext_constant_ia_matrix_1998 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "DB609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_1998",
)


_ext_constant_ia_matrix_1999 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "EK609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_1999",
)


_ext_constant_ia_matrix_2000 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "FT609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2000",
)


_ext_constant_ia_matrix_2001 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "HC609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2001",
)


_ext_constant_ia_matrix_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "RW609",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_ia_matrix_2009",
)


_ext_constant_leontief_matrix_1996 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "AJ571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_1996",
)


_ext_constant_leontief_matrix_1997 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "BS571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_1997",
)


_ext_constant_leontief_matrix_1998 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "DB571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_1998",
)


_ext_constant_leontief_matrix_1999 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "EK571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_1999",
)


_ext_constant_leontief_matrix_2000 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "FT571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2000",
)


_ext_constant_leontief_matrix_2001 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "HC571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2001",
)


_ext_constant_leontief_matrix_2002 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "IL571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2002",
)


_ext_constant_leontief_matrix_2003 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "JU571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2003",
)


_ext_constant_leontief_matrix_2004 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "LD571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2004",
)


_ext_constant_leontief_matrix_2005 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "MM571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2005",
)


_ext_constant_leontief_matrix_2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "NV571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2006",
)


_ext_constant_leontief_matrix_2007 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "PE571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2007",
)


_ext_constant_leontief_matrix_2008 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "QN571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2008",
)


_ext_constant_leontief_matrix_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "RW571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_2009",
)


_ext_constant_leontief_matrix_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "A571",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
        "sectors1": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ],
    },
    _root,
    "_ext_constant_leontief_matrix_1995",
)


_ext_constant_t_fin_inlandt = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C175", {}, _root, "_ext_constant_t_fin_inlandt"
)


_ext_constant_t_fin_hveh = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C173", {}, _root, "_ext_constant_t_fin_hveh"
)


_ext_constant_t_ini_hveh = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C172", {}, _root, "_ext_constant_t_ini_hveh"
)


_ext_constant_start_year_p_common_rr_minerals_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F308",
    {},
    _root,
    "_ext_constant_start_year_p_common_rr_minerals_alt_techn",
)


_ext_constant_start_year_p_common_rr_minerals_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F307",
    {},
    _root,
    "_ext_constant_start_year_p_common_rr_minerals_rest",
)


_ext_constant_select_pop_ssps = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "D11", {}, _root, "_ext_constant_select_pop_ssps"
)


_ext_lookup_pop_ssp2 = ExtLookup(
    "?inputs_eu.xlsx",
    "Result comparison",
    "25",
    "C28",
    {},
    _root,
    "_ext_lookup_pop_ssp2",
)


_ext_lookup_pop_ssp4 = ExtLookup(
    "?inputs_eu.xlsx",
    "Result comparison",
    "25",
    "C30",
    {},
    _root,
    "_ext_lookup_pop_ssp4",
)


_ext_lookup_pop_ssp1 = ExtLookup(
    "?inputs_eu.xlsx",
    "Result comparison",
    "25",
    "C27",
    {},
    _root,
    "_ext_lookup_pop_ssp1",
)


_ext_lookup_pop_ssp5 = ExtLookup(
    "?inputs_eu.xlsx",
    "Result comparison",
    "25",
    "C31",
    {},
    _root,
    "_ext_lookup_pop_ssp5",
)


_ext_lookup_pop_ssp3 = ExtLookup(
    "?inputs_eu.xlsx",
    "Result comparison",
    "25",
    "C29",
    {},
    _root,
    "_ext_lookup_pop_ssp3",
)


_delayfixed_aux15 = DelayFixed(
    lambda: tfec_intensity_until_2009(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux15",
)


_ext_constant_p_customized_year_pop_evolution = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "E14",
    {},
    _root,
    "_ext_constant_p_customized_year_pop_evolution",
)


_ext_constant_select_population_evolution_input = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B11",
    {},
    _root,
    "_ext_constant_select_population_evolution_input",
)


_delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr = DelayFixed(
    lambda: fe_tot_generation_all_res_elec_twh(),
    lambda: 1,
    lambda: 396.6,
    time_step,
    "_delayfixed_fe_tot_generation_all_res_elec_twh_delayed_1yr",
)


_ext_constant_p_customized_cte_pop_variation = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G14",
    {},
    _root,
    "_ext_constant_p_customized_cte_pop_variation",
)


_delayfixed_fes_res_for_heat_delayed_1yr = DelayFixed(
    lambda: fes_res_for_heat_ej(),
    lambda: 1,
    lambda: 3.488,
    time_step,
    "_delayfixed_fes_res_for_heat_delayed_1yr",
)


_delayfixed_aux13 = DelayFixed(
    lambda: tfec_intensity_until_2009_without_eroi(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux13",
)


_delayfixed_aux14 = DelayFixed(
    lambda: tpes_intensity_until_2009(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux14",
)


_delayfixed_tfes_intensity_without_eroi_delayed_1yr = DelayFixed(
    lambda: tfes_intensity_ej_t_without_eroi(),
    lambda: 1,
    lambda: 8.827,
    time_step,
    "_delayfixed_tfes_intensity_without_eroi_delayed_1yr",
)


_integ_cumulative_co2e_ghg_emissions = Integ(
    lambda: total_co2e_ce(), lambda: 0, "_integ_cumulative_co2e_ghg_emissions"
)


_ext_constant_target_year_p_growth_res_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F33",
    {},
    _root,
    "_ext_constant_target_year_p_growth_res_elec",
)


_ext_constant_target_year_p_growth_res_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C59",
    {},
    _root,
    "_ext_constant_target_year_p_growth_res_heat",
)


_ext_data_total_ghg_emissions_baucat_medeas_d32 = ExtData(
    "?inputs_eu.xlsx",
    "Result comparison",
    "18",
    "C20",
    "interpolate",
    {},
    _root,
    "_ext_data_total_ghg_emissions_baucat_medeas_d32",
)


_ext_data_total_ghg_emissions_mlt2030_medeas_d32 = ExtData(
    "?inputs_eu.xlsx",
    "Result comparison",
    "18",
    "C23",
    "interpolate",
    {},
    _root,
    "_ext_data_total_ghg_emissions_mlt2030_medeas_d32",
)


_ext_data_total_ghg_emissions_mlt2020_medeas_d32 = ExtData(
    "?inputs_eu.xlsx",
    "Result comparison",
    "18",
    "C22",
    "interpolate",
    {},
    _root,
    "_ext_data_total_ghg_emissions_mlt2020_medeas_d32",
)


_ext_constant_low_range_fec_good_standard_of_living = ExtConstant(
    "?inputs_eu.xlsx",
    "Result comparison",
    "C6",
    {},
    _root,
    "_ext_constant_low_range_fec_good_standard_of_living",
)


_ext_constant_threshold_fec_high_development = ExtConstant(
    "?inputs_eu.xlsx",
    "Result comparison",
    "C8",
    {},
    _root,
    "_ext_constant_threshold_fec_high_development",
)


_ext_constant_high_range_fec_good_standard_of_living = ExtConstant(
    "?inputs_eu.xlsx",
    "Result comparison",
    "C7",
    {},
    _root,
    "_ext_constant_high_range_fec_good_standard_of_living",
)


_ext_constant_minimum_fraction = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B213",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_minimum_fraction",
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G213",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L213",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q213",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V213",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA213",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF213",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK213",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP213",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU213",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ213",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE213",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ213",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO213",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT213",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY213",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD213",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI213",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN213",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS213",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX213",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC213",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH213",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM213",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR213",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW213",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB213",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG213",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL213",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ213",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV213",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA213",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF213",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK213",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_minimum_fraction.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP213",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B214",
    {
        "sectors1": ["Agriculture Hunting Forestry and Fishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
    _root,
    "_ext_constant_max_yearly_change",
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "G214",
    {
        "sectors1": ["Mining and Quarrying"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "L214",
    {
        "sectors1": ["Food Beverages and Tobacco"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "Q214",
    {
        "sectors1": ["Textiles and Textile Products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "V214",
    {
        "sectors1": ["Leather Leather and Footwear"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AA214",
    {
        "sectors1": ["Wood and Products of Woood and Cork"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AF214",
    {
        "sectors1": ["Pulp Paper Printing and Publishing"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AK214",
    {
        "sectors1": ["Coke Refined Petroleum and Nuclear Fuel"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AP214",
    {
        "sectors1": ["Chemicals and Chemical products"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AU214",
    {
        "sectors1": ["Rubber and Plastics"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "AZ214",
    {
        "sectors1": ["Other Non Metalic Mineral"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BE214",
    {
        "sectors1": ["Basic Metals and Fabricated Metal"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BJ214",
    {
        "sectors1": ["Machinery Nec"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BO214",
    {
        "sectors1": ["Electrical and Optical Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BT214",
    {
        "sectors1": ["Transport Equipment"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "BY214",
    {
        "sectors1": ["Manufacturing Nec Recycling"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CD214",
    {
        "sectors1": ["Electricity Gas and Water Supply"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CI214",
    {
        "sectors1": ["Construction"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CN214",
    {
        "sectors1": [
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CS214",
    {
        "sectors1": [
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "CX214",
    {
        "sectors1": [
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DC214",
    {
        "sectors1": ["Hotels and Restaurants"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DH214",
    {
        "sectors1": ["Inland Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DM214",
    {
        "sectors1": ["Water Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DR214",
    {
        "sectors1": ["Air Transport"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "DW214",
    {
        "sectors1": [
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies"
        ],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EB214",
    {
        "sectors1": ["Post and Telecommunications"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EG214",
    {
        "sectors1": ["Financial Intermedation"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EL214",
    {
        "sectors1": ["Real Estate Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EQ214",
    {
        "sectors1": ["Renting od MEq and Other Business Activities"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "EV214",
    {
        "sectors1": ["Public Admin and Defence Compulsory Social Security"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FA214",
    {
        "sectors1": ["Education"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FF214",
    {
        "sectors1": ["Health and Social Work"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FK214",
    {
        "sectors1": ["Other Community Social and Persona Services"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_max_yearly_change.add(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "FP214",
    {
        "sectors1": ["Private Households with Employed Persons"],
        "final sources": ["electricity", "heat", "liquids", "gases", "solids"],
    },
)


_ext_constant_p_phs_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "F37", {}, _root, "_ext_constant_p_phs_growth"
)


_ext_constant_initial_instal_cap_phs = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H182",
    {},
    _root,
    "_ext_constant_initial_instal_cap_phs",
)


_integ_installed_capacity_phs_tw = Integ(
    lambda: phs_capacity_under_construction() - wear_phs(),
    lambda: initial_instal_cap_phs(),
    "_integ_installed_capacity_phs_tw",
)


_ext_constant_past_phs_capacity_growth = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C84",
    {},
    _root,
    "_ext_constant_past_phs_capacity_growth",
)


_integ_phs_planned_capacity = Integ(
    lambda: new_phs_capacity_under_planning()
    + replacement_capacity_phs()
    - phs_capacity_under_construction(),
    lambda: initial_capacity_in_construction_phs(),
    "_integ_phs_planned_capacity",
)


_ext_lookup_table_hist_capacity_phs = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "172",
    "H182",
    {},
    _root,
    "_ext_lookup_table_hist_capacity_phs",
)


_integ_required_capacity_phs = Integ(
    lambda: new_required_phs_capacity() - new_phs_capacity_under_planning(),
    lambda: initial_required_capacity_phs(),
    "_integ_required_capacity_phs",
)


_ext_constant_min_lifetime_ev_batteries = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G45",
    {},
    _root,
    "_ext_constant_min_lifetime_ev_batteries",
)


_integ_batteries_evhib2we = Integ(
    lambda: new_batteries() + replacement_batteries() - discarded_batteries(),
    lambda: 1,
    "_integ_batteries_evhib2we",
)


_ext_constant_kw_per_mw = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G14", {}, _root, "_ext_constant_kw_per_mw"
)


_ext_constant_net_stored_energy_ev_battery_over_lifetime = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G48",
    {},
    _root,
    "_ext_constant_net_stored_energy_ev_battery_over_lifetime",
)


_ext_constant_grid_correction_factor_ev_batteries = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "F64",
    {},
    _root,
    "_ext_constant_grid_correction_factor_ev_batteries",
)


_ext_constant_share_energy_requirements_for_decom_ev_batteries = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "F122",
    {},
    _root,
    "_ext_constant_share_energy_requirements_for_decom_ev_batteries",
)


_ext_constant_days_per_year = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G5", {}, _root, "_ext_constant_days_per_year"
)


_ext_constant_mw_in_1_year_to_mj = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G18", {}, _root, "_ext_constant_mw_in_1_year_to_mj"
)


_ext_constant_working_hours_per_day = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G40",
    {},
    _root,
    "_ext_constant_working_hours_per_day",
)


_ext_constant_ratio_total_vs_d_jobs_res_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "AB17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_ratio_total_vs_d_jobs_res_heat",
)


_ext_constant_ratio_total_vs_d_jobs_res_heat.add(
    "?inputs_eu.xlsx", "Parameters", "AB18", {"RES heat": ["geot heat"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_heat.add(
    "?inputs_eu.xlsx", "Parameters", "AB19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "AB13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_ratio_total_vs_d_jobs_res_elec",
)


_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "AB7", {"RES elec": ["geot elec"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "AB8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "AB9", {"RES elec": ["oceanic"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "AB10", {"RES elec": ["wind onshore"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "AB12", {"RES elec": ["wind offshore"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "AB11", {"RES elec": ["solar PV"]}
)


_ext_constant_ratio_total_vs_d_jobs_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "AB16", {"RES elec": ["CSP"]}
)


_ext_constant_employment_factor_biofuels = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "Y21",
    {},
    _root,
    "_ext_constant_employment_factor_biofuels",
)


_delayfixed_installed_capacity_res_elec_delayed_1yr = DelayFixed(
    lambda: installed_capacity_res_elec_tw(),
    lambda: 1,
    lambda: 0,
    time_step,
    "_delayfixed_installed_capacity_res_elec_delayed_1yr",
)


_ext_constant_employment_factor_fuel_supply_solids_bioe = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "AA8",
    {},
    _root,
    "_ext_constant_employment_factor_fuel_supply_solids_bioe",
)


_ext_constant_crash_programme_gtl = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D112",
    {},
    _root,
    "_ext_constant_crash_programme_gtl",
)


_ext_constant_activate_eroi_fc_system_feedback = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C312",
    {},
    _root,
    "_ext_constant_activate_eroi_fc_system_feedback",
)


_delayfixed_aux12 = DelayFixed(
    lambda: rurr_coal_start_year_plg(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux12",
)


_delayfixed_aux11 = DelayFixed(
    lambda: rurr_tot_gas_until_start_year_plg(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux11",
)


_delayfixed_aux6 = DelayFixed(
    lambda: rurr_conv_oil_until_start_year_plg(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux6",
)


_delayfixed_aux7 = DelayFixed(
    lambda: rurr_unconv_oil_until_start_year_plg(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux7",
)


_delayfixed_aux8 = DelayFixed(
    lambda: rurr_tot_oil_until_start_year_plg(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux8",
)


_delayfixed_aux9 = DelayFixed(
    lambda: rurr_conv_gas_until_start_year_plg(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux9",
)


_delayfixed_aux10 = DelayFixed(
    lambda: rurr_unconv_gas_until_start_year_plg(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_aux10",
)


_integ_rurr_conv_gas = Integ(
    lambda: -extraction_conv_gas_ej() - flow_conv_gas_left_in_ground(),
    lambda: urr_conv_gas()
    - cumulated_conv_gas_extraction_to_1995() * separate_conv_and_unconv_gas(),
    "_integ_rurr_conv_gas",
)


_integ_rurr_unconv_gas = Integ(
    lambda: -extraction_unconv_gas_ej() - flow_unconv_gas_left_in_ground(),
    lambda: urr_unconv_gas()
    - cumulated_unconv_gas_extraction_to_1995() * separate_conv_and_unconv_gas(),
    "_integ_rurr_unconv_gas",
)


_integ_rurr_conv_oil = Integ(
    lambda: -extraction_conv_oil_ej() - flow_conv_oil_left_in_ground(),
    lambda: urr_conv_oil()
    - cumulated_conv_oil_extraction_to_1995() * separate_conv_and_unconv_oil(),
    "_integ_rurr_conv_oil",
)


_ext_constant_adjust_energy_for_transport_to_inland_transport = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G72",
    {},
    _root,
    "_ext_constant_adjust_energy_for_transport_to_inland_transport",
)


_ext_constant_phaseout_oil_for_electricity = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C167",
    {},
    _root,
    "_ext_constant_phaseout_oil_for_electricity",
)


_ext_constant_gch4_per_mj_gtl = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G94", {}, _root, "_ext_constant_gch4_per_mj_gtl"
)


_ext_constant_phaseout_oil_for_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C168",
    {},
    _root,
    "_ext_constant_phaseout_oil_for_heat",
)


_ext_constant_gch4_per_mj_ctl = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G93", {}, _root, "_ext_constant_gch4_per_mj_ctl"
)


_ext_constant_g_per_gt = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G15", {}, _root, "_ext_constant_g_per_gt"
)


_ext_constant_cp_hydro_2015 = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "I13", {}, _root, "_ext_constant_cp_hydro_2015"
)


_ext_constant_eolrr_minerals_alt_techn_res_vs_total_economy = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G57",
    {},
    _root,
    "_ext_constant_eolrr_minerals_alt_techn_res_vs_total_economy",
)


_ext_constant_crash_programme_ctl = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D110",
    {},
    _root,
    "_ext_constant_crash_programme_ctl",
)


@subs(["materials"], _subscript_dict)
def _init_recycling_rates_minerals_rest():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for recycling_rates_minerals_rest
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for recycling_rates_minerals_rest function
    """
    return current_recycling_rates_minerals() * all_minerals_virgin()


@cache.step
@subs(["materials"], _subscript_dict)
def _drecycling_rates_minerals_rest_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for recycling_rates_minerals_rest
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for recycling_rates_minerals_rest function
    """
    return improvement_recycling_rates_minerals_rest()


_integ_recycling_rates_minerals_rest = Integ(
    _drecycling_rates_minerals_rest_dt,
    _init_recycling_rates_minerals_rest,
    "_integ_recycling_rates_minerals_rest",
)


_ext_constant_p_percent_elec_hveh = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C177",
    {},
    _root,
    "_ext_constant_p_percent_elec_hveh",
)


@subs(["Households vehicles"], _subscript_dict)
def _init_percents_h_vehicles():
    """
    Real Name: Implicit
    Original Eqn:
      None
        .
        .
        .
      None
    Units: See docs for percents_h_vehicles
    Limits: None
    Type: setup
    Subs: ['Households vehicles']

    Provides initial conditions for percents_h_vehicles function
    """
    return xrmerge(
        [
            rearrange(
                100 - initial_2w_percent(),
                ["Households vehicles"],
                {"Households vehicles": ["liq 4wheels"]},
            ),
            rearrange(
                0, ["Households vehicles"], {"Households vehicles": ["elec 4wheels"]}
            ),
            rearrange(
                0, ["Households vehicles"], {"Households vehicles": ["hib 4wheels"]}
            ),
            rearrange(
                0, ["Households vehicles"], {"Households vehicles": ["gas 4wheels"]}
            ),
            rearrange(
                initial_2w_percent(),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                0, ["Households vehicles"], {"Households vehicles": ["elec 2wheels"]}
            ),
        ]
    )


@cache.step
@subs(["Households vehicles"], _subscript_dict)
def _dpercents_h_vehicles_dt():
    """
    Real Name: Implicit
    Original Eqn:
      None
        .
        .
        .
      None
    Units: See docs for percents_h_vehicles
    Limits: None
    Type: component
    Subs: ['Households vehicles']

    Provides derivative for percents_h_vehicles function
    """
    return xrmerge(
        [
            rearrange(
                var_percents_h_vehicles().loc["liq 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["liq 4wheels"]},
            ),
            rearrange(
                var_percents_h_vehicles().loc["elec 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["elec 4wheels"]},
            ),
            rearrange(
                var_percents_h_vehicles().loc["hib 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["hib 4wheels"]},
            ),
            rearrange(
                var_percents_h_vehicles().loc["gas 4wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["gas 4wheels"]},
            ),
            rearrange(
                var_percents_h_vehicles().loc["liq 2wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["liq 2wheels"]},
            ),
            rearrange(
                var_percents_h_vehicles().loc["elec 2wheels"].reset_coords(drop=True),
                ["Households vehicles"],
                {"Households vehicles": ["elec 2wheels"]},
            ),
        ]
    )


_integ_percents_h_vehicles = Integ(
    _dpercents_h_vehicles_dt, _init_percents_h_vehicles, "_integ_percents_h_vehicles"
)


_ext_constant_bateries_ratio_2w_e = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B114",
    {},
    _root,
    "_ext_constant_bateries_ratio_2w_e",
)


_ext_constant_bateries_ratio_bus_e = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B112",
    {},
    _root,
    "_ext_constant_bateries_ratio_bus_e",
)


_ext_constant_bateries_ratio_hib_bus = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B113",
    {},
    _root,
    "_ext_constant_bateries_ratio_hib_bus",
)


_ext_constant_bateries_ratio_hib_hv = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B111",
    {},
    _root,
    "_ext_constant_bateries_ratio_hib_hv",
)


_ext_constant_bateries_ratio_hib_lv = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B110",
    {},
    _root,
    "_ext_constant_bateries_ratio_hib_lv",
)


_ext_constant_p_percent_train_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C191",
    {},
    _root,
    "_ext_constant_p_percent_train_elec",
)


_ext_constant_p_percent_hv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C184",
    {},
    _root,
    "_ext_constant_p_percent_hv_gas",
)


_ext_constant_t_ini_inlandt = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C174", {}, _root, "_ext_constant_t_ini_inlandt"
)


_ext_constant_activate_policy_inlandt = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C171",
    {},
    _root,
    "_ext_constant_activate_policy_inlandt",
)


_ext_constant_p_percent_lv_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C185",
    {},
    _root,
    "_ext_constant_p_percent_lv_elec",
)


_ext_constant_p_percent_lv_hyb = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C186",
    {},
    _root,
    "_ext_constant_p_percent_lv_hyb",
)


_ext_constant_p_percent_bus_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C188",
    {},
    _root,
    "_ext_constant_p_percent_bus_elec",
)


_ext_constant_p_percent_bus_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C190",
    {},
    _root,
    "_ext_constant_p_percent_bus_gas",
)


_ext_constant_p_percent_bus_hyb = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C189",
    {},
    _root,
    "_ext_constant_p_percent_bus_hyb",
)


_ext_constant_p_percent_hv_hyb = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C183",
    {},
    _root,
    "_ext_constant_p_percent_hv_hyb",
)


_ext_constant_p_percent_lv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C187",
    {},
    _root,
    "_ext_constant_p_percent_lv_gas",
)


_ext_constant_initial_xt_inland = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B79",
    {},
    _root,
    "_ext_constant_initial_xt_inland",
)


_ext_constant_n_vehicles_inland_t0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B12",
    {"vehicleT": ["HV liq"]},
    _root,
    "_ext_constant_n_vehicles_inland_t0",
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B13", {"vehicleT": ["HV hib"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B14", {"vehicleT": ["HV gas"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B15", {"vehicleT": ["LV liq"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B16", {"vehicleT": ["LV elec"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B17", {"vehicleT": ["LV hib"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B18", {"vehicleT": ["LV gas"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B19", {"vehicleT": ["bus liq"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B21", {"vehicleT": ["bus elec"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B22", {"vehicleT": ["bus hib"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B20", {"vehicleT": ["bus gas"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B23", {"vehicleT": ["train liq"]}
)


_ext_constant_n_vehicles_inland_t0.add(
    "?inputs_eu.xlsx", "Transportation", "B23", {"vehicleT": ["train elec"]}
)


_ext_constant_energy_initial_inland_transport = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B62",
    {"vehicleT": ["HV liq"]},
    _root,
    "_ext_constant_energy_initial_inland_transport",
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B63", {"vehicleT": ["HV hib"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B64", {"vehicleT": ["HV gas"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B65", {"vehicleT": ["LV liq"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B67", {"vehicleT": ["LV hib"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "C66", {"vehicleT": ["LV elec"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B68", {"vehicleT": ["LV gas"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B69", {"vehicleT": ["bus liq"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "C71", {"vehicleT": ["bus elec"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B70", {"vehicleT": ["bus hib"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B72", {"vehicleT": ["bus gas"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "B74", {"vehicleT": ["train liq"]}
)


_ext_constant_energy_initial_inland_transport.add(
    "?inputs_eu.xlsx", "Transportation", "C75", {"vehicleT": ["train elec"]}
)


_ext_constant_activate_policy_h_transp = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C170",
    {},
    _root,
    "_ext_constant_activate_policy_h_transp",
)


_ext_constant_initial_energy_intensity_of_households_transport_2009 = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B119",
    {"final sources1": ["liquids"]},
    _root,
    "_ext_constant_initial_energy_intensity_of_households_transport_2009",
)


_ext_constant_initial_energy_intensity_of_households_transport_2009.add(
    "?inputs_eu.xlsx", "Transportation", "B121", {"final sources1": ["gases"]}
)


_ext_constant_initial_energy_intensity_of_households_transport_2009.add(
    "?inputs_eu.xlsx", "Transportation", "B120", {"final sources1": ["electricity"]}
)


@subs(["final sources"], _subscript_dict)
def _init_energy_intensity_of_households_transport():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for energy_intensity_of_households_transport
    Limits: None
    Type: setup
    Subs: ['final sources']

    Provides initial conditions for energy_intensity_of_households_transport function
    """
    return rearrange(
        initial_energy_intensity_of_households_transport_2009(),
        ["final sources"],
        _subscript_dict,
    )


@cache.step
@subs(["final sources"], _subscript_dict)
def _denergy_intensity_of_households_transport_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for energy_intensity_of_households_transport
    Limits: None
    Type: component
    Subs: ['final sources']

    Provides derivative for energy_intensity_of_households_transport function
    """
    return rearrange(
        variation_energy_intensity_of_households_transport(),
        ["final sources"],
        _subscript_dict,
    )


_integ_energy_intensity_of_households_transport = Integ(
    _denergy_intensity_of_households_transport_dt,
    _init_energy_intensity_of_households_transport,
    "_integ_energy_intensity_of_households_transport",
)


_ext_constant_liq_4w = ExtConstant(
    "?inputs_eu.xlsx", "Transportation", "B55", {}, _root, "_ext_constant_liq_4w"
)


_ext_constant_percent_2w_liq = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B30",
    {},
    _root,
    "_ext_constant_percent_2w_liq",
)


_ext_constant_percent_4w_liq = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B26",
    {},
    _root,
    "_ext_constant_percent_4w_liq",
)


_ext_constant_n_vehicles_h = ExtConstant(
    "?inputs_eu.xlsx", "Transportation", "B10", {}, _root, "_ext_constant_n_vehicles_h"
)


_ext_constant_demand_h = ExtConstant(
    "?inputs_eu.xlsx", "Transportation", "B81", {}, _root, "_ext_constant_demand_h"
)


_ext_constant_p_percent_2w_elec = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C180",
    {},
    _root,
    "_ext_constant_p_percent_2w_elec",
)


_ext_constant_p_percent_gas_hveh = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C179",
    {},
    _root,
    "_ext_constant_p_percent_gas_hveh",
)


_ext_constant_p_share_2wheelers = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C181",
    {},
    _root,
    "_ext_constant_p_share_2wheelers",
)


_ext_constant_p_percent_hyb_hveh = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C178",
    {},
    _root,
    "_ext_constant_p_percent_hyb_hveh",
)


_ext_constant_initial_2w_percent = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B33",
    {},
    _root,
    "_ext_constant_initial_2w_percent",
)


_ext_constant_share_feh_over_fed_oil = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C66",
    {},
    _root,
    "_ext_constant_share_feh_over_fed_oil",
)


_ext_constant_share_feh_over_fed_coal = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C68",
    {},
    _root,
    "_ext_constant_share_feh_over_fed_coal",
)


_ext_constant_share_feh_over_fed_nat_gas = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C67",
    {},
    _root,
    "_ext_constant_share_feh_over_fed_nat_gas",
)


_delayfixed_pes_oil_ej_delayed = DelayFixed(
    lambda: pes_total_oil_ej_eu(),
    lambda: 0.1,
    lambda: 139.5,
    time_step,
    "_delayfixed_pes_oil_ej_delayed",
)


_ext_constant_saving_ratio_2we = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B92",
    {},
    _root,
    "_ext_constant_saving_ratio_2we",
)


_ext_constant_start_year_biofuels_land_marg = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F45",
    {},
    _root,
    "_ext_constant_start_year_biofuels_land_marg",
)


_ext_constant_land_occupation_ratio_biofuels_marg_land = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C62",
    {},
    _root,
    "_ext_constant_land_occupation_ratio_biofuels_marg_land",
)


_ext_lookup_start_production_biofuels = ExtLookup(
    "?inputs_eu.xlsx",
    "Parameters",
    "28",
    "B29",
    {},
    _root,
    "_ext_lookup_start_production_biofuels",
)


_ext_constant_conv_efficiency_from_npp_to_biofuels = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C61",
    {},
    _root,
    "_ext_constant_conv_efficiency_from_npp_to_biofuels",
)


_delayfixed_tfec_res_delayed_1yr = DelayFixed(
    lambda: tfec_res_ej(),
    lambda: 1,
    lambda: 4.209,
    time_step,
    "_delayfixed_tfec_res_delayed_1yr",
)


_delayfixed_tpes_res_delayed_1yr = DelayFixed(
    lambda: tpe_from_res_ej(),
    lambda: 1,
    lambda: 5.301,
    time_step,
    "_delayfixed_tpes_res_delayed_1yr",
)


_delayfixed_share_res_vs_tpes_delayed_1yr = DelayFixed(
    lambda: share_res_vs_tpes(),
    lambda: 1,
    lambda: 0.123,
    time_step,
    "_delayfixed_share_res_vs_tpes_delayed_1yr",
)


_delayfixed_share_res_vs_tfec_delayed_1yr = DelayFixed(
    lambda: share_res_vs_tfec(),
    lambda: 1,
    lambda: 0.1614,
    time_step,
    "_delayfixed_share_res_vs_tfec_delayed_1yr",
)


@subs(["RES heat"], _subscript_dict)
def _init_installed_capacity_res_heatnc_tw():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for installed_capacity_res_heatnc_tw
    Limits: None
    Type: setup
    Subs: ['RES heat']

    Provides initial conditions for installed_capacity_res_heatnc_tw function
    """
    return initial_value_res_for_heatnc()


@cache.step
@subs(["RES heat"], _subscript_dict)
def _dinstalled_capacity_res_heatnc_tw_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for installed_capacity_res_heatnc_tw
    Limits: None
    Type: component
    Subs: ['RES heat']

    Provides derivative for installed_capacity_res_heatnc_tw function
    """
    return (
        new_res_capacity_for_heatnc_tw()
        + replacement_res_for_heatnc_tw()
        - wear_res_capacity_for_heatnc_tw()
    )


_integ_installed_capacity_res_heatnc_tw = Integ(
    _dinstalled_capacity_res_heatnc_tw_dt,
    _init_installed_capacity_res_heatnc_tw,
    "_integ_installed_capacity_res_heatnc_tw",
)


_ext_constant_past_res_growth_for_heatcom_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C101",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_past_res_growth_for_heatcom_0",
)


_ext_constant_past_res_growth_for_heatcom_0.add(
    "?inputs_eu.xlsx", "Constants", "C102", {"RES heat": ["geot heat"]}
)


_ext_constant_past_res_growth_for_heatcom_0.add(
    "?inputs_eu.xlsx", "Constants", "C103", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_efficiency_conversion_bioe_plants_to_heat_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C43",
    {},
    _root,
    "_ext_constant_efficiency_conversion_bioe_plants_to_heat_0",
)


_ext_constant_efficiency_geothermal_for_heat_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G43",
    {},
    _root,
    "_ext_constant_efficiency_geothermal_for_heat_0",
)


_ext_constant_initial_value_res_for_heatnc = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H62",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_initial_value_res_for_heatnc",
)


_ext_constant_initial_value_res_for_heatnc.add(
    "?inputs_eu.xlsx", "Constants", "H63", {"RES heat": ["geot heat"]}
)


_ext_constant_initial_value_res_for_heatnc.add(
    "?inputs_eu.xlsx", "Constants", "H61", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_past_res_growth_for_heatnc = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C104",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_past_res_growth_for_heatnc",
)


_ext_constant_past_res_growth_for_heatnc.add(
    "?inputs_eu.xlsx", "Constants", "C105", {"RES heat": ["geot heat"]}
)


_ext_constant_past_res_growth_for_heatnc.add(
    "?inputs_eu.xlsx", "Constants", "C106", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_replacement_res_for_heatnc = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "D17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_replacement_res_for_heatnc",
)


_ext_constant_replacement_res_for_heatnc.add(
    "?inputs_eu.xlsx", "Parameters", "D18", {"RES heat": ["geot heat"]}
)


_ext_constant_replacement_res_for_heatnc.add(
    "?inputs_eu.xlsx", "Parameters", "D19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_efficiency_solar_panels_for_heat_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G41",
    {},
    _root,
    "_ext_constant_efficiency_solar_panels_for_heat_0",
)


_ext_constant_life_time_res_for_heat_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_life_time_res_for_heat_0",
)


_ext_constant_life_time_res_for_heat_0.add(
    "?inputs_eu.xlsx", "Parameters", "C18", {"RES heat": ["geot heat"]}
)


_ext_constant_life_time_res_for_heat_0.add(
    "?inputs_eu.xlsx", "Parameters", "C19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_replacement_res_for_heat_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "D17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_replacement_res_for_heat_0",
)


_ext_constant_replacement_res_for_heat_0.add(
    "?inputs_eu.xlsx", "Parameters", "D18", {"RES heat": ["geot heat"]}
)


_ext_constant_replacement_res_for_heat_0.add(
    "?inputs_eu.xlsx", "Parameters", "D19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_losses_solar_for_heat_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G42",
    {},
    _root,
    "_ext_constant_losses_solar_for_heat_0",
)


_ext_lookup_historic_res_capacity_for_heatnc = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H62",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_lookup_historic_res_capacity_for_heatnc",
)


_ext_lookup_historic_res_capacity_for_heatnc.add(
    "?inputs_eu.xlsx", "Constants", "25", "H63", {"RES heat": ["geot heat"]}
)


_ext_lookup_historic_res_capacity_for_heatnc.add(
    "?inputs_eu.xlsx", "Constants", "25", "H61", {"RES heat": ["solid bioE heat"]}
)


_ext_data_historic_share_of_transformation_losses_vs_extraction = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "203",
    "B204",
    None,
    {"final sources1": ["liquids"]},
    _root,
    "_ext_data_historic_share_of_transformation_losses_vs_extraction",
)


_ext_data_historic_share_of_transformation_losses_vs_extraction.add(
    "?inputs_eu.xlsx", "Constants", "203", "B205", None, {"final sources1": ["solids"]}
)


_ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "203",
    "B206",
    None,
    {},
    _root,
    "_ext_data_ratio_gain_gas_vs_lose_solids_in_tranf_processes",
)


@subs(["final sources"], _subscript_dict)
def _init_nonenergy_use_demand_by_final_fuel_ej():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for nonenergy_use_demand_by_final_fuel_ej
    Limits: None
    Type: setup
    Subs: ['final sources']

    Provides initial conditions for nonenergy_use_demand_by_final_fuel_ej function
    """
    return rearrange(initial_nonenergy_use(), ["final sources"], _subscript_dict)


@cache.step
@subs(["final sources"], _subscript_dict)
def _dnonenergy_use_demand_by_final_fuel_ej_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for nonenergy_use_demand_by_final_fuel_ej
    Limits: None
    Type: component
    Subs: ['final sources']

    Provides derivative for nonenergy_use_demand_by_final_fuel_ej function
    """
    return annual_variation_nonenergy_use()


_integ_nonenergy_use_demand_by_final_fuel_ej = Integ(
    _dnonenergy_use_demand_by_final_fuel_ej_dt,
    _init_nonenergy_use_demand_by_final_fuel_ej,
    "_integ_nonenergy_use_demand_by_final_fuel_ej",
)


@subs(["materials"], _subscript_dict)
def _init_cum_materials_to_extract_for_ev_batteries():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_ev_batteries
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for cum_materials_to_extract_for_ev_batteries function
    """
    return initial_cumulated_material_requirements_for_ev_batteries_1995()


@cache.step
@subs(["materials"], _subscript_dict)
def _dcum_materials_to_extract_for_ev_batteries_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_ev_batteries
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for cum_materials_to_extract_for_ev_batteries function
    """
    return total_materials_to_extract_for_ev_batteries_mt()


_integ_cum_materials_to_extract_for_ev_batteries = Integ(
    _dcum_materials_to_extract_for_ev_batteries_dt,
    _init_cum_materials_to_extract_for_ev_batteries,
    "_integ_cum_materials_to_extract_for_ev_batteries",
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "F5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_new_capacity_installed__ev_batteries",
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx",
    "Materials",
    "F15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F55", {"materials": ["steel"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F61", {"materials": ["wires"]}
)


_ext_constant_materials_per_new_capacity_installed__ev_batteries.add(
    "?inputs_eu.xlsx", "Materials", "F62", {"materials": ["zinc"]}
)


@subs(["materials"], _subscript_dict)
def _init_cum_materials_requirements_for_ev_batteries():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_requirements_for_ev_batteries
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for cum_materials_requirements_for_ev_batteries function
    """
    return initial_cumulated_material_requirements_for_ev_batteries_1995()


@cache.step
@subs(["materials"], _subscript_dict)
def _dcum_materials_requirements_for_ev_batteries_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_requirements_for_ev_batteries
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for cum_materials_requirements_for_ev_batteries function
    """
    return total_materials_required_for_ev_batteries()


_integ_cum_materials_requirements_for_ev_batteries = Integ(
    _dcum_materials_requirements_for_ev_batteries_dt,
    _init_cum_materials_requirements_for_ev_batteries,
    "_integ_cum_materials_requirements_for_ev_batteries",
)


_ext_constant_rt_storage_efficiency_ev_batteries = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G46",
    {},
    _root,
    "_ext_constant_rt_storage_efficiency_ev_batteries",
)


@subs(["materials"], _subscript_dict)
def _init_cum_materials_to_extract_for_ev_batteries_from_2015():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_ev_batteries_from_2015
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for cum_materials_to_extract_for_ev_batteries_from_2015 function
    """
    return initial_cumulated_material_requirements_for_ev_batteries_1995()


@cache.step
@subs(["materials"], _subscript_dict)
def _dcum_materials_to_extract_for_ev_batteries_from_2015_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_ev_batteries_from_2015
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for cum_materials_to_extract_for_ev_batteries_from_2015 function
    """
    return total_materials_to_extract_for_ev_batteries_from_2015_mt()


_integ_cum_materials_to_extract_for_ev_batteries_from_2015 = Integ(
    _dcum_materials_to_extract_for_ev_batteries_from_2015_dt,
    _init_cum_materials_to_extract_for_ev_batteries_from_2015,
    "_integ_cum_materials_to_extract_for_ev_batteries_from_2015",
)


_ext_constant_kw_per_battery_ev = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G49", {}, _root, "_ext_constant_kw_per_battery_ev"
)


_delayfixed_pes_fossil_fuel_extraction_delayed = DelayFixed(
    lambda: pes_fossil_fuel_extraction().loc["liquids"].reset_coords(drop=True),
    lambda: time_step(),
    lambda: 25.9,
    time_step,
    "_delayfixed_pes_fossil_fuel_extraction_delayed",
)


_ext_data_historic_share_of_losses_vs_extraction = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "196",
    "B198",
    None,
    {"final sources1": ["liquids"]},
    _root,
    "_ext_data_historic_share_of_losses_vs_extraction",
)


_ext_data_historic_share_of_losses_vs_extraction.add(
    "?inputs_eu.xlsx", "Constants", "196", "B197", None, {"final sources1": ["solids"]}
)


_ext_data_historic_share_of_losses_vs_extraction.add(
    "?inputs_eu.xlsx", "Constants", "196", "B199", None, {"final sources1": ["gases"]}
)


_ext_lookup_historic_demand_by_sector = ExtLookup(
    "?inputs_eu.xlsx",
    "Economy",
    "1",
    "B2",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_lookup_historic_demand_by_sector",
)


_delayfixed_tfes_intensity_ej_t_delayed_1yr = DelayFixed(
    lambda: tfes_intensity_ej_t(),
    lambda: 1,
    lambda: 8.827,
    time_step,
    "_delayfixed_tfes_intensity_ej_t_delayed_1yr",
)


_delayfixed_tpes_intensity_ej_t_delayed_1yr = DelayFixed(
    lambda: tpes_intensity_ej_t(),
    lambda: 1,
    lambda: 13.14,
    time_step,
    "_delayfixed_tpes_intensity_ej_t_delayed_1yr",
)


_ext_constant_employment_factors_new_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "Y13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_employment_factors_new_res_elec",
)


_ext_constant_employment_factors_new_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Y7", {"RES elec": ["geot elec"]}
)


_ext_constant_employment_factors_new_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Y8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_employment_factors_new_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Y9", {"RES elec": ["oceanic"]}
)


_ext_constant_employment_factors_new_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Y10", {"RES elec": ["wind onshore"]}
)


_ext_constant_employment_factors_new_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Y12", {"RES elec": ["wind offshore"]}
)


_ext_constant_employment_factors_new_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Y11", {"RES elec": ["solar PV"]}
)


_ext_constant_employment_factors_new_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Y16", {"RES elec": ["CSP"]}
)


_ext_constant_employment_factors_new_res_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "Y17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_employment_factors_new_res_heat",
)


_ext_constant_employment_factors_new_res_heat.add(
    "?inputs_eu.xlsx", "Parameters", "Y18", {"RES heat": ["geot heat"]}
)


_ext_constant_employment_factors_new_res_heat.add(
    "?inputs_eu.xlsx", "Parameters", "Y19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_employment_factors_om_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "Z13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_employment_factors_om_res_elec",
)


_ext_constant_employment_factors_om_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Z7", {"RES elec": ["geot elec"]}
)


_ext_constant_employment_factors_om_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Z8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_employment_factors_om_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Z9", {"RES elec": ["oceanic"]}
)


_ext_constant_employment_factors_om_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Z10", {"RES elec": ["wind onshore"]}
)


_ext_constant_employment_factors_om_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Z12", {"RES elec": ["wind offshore"]}
)


_ext_constant_employment_factors_om_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Z11", {"RES elec": ["solar PV"]}
)


_ext_constant_employment_factors_om_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "Z16", {"RES elec": ["CSP"]}
)


_ext_constant_employment_factors_om_res_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "Z17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_employment_factors_om_res_heat",
)


_ext_constant_employment_factors_om_res_heat.add(
    "?inputs_eu.xlsx", "Parameters", "Z18", {"RES heat": ["geot heat"]}
)


_ext_constant_employment_factors_om_res_heat.add(
    "?inputs_eu.xlsx", "Parameters", "Z19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_initial_percent_t_vehicles = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B35",
    {"vehicleT": ["HV liq"]},
    _root,
    "_ext_constant_initial_percent_t_vehicles",
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B36", {"vehicleT": ["HV hib"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B37", {"vehicleT": ["HV gas"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B38", {"vehicleT": ["LV liq"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B39", {"vehicleT": ["LV elec"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B40", {"vehicleT": ["LV hib"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B41", {"vehicleT": ["LV gas"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B42", {"vehicleT": ["bus liq"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B44", {"vehicleT": ["bus hib"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B43", {"vehicleT": ["bus gas"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B46", {"vehicleT": ["train liq"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B47", {"vehicleT": ["train elec"]}
)


_ext_constant_initial_percent_t_vehicles.add(
    "?inputs_eu.xlsx", "Transportation", "B45", {"vehicleT": ["bus elec"]}
)


_ext_constant_saving_ratios_v = ExtConstant(
    "?inputs_eu.xlsx",
    "Transportation",
    "B94",
    {"vehicleT": ["HV liq"]},
    _root,
    "_ext_constant_saving_ratios_v",
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B95", {"vehicleT": ["HV hib"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B96", {"vehicleT": ["HV gas"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B97", {"vehicleT": ["LV liq"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B98", {"vehicleT": ["LV elec"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B99", {"vehicleT": ["LV hib"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B100", {"vehicleT": ["LV gas"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B101", {"vehicleT": ["bus liq"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B103", {"vehicleT": ["bus hib"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B104", {"vehicleT": ["bus gas"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B105", {"vehicleT": ["train liq"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B106", {"vehicleT": ["train elec"]}
)


_ext_constant_saving_ratios_v.add(
    "?inputs_eu.xlsx", "Transportation", "B102", {"vehicleT": ["bus elec"]}
)


_ext_constant_share_feh_over_pes_gases = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "O39",
    {},
    _root,
    "_ext_constant_share_feh_over_pes_gases",
)


_integ_scarcity_conv_gas_stock = Integ(
    lambda: increase_scarcity_conv_gas(), lambda: 0, "_integ_scarcity_conv_gas_stock"
)


_integ_ctl_potential_production = Integ(
    lambda: replacement_ctl() + variation_ctl() - wear_ctl(),
    lambda: initial_ctl_production(),
    "_integ_ctl_potential_production",
)


_integ_gtl_potential_production = Integ(
    lambda: replacement_gtl() + variation_gtl() - wear_gtl(),
    lambda: initial_gtl_production(),
    "_integ_gtl_potential_production",
)


_ext_constant_lifetime_gtl = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G39", {}, _root, "_ext_constant_lifetime_gtl"
)


_ext_constant_lifetime_ctl = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G38", {}, _root, "_ext_constant_lifetime_ctl"
)


_integ_abundance_unconv_oil_stock = Integ(
    lambda: increase_abundance_unconv_oil(),
    lambda: 1,
    "_integ_abundance_unconv_oil_stock",
)


_delayfixed_abundance_unconv_oil_delayed_1yr = DelayFixed(
    lambda: abundance_unconv_oil(),
    lambda: 1,
    lambda: 1,
    time_step,
    "_delayfixed_abundance_unconv_oil_delayed_1yr",
)


_integ_scarcity_conv_oil_stock = Integ(
    lambda: increase_scarcity_conv_oil(), lambda: 0, "_integ_scarcity_conv_oil_stock"
)


_integ_share_variable_res_elec_generation_vs_total_gen = Integ(
    lambda: increase_variable_res_share_elec_vs_total_generation(),
    lambda: initial_share_variable_res_elec_gen_vs_total(),
    "_integ_share_variable_res_elec_generation_vs_total_gen",
)


_integ_cumulated_invest_e_grid = Integ(
    lambda: extra_monet_invest_to_cope_with_variable_elec_res(),
    lambda: 0,
    "_integ_cumulated_invest_e_grid",
)


_ext_constant_share_feh_over_pes_liquids = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "O38",
    {},
    _root,
    "_ext_constant_share_feh_over_pes_liquids",
)


_ext_constant_share_feh_over_fed_solid_bioe = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C69",
    {},
    _root,
    "_ext_constant_share_feh_over_fed_solid_bioe",
)


_ext_constant_share_trad_biomass_vs_solids_in_households = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G36",
    {},
    _root,
    "_ext_constant_share_trad_biomass_vs_solids_in_households",
)


_ext_lookup_historic_res_capacity_for_heatcom = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H66",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_lookup_historic_res_capacity_for_heatcom",
)


_ext_lookup_historic_res_capacity_for_heatcom.add(
    "?inputs_eu.xlsx", "Constants", "25", "H67", {"RES heat": ["geot heat"]}
)


_ext_lookup_historic_res_capacity_for_heatcom.add(
    "?inputs_eu.xlsx", "Constants", "25", "H65", {"RES heat": ["solid bioE heat"]}
)


_ext_data_share_inventories_next_step = ExtData(
    "?inputs_eu.xlsx",
    "Economy",
    "554",
    "C432",
    "interpolate",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_data_share_inventories_next_step",
)


_ext_data_government_expenditure_share = ExtData(
    "?inputs_eu.xlsx",
    "Economy",
    "392",
    "B393",
    "interpolate",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_data_government_expenditure_share",
)


_ext_data_changes_in_inventories_share = ExtData(
    "?inputs_eu.xlsx",
    "Economy",
    "392",
    "B432",
    "interpolate",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_data_changes_in_inventories_share",
)


_ext_data_share_government_expenditure_next_step = ExtData(
    "?inputs_eu.xlsx",
    "Economy",
    "554",
    "C393",
    "interpolate",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_data_share_government_expenditure_next_step",
)


@subs(["sectors"], _subscript_dict)
def _init_demand_by_sector_fd_eu():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for demand_by_sector_fd_eu
    Limits: None
    Type: setup
    Subs: ['sectors']

    Provides initial conditions for demand_by_sector_fd_eu function
    """
    return initial_demand_by_sectot()


@cache.step
@subs(["sectors"], _subscript_dict)
def _ddemand_by_sector_fd_eu_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for demand_by_sector_fd_eu
    Limits: None
    Type: component
    Subs: ['sectors']

    Provides derivative for demand_by_sector_fd_eu function
    """
    return variation_demand_flow_fd_eu() - demand_not_covered_by_sector_fd_eu()


_integ_demand_by_sector_fd_eu = Integ(
    _ddemand_by_sector_fd_eu_dt,
    _init_demand_by_sector_fd_eu,
    "_integ_demand_by_sector_fd_eu",
)


_ext_constant_res_elec_variables = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "X13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_res_elec_variables",
)


_ext_constant_res_elec_variables.add(
    "?inputs_eu.xlsx", "Parameters", "X7", {"RES elec": ["geot elec"]}
)


_ext_constant_res_elec_variables.add(
    "?inputs_eu.xlsx", "Parameters", "X8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_res_elec_variables.add(
    "?inputs_eu.xlsx", "Parameters", "X9", {"RES elec": ["oceanic"]}
)


_ext_constant_res_elec_variables.add(
    "?inputs_eu.xlsx", "Parameters", "X10", {"RES elec": ["wind onshore"]}
)


_ext_constant_res_elec_variables.add(
    "?inputs_eu.xlsx", "Parameters", "X12", {"RES elec": ["wind offshore"]}
)


_ext_constant_res_elec_variables.add(
    "?inputs_eu.xlsx", "Parameters", "X11", {"RES elec": ["solar PV"]}
)


_ext_constant_res_elec_variables.add(
    "?inputs_eu.xlsx", "Parameters", "X16", {"RES elec": ["CSP"]}
)


_delayfixed_aux3 = DelayFixed(
    lambda: quality_of_electricity_2015(),
    lambda: 0.03125,
    lambda: 0.75,
    time_step,
    "_delayfixed_aux3",
)


_ext_constant_esoi_phs_depleted_potential = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G54",
    {},
    _root,
    "_ext_constant_esoi_phs_depleted_potential",
)


_ext_constant_initial_demand_by_sectot = ExtConstant(
    "?inputs_eu.xlsx",
    "Economy",
    "B341",
    {
        "sectors": [
            "Agriculture Hunting Forestry and Fishing",
            "Mining and Quarrying",
            "Food Beverages and Tobacco",
            "Textiles and Textile Products",
            "Leather Leather and Footwear",
            "Wood and Products of Woood and Cork",
            "Pulp Paper Printing and Publishing",
            "Coke Refined Petroleum and Nuclear Fuel",
            "Chemicals and Chemical products",
            "Rubber and Plastics",
            "Other Non Metalic Mineral",
            "Basic Metals and Fabricated Metal",
            "Machinery Nec",
            "Electrical and Optical Equipment",
            "Transport Equipment",
            "Manufacturing Nec Recycling",
            "Electricity Gas and Water Supply",
            "Construction",
            "Sale Maintenance and Repair of Motor Vehicles anda Motorcycles Retail Sale of fuel",
            "Wholesale Trade and Commissions Trade Except of Motor vehicles and Motorcycles",
            "Retail Trade Except of Motor Vehicles and Motorcycles Repair of Household goods",
            "Hotels and Restaurants",
            "Inland Transport",
            "Water Transport",
            "Air Transport",
            "Other Supporting and Auxiliary Transport Activities Activities of Travel Agencies",
            "Post and Telecommunications",
            "Financial Intermedation",
            "Real Estate Activities",
            "Renting od MEq and Other Business Activities",
            "Public Admin and Defence Compulsory Social Security",
            "Education",
            "Health and Social Work",
            "Other Community Social and Persona Services",
            "Private Households with Employed Persons",
        ]
    },
    _root,
    "_ext_constant_initial_demand_by_sectot",
)


_ext_constant_share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G60",
    {},
    _root,
    "_ext_constant_share_of_heat_production_in_chp_plants_vs_total_nucelar_elec_generation",
)


_ext_constant_p_hydro_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C32", {}, _root, "_ext_constant_p_hydro_growth"
)


_ext_constant_p_solar_pv_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C38",
    {},
    _root,
    "_ext_constant_p_solar_pv_growth",
)


_ext_constant_p_oceanic_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C35", {}, _root, "_ext_constant_p_oceanic_growth"
)


_ext_constant_p_solid_bioeelec_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C34",
    {},
    _root,
    "_ext_constant_p_solid_bioeelec_growth",
)


_ext_constant_p_csp_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "F38", {}, _root, "_ext_constant_p_csp_growth"
)


_ext_constant_p_wind_offshore_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C37",
    {},
    _root,
    "_ext_constant_p_wind_offshore_growth",
)


_ext_constant_p_wind_onshore_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C36",
    {},
    _root,
    "_ext_constant_p_wind_onshore_growth",
)


_ext_constant_p_geot_growth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C33", {}, _root, "_ext_constant_p_geot_growth"
)


_ext_constant_p_solid_bioe_for_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C62",
    {},
    _root,
    "_ext_constant_p_solid_bioe_for_heat",
)


_ext_constant_efficiency_biogas_for_heat_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G83",
    {},
    _root,
    "_ext_constant_efficiency_biogas_for_heat_plants",
)


_ext_constant_efficiency_biogas_for_elec_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G84",
    {},
    _root,
    "_ext_constant_efficiency_biogas_for_elec_plants",
)


_ext_constant_share_pes_biogas_tfc = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G82",
    {},
    _root,
    "_ext_constant_share_pes_biogas_tfc",
)


_ext_constant_share_pes_biogas_for_heatcom_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G79",
    {},
    _root,
    "_ext_constant_share_pes_biogas_for_heatcom_plants",
)


_ext_constant_efficiency_biogas_for_elec_chp_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G86",
    {},
    _root,
    "_ext_constant_efficiency_biogas_for_elec_chp_plants",
)


_ext_constant_efficiency_biogas_for_heat_chp_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G85",
    {},
    _root,
    "_ext_constant_efficiency_biogas_for_heat_chp_plants",
)


_ext_constant_share_pes_biogas_for_elec_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G80",
    {},
    _root,
    "_ext_constant_share_pes_biogas_for_elec_plants",
)


_ext_constant_share_pes_biogas_for_chp = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G81",
    {},
    _root,
    "_ext_constant_share_pes_biogas_for_chp",
)


_ext_constant_p_common_rr_minerals_variation_rest = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C307",
    {},
    _root,
    "_ext_constant_p_common_rr_minerals_variation_rest",
)


@subs(["materials"], _subscript_dict)
def _init_cum_materials_to_extract_for_res_elec_from_2015():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_res_elec_from_2015
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for cum_materials_to_extract_for_res_elec_from_2015 function
    """
    return initial_cumulated_material_requirements_for_res_elec_1995()


@cache.step
@subs(["materials"], _subscript_dict)
def _dcum_materials_to_extract_for_res_elec_from_2015_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_res_elec_from_2015
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for cum_materials_to_extract_for_res_elec_from_2015 function
    """
    return total_materials_to_extract_for_res_elec_from_2015_mt()


_integ_cum_materials_to_extract_for_res_elec_from_2015 = Integ(
    _dcum_materials_to_extract_for_res_elec_from_2015_dt,
    _init_cum_materials_to_extract_for_res_elec_from_2015,
    "_integ_cum_materials_to_extract_for_res_elec_from_2015",
)


@subs(["materials"], _subscript_dict)
def _init_cum_materials_to_extract_for_res_elec():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_res_elec
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for cum_materials_to_extract_for_res_elec function
    """
    return initial_cumulated_material_requirements_for_res_elec_1995()


@cache.step
@subs(["materials"], _subscript_dict)
def _dcum_materials_to_extract_for_res_elec_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_to_extract_for_res_elec
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for cum_materials_to_extract_for_res_elec function
    """
    return total_materials_to_extract_for_res_elec_mt()


_integ_cum_materials_to_extract_for_res_elec = Integ(
    _dcum_materials_to_extract_for_res_elec_dt,
    _init_cum_materials_to_extract_for_res_elec,
    "_integ_cum_materials_to_extract_for_res_elec",
)


_ext_constant_max_recycling_rates_minerals = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G56",
    {},
    _root,
    "_ext_constant_max_recycling_rates_minerals",
)


_ext_constant_p_common_rr_minerals_variation_alt_techn = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C308",
    {},
    _root,
    "_ext_constant_p_common_rr_minerals_variation_alt_techn",
)


_ext_constant_current_recycling_rates_minerals = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "AR5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_current_recycling_rates_minerals",
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR6", {"materials": ["Aluminium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR8", {"materials": ["Cadmium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR9", {"materials": ["Carbon fiber"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR10", {"materials": ["Cement"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR11", {"materials": ["Chromium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR12", {"materials": ["Copper"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR13", {"materials": ["diesel"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR14", {"materials": ["Dy"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx",
    "Materials",
    "AR15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR16", {"materials": ["Evacuation lines"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR17", {"materials": ["Fiberglass"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR18", {"materials": ["Foam glass"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR19", {"materials": ["Galium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR20", {"materials": ["Glass"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR22", {"materials": ["gravel"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR23", {"materials": ["Indium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR24", {"materials": ["Iron"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR25", {"materials": ["KNO3 mined"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR26", {"materials": ["Asphalt"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR27", {"materials": ["Lime"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR28", {"materials": ["Limestone"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR29", {"materials": ["Lithium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR30", {"materials": ["Lubricant"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR31", {"materials": ["Magnesium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR32", {"materials": ["Manganese"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR33", {"materials": ["Heavy equipment"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR34", {"materials": ["Concrete"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR35", {"materials": ["Molybdenum"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR38", {"materials": ["Neodymium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR39", {"materials": ["Nickel"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR40", {"materials": ["Over grid 15per"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR41", {"materials": ["Over grid 5per"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR42", {"materials": ["Paint"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR43", {"materials": ["Lead"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR44", {"materials": ["Plastics"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR45", {"materials": ["Polypropylene"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR46", {"materials": ["Rock"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR47", {"materials": ["Rock wool"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR48", {"materials": ["Sand"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR49", {"materials": ["Silicon sand"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR51", {"materials": ["Silver"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR52", {"materials": ["Site preparation"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR53", {"materials": ["Tin"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR54", {"materials": ["soda ash"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR55", {"materials": ["steel"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR56", {"materials": ["synthetic oil"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR57", {"materials": ["tellurium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR58", {"materials": ["titanium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR59", {"materials": ["titanium dioxide"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR60", {"materials": ["vanadium"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR61", {"materials": ["wires"]}
)


_ext_constant_current_recycling_rates_minerals.add(
    "?inputs_eu.xlsx", "Materials", "AR62", {"materials": ["zinc"]}
)


_ext_constant_share_pes_waste_for_heatcom_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C79",
    {},
    _root,
    "_ext_constant_share_pes_waste_for_heatcom_plants",
)


_ext_constant_share_pes_waste_tfc = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C82",
    {},
    _root,
    "_ext_constant_share_pes_waste_tfc",
)


_ext_constant_share_pes_waste_for_chp = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C81",
    {},
    _root,
    "_ext_constant_share_pes_waste_for_chp",
)


_ext_constant_share_pes_waste_for_elec_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C80",
    {},
    _root,
    "_ext_constant_share_pes_waste_for_elec_plants",
)


_ext_constant_efficiency_waste_for_elec_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C84",
    {},
    _root,
    "_ext_constant_efficiency_waste_for_elec_plants",
)


_integ_pes_waste_ej = Integ(
    lambda: new_waste_supply_ej(), lambda: initial_pes_waste(), "_integ_pes_waste_ej"
)


_ext_constant_efficiency_waste_for_elec_chp_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C86",
    {},
    _root,
    "_ext_constant_efficiency_waste_for_elec_chp_plants",
)


_ext_constant_initial_pes_waste = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "B218", {}, _root, "_ext_constant_initial_pes_waste"
)


_ext_constant_efficiency_waste_for_heat_chp_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C85",
    {},
    _root,
    "_ext_constant_efficiency_waste_for_heat_chp_plants",
)


_ext_constant_p_waste_change = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "F53", {}, _root, "_ext_constant_p_waste_change"
)


_ext_constant_efficiency_waste_for_heat_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C83",
    {},
    _root,
    "_ext_constant_efficiency_waste_for_heat_plants",
)


_ext_constant_max_pe_waste = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "F52", {}, _root, "_ext_constant_max_pe_waste"
)


_ext_constant_past_waste_growth = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "X218", {}, _root, "_ext_constant_past_waste_growth"
)


_ext_lookup_historic_pes_waste_ej = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "216",
    "B218",
    {},
    _root,
    "_ext_lookup_historic_pes_waste_ej",
)


_ext_constant_gch4_per_mj_coal = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G91", {}, _root, "_ext_constant_gch4_per_mj_coal"
)


_ext_constant_gch4_per_mj_oil = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G92", {}, _root, "_ext_constant_gch4_per_mj_oil"
)


@subs(["RES elec"], _subscript_dict)
def _init_installed_capacity_res_elec_tw():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for installed_capacity_res_elec_tw
    Limits: None
    Type: setup
    Subs: ['RES elec']

    Provides initial conditions for installed_capacity_res_elec_tw function
    """
    return initial_instal_cap_res_elec()


@cache.step
@subs(["RES elec"], _subscript_dict)
def _dinstalled_capacity_res_elec_tw_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for installed_capacity_res_elec_tw
    Limits: None
    Type: component
    Subs: ['RES elec']

    Provides derivative for installed_capacity_res_elec_tw function
    """
    return res_elec_capacity_under_construction_tw() - wear_res_elec()


_integ_installed_capacity_res_elec_tw = Integ(
    _dinstalled_capacity_res_elec_tw_dt,
    _init_installed_capacity_res_elec_tw,
    "_integ_installed_capacity_res_elec_tw",
)


_ext_lookup_table_hist_capacity_res_elec = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "172",
    "H174",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_lookup_table_hist_capacity_res_elec",
)


_ext_lookup_table_hist_capacity_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "172", "H175", {"RES elec": ["geot elec"]}
)


_ext_lookup_table_hist_capacity_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "172", "H176", {"RES elec": ["solid bioE elec"]}
)


_ext_lookup_table_hist_capacity_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "172", "H177", {"RES elec": ["oceanic"]}
)


_ext_lookup_table_hist_capacity_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "172", "H178", {"RES elec": ["wind onshore"]}
)


_ext_lookup_table_hist_capacity_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "172", "H179", {"RES elec": ["wind offshore"]}
)


_ext_lookup_table_hist_capacity_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "172", "H180", {"RES elec": ["solar PV"]}
)


_ext_lookup_table_hist_capacity_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "172", "H181", {"RES elec": ["CSP"]}
)


@subs(["RES elec"], _subscript_dict)
def _init_required_capacity_res_elec_tw():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for required_capacity_res_elec_tw
    Limits: None
    Type: setup
    Subs: ['RES elec']

    Provides initial conditions for required_capacity_res_elec_tw function
    """
    return initial_required_capacity_res_elec()


@cache.step
@subs(["RES elec"], _subscript_dict)
def _drequired_capacity_res_elec_tw_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for required_capacity_res_elec_tw
    Limits: None
    Type: component
    Subs: ['RES elec']

    Provides derivative for required_capacity_res_elec_tw function
    """
    return new_required_capacity_res_elec() - new_res_elec_capacity_under_planning()


_integ_required_capacity_res_elec_tw = Integ(
    _drequired_capacity_res_elec_tw_dt,
    _init_required_capacity_res_elec_tw,
    "_integ_required_capacity_res_elec_tw",
)


@subs(["RES elec"], _subscript_dict)
def _init_res_elec_planned_capacity_tw():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for res_elec_planned_capacity_tw
    Limits: None
    Type: setup
    Subs: ['RES elec']

    Provides initial conditions for res_elec_planned_capacity_tw function
    """
    return initial_capacity_in_construction_res_elec()


@cache.step
@subs(["RES elec"], _subscript_dict)
def _dres_elec_planned_capacity_tw_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for res_elec_planned_capacity_tw
    Limits: None
    Type: component
    Subs: ['RES elec']

    Provides derivative for res_elec_planned_capacity_tw function
    """
    return (
        new_res_elec_capacity_under_planning()
        + replacement_capacity_res_elec()
        - res_elec_capacity_under_construction_tw()
    )


_integ_res_elec_planned_capacity_tw = Integ(
    _dres_elec_planned_capacity_tw_dt,
    _init_res_elec_planned_capacity_tw,
    "_integ_res_elec_planned_capacity_tw",
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data = (
    ExtConstant(
        "?inputs_eu.xlsx",
        "Materials",
        "Z5",
        {"materials": ["Adhesive"]},
        _root,
        "_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data",
    )
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z6", {"materials": ["Aluminium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z8", {"materials": ["Cadmium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z9", {"materials": ["Carbon fiber"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z10", {"materials": ["Cement"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z11", {"materials": ["Chromium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z12", {"materials": ["Copper"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z13", {"materials": ["diesel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z14", {"materials": ["Dy"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx",
    "Materials",
    "Z15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z16", {"materials": ["Evacuation lines"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z17", {"materials": ["Fiberglass"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z18", {"materials": ["Foam glass"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z19", {"materials": ["Galium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z20", {"materials": ["Glass"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z22", {"materials": ["gravel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z23", {"materials": ["Indium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z24", {"materials": ["Iron"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z25", {"materials": ["KNO3 mined"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z26", {"materials": ["Asphalt"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z27", {"materials": ["Lime"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z28", {"materials": ["Limestone"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z29", {"materials": ["Lithium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z30", {"materials": ["Lubricant"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z31", {"materials": ["Magnesium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z32", {"materials": ["Manganese"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z33", {"materials": ["Heavy equipment"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z34", {"materials": ["Concrete"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z35", {"materials": ["Molybdenum"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z38", {"materials": ["Neodymium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z39", {"materials": ["Nickel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z40", {"materials": ["Over grid 15per"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z41", {"materials": ["Over grid 5per"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z42", {"materials": ["Paint"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z43", {"materials": ["Lead"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z44", {"materials": ["Plastics"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z45", {"materials": ["Polypropylene"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z46", {"materials": ["Rock"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z47", {"materials": ["Rock wool"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z48", {"materials": ["Sand"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z49", {"materials": ["Silicon sand"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z51", {"materials": ["Silver"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z52", {"materials": ["Site preparation"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z53", {"materials": ["Tin"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z54", {"materials": ["soda ash"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z55", {"materials": ["steel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z56", {"materials": ["synthetic oil"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z57", {"materials": ["tellurium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Z58", {"materials": ["titanium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Y59", {"materials": ["titanium dioxide"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Y60", {"materials": ["vanadium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Y61", {"materials": ["wires"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_recycled__data.add(
    "?inputs_eu.xlsx", "Materials", "Y62", {"materials": ["zinc"]}
)


_ext_constant_cp_phs = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "G53", {}, _root, "_ext_constant_cp_phs"
)


_ext_constant_max_potential_phs_twe = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C26",
    {},
    _root,
    "_ext_constant_max_potential_phs_twe",
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "H5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs",
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx",
    "Materials",
    "H15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H55", {"materials": ["steel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H61", {"materials": ["wires"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__hvdcs.add(
    "?inputs_eu.xlsx", "Materials", "H62", {"materials": ["zinc"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "G5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power",
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx",
    "Materials",
    "G15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G55", {"materials": ["steel"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G61", {"materials": ["wires"]}
)


_ext_constant_materials_per_new_res_elec_capacity_installed__material_overgrid_high_power.add(
    "?inputs_eu.xlsx", "Materials", "G62", {"materials": ["zinc"]}
)


_delayfixed_scarcity_conv_gas_delayed_1yr = DelayFixed(
    lambda: scarcity_conv_gas(),
    lambda: 1,
    lambda: 0,
    time_step,
    "_delayfixed_scarcity_conv_gas_delayed_1yr",
)


_delayfixed_scarcity_conv_oil_delayed_1yr = DelayFixed(
    lambda: scarcity_conv_oil(),
    lambda: 1,
    lambda: 0,
    time_step,
    "_delayfixed_scarcity_conv_oil_delayed_1yr",
)


_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_lahèrrere2010 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "B153",
    {},
    _root,
    "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_lahèrrere2010",
)


_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "B155",
    {},
    _root,
    "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_mohr12_bg",
)


_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "B150",
    {},
    _root,
    "_ext_constant_share_unconv_gas_vs_tot_agg_in_2050_user_defined",
)


_ext_constant_share_rurr_tot_agg_gas_to_leave_underground = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F128",
    {},
    _root,
    "_ext_constant_share_rurr_tot_agg_gas_to_leave_underground",
)


_ext_constant_start_policy_leave_in_ground_tot_agg_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F126",
    {},
    _root,
    "_ext_constant_start_policy_leave_in_ground_tot_agg_gas",
)


_integ_total_agg_gas_left_in_ground = Integ(
    lambda: flow_tot_agg_gas_left_in_ground(),
    lambda: 0,
    "_integ_total_agg_gas_left_in_ground",
)


_integ_cumulated_tot_agg_gas_extraction = Integ(
    lambda: extraction_tot_agg_gas_ej(),
    lambda: cumulated_tot_agg_gas_extraction_to_1995(),
    "_integ_cumulated_tot_agg_gas_extraction",
)


_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_lahèrrere2006 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "B138",
    {},
    _root,
    "_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_lahèrrere2006",
)


_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "B143",
    {},
    _root,
    "_ext_constant_share_unconv_oil_vs_tot_agg_in_2050_user_defined",
)


_ext_constant_gch4_per_mj_conv_gas = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G89",
    {},
    _root,
    "_ext_constant_gch4_per_mj_conv_gas",
)


_integ_total_agg_oil_left_in_ground = Integ(
    lambda: flow_tot_agg_oil_left_in_ground(),
    lambda: 0,
    "_integ_total_agg_oil_left_in_ground",
)


_integ_cumulated_tot_agg_oil_extraction = Integ(
    lambda: extraction_tot_agg_oil_ej(),
    lambda: cumulated_tot_agg_extraction_to_1995(),
    "_integ_cumulated_tot_agg_oil_extraction",
)


_ext_constant_start_policy_leave_in_ground_tot_agg_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F122",
    {},
    _root,
    "_ext_constant_start_policy_leave_in_ground_tot_agg_oil",
)


_ext_constant_g_per_mt = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G13", {}, _root, "_ext_constant_g_per_mt"
)


_ext_constant_share_rurr_tot_agg_oil_to_leave_underground = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "F124",
    {},
    _root,
    "_ext_constant_share_rurr_tot_agg_oil_to_leave_underground",
)


_ext_constant_gch4_per_mj_unconv_gas = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G90",
    {},
    _root,
    "_ext_constant_gch4_per_mj_unconv_gas",
)


_ext_constant_start_policy_leave_in_ground_coal = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C130",
    {},
    _root,
    "_ext_constant_start_policy_leave_in_ground_coal",
)


_integ_total_unconv_gas_left_in_ground = Integ(
    lambda: flow_unconv_gas_left_in_ground(),
    lambda: 0,
    "_integ_total_unconv_gas_left_in_ground",
)


_ext_constant_share_rurr_unconv_gas_to_leave_underground = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C129",
    {},
    _root,
    "_ext_constant_share_rurr_unconv_gas_to_leave_underground",
)


_ext_constant_share_rurr_unconv_oil_to_leave_underground = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C125",
    {},
    _root,
    "_ext_constant_share_rurr_unconv_oil_to_leave_underground",
)


_ext_constant_share_rurr_conv_oil_to_leave_underground = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C123",
    {},
    _root,
    "_ext_constant_share_rurr_conv_oil_to_leave_underground",
)


_integ_total_unconv_oil_left_in_ground = Integ(
    lambda: flow_unconv_oil_left_in_ground(),
    lambda: 0,
    "_integ_total_unconv_oil_left_in_ground",
)


_integ_total_coal_left_in_ground = Integ(
    lambda: flow_coal_left_in_ground(), lambda: 0, "_integ_total_coal_left_in_ground"
)


_integ_total_conv_gas_left_in_ground = Integ(
    lambda: flow_conv_gas_left_in_ground(),
    lambda: 0,
    "_integ_total_conv_gas_left_in_ground",
)


_integ_total_conv_oil_left_in_ground = Integ(
    lambda: flow_conv_oil_left_in_ground(),
    lambda: 0,
    "_integ_total_conv_oil_left_in_ground",
)


_integ_rurr_coal = Integ(
    lambda: -extraction_coal_ej_eu() - flow_coal_left_in_ground(),
    lambda: urr_coal() - cumulated_coal_extraction_to_1995(),
    "_integ_rurr_coal",
)


_ext_constant_start_policy_leave_in_ground_unconv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C128",
    {},
    _root,
    "_ext_constant_start_policy_leave_in_ground_unconv_gas",
)


_ext_constant_start_policy_leave_in_ground_unconv_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C124",
    {},
    _root,
    "_ext_constant_start_policy_leave_in_ground_unconv_oil",
)


_ext_constant_start_policy_leave_in_ground_conv_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C122",
    {},
    _root,
    "_ext_constant_start_policy_leave_in_ground_conv_oil",
)


_ext_constant_share_rurr_coal_to_leave_underground = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C131",
    {},
    _root,
    "_ext_constant_share_rurr_coal_to_leave_underground",
)


_ext_data_losses_in_charcoal_plants_ej = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "216",
    "B229",
    "interpolate",
    {},
    _root,
    "_ext_data_losses_in_charcoal_plants_ej",
)


_ext_constant_share_rurr_conv_gas_to_leave_underground = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C127",
    {},
    _root,
    "_ext_constant_share_rurr_conv_gas_to_leave_underground",
)


_ext_constant_start_policy_leave_in_ground_conv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C126",
    {},
    _root,
    "_ext_constant_start_policy_leave_in_ground_conv_gas",
)


_ext_data_historic_share_chp_plants_gas = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H30",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_share_chp_plants_gas",
)


_ext_data_historic_share_liquids_for_heat_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H75",
    None,
    {},
    _root,
    "_ext_data_historic_share_liquids_for_heat_plants",
)


_ext_data_historic_share_chp_plants_oil = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H32",
    None,
    {},
    _root,
    "_ext_data_historic_share_chp_plants_oil",
)


_ext_constant_rt_storage_efficiency_phs = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G51",
    {},
    _root,
    "_ext_constant_rt_storage_efficiency_phs",
)


_ext_constant_selfelectricity_consumption_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "D120",
    {"RES elec": ["wind onshore"]},
    _root,
    "_ext_constant_selfelectricity_consumption_res_elec",
)


_ext_constant_selfelectricity_consumption_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "E120", {"RES elec": ["wind offshore"]}
)


_ext_constant_selfelectricity_consumption_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "C120", {"RES elec": ["solar PV"]}
)


_ext_constant_share_energy_requirements_for_decom_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "D122",
    {"RES elec": ["wind onshore"]},
    _root,
    "_ext_constant_share_energy_requirements_for_decom_res_elec",
)


_ext_constant_share_energy_requirements_for_decom_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "E122", {"RES elec": ["wind offshore"]}
)


_ext_constant_share_energy_requirements_for_decom_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "C122", {"RES elec": ["solar PV"]}
)


_ext_constant_share_energy_requirements_for_decom_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "B122", {"RES elec": ["CSP"]}
)


_ext_constant_grid_correction_factor_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "D64",
    {"RES elec": ["wind onshore"]},
    _root,
    "_ext_constant_grid_correction_factor_res_elec",
)


_ext_constant_grid_correction_factor_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "E64", {"RES elec": ["wind offshore"]}
)


_ext_constant_grid_correction_factor_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "C64", {"RES elec": ["solar PV"]}
)


_ext_constant_grid_correction_factor_res_elec.add(
    "?inputs_eu.xlsx", "Materials", "B64", {"RES elec": ["CSP"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "B99",
    {"materials": ["Aluminium"]},
    _root,
    "_ext_constant_materials_for_om_per_capacity_installed__csp",
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B100", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B101", {"materials": ["Copper"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B102", {"materials": ["diesel"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B103", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B104", {"materials": ["Glass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B105", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B106", {"materials": ["Lime"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B107", {"materials": ["Lubricant"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B108", {"materials": ["Magnesium"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B109", {"materials": ["Plastics"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B110", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B111", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B112", {"materials": ["Silver"]}
)


_ext_constant_materials_for_om_per_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B113", {"materials": ["synthetic oil"]}
)


_ext_constant_energy_requirements_per_unit_of_water_consumption = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "Y114",
    {"water0": ["clean pumped water"]},
    _root,
    "_ext_constant_energy_requirements_per_unit_of_water_consumption",
)


_ext_constant_energy_requirements_per_unit_of_water_consumption.add(
    "?inputs_eu.xlsx", "Materials", "Y115", {"water0": ["distilled deionized water"]}
)


_ext_constant_unlimited_nre = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E66", {}, _root, "_ext_constant_unlimited_nre"
)


_ext_lookup_historic_biogas_pes = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "216",
    "B231",
    {},
    _root,
    "_ext_lookup_historic_biogas_pes",
)


_ext_constant_past_biogas_growth = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "X231",
    {},
    _root,
    "_ext_constant_past_biogas_growth",
)


_integ_pes_biogas_ej = Integ(
    lambda: new_pes_biogas(), lambda: 0.13135, "_integ_pes_biogas_ej"
)


_ext_constant_p_biogas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C53", {}, _root, "_ext_constant_p_biogas"
)


_ext_constant_max_pe_biogas_ej = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C52", {}, _root, "_ext_constant_max_pe_biogas_ej"
)


_ext_data_historic_pes_peat_ej = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "216",
    "B230",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_pes_peat_ej",
)


_ext_data_eroiini_res_elec_dispatch = ExtData(
    "?inputs_eu.xlsx",
    "Parameters",
    "6",
    "G21",
    None,
    {"RES elec": ["hydro"]},
    _root,
    "_ext_data_eroiini_res_elec_dispatch",
)


_ext_constant_eroiini_res_elec_dispatch = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "W7",
    {"RES elec": ["geot elec"]},
    _root,
    "_ext_constant_eroiini_res_elec_dispatch",
)


_ext_constant_eroiini_res_elec_dispatch.add(
    "?inputs_eu.xlsx", "Parameters", "W8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_eroiini_res_elec_dispatch.add(
    "?inputs_eu.xlsx", "Parameters", "W9", {"RES elec": ["oceanic"]}
)


_integ_share_transmdistr_elec_losses = Integ(
    lambda: variation_share_transmdistr_elec_losses(),
    lambda: share_transmdistr_elec_losses_initial(),
    "_integ_share_transmdistr_elec_losses",
)


_ext_constant_water_for_om__wind_offshore = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "E114",
    {"water0": ["clean pumped water"]},
    _root,
    "_ext_constant_water_for_om__wind_offshore",
)


_ext_constant_water_for_om__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E115", {"water0": ["distilled deionized water"]}
)


_ext_constant_water_for_om__pv = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "C114",
    {"water0": ["clean pumped water"]},
    _root,
    "_ext_constant_water_for_om__pv",
)


_ext_constant_water_for_om__pv.add(
    "?inputs_eu.xlsx", "Materials", "C115", {"water0": ["distilled deionized water"]}
)


_ext_constant_water_for_om__wind_onshore = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "D114",
    {"water0": ["clean pumped water"]},
    _root,
    "_ext_constant_water_for_om__wind_onshore",
)


_ext_constant_water_for_om__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D115", {"water0": ["distilled deionized water"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "E99",
    {"materials": ["Aluminium"]},
    _root,
    "_ext_constant_materials_for_om_per_capacity_installed__wind_offshore",
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E100", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E101", {"materials": ["Copper"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E102", {"materials": ["diesel"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E103", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E104", {"materials": ["Glass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E105", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E106", {"materials": ["Lime"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E107", {"materials": ["Lubricant"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E108", {"materials": ["Magnesium"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E109", {"materials": ["Plastics"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E110", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E111", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E112", {"materials": ["Silver"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E113", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "D99",
    {"materials": ["Aluminium"]},
    _root,
    "_ext_constant_materials_for_om_per_capacity_installed__wind_onshore",
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D100", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D101", {"materials": ["Copper"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D102", {"materials": ["diesel"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D103", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D104", {"materials": ["Glass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D105", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D106", {"materials": ["Lime"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D107", {"materials": ["Lubricant"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D108", {"materials": ["Magnesium"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D109", {"materials": ["Plastics"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D110", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D111", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D112", {"materials": ["Silver"]}
)


_ext_constant_materials_for_om_per_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D113", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "C99",
    {"materials": ["Aluminium"]},
    _root,
    "_ext_constant_materials_for_om_per_capacity_installed__pv",
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C100", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C101", {"materials": ["Copper"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C102", {"materials": ["diesel"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C103", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C104", {"materials": ["Glass"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C105", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C106", {"materials": ["Lime"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C107", {"materials": ["Lubricant"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C108", {"materials": ["Magnesium"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C109", {"materials": ["Plastics"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C110", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C111", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C112", {"materials": ["Silver"]}
)


_ext_constant_materials_for_om_per_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C113", {"materials": ["synthetic oil"]}
)


_ext_constant_water_for_om__csp = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "B114",
    {"water0": ["clean pumped water"]},
    _root,
    "_ext_constant_water_for_om__csp",
)


_ext_constant_water_for_om__csp.add(
    "?inputs_eu.xlsx", "Materials", "B115", {"water0": ["distilled deionized water"]}
)


_ext_constant_materials_per_capacity_installed__pv_0 = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "C5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_capacity_installed__pv_0",
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx",
    "Materials",
    "C15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C55", {"materials": ["steel"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C61", {"materials": ["wires"]}
)


_ext_constant_materials_per_capacity_installed__pv_0.add(
    "?inputs_eu.xlsx", "Materials", "C62", {"materials": ["zinc"]}
)


@subs(["materials"], _subscript_dict)
def _init_cum_materials_requirements_for_res_elec():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_requirements_for_res_elec
    Limits: None
    Type: setup
    Subs: ['materials']

    Provides initial conditions for cum_materials_requirements_for_res_elec function
    """
    return initial_cumulated_material_requirements_for_res_elec_1995()


@cache.step
@subs(["materials"], _subscript_dict)
def _dcum_materials_requirements_for_res_elec_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for cum_materials_requirements_for_res_elec
    Limits: None
    Type: component
    Subs: ['materials']

    Provides derivative for cum_materials_requirements_for_res_elec function
    """
    return total_materials_required_for_res_elec_mt()


_integ_cum_materials_requirements_for_res_elec = Integ(
    _dcum_materials_requirements_for_res_elec_dt,
    _init_cum_materials_requirements_for_res_elec,
    "_integ_cum_materials_requirements_for_res_elec",
)


_ext_constant_mj_per_ej = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G12", {}, _root, "_ext_constant_mj_per_ej"
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "Y5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin",
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y6", {"materials": ["Aluminium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y8", {"materials": ["Cadmium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y9", {"materials": ["Carbon fiber"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y10", {"materials": ["Cement"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y11", {"materials": ["Chromium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y12", {"materials": ["Copper"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y13", {"materials": ["diesel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y14", {"materials": ["Dy"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx",
    "Materials",
    "Y15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y16", {"materials": ["Evacuation lines"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y17", {"materials": ["Fiberglass"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y18", {"materials": ["Foam glass"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y19", {"materials": ["Galium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y20", {"materials": ["Glass"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y22", {"materials": ["gravel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y23", {"materials": ["Indium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y24", {"materials": ["Iron"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y25", {"materials": ["KNO3 mined"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y26", {"materials": ["Asphalt"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y27", {"materials": ["Lime"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y28", {"materials": ["Limestone"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y29", {"materials": ["Lithium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y30", {"materials": ["Lubricant"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y31", {"materials": ["Magnesium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y32", {"materials": ["Manganese"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y33", {"materials": ["Heavy equipment"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y34", {"materials": ["Concrete"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y35", {"materials": ["Molybdenum"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y38", {"materials": ["Neodymium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y39", {"materials": ["Nickel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y40", {"materials": ["Over grid 15per"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y41", {"materials": ["Over grid 5per"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y42", {"materials": ["Paint"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y43", {"materials": ["Lead"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y44", {"materials": ["Plastics"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y45", {"materials": ["Polypropylene"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y46", {"materials": ["Rock"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y47", {"materials": ["Rock wool"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y48", {"materials": ["Sand"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y49", {"materials": ["Silicon sand"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y51", {"materials": ["Silver"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y52", {"materials": ["Site preparation"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y53", {"materials": ["Tin"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y54", {"materials": ["soda ash"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y55", {"materials": ["steel"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y56", {"materials": ["synthetic oil"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y57", {"materials": ["tellurium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y58", {"materials": ["titanium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y59", {"materials": ["titanium dioxide"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y60", {"materials": ["vanadium"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y61", {"materials": ["wires"]}
)


_ext_constant_initial_energy_cons_per_unit_of_material_cons_virgin.add(
    "?inputs_eu.xlsx", "Materials", "Y62", {"materials": ["zinc"]}
)


_ext_constant_materials_per_new_capacity_installed__csp = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "B5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_new_capacity_installed__csp",
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx",
    "Materials",
    "B15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B55", {"materials": ["steel"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B61", {"materials": ["wires"]}
)


_ext_constant_materials_per_new_capacity_installed__csp.add(
    "?inputs_eu.xlsx", "Materials", "B62", {"materials": ["zinc"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "E5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_new_capacity_installed__wind_offshore",
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx",
    "Materials",
    "E15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E55", {"materials": ["steel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E61", {"materials": ["wires"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_offshore.add(
    "?inputs_eu.xlsx", "Materials", "E62", {"materials": ["zinc"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "D5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_new_capacity_installed__wind_onshore",
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx",
    "Materials",
    "D15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D55", {"materials": ["steel"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D61", {"materials": ["wires"]}
)


_ext_constant_materials_per_new_capacity_installed__wind_onshore.add(
    "?inputs_eu.xlsx", "Materials", "D62", {"materials": ["zinc"]}
)


_ext_constant_materials_per_new_capacity_installed__pv = ExtConstant(
    "?inputs_eu.xlsx",
    "Materials",
    "C5",
    {"materials": ["Adhesive"]},
    _root,
    "_ext_constant_materials_per_new_capacity_installed__pv",
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C6", {"materials": ["Aluminium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C7", {"materials": ["Aluminium mirrors"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C8", {"materials": ["Cadmium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C9", {"materials": ["Carbon fiber"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C10", {"materials": ["Cement"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C11", {"materials": ["Chromium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C12", {"materials": ["Copper"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C13", {"materials": ["diesel"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C14", {"materials": ["Dy"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx",
    "Materials",
    "C15",
    {"materials": ["Electric electronic components"]},
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C16", {"materials": ["Evacuation lines"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C17", {"materials": ["Fiberglass"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C18", {"materials": ["Foam glass"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C19", {"materials": ["Galium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C20", {"materials": ["Glass"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C21", {"materials": ["Glass reinforcing plastic"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C22", {"materials": ["gravel"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C23", {"materials": ["Indium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C24", {"materials": ["Iron"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C25", {"materials": ["KNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C26", {"materials": ["Asphalt"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C27", {"materials": ["Lime"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C28", {"materials": ["Limestone"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C29", {"materials": ["Lithium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C30", {"materials": ["Lubricant"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C31", {"materials": ["Magnesium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C32", {"materials": ["Manganese"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C33", {"materials": ["Heavy equipment"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C34", {"materials": ["Concrete"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C35", {"materials": ["Molybdenum"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C36", {"materials": ["NaNO3 mined"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C37", {"materials": ["NaNO3 synthetic"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C38", {"materials": ["Neodymium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C39", {"materials": ["Nickel"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C40", {"materials": ["Over grid 15per"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C41", {"materials": ["Over grid 5per"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C42", {"materials": ["Paint"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C43", {"materials": ["Lead"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C44", {"materials": ["Plastics"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C45", {"materials": ["Polypropylene"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C46", {"materials": ["Rock"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C47", {"materials": ["Rock wool"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C48", {"materials": ["Sand"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C49", {"materials": ["Silicon sand"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C50", {"materials": ["Silicon wafer modules"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C51", {"materials": ["Silver"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C52", {"materials": ["Site preparation"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C53", {"materials": ["Tin"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C54", {"materials": ["soda ash"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C55", {"materials": ["steel"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C56", {"materials": ["synthetic oil"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C57", {"materials": ["tellurium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C58", {"materials": ["titanium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C59", {"materials": ["titanium dioxide"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C60", {"materials": ["vanadium"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C61", {"materials": ["wires"]}
)


_ext_constant_materials_per_new_capacity_installed__pv.add(
    "?inputs_eu.xlsx", "Materials", "C62", {"materials": ["zinc"]}
)


_ext_constant_kg_per_mt = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G9", {}, _root, "_ext_constant_kg_per_mt"
)


_ext_constant_m_per_t = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G8", {}, _root, "_ext_constant_m_per_t"
)


_ext_constant_replacement_res_for_heatcom = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "D17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_replacement_res_for_heatcom",
)


_ext_constant_replacement_res_for_heatcom.add(
    "?inputs_eu.xlsx", "Parameters", "D18", {"RES heat": ["geot heat"]}
)


_ext_constant_replacement_res_for_heatcom.add(
    "?inputs_eu.xlsx", "Parameters", "D19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_losses_solar_for_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G42",
    {},
    _root,
    "_ext_constant_losses_solar_for_heat",
)


_ext_constant_cpini_res_for_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "F17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_cpini_res_for_heat",
)


_ext_constant_cpini_res_for_heat.add(
    "?inputs_eu.xlsx", "Parameters", "F18", {"RES heat": ["geot heat"]}
)


_ext_constant_cpini_res_for_heat.add(
    "?inputs_eu.xlsx", "Parameters", "F19", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_efficiency_geothermal_for_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G43",
    {},
    _root,
    "_ext_constant_efficiency_geothermal_for_heat",
)


_ext_constant_f1_solar_panels_for_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "G41",
    {},
    _root,
    "_ext_constant_f1_solar_panels_for_heat",
)


_ext_constant_p_geothermal_for_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C61",
    {},
    _root,
    "_ext_constant_p_geothermal_for_heat",
)


_ext_constant_past_res_growth_for_heatcom = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C101",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_past_res_growth_for_heatcom",
)


_ext_constant_past_res_growth_for_heatcom.add(
    "?inputs_eu.xlsx", "Constants", "C102", {"RES heat": ["geot heat"]}
)


_ext_constant_past_res_growth_for_heatcom.add(
    "?inputs_eu.xlsx", "Constants", "C103", {"RES heat": ["solid bioE heat"]}
)


@subs(["RES heat"], _subscript_dict)
def _init_installed_capacity_res_heatcom_tw():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for installed_capacity_res_heatcom_tw
    Limits: None
    Type: setup
    Subs: ['RES heat']

    Provides initial conditions for installed_capacity_res_heatcom_tw function
    """
    return initial_value_res_for_heatcom()


@cache.step
@subs(["RES heat"], _subscript_dict)
def _dinstalled_capacity_res_heatcom_tw_dt():
    """
    Real Name: Implicit
    Original Eqn: None
    Units: See docs for installed_capacity_res_heatcom_tw
    Limits: None
    Type: component
    Subs: ['RES heat']

    Provides derivative for installed_capacity_res_heatcom_tw function
    """
    return (
        new_res_capacity_for_heatcom_tw()
        + replacement_res_for_heatcom_tw()
        - wear_res_capacity_for_heatcom_tw()
    )


_integ_installed_capacity_res_heatcom_tw = Integ(
    _dinstalled_capacity_res_heatcom_tw_dt,
    _init_installed_capacity_res_heatcom_tw,
    "_integ_installed_capacity_res_heatcom_tw",
)


_ext_constant_initial_value_res_for_heatcom = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H66",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_initial_value_res_for_heatcom",
)


_ext_constant_initial_value_res_for_heatcom.add(
    "?inputs_eu.xlsx", "Constants", "H67", {"RES heat": ["geot heat"]}
)


_ext_constant_initial_value_res_for_heatcom.add(
    "?inputs_eu.xlsx", "Constants", "H65", {"RES heat": ["solid bioE heat"]}
)


_ext_constant_p_solar_for_heat = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C60", {}, _root, "_ext_constant_p_solar_for_heat"
)


_ext_constant_life_time_res_for_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C17",
    {"RES heat": ["solar heat"]},
    _root,
    "_ext_constant_life_time_res_for_heat",
)


_ext_constant_life_time_res_for_heat.add(
    "?inputs_eu.xlsx", "Parameters", "C18", {"RES heat": ["geot heat"]}
)


_ext_constant_life_time_res_for_heat.add(
    "?inputs_eu.xlsx", "Parameters", "C19", {"RES heat": ["solid bioE heat"]}
)


_ext_data_efficiency_heat_oil_chp_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B228",
    "interpolate",
    {},
    _root,
    "_ext_data_efficiency_heat_oil_chp_plants",
)


_ext_data_efficiency_elec_coal_chp_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B224",
    None,
    {},
    _root,
    "_ext_data_efficiency_elec_coal_chp_plants",
)


_ext_data_efficiency_elec_gas_chp_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B221",
    "interpolate",
    {},
    _root,
    "_ext_data_efficiency_elec_gas_chp_plants",
)


_ext_data_efficiency_elec_oil_chp_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B227",
    None,
    {},
    _root,
    "_ext_data_efficiency_elec_oil_chp_plants",
)


_ext_data_efficiency_heat_gas_chp_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B222",
    "interpolate",
    {},
    _root,
    "_ext_data_efficiency_heat_gas_chp_plants",
)


_ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H29",
    "interpolate",
    {},
    _root,
    "_ext_data_share_heatcom_chp_plants_nre_vs_nre_tot_heatcom_generation",
)


_ext_data_efficiency_heat_coal_chp_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B225",
    "interpolate",
    {},
    _root,
    "_ext_data_efficiency_heat_coal_chp_plants",
)


_integ_installed_capacity_nuclear_tw = Integ(
    lambda: nuclear_capacity_under_construction()
    - nuclear_capacity_phaseout()
    - wear_nuclear(),
    lambda: initial_capacity_installed_nuclear(),
    "_integ_installed_capacity_nuclear_tw",
)


_ext_constant_min_cp_nuclear = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "V15", {}, _root, "_ext_constant_min_cp_nuclear"
)


_ext_constant_min_cp_baseload_res = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "V13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_min_cp_baseload_res",
)


_ext_constant_min_cp_baseload_res.add(
    "?inputs_eu.xlsx", "Parameters", "V7", {"RES elec": ["geot elec"]}
)


_ext_constant_min_cp_baseload_res.add(
    "?inputs_eu.xlsx", "Parameters", "V8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_min_cp_baseload_res.add(
    "?inputs_eu.xlsx", "Parameters", "V9", {"RES elec": ["oceanic"]}
)


_ext_constant_min_cp_baseload_res.add(
    "?inputs_eu.xlsx", "Parameters", "V10", {"RES elec": ["wind onshore"]}
)


_ext_constant_min_cp_baseload_res.add(
    "?inputs_eu.xlsx", "Parameters", "V12", {"RES elec": ["wind offshore"]}
)


_ext_constant_min_cp_baseload_res.add(
    "?inputs_eu.xlsx", "Parameters", "V11", {"RES elec": ["solar PV"]}
)


_ext_constant_min_cp_baseload_res.add(
    "?inputs_eu.xlsx", "Parameters", "V16", {"RES elec": ["CSP"]}
)


_ext_constant_p_nuclear_scen34 = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "F22", {}, _root, "_ext_constant_p_nuclear_scen34"
)


_ext_constant_start_year_nuclear_growth_scen34 = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "H22",
    {},
    _root,
    "_ext_constant_start_year_nuclear_growth_scen34",
)


_integ_required_capacity_nuclear_tw = Integ(
    lambda: new_required_capacity_nuclear() - new_nuclear_capacity_under_planning(),
    lambda: initial_required_capacity_nuclear(),
    "_integ_required_capacity_nuclear_tw",
)


_ext_constant_time_planification_nuclear = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "S15",
    {},
    _root,
    "_ext_constant_time_planification_nuclear",
)


_ext_constant_time_construction_nuclear = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "T15",
    {},
    _root,
    "_ext_constant_time_construction_nuclear",
)


_ext_constant_selection_of_nuclear_scenario = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D19",
    {},
    _root,
    "_ext_constant_selection_of_nuclear_scenario",
)


_ext_constant_initial_gen_nuclear = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H69",
    {},
    _root,
    "_ext_constant_initial_gen_nuclear",
)


_integ_planned_nuclear_capacity_tw = Integ(
    lambda: new_nuclear_capacity_under_planning()
    + replacement_nuclear_capacity()
    - nuclear_capacity_under_construction(),
    lambda: initial_capacity_in_construction_nuclear(),
    "_integ_planned_nuclear_capacity_tw",
)


_delayfixed_gdp_delayed_1yr = DelayFixed(
    lambda: gdp_eu(), lambda: 1, lambda: 8.6, time_step, "_delayfixed_gdp_delayed_1yr"
)


_ext_constant_unlimited_coal = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E99", {}, _root, "_ext_constant_unlimited_coal"
)


_ext_constant_unlimited_uranium = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "E104",
    {},
    _root,
    "_ext_constant_unlimited_uranium",
)


_ext_constant_unlimited_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E83", {}, _root, "_ext_constant_unlimited_gas"
)


_ext_constant_unlimited_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "E67", {}, _root, "_ext_constant_unlimited_oil"
)


_ext_constant_activate_elf_by_scen = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C119",
    {},
    _root,
    "_ext_constant_activate_elf_by_scen",
)


_ext_lookup_historic_nonenergy_use = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "189",
    "C191",
    {"final sources1": ["liquids"]},
    _root,
    "_ext_lookup_historic_nonenergy_use",
)


_ext_lookup_historic_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "189", "C190", {"final sources1": ["solids"]}
)


_ext_lookup_historic_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "189", "C192", {"final sources1": ["gases"]}
)


_ext_lookup_historic_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "189", "C193", {"final sources1": ["electricity"]}
)


_ext_lookup_historic_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "189", "C193", {"final sources1": ["heat"]}
)


_ext_constant_initial_nonenergy_use = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C190",
    {"final sources1": ["solids"]},
    _root,
    "_ext_constant_initial_nonenergy_use",
)


_ext_constant_initial_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "C191", {"final sources1": ["liquids"]}
)


_ext_constant_initial_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "C192", {"final sources1": ["gases"]}
)


_ext_constant_initial_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "C193", {"final sources1": ["electricity"]}
)


_ext_constant_initial_nonenergy_use.add(
    "?inputs_eu.xlsx", "Constants", "C193", {"final sources1": ["heat"]}
)


_ext_constant_initial_value_land_compet_biofuels_2gen_ktoe = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H56",
    {},
    _root,
    "_ext_constant_initial_value_land_compet_biofuels_2gen_ktoe",
)


_ext_data_efficiency_liquids_for_heat_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B226",
    "interpolate",
    {},
    _root,
    "_ext_data_efficiency_liquids_for_heat_plants",
)


_ext_data_share_gascoalgas_for_heat_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H72",
    "interpolate",
    {},
    _root,
    "_ext_data_share_gascoalgas_for_heat_plants",
)


_ext_constant_share_heat_distribution_losses = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C77",
    {},
    _root,
    "_ext_constant_share_heat_distribution_losses",
)


_ext_data_efficiency_coal_for_heat_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B223",
    "interpolate",
    {},
    _root,
    "_ext_data_efficiency_coal_for_heat_plants",
)


_ext_data_efficiency_gases_for_heat_plants = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "219",
    "B220",
    "interpolate",
    {},
    _root,
    "_ext_data_efficiency_gases_for_heat_plants",
)


_ext_data_invest_cost_res_elec = ExtData(
    "?inputs_eu.xlsx",
    "Parameters",
    "6",
    "G14",
    "interpolate",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_data_invest_cost_res_elec",
)


_ext_data_invest_cost_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "6", "G7", None, {"RES elec": ["geot elec"]}
)


_ext_data_invest_cost_res_elec.add(
    "?inputs_eu.xlsx",
    "Parameters",
    "6",
    "G8",
    "interpolate",
    {"RES elec": ["solid bioE elec"]},
)


_ext_data_invest_cost_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "6", "G9", None, {"RES elec": ["oceanic"]}
)


_ext_data_invest_cost_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "6", "G10", None, {"RES elec": ["wind onshore"]}
)


_ext_data_invest_cost_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "6", "G12", None, {"RES elec": ["wind offshore"]}
)


_ext_data_invest_cost_res_elec.add(
    "?inputs_eu.xlsx",
    "Parameters",
    "6",
    "G11",
    "interpolate",
    {"RES elec": ["solar PV"]},
)


_ext_data_invest_cost_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "6", "G16", None, {"RES elec": ["CSP"]}
)


_ext_constant_max_pe_geotelec_twth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C25",
    {},
    _root,
    "_ext_constant_max_pe_geotelec_twth",
)


_ext_constant_efficiency_conversion_geot_pe_to_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C42",
    {},
    _root,
    "_ext_constant_efficiency_conversion_geot_pe_to_elec",
)


_ext_constant_initial_instal_cap_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H174",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_initial_instal_cap_res_elec",
)


_ext_constant_initial_instal_cap_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "H175", {"RES elec": ["geot elec"]}
)


_ext_constant_initial_instal_cap_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "H176", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_initial_instal_cap_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "H177", {"RES elec": ["oceanic"]}
)


_ext_constant_initial_instal_cap_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "H178", {"RES elec": ["wind onshore"]}
)


_ext_constant_initial_instal_cap_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "H179", {"RES elec": ["wind offshore"]}
)


_ext_constant_initial_instal_cap_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "H180", {"RES elec": ["solar PV"]}
)


_ext_constant_initial_instal_cap_res_elec.add(
    "?inputs_eu.xlsx", "Constants", "H181", {"RES elec": ["CSP"]}
)


_ext_data_cpini_res_elec = ExtData(
    "?inputs_eu.xlsx",
    "Parameters",
    "6",
    "G13",
    "interpolate",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_data_cpini_res_elec",
)


_ext_constant_cpini_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "F7",
    {"RES elec": ["geot elec"]},
    _root,
    "_ext_constant_cpini_res_elec",
)


_ext_constant_cpini_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "F8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_cpini_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "F9", {"RES elec": ["oceanic"]}
)


_ext_constant_cpini_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "F10", {"RES elec": ["wind onshore"]}
)


_ext_constant_cpini_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "F12", {"RES elec": ["wind offshore"]}
)


_ext_constant_cpini_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "F11", {"RES elec": ["solar PV"]}
)


_ext_constant_cpini_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "F16", {"RES elec": ["CSP"]}
)


_ext_constant_g_per_t = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G7", {}, _root, "_ext_constant_g_per_t"
)


_ext_constant_time_construction_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "T13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_time_construction_res_elec",
)


_ext_constant_time_construction_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "T7", {"RES elec": ["geot elec"]}
)


_ext_constant_time_construction_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "T8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_time_construction_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "T9", {"RES elec": ["oceanic"]}
)


_ext_constant_time_construction_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "T10", {"RES elec": ["wind onshore"]}
)


_ext_constant_time_construction_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "T12", {"RES elec": ["wind offshore"]}
)


_ext_constant_time_construction_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "T11", {"RES elec": ["solar PV"]}
)


_ext_constant_time_construction_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "T16", {"RES elec": ["CSP"]}
)


_ext_constant_time_planification_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "S13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_time_planification_res_elec",
)


_ext_constant_time_planification_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "S7", {"RES elec": ["geot elec"]}
)


_ext_constant_time_planification_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "S8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_time_planification_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "S9", {"RES elec": ["oceanic"]}
)


_ext_constant_time_planification_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "S10", {"RES elec": ["wind onshore"]}
)


_ext_constant_time_planification_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "S12", {"RES elec": ["wind offshore"]}
)


_ext_constant_time_planification_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "S11", {"RES elec": ["solar PV"]}
)


_ext_constant_time_planification_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "S16", {"RES elec": ["CSP"]}
)


_ext_constant_lifetime_res_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C13",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_lifetime_res_elec",
)


_ext_constant_lifetime_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "C7", {"RES elec": ["geot elec"]}
)


_ext_constant_lifetime_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "C8", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_lifetime_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "C9", {"RES elec": ["oceanic"]}
)


_ext_constant_lifetime_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "C10", {"RES elec": ["wind onshore"]}
)


_ext_constant_lifetime_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "C12", {"RES elec": ["wind offshore"]}
)


_ext_constant_lifetime_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "C11", {"RES elec": ["solar PV"]}
)


_ext_constant_lifetime_res_elec.add(
    "?inputs_eu.xlsx", "Parameters", "C16", {"RES elec": ["CSP"]}
)


_ext_constant_past_res_elec_capacity_growth = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C85",
    {"RES elec": ["hydro"]},
    _root,
    "_ext_constant_past_res_elec_capacity_growth",
)


_ext_constant_past_res_elec_capacity_growth.add(
    "?inputs_eu.xlsx", "Constants", "C86", {"RES elec": ["geot elec"]}
)


_ext_constant_past_res_elec_capacity_growth.add(
    "?inputs_eu.xlsx", "Constants", "C87", {"RES elec": ["solid bioE elec"]}
)


_ext_constant_past_res_elec_capacity_growth.add(
    "?inputs_eu.xlsx", "Constants", "C88", {"RES elec": ["oceanic"]}
)


_ext_constant_past_res_elec_capacity_growth.add(
    "?inputs_eu.xlsx", "Constants", "C89", {"RES elec": ["wind onshore"]}
)


_ext_constant_past_res_elec_capacity_growth.add(
    "?inputs_eu.xlsx", "Constants", "C90", {"RES elec": ["wind offshore"]}
)


_ext_constant_past_res_elec_capacity_growth.add(
    "?inputs_eu.xlsx", "Constants", "C91", {"RES elec": ["solar PV"]}
)


_ext_constant_past_res_elec_capacity_growth.add(
    "?inputs_eu.xlsx", "Constants", "C92", {"RES elec": ["CSP"]}
)


_ext_constant_mt_per_gt = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G6", {}, _root, "_ext_constant_mt_per_gt"
)


_ext_constant_gtl_efficiency = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "C50", {}, _root, "_ext_constant_gtl_efficiency"
)


_ext_constant_ctl_efficiency = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "C49", {}, _root, "_ext_constant_ctl_efficiency"
)


_ext_constant_mbd_per_ejyear = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C17", {}, _root, "_ext_constant_mbd_per_ejyear"
)


_ext_constant_hist_growth_ctl = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C82", {}, _root, "_ext_constant_hist_growth_ctl"
)


_ext_constant_gboe_per_ej = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "G10", {}, _root, "_ext_constant_gboe_per_ej"
)


_ext_lookup_table_max_extraction_uranium_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "156",
    "E157",
    {},
    _root,
    "_ext_lookup_table_max_extraction_uranium_user_defined",
)


_ext_lookup_userdefined_extraction_growth_unconv_gas = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "163",
    "D164",
    {},
    _root,
    "_ext_lookup_userdefined_extraction_growth_unconv_gas",
)


_ext_lookup_userdefined_extraction_growth_unconv_oil = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "161",
    "D162",
    {},
    _root,
    "_ext_lookup_userdefined_extraction_growth_unconv_oil",
)


_ext_constant_hist_growth_gtl = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C83", {}, _root, "_ext_constant_hist_growth_gtl"
)


_ext_constant_urr_uranium_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C156",
    {},
    _root,
    "_ext_constant_urr_uranium_user_defined",
)


_ext_constant_replacement_rate_nuclear = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "D15",
    {},
    _root,
    "_ext_constant_replacement_rate_nuclear",
)


_ext_constant_people_relying_trad_biomass_ref = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C58",
    {},
    _root,
    "_ext_constant_people_relying_trad_biomass_ref",
)


_ext_constant_pe_consumption_trad_biomass_ref = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C57",
    {},
    _root,
    "_ext_constant_pe_consumption_trad_biomass_ref",
)


_ext_constant_tpefpc_threshold_high_development = ExtConstant(
    "?inputs_eu.xlsx",
    "Result comparison",
    "C10",
    {},
    _root,
    "_ext_constant_tpefpc_threshold_high_development",
)


_ext_constant_tpedpc_acceptable_standard_living = ExtConstant(
    "?inputs_eu.xlsx",
    "Result comparison",
    "C11",
    {},
    _root,
    "_ext_constant_tpedpc_acceptable_standard_living",
)


_ext_data_historic_unconv_oil = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "C34",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_unconv_oil",
)


_ext_constant_gco2_per_mj_unconv_gas = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C94",
    {},
    _root,
    "_ext_constant_gco2_per_mj_unconv_gas",
)


_ext_constant_gco2_per_mj_unconv_oil = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C95",
    {},
    _root,
    "_ext_constant_gco2_per_mj_unconv_oil",
)


_ext_constant_gco2_per_mj_conv_gas = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C92",
    {},
    _root,
    "_ext_constant_gco2_per_mj_conv_gas",
)


_ext_constant_gco2_per_mj_ctl = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "C89", {}, _root, "_ext_constant_gco2_per_mj_ctl"
)


_ext_constant_gco2_per_mj_gtl = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "C90", {}, _root, "_ext_constant_gco2_per_mj_gtl"
)


_ext_data_historic_unconv_gas = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "C35",
    "interpolate",
    {},
    _root,
    "_ext_data_historic_unconv_gas",
)


_ext_constant_gco2_per_mj_coal = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "C91", {}, _root, "_ext_constant_gco2_per_mj_coal"
)


_ext_constant_gco2_per_mj_conv_oil = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C93",
    {},
    _root,
    "_ext_constant_gco2_per_mj_conv_oil",
)


_ext_constant_gco2_per_mj_shale_oil = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C96",
    {},
    _root,
    "_ext_constant_gco2_per_mj_shale_oil",
)


_ext_constant_dollars_to_tdollars = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C15",
    {},
    _root,
    "_ext_constant_dollars_to_tdollars",
)


_ext_lookup_historic_pop = ExtLookup(
    "?inputs_eu.xlsx", "Constants", "25", "H28", {}, _root, "_ext_lookup_historic_pop"
)


_ext_constant_gj_per_ej = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C14", {}, _root, "_ext_constant_gj_per_ej"
)


_ext_constant_geot_pe_potential_for_heat_twth = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C56",
    {},
    _root,
    "_ext_constant_geot_pe_potential_for_heat_twth",
)


_ext_constant_efficiency_conversion_bioe_plants_to_heat = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C43",
    {},
    _root,
    "_ext_constant_efficiency_conversion_bioe_plants_to_heat",
)


_ext_constant_efficiency_improvement_biofuels_3gen = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C47",
    {},
    _root,
    "_ext_constant_efficiency_improvement_biofuels_3gen",
)


_ext_constant_max_npp_potential_bioe_residues = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C41",
    {},
    _root,
    "_ext_constant_max_npp_potential_bioe_residues",
)


_ext_constant_grid_reinforcement_costs = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C74",
    {},
    _root,
    "_ext_constant_grid_reinforcement_costs",
)


_ext_constant_land_productivity_biofuels_2gen_ej_mha = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C59",
    {},
    _root,
    "_ext_constant_land_productivity_biofuels_2gen_ej_mha",
)


_ext_lookup_balancing_costs_ref = ExtLookup(
    "?inputs_eu.xlsx",
    "Parameters",
    "24",
    "B25",
    {},
    _root,
    "_ext_lookup_balancing_costs_ref",
)


_ext_constant_efficiency_conversion_bioe_to_elec = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C44",
    {},
    _root,
    "_ext_constant_efficiency_conversion_bioe_to_elec",
)


_ext_constant_p_biofuels_3gen_land_compet = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C47",
    {},
    _root,
    "_ext_constant_p_biofuels_3gen_land_compet",
)


_delayfixed_constrain_gas_exogenous_growth_delayed_1yr = DelayFixed(
    lambda: constrain_gas_exogenous_growth(),
    lambda: 1,
    lambda: 1,
    time_step,
    "_delayfixed_constrain_gas_exogenous_growth_delayed_1yr",
)


_delayfixed_constrain_liquids_exogenous_growth_delayed_1yr = DelayFixed(
    lambda: constrain_liquids_exogenous_growth(),
    lambda: 1,
    lambda: 1,
    time_step,
    "_delayfixed_constrain_liquids_exogenous_growth_delayed_1yr",
)


_delayfixed_check_liquids_delayed_1yr = DelayFixed(
    lambda: check_liquids(),
    lambda: 1,
    lambda: 1,
    time_step,
    "_delayfixed_check_liquids_delayed_1yr",
)


_delayfixed_check_gas_delayed_1yr = DelayFixed(
    lambda: check_gases(),
    lambda: 1,
    lambda: 1,
    time_step,
    "_delayfixed_check_gas_delayed_1yr",
)


_delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr = DelayFixed(
    lambda: share_variable_res_elec_generation_vs_total(),
    lambda: 1,
    lambda: 0.0071,
    time_step,
    "_delayfixed_share_variable_res_elec_vs_total_generation_delayed_1yr",
)


_ext_constant_initial_gtl_production = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H37",
    {},
    _root,
    "_ext_constant_initial_gtl_production",
)


_ext_lookup_historic_gtl_production = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "C37",
    {},
    _root,
    "_ext_lookup_historic_gtl_production",
)


_ext_constant_initial_ctl_production = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H36",
    {},
    _root,
    "_ext_constant_initial_ctl_production",
)


_ext_lookup_historic_ctl_production = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "C36",
    {},
    _root,
    "_ext_lookup_historic_ctl_production",
)


_ext_constant_max_efficiency_gas_power_plants = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C48",
    {},
    _root,
    "_ext_constant_max_efficiency_gas_power_plants",
)


_ext_constant_initial_efficiency_gas_for_electricity = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "H70",
    {},
    _root,
    "_ext_constant_initial_efficiency_gas_for_electricity",
)


_ext_constant_efficiency_improv_gas_for_electricity = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C52",
    {},
    _root,
    "_ext_constant_efficiency_improv_gas_for_electricity",
)


_integ_efficiency_gas_for_electricity = Integ(
    lambda: improvement_efficiency_gas_for_electricity(),
    lambda: initial_efficiency_gas_for_electricity() * percent_to_share(),
    "_integ_efficiency_gas_for_electricity",
)


_ext_constant_percent_to_share = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C12", {}, _root, "_ext_constant_percent_to_share"
)


_ext_lookup_historic_produc_biofuels_2gen = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "C56",
    {},
    _root,
    "_ext_lookup_historic_produc_biofuels_2gen",
)


_ext_constant_cumulative_emissions_to_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C108",
    {},
    _root,
    "_ext_constant_cumulative_emissions_to_1995",
)


_ext_constant_start_year_bioe_residues_for_nonbiofuels = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C48",
    {},
    _root,
    "_ext_constant_start_year_bioe_residues_for_nonbiofuels",
)


_ext_constant_t_per_gt = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C13", {}, _root, "_ext_constant_t_per_gt"
)


_integ_cumulated_conv_gas_extraction = Integ(
    lambda: extraction_conv_gas_ej(),
    lambda: cumulated_conv_gas_extraction_to_1995(),
    "_integ_cumulated_conv_gas_extraction",
)


_ext_constant_cumulated_conv_gas_extraction_to_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C96",
    {},
    _root,
    "_ext_constant_cumulated_conv_gas_extraction_to_1995",
)


_integ_cumulated_unconv_gas_extraction = Integ(
    lambda: extraction_unconv_gas_ej(),
    lambda: cumulated_unconv_gas_extraction_to_1995(),
    "_integ_cumulated_unconv_gas_extraction",
)


_ext_constant_cumulated_unconv_gas_extraction_to_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C97",
    {},
    _root,
    "_ext_constant_cumulated_unconv_gas_extraction_to_1995",
)


_integ_rurr_uranium = Integ(
    lambda: -extraction_uranium_ej_eu(),
    lambda: urr_uranium() - cumulated_uranium_extraction_to_1995(),
    "_integ_rurr_uranium",
)


_ext_constant_cumulated_uranium_extraction_to_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C99",
    {},
    _root,
    "_ext_constant_cumulated_uranium_extraction_to_1995",
)


_integ_cumulated_conv_oil_extraction = Integ(
    lambda: extraction_conv_oil_ej(),
    lambda: cumulated_conv_oil_extraction_to_1995(),
    "_integ_cumulated_conv_oil_extraction",
)


_ext_constant_cumulated_conv_oil_extraction_to_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C94",
    {},
    _root,
    "_ext_constant_cumulated_conv_oil_extraction_to_1995",
)


_integ_cumulated_unconv_oil_extraction = Integ(
    lambda: extraction_unconv_oil_ej(),
    lambda: cumulated_unconv_oil_extraction_to_1995(),
    "_integ_cumulated_unconv_oil_extraction",
)


_integ_cumulated_coal_extraction = Integ(
    lambda: extraction_coal_ej_eu(),
    lambda: cumulated_coal_extraction_to_1995(),
    "_integ_cumulated_coal_extraction",
)


_ext_constant_cumulated_coal_extraction_to_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C98",
    {},
    _root,
    "_ext_constant_cumulated_coal_extraction_to_1995",
)


_ext_constant_cumulated_unconv_oil_extraction_to_1995 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C95",
    {},
    _root,
    "_ext_constant_cumulated_unconv_oil_extraction_to_1995",
)


_integ_cumulated_uranium_extraction = Integ(
    lambda: extraction_uranium_ej_eu(),
    lambda: cumulated_uranium_extraction_to_1995(),
    "_integ_cumulated_uranium_extraction",
)


_ext_constant_oil_refinery_gains_share = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C75",
    {},
    _root,
    "_ext_constant_oil_refinery_gains_share",
)


_ext_constant_efficiency_gas_for_oil_refinery_gains = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C51",
    {},
    _root,
    "_ext_constant_efficiency_gas_for_oil_refinery_gains",
)


_ext_constant_annual_shift_from_2gen_to_3gen = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C64",
    {},
    _root,
    "_ext_constant_annual_shift_from_2gen_to_3gen",
)


_ext_constant_p_bioe_residues = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C50", {}, _root, "_ext_constant_p_bioe_residues"
)


_integ_pe_bioe_residues_nonbiofuels_ej = Integ(
    lambda: new_bioe_residues_for_nonbiofuels(),
    lambda: 0,
    "_integ_pe_bioe_residues_nonbiofuels_ej",
)


_ext_constant_share_cellulosic_biofuels_vs_bioe_residues = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C49",
    {},
    _root,
    "_ext_constant_share_cellulosic_biofuels_vs_bioe_residues",
)


_ext_constant_p_biofuels_2gen_land_compet = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C45",
    {},
    _root,
    "_ext_constant_p_biofuels_2gen_land_compet",
)


_ext_constant_past_biofuels_2gen = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C81", {}, _root, "_ext_constant_past_biofuels_2gen"
)


_ext_constant_ej_per_ktoe = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C16", {}, _root, "_ext_constant_ej_per_ktoe"
)


_ext_constant_cp_nuclear_initial = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "F15",
    {},
    _root,
    "_ext_constant_cp_nuclear_initial",
)


_ext_constant_max_offshore_wind_twe = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C29",
    {},
    _root,
    "_ext_constant_max_offshore_wind_twe",
)


_ext_constant_urr_unconv_oil_high_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C136",
    {},
    _root,
    "_ext_constant_urr_unconv_oil_high_mohr15",
)


_ext_constant_urr_unconv_oil_low_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C132",
    {},
    _root,
    "_ext_constant_urr_unconv_oil_low_mohr15",
)


_ext_constant_urr_unconv_oil_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C141",
    {},
    _root,
    "_ext_constant_urr_unconv_oil_user_defined",
)


_ext_constant_urr_conv_oil_mohr15_high = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C130",
    {},
    _root,
    "_ext_constant_urr_conv_oil_mohr15_high",
)


_ext_constant_urr_conv_oil_mohr15_low = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C126",
    {},
    _root,
    "_ext_constant_urr_conv_oil_mohr15_low",
)


_ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "130",
    "E131",
    {},
    _root,
    "_ext_lookup_table_max_extraction_mohr15_high_conv_oil_ej",
)


_ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "126",
    "E127",
    {},
    _root,
    "_ext_lookup_table_max_extraction_mohr15_low_conv_oil_ej",
)


_ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "128",
    "E129",
    {},
    _root,
    "_ext_lookup_table_max_extraction_mohr15_bg_conv_oil_ej",
)


_ext_constant_separate_conv_and_unconv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C83",
    {},
    _root,
    "_ext_constant_separate_conv_and_unconv_gas",
)


_ext_lookup_table_max_extraction_unconv_oil_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "141",
    "E142",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_oil_user_defined",
)


_ext_constant_urr_tot_agg_oil_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C143",
    {},
    _root,
    "_ext_constant_urr_tot_agg_oil_user_defined",
)


_ext_constant_choose_extraction_curve_tot_agg_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D76",
    {},
    _root,
    "_ext_constant_choose_extraction_curve_tot_agg_oil",
)


_ext_constant_urr_conv_oil_mohr15_bg = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C128",
    {},
    _root,
    "_ext_constant_urr_conv_oil_mohr15_bg",
)


_ext_constant_urr_conv_oil_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C139",
    {},
    _root,
    "_ext_constant_urr_conv_oil_user_defined",
)


_ext_constant_choose_extraction_tot_agg_gas_curve = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D92",
    {},
    _root,
    "_ext_constant_choose_extraction_tot_agg_gas_curve",
)


_ext_lookup_table_max_extraction_unconv_oil_low_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "132",
    "E133",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_oil_low_mohr15",
)


_ext_constant_urr_unconv_oil_bg_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C134",
    {},
    _root,
    "_ext_constant_urr_unconv_oil_bg_mohr15",
)


_ext_lookup_table_max_extraction_unconv_oil_high_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "136",
    "E137",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_oil_high_mohr15",
)


_ext_lookup_table_max_extraction_tot_agg_oil_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "143",
    "E144",
    {},
    _root,
    "_ext_lookup_table_max_extraction_tot_agg_oil_user_defined",
)


_ext_lookup_table_max_conv_oil_extraction_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "139",
    "E140",
    {},
    _root,
    "_ext_lookup_table_max_conv_oil_extraction_user_defined",
)


_ext_constant_separate_conv_and_unconv_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C67",
    {},
    _root,
    "_ext_constant_separate_conv_and_unconv_oil",
)


_ext_constant_kt_uranium_per_ej = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C10", {}, _root, "_ext_constant_kt_uranium_per_ej"
)


_ext_constant_life_time_nuclear = ExtConstant(
    "?inputs_eu.xlsx", "Parameters", "C15", {}, _root, "_ext_constant_life_time_nuclear"
)


_ext_data_hist_share_oilff_elec = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H39",
    "interpolate",
    {},
    _root,
    "_ext_data_hist_share_oilff_elec",
)


_ext_constant_efficiency_uranium_for_electricity = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C41",
    {},
    _root,
    "_ext_constant_efficiency_uranium_for_electricity",
)


_ext_data_hist_share_gascoal_gas_elec = ExtData(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H40",
    "interpolate",
    {},
    _root,
    "_ext_data_hist_share_gascoal_gas_elec",
)


_ext_lookup_historic_nuclear_generation_twh = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "C69",
    {},
    _root,
    "_ext_lookup_historic_nuclear_generation_twh",
)


_ext_data_invest_cost_nuclear = ExtData(
    "?inputs_eu.xlsx",
    "Parameters",
    "6",
    "G15",
    None,
    {},
    _root,
    "_ext_data_invest_cost_nuclear",
)


_ext_constant_kwh_per_twh = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C9", {}, _root, "_ext_constant_kwh_per_twh"
)


_ext_constant_gco2e_per_kwh_biomass = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "E8",
    {},
    _root,
    "_ext_constant_gco2e_per_kwh_biomass",
)


_ext_constant_mtoe_per_ej = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C6", {}, _root, "_ext_constant_mtoe_per_ej"
)


_ext_constant_share_transmdistr_elec_losses_initial = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C54",
    {},
    _root,
    "_ext_constant_share_transmdistr_elec_losses_initial",
)


_ext_constant_ej_per_twh = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C5", {}, _root, "_ext_constant_ej_per_twh"
)


_ext_constant_twe_per_twh = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C7", {}, _root, "_ext_constant_twe_per_twh"
)


_ext_constant_initial_population = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "H28", {}, _root, "_ext_constant_initial_population"
)


_integ_population = Integ(
    lambda: pop_variation(), lambda: initial_population(), "_integ_population"
)


_ext_constant_choose_extraction_uranium_curve = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D105",
    {},
    _root,
    "_ext_constant_choose_extraction_uranium_curve",
)


_ext_constant_choose_extraction_coal_curve = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D100",
    {},
    _root,
    "_ext_constant_choose_extraction_coal_curve",
)


_ext_constant_selection_constraint_extraction_unconv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D96",
    {},
    _root,
    "_ext_constant_selection_constraint_extraction_unconv_gas",
)


_delayfixed_extraction_unconv_gas_delayed = DelayFixed(
    lambda: extraction_unconv_gas_ej(),
    lambda: time_step(),
    lambda: 0,
    time_step,
    "_delayfixed_extraction_unconv_gas_delayed",
)


_ext_constant_p_constraint_growth_extraction_unconv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C96",
    {},
    _root,
    "_ext_constant_p_constraint_growth_extraction_unconv_gas",
)


_ext_constant_choose_extraction_curve_unconv_gas = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D88",
    {},
    _root,
    "_ext_constant_choose_extraction_curve_unconv_gas",
)


_ext_constant_choose_extraction_curve_unconv_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D72",
    {},
    _root,
    "_ext_constant_choose_extraction_curve_unconv_oil",
)


_ext_constant_urban_surface_2015 = ExtConstant(
    "?inputs_eu.xlsx", "Land", "AB27", {}, _root, "_ext_constant_urban_surface_2015"
)


_ext_constant_c_per_co2 = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C20", {}, _root, "_ext_constant_c_per_co2"
)


_ext_constant_activate_affores_program = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "B65",
    {},
    _root,
    "_ext_constant_activate_affores_program",
)


_ext_data_afforestation_program_2020 = ExtData(
    "?inputs_eu.xlsx",
    "Parameters",
    "125",
    "C126",
    "interpolate",
    {},
    _root,
    "_ext_data_afforestation_program_2020",
)


_ext_constant_agricultural_land_2015 = ExtConstant(
    "?inputs_eu.xlsx", "Land", "AB23", {}, _root, "_ext_constant_agricultural_land_2015"
)


_ext_constant_choose_extraction_curve_conv_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D68",
    {},
    _root,
    "_ext_constant_choose_extraction_curve_conv_oil",
)


_ext_constant_choose_extraction_conv_gas_curve = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D84",
    {},
    _root,
    "_ext_constant_choose_extraction_conv_gas_curve",
)


_integ_cumulated_total_monet_invest_res_for_elec = Integ(
    lambda: total_monet_invest_res_for_elec_tdolar(),
    lambda: 0,
    "_integ_cumulated_total_monet_invest_res_for_elec",
)


_ext_constant_efficiency_coal_for_electricity = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C46",
    {},
    _root,
    "_ext_constant_efficiency_coal_for_electricity",
)


_ext_lookup_historic_efficiency_gas_for_electricity = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "25",
    "H70",
    {},
    _root,
    "_ext_lookup_historic_efficiency_gas_for_electricity",
)


_ext_constant_efficiency_liquids_for_electricity = ExtConstant(
    "?inputs_eu.xlsx",
    "Parameters",
    "C45",
    {},
    _root,
    "_ext_constant_efficiency_liquids_for_electricity",
)


_ext_constant_additional_land_compet_available_for_biofuels = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C42",
    {},
    _root,
    "_ext_constant_additional_land_compet_available_for_biofuels",
)


_ext_constant_max_hydro_twe = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C24", {}, _root, "_ext_constant_max_hydro_twe"
)


_ext_constant_max_oceanic_twe = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C27", {}, _root, "_ext_constant_max_oceanic_twe"
)


_ext_constant_max_onshore_wind_twe = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C28",
    {},
    _root,
    "_ext_constant_max_onshore_wind_twe",
)


_ext_data_p_timeseries_pop_growth_rate = ExtData(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "12",
    "E13",
    "interpolate",
    {},
    _root,
    "_ext_data_p_timeseries_pop_growth_rate",
)


_ext_constant_p_ctl = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C110", {}, _root, "_ext_constant_p_ctl"
)


_ext_constant_p_gtl = ExtConstant(
    "?../../scenarios/scen_eu.xlsx", "User scenario", "C112", {}, _root, "_ext_constant_p_gtl"
)


_ext_constant_start_year_3gen_cellulosic_biofuels = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C46",
    {},
    _root,
    "_ext_constant_start_year_3gen_cellulosic_biofuels",
)


_integ_total_cumulative_emissions_gtc = Integ(
    lambda: new_c_gtc(),
    lambda: cumulative_emissions_to_1995(),
    "_integ_total_cumulative_emissions_gtc",
)


_integ_agricultural_land = Integ(
    lambda: deforestation_rate()
    + forest_loss_to_sustain_agriculture()
    + increase_agricultural_land()
    - compet_land_for_biofuels_rate()
    - urban_land_rate(),
    lambda: initial_agricultural_area(),
    "_integ_agricultural_land",
)


_integ_compet_agricultural_land_for_biofuels = Integ(
    lambda: compet_land_for_biofuels_rate(),
    lambda: initial_value_land_compet_biofuels_2gen_mha(),
    "_integ_compet_agricultural_land_for_biofuels",
)


_integ_marginal_land_for_biofuels = Integ(
    lambda: marginal_land_for_biofuels_rate(),
    lambda: initial_marginal_land_occupied_by_biofuels(),
    "_integ_marginal_land_for_biofuels",
)


_delayfixed_real_demand_by_sector_delayed_eu = DelayFixed(
    lambda: real_final_demand_by_sector_eu(),
    lambda: 1,
    lambda: 10,
    time_step,
    "_delayfixed_real_demand_by_sector_delayed_eu",
)


_integ_rurr_unconv_oil_ej = Integ(
    lambda: -extraction_unconv_oil_ej() - flow_unconv_oil_left_in_ground(),
    lambda: urr_unconv_oil()
    - cumulated_unconv_oil_extraction_to_1995() * separate_conv_and_unconv_oil(),
    "_integ_rurr_unconv_oil_ej",
)


_ext_lookup_table_max_extraction_conv_gas_low_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "141",
    "E142",
    {},
    _root,
    "_ext_lookup_table_max_extraction_conv_gas_low_mohr15",
)


_ext_lookup_table_max_extraction_conv_gas_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "146",
    "E147",
    {},
    _root,
    "_ext_lookup_table_max_extraction_conv_gas_user_defined",
)


_ext_lookup_table_max_extraction_total_gas_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "150",
    "E151",
    {},
    _root,
    "_ext_lookup_table_max_extraction_total_gas_user_defined",
)


_ext_lookup_table_max_extraction_unconv_gas_bg_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "149",
    "E150",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_gas_bg_mohr15",
)


_ext_lookup_table_max_extraction_unconv_gas_high_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "151",
    "E152",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_gas_high_mohr15",
)


_ext_lookup_table_max_extraction_unconv_gas_low_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "147",
    "E148",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_gas_low_mohr15",
)


_ext_lookup_table_max_extraction_unconv_gas_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "148",
    "E149",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_gas_user_defined",
)


_ext_lookup_table_max_extraction_coal_bg_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "162",
    "E163",
    {},
    _root,
    "_ext_lookup_table_max_extraction_coal_bg_mohr15",
)


_ext_lookup_table_max_extraction_coal_high_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "164",
    "E165",
    {},
    _root,
    "_ext_lookup_table_max_extraction_coal_high_mohr15",
)


_ext_constant_urr_coal_bg_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C162",
    {},
    _root,
    "_ext_constant_urr_coal_bg_mohr15",
)


_ext_constant_urr_coal_user_defined_ej = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C153",
    {},
    _root,
    "_ext_constant_urr_coal_user_defined_ej",
)


_ext_constant_urr_conv_gas_bg_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C143",
    {},
    _root,
    "_ext_constant_urr_conv_gas_bg_mohr15",
)


_ext_constant_urr_conv_gas_high_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C145",
    {},
    _root,
    "_ext_constant_urr_conv_gas_high_mohr15",
)


_ext_constant_urr_conv_gas_low_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C141",
    {},
    _root,
    "_ext_constant_urr_conv_gas_low_mohr15",
)


_ext_constant_urr_conv_gas_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C146",
    {},
    _root,
    "_ext_constant_urr_conv_gas_user_defined",
)


_ext_constant_urr_total_gas_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C150",
    {},
    _root,
    "_ext_constant_urr_total_gas_user_defined",
)


_ext_constant_urr_unconv_gas_bg_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C149",
    {},
    _root,
    "_ext_constant_urr_unconv_gas_bg_mohr15",
)


_ext_lookup_table_max_extraction_coal_low_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "160",
    "E161",
    {},
    _root,
    "_ext_lookup_table_max_extraction_coal_low_mohr15",
)


_ext_lookup_table_max_extraction_coal_user_defined = ExtLookup(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "153",
    "E154",
    {},
    _root,
    "_ext_lookup_table_max_extraction_coal_user_defined",
)


_ext_lookup_table_max_extraction_conv_gas_bg_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "143",
    "E144",
    {},
    _root,
    "_ext_lookup_table_max_extraction_conv_gas_bg_mohr15",
)


_ext_lookup_table_max_extraction_conv_gas_high_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "145",
    "E146",
    {},
    _root,
    "_ext_lookup_table_max_extraction_conv_gas_high_mohr15",
)


_ext_constant_urr_unconv_gas_low_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C147",
    {},
    _root,
    "_ext_constant_urr_unconv_gas_low_mohr15",
)


_ext_constant_urr_coal_high15 = ExtConstant(
    "?inputs_eu.xlsx", "Constants", "C164", {}, _root, "_ext_constant_urr_coal_high15"
)


_ext_constant_urr_coal_low_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C160",
    {},
    _root,
    "_ext_constant_urr_coal_low_mohr15",
)


_ext_constant_urr_unconv_gas_high_mohr15 = ExtConstant(
    "?inputs_eu.xlsx",
    "Constants",
    "C151",
    {},
    _root,
    "_ext_constant_urr_unconv_gas_high_mohr15",
)


_ext_constant_urr_unconv_gas_user_defined = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User parameters",
    "C148",
    {},
    _root,
    "_ext_constant_urr_unconv_gas_user_defined",
)


_ext_lookup_table_max_extraction_unconv_oil_bg_mohr15 = ExtLookup(
    "?inputs_eu.xlsx",
    "Constants",
    "134",
    "E135",
    {},
    _root,
    "_ext_lookup_table_max_extraction_unconv_oil_bg_mohr15",
)


_ext_constant_selection_constraint_extraction_unconv_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "D80",
    {},
    _root,
    "_ext_constant_selection_constraint_extraction_unconv_oil",
)


_ext_constant_p_constraint_growth_extraction_unconv_oil = ExtConstant(
    "?../../scenarios/scen_eu.xlsx",
    "User scenario",
    "C80",
    {},
    _root,
    "_ext_constant_p_constraint_growth_extraction_unconv_oil",
)


_delayfixed_extraction_unconv_oil_delayed = DelayFixed(
    lambda: extraction_unconv_oil_ej(),
    lambda: time_step(),
    lambda: 1.09,
    time_step,
    "_delayfixed_extraction_unconv_oil_delayed",
)
